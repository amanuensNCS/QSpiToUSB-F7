
usb_fullspeed_2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008e20  080001e0  080001e0  000101e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000060  08009000  08009000  00019000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009060  08009060  00020188  2**0
                  CONTENTS
  4 .ARM          00000008  08009060  08009060  00019060  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009068  08009068  00020188  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009068  08009068  00019068  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800906c  0800906c  0001906c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000188  20000000  08009070  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000139d4  20000188  080091f8  00020188  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20013b5c  080091f8  00023b5c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020188  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001cac4  00000000  00000000  000201b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003d37  00000000  00000000  0003cc7c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000012f8  00000000  00000000  000409b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001150  00000000  00000000  00041cb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002664a  00000000  00000000  00042e00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000179e1  00000000  00000000  0006944a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ddec5  00000000  00000000  00080e2b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0015ecf0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004fb0  00000000  00000000  0015ed44  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000188 	.word	0x20000188
 80001fc:	00000000 	.word	0x00000000
 8000200:	08008fe8 	.word	0x08008fe8

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	2000018c 	.word	0x2000018c
 800021c:	08008fe8 	.word	0x08008fe8

08000220 <__aeabi_uldivmod>:
 8000220:	b953      	cbnz	r3, 8000238 <__aeabi_uldivmod+0x18>
 8000222:	b94a      	cbnz	r2, 8000238 <__aeabi_uldivmod+0x18>
 8000224:	2900      	cmp	r1, #0
 8000226:	bf08      	it	eq
 8000228:	2800      	cmpeq	r0, #0
 800022a:	bf1c      	itt	ne
 800022c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000230:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000234:	f000 b96e 	b.w	8000514 <__aeabi_idiv0>
 8000238:	f1ad 0c08 	sub.w	ip, sp, #8
 800023c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000240:	f000 f806 	bl	8000250 <__udivmoddi4>
 8000244:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000248:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800024c:	b004      	add	sp, #16
 800024e:	4770      	bx	lr

08000250 <__udivmoddi4>:
 8000250:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000254:	9d08      	ldr	r5, [sp, #32]
 8000256:	4604      	mov	r4, r0
 8000258:	468c      	mov	ip, r1
 800025a:	2b00      	cmp	r3, #0
 800025c:	f040 8083 	bne.w	8000366 <__udivmoddi4+0x116>
 8000260:	428a      	cmp	r2, r1
 8000262:	4617      	mov	r7, r2
 8000264:	d947      	bls.n	80002f6 <__udivmoddi4+0xa6>
 8000266:	fab2 f282 	clz	r2, r2
 800026a:	b142      	cbz	r2, 800027e <__udivmoddi4+0x2e>
 800026c:	f1c2 0020 	rsb	r0, r2, #32
 8000270:	fa24 f000 	lsr.w	r0, r4, r0
 8000274:	4091      	lsls	r1, r2
 8000276:	4097      	lsls	r7, r2
 8000278:	ea40 0c01 	orr.w	ip, r0, r1
 800027c:	4094      	lsls	r4, r2
 800027e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000282:	0c23      	lsrs	r3, r4, #16
 8000284:	fbbc f6f8 	udiv	r6, ip, r8
 8000288:	fa1f fe87 	uxth.w	lr, r7
 800028c:	fb08 c116 	mls	r1, r8, r6, ip
 8000290:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000294:	fb06 f10e 	mul.w	r1, r6, lr
 8000298:	4299      	cmp	r1, r3
 800029a:	d909      	bls.n	80002b0 <__udivmoddi4+0x60>
 800029c:	18fb      	adds	r3, r7, r3
 800029e:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 80002a2:	f080 8119 	bcs.w	80004d8 <__udivmoddi4+0x288>
 80002a6:	4299      	cmp	r1, r3
 80002a8:	f240 8116 	bls.w	80004d8 <__udivmoddi4+0x288>
 80002ac:	3e02      	subs	r6, #2
 80002ae:	443b      	add	r3, r7
 80002b0:	1a5b      	subs	r3, r3, r1
 80002b2:	b2a4      	uxth	r4, r4
 80002b4:	fbb3 f0f8 	udiv	r0, r3, r8
 80002b8:	fb08 3310 	mls	r3, r8, r0, r3
 80002bc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002c0:	fb00 fe0e 	mul.w	lr, r0, lr
 80002c4:	45a6      	cmp	lr, r4
 80002c6:	d909      	bls.n	80002dc <__udivmoddi4+0x8c>
 80002c8:	193c      	adds	r4, r7, r4
 80002ca:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002ce:	f080 8105 	bcs.w	80004dc <__udivmoddi4+0x28c>
 80002d2:	45a6      	cmp	lr, r4
 80002d4:	f240 8102 	bls.w	80004dc <__udivmoddi4+0x28c>
 80002d8:	3802      	subs	r0, #2
 80002da:	443c      	add	r4, r7
 80002dc:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002e0:	eba4 040e 	sub.w	r4, r4, lr
 80002e4:	2600      	movs	r6, #0
 80002e6:	b11d      	cbz	r5, 80002f0 <__udivmoddi4+0xa0>
 80002e8:	40d4      	lsrs	r4, r2
 80002ea:	2300      	movs	r3, #0
 80002ec:	e9c5 4300 	strd	r4, r3, [r5]
 80002f0:	4631      	mov	r1, r6
 80002f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f6:	b902      	cbnz	r2, 80002fa <__udivmoddi4+0xaa>
 80002f8:	deff      	udf	#255	; 0xff
 80002fa:	fab2 f282 	clz	r2, r2
 80002fe:	2a00      	cmp	r2, #0
 8000300:	d150      	bne.n	80003a4 <__udivmoddi4+0x154>
 8000302:	1bcb      	subs	r3, r1, r7
 8000304:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000308:	fa1f f887 	uxth.w	r8, r7
 800030c:	2601      	movs	r6, #1
 800030e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000312:	0c21      	lsrs	r1, r4, #16
 8000314:	fb0e 331c 	mls	r3, lr, ip, r3
 8000318:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800031c:	fb08 f30c 	mul.w	r3, r8, ip
 8000320:	428b      	cmp	r3, r1
 8000322:	d907      	bls.n	8000334 <__udivmoddi4+0xe4>
 8000324:	1879      	adds	r1, r7, r1
 8000326:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 800032a:	d202      	bcs.n	8000332 <__udivmoddi4+0xe2>
 800032c:	428b      	cmp	r3, r1
 800032e:	f200 80e9 	bhi.w	8000504 <__udivmoddi4+0x2b4>
 8000332:	4684      	mov	ip, r0
 8000334:	1ac9      	subs	r1, r1, r3
 8000336:	b2a3      	uxth	r3, r4
 8000338:	fbb1 f0fe 	udiv	r0, r1, lr
 800033c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000340:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000344:	fb08 f800 	mul.w	r8, r8, r0
 8000348:	45a0      	cmp	r8, r4
 800034a:	d907      	bls.n	800035c <__udivmoddi4+0x10c>
 800034c:	193c      	adds	r4, r7, r4
 800034e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000352:	d202      	bcs.n	800035a <__udivmoddi4+0x10a>
 8000354:	45a0      	cmp	r8, r4
 8000356:	f200 80d9 	bhi.w	800050c <__udivmoddi4+0x2bc>
 800035a:	4618      	mov	r0, r3
 800035c:	eba4 0408 	sub.w	r4, r4, r8
 8000360:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000364:	e7bf      	b.n	80002e6 <__udivmoddi4+0x96>
 8000366:	428b      	cmp	r3, r1
 8000368:	d909      	bls.n	800037e <__udivmoddi4+0x12e>
 800036a:	2d00      	cmp	r5, #0
 800036c:	f000 80b1 	beq.w	80004d2 <__udivmoddi4+0x282>
 8000370:	2600      	movs	r6, #0
 8000372:	e9c5 0100 	strd	r0, r1, [r5]
 8000376:	4630      	mov	r0, r6
 8000378:	4631      	mov	r1, r6
 800037a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037e:	fab3 f683 	clz	r6, r3
 8000382:	2e00      	cmp	r6, #0
 8000384:	d14a      	bne.n	800041c <__udivmoddi4+0x1cc>
 8000386:	428b      	cmp	r3, r1
 8000388:	d302      	bcc.n	8000390 <__udivmoddi4+0x140>
 800038a:	4282      	cmp	r2, r0
 800038c:	f200 80b8 	bhi.w	8000500 <__udivmoddi4+0x2b0>
 8000390:	1a84      	subs	r4, r0, r2
 8000392:	eb61 0103 	sbc.w	r1, r1, r3
 8000396:	2001      	movs	r0, #1
 8000398:	468c      	mov	ip, r1
 800039a:	2d00      	cmp	r5, #0
 800039c:	d0a8      	beq.n	80002f0 <__udivmoddi4+0xa0>
 800039e:	e9c5 4c00 	strd	r4, ip, [r5]
 80003a2:	e7a5      	b.n	80002f0 <__udivmoddi4+0xa0>
 80003a4:	f1c2 0320 	rsb	r3, r2, #32
 80003a8:	fa20 f603 	lsr.w	r6, r0, r3
 80003ac:	4097      	lsls	r7, r2
 80003ae:	fa01 f002 	lsl.w	r0, r1, r2
 80003b2:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003b6:	40d9      	lsrs	r1, r3
 80003b8:	4330      	orrs	r0, r6
 80003ba:	0c03      	lsrs	r3, r0, #16
 80003bc:	fbb1 f6fe 	udiv	r6, r1, lr
 80003c0:	fa1f f887 	uxth.w	r8, r7
 80003c4:	fb0e 1116 	mls	r1, lr, r6, r1
 80003c8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003cc:	fb06 f108 	mul.w	r1, r6, r8
 80003d0:	4299      	cmp	r1, r3
 80003d2:	fa04 f402 	lsl.w	r4, r4, r2
 80003d6:	d909      	bls.n	80003ec <__udivmoddi4+0x19c>
 80003d8:	18fb      	adds	r3, r7, r3
 80003da:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 80003de:	f080 808d 	bcs.w	80004fc <__udivmoddi4+0x2ac>
 80003e2:	4299      	cmp	r1, r3
 80003e4:	f240 808a 	bls.w	80004fc <__udivmoddi4+0x2ac>
 80003e8:	3e02      	subs	r6, #2
 80003ea:	443b      	add	r3, r7
 80003ec:	1a5b      	subs	r3, r3, r1
 80003ee:	b281      	uxth	r1, r0
 80003f0:	fbb3 f0fe 	udiv	r0, r3, lr
 80003f4:	fb0e 3310 	mls	r3, lr, r0, r3
 80003f8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003fc:	fb00 f308 	mul.w	r3, r0, r8
 8000400:	428b      	cmp	r3, r1
 8000402:	d907      	bls.n	8000414 <__udivmoddi4+0x1c4>
 8000404:	1879      	adds	r1, r7, r1
 8000406:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 800040a:	d273      	bcs.n	80004f4 <__udivmoddi4+0x2a4>
 800040c:	428b      	cmp	r3, r1
 800040e:	d971      	bls.n	80004f4 <__udivmoddi4+0x2a4>
 8000410:	3802      	subs	r0, #2
 8000412:	4439      	add	r1, r7
 8000414:	1acb      	subs	r3, r1, r3
 8000416:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800041a:	e778      	b.n	800030e <__udivmoddi4+0xbe>
 800041c:	f1c6 0c20 	rsb	ip, r6, #32
 8000420:	fa03 f406 	lsl.w	r4, r3, r6
 8000424:	fa22 f30c 	lsr.w	r3, r2, ip
 8000428:	431c      	orrs	r4, r3
 800042a:	fa20 f70c 	lsr.w	r7, r0, ip
 800042e:	fa01 f306 	lsl.w	r3, r1, r6
 8000432:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000436:	fa21 f10c 	lsr.w	r1, r1, ip
 800043a:	431f      	orrs	r7, r3
 800043c:	0c3b      	lsrs	r3, r7, #16
 800043e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000442:	fa1f f884 	uxth.w	r8, r4
 8000446:	fb0e 1119 	mls	r1, lr, r9, r1
 800044a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800044e:	fb09 fa08 	mul.w	sl, r9, r8
 8000452:	458a      	cmp	sl, r1
 8000454:	fa02 f206 	lsl.w	r2, r2, r6
 8000458:	fa00 f306 	lsl.w	r3, r0, r6
 800045c:	d908      	bls.n	8000470 <__udivmoddi4+0x220>
 800045e:	1861      	adds	r1, r4, r1
 8000460:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000464:	d248      	bcs.n	80004f8 <__udivmoddi4+0x2a8>
 8000466:	458a      	cmp	sl, r1
 8000468:	d946      	bls.n	80004f8 <__udivmoddi4+0x2a8>
 800046a:	f1a9 0902 	sub.w	r9, r9, #2
 800046e:	4421      	add	r1, r4
 8000470:	eba1 010a 	sub.w	r1, r1, sl
 8000474:	b2bf      	uxth	r7, r7
 8000476:	fbb1 f0fe 	udiv	r0, r1, lr
 800047a:	fb0e 1110 	mls	r1, lr, r0, r1
 800047e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000482:	fb00 f808 	mul.w	r8, r0, r8
 8000486:	45b8      	cmp	r8, r7
 8000488:	d907      	bls.n	800049a <__udivmoddi4+0x24a>
 800048a:	19e7      	adds	r7, r4, r7
 800048c:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000490:	d22e      	bcs.n	80004f0 <__udivmoddi4+0x2a0>
 8000492:	45b8      	cmp	r8, r7
 8000494:	d92c      	bls.n	80004f0 <__udivmoddi4+0x2a0>
 8000496:	3802      	subs	r0, #2
 8000498:	4427      	add	r7, r4
 800049a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800049e:	eba7 0708 	sub.w	r7, r7, r8
 80004a2:	fba0 8902 	umull	r8, r9, r0, r2
 80004a6:	454f      	cmp	r7, r9
 80004a8:	46c6      	mov	lr, r8
 80004aa:	4649      	mov	r1, r9
 80004ac:	d31a      	bcc.n	80004e4 <__udivmoddi4+0x294>
 80004ae:	d017      	beq.n	80004e0 <__udivmoddi4+0x290>
 80004b0:	b15d      	cbz	r5, 80004ca <__udivmoddi4+0x27a>
 80004b2:	ebb3 020e 	subs.w	r2, r3, lr
 80004b6:	eb67 0701 	sbc.w	r7, r7, r1
 80004ba:	fa07 fc0c 	lsl.w	ip, r7, ip
 80004be:	40f2      	lsrs	r2, r6
 80004c0:	ea4c 0202 	orr.w	r2, ip, r2
 80004c4:	40f7      	lsrs	r7, r6
 80004c6:	e9c5 2700 	strd	r2, r7, [r5]
 80004ca:	2600      	movs	r6, #0
 80004cc:	4631      	mov	r1, r6
 80004ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004d2:	462e      	mov	r6, r5
 80004d4:	4628      	mov	r0, r5
 80004d6:	e70b      	b.n	80002f0 <__udivmoddi4+0xa0>
 80004d8:	4606      	mov	r6, r0
 80004da:	e6e9      	b.n	80002b0 <__udivmoddi4+0x60>
 80004dc:	4618      	mov	r0, r3
 80004de:	e6fd      	b.n	80002dc <__udivmoddi4+0x8c>
 80004e0:	4543      	cmp	r3, r8
 80004e2:	d2e5      	bcs.n	80004b0 <__udivmoddi4+0x260>
 80004e4:	ebb8 0e02 	subs.w	lr, r8, r2
 80004e8:	eb69 0104 	sbc.w	r1, r9, r4
 80004ec:	3801      	subs	r0, #1
 80004ee:	e7df      	b.n	80004b0 <__udivmoddi4+0x260>
 80004f0:	4608      	mov	r0, r1
 80004f2:	e7d2      	b.n	800049a <__udivmoddi4+0x24a>
 80004f4:	4660      	mov	r0, ip
 80004f6:	e78d      	b.n	8000414 <__udivmoddi4+0x1c4>
 80004f8:	4681      	mov	r9, r0
 80004fa:	e7b9      	b.n	8000470 <__udivmoddi4+0x220>
 80004fc:	4666      	mov	r6, ip
 80004fe:	e775      	b.n	80003ec <__udivmoddi4+0x19c>
 8000500:	4630      	mov	r0, r6
 8000502:	e74a      	b.n	800039a <__udivmoddi4+0x14a>
 8000504:	f1ac 0c02 	sub.w	ip, ip, #2
 8000508:	4439      	add	r1, r7
 800050a:	e713      	b.n	8000334 <__udivmoddi4+0xe4>
 800050c:	3802      	subs	r0, #2
 800050e:	443c      	add	r4, r7
 8000510:	e724      	b.n	800035c <__udivmoddi4+0x10c>
 8000512:	bf00      	nop

08000514 <__aeabi_idiv0>:
 8000514:	4770      	bx	lr
 8000516:	bf00      	nop

08000518 <SCB_EnableICache>:
/**
  \brief   Enable I-Cache
  \details Turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
 8000518:	b480      	push	{r7}
 800051a:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800051c:	f3bf 8f4f 	dsb	sy
}
 8000520:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000522:	f3bf 8f6f 	isb	sy
}
 8000526:	bf00      	nop
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000528:	4b0d      	ldr	r3, [pc, #52]	; (8000560 <SCB_EnableICache+0x48>)
 800052a:	2200      	movs	r2, #0
 800052c:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000530:	f3bf 8f4f 	dsb	sy
}
 8000534:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000536:	f3bf 8f6f 	isb	sy
}
 800053a:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 800053c:	4b08      	ldr	r3, [pc, #32]	; (8000560 <SCB_EnableICache+0x48>)
 800053e:	695b      	ldr	r3, [r3, #20]
 8000540:	4a07      	ldr	r2, [pc, #28]	; (8000560 <SCB_EnableICache+0x48>)
 8000542:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000546:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000548:	f3bf 8f4f 	dsb	sy
}
 800054c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800054e:	f3bf 8f6f 	isb	sy
}
 8000552:	bf00      	nop
    __DSB();
    __ISB();
  #endif
}
 8000554:	bf00      	nop
 8000556:	46bd      	mov	sp, r7
 8000558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800055c:	4770      	bx	lr
 800055e:	bf00      	nop
 8000560:	e000ed00 	.word	0xe000ed00

08000564 <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
 8000564:	b480      	push	{r7}
 8000566:	b085      	sub	sp, #20
 8000568:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 800056a:	4b1f      	ldr	r3, [pc, #124]	; (80005e8 <SCB_EnableDCache+0x84>)
 800056c:	2200      	movs	r2, #0
 800056e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000572:	f3bf 8f4f 	dsb	sy
}
 8000576:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8000578:	4b1b      	ldr	r3, [pc, #108]	; (80005e8 <SCB_EnableDCache+0x84>)
 800057a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800057e:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000580:	687b      	ldr	r3, [r7, #4]
 8000582:	0b5b      	lsrs	r3, r3, #13
 8000584:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000588:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 800058a:	687b      	ldr	r3, [r7, #4]
 800058c:	08db      	lsrs	r3, r3, #3
 800058e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000592:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000594:	68fb      	ldr	r3, [r7, #12]
 8000596:	015a      	lsls	r2, r3, #5
 8000598:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 800059c:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 800059e:	68ba      	ldr	r2, [r7, #8]
 80005a0:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80005a2:	4911      	ldr	r1, [pc, #68]	; (80005e8 <SCB_EnableDCache+0x84>)
 80005a4:	4313      	orrs	r3, r2
 80005a6:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 80005aa:	68bb      	ldr	r3, [r7, #8]
 80005ac:	1e5a      	subs	r2, r3, #1
 80005ae:	60ba      	str	r2, [r7, #8]
 80005b0:	2b00      	cmp	r3, #0
 80005b2:	d1ef      	bne.n	8000594 <SCB_EnableDCache+0x30>
    } while(sets-- != 0U);
 80005b4:	68fb      	ldr	r3, [r7, #12]
 80005b6:	1e5a      	subs	r2, r3, #1
 80005b8:	60fa      	str	r2, [r7, #12]
 80005ba:	2b00      	cmp	r3, #0
 80005bc:	d1e5      	bne.n	800058a <SCB_EnableDCache+0x26>
  __ASM volatile ("dsb 0xF":::"memory");
 80005be:	f3bf 8f4f 	dsb	sy
}
 80005c2:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 80005c4:	4b08      	ldr	r3, [pc, #32]	; (80005e8 <SCB_EnableDCache+0x84>)
 80005c6:	695b      	ldr	r3, [r3, #20]
 80005c8:	4a07      	ldr	r2, [pc, #28]	; (80005e8 <SCB_EnableDCache+0x84>)
 80005ca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80005ce:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80005d0:	f3bf 8f4f 	dsb	sy
}
 80005d4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80005d6:	f3bf 8f6f 	isb	sy
}
 80005da:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 80005dc:	bf00      	nop
 80005de:	3714      	adds	r7, #20
 80005e0:	46bd      	mov	sp, r7
 80005e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e6:	4770      	bx	lr
 80005e8:	e000ed00 	.word	0xe000ed00

080005ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b08e      	sub	sp, #56	; 0x38
 80005f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* Enable I-Cache---------------------------------------------------------*/
  SCB_EnableICache();
 80005f2:	f7ff ff91 	bl	8000518 <SCB_EnableICache>

  /* Enable D-Cache---------------------------------------------------------*/
  SCB_EnableDCache();
 80005f6:	f7ff ffb5 	bl	8000564 <SCB_EnableDCache>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005fa:	f000 ff17 	bl	800142c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005fe:	f000 f859 	bl	80006b4 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 8000602:	4b26      	ldr	r3, [pc, #152]	; (800069c <main+0xb0>)
 8000604:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000606:	4a25      	ldr	r2, [pc, #148]	; (800069c <main+0xb0>)
 8000608:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800060c:	6313      	str	r3, [r2, #48]	; 0x30
 800060e:	4b23      	ldr	r3, [pc, #140]	; (800069c <main+0xb0>)
 8000610:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000612:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000616:	637b      	str	r3, [r7, #52]	; 0x34
 8000618:	6b7b      	ldr	r3, [r7, #52]	; 0x34
  __HAL_RCC_USB_OTG_HS_ULPI_CLK_ENABLE();
 800061a:	4b20      	ldr	r3, [pc, #128]	; (800069c <main+0xb0>)
 800061c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800061e:	4a1f      	ldr	r2, [pc, #124]	; (800069c <main+0xb0>)
 8000620:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8000624:	6313      	str	r3, [r2, #48]	; 0x30
 8000626:	4b1d      	ldr	r3, [pc, #116]	; (800069c <main+0xb0>)
 8000628:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800062a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800062e:	633b      	str	r3, [r7, #48]	; 0x30
 8000630:	6b3b      	ldr	r3, [r7, #48]	; 0x30

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000632:	f000 f93d 	bl	80008b0 <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 8000636:	f007 fe4f 	bl	80082d8 <MX_USB_DEVICE_Init>
  MX_DMA_Init();
 800063a:	f000 f91b 	bl	8000874 <MX_DMA_Init>
  MX_TIM2_Init();
 800063e:	f000 f8a9 	bl	8000794 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_IC_Start_DMA(&htim2, TIM_CHANNEL_4, dma_buf, DMA_LEN);
 8000642:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8000646:	4a16      	ldr	r2, [pc, #88]	; (80006a0 <main+0xb4>)
 8000648:	210c      	movs	r1, #12
 800064a:	4816      	ldr	r0, [pc, #88]	; (80006a4 <main+0xb8>)
 800064c:	f003 fe96 	bl	800437c <HAL_TIM_IC_Start_DMA>

  while (1)
  {
	  //uint8_t buffer[] = "Hello, World!\r\n";
	  //result = CDC_Transmit_HS(buffer, sizeof(buffer));
      uint8_t tempBuf[42] = {0};
 8000650:	2300      	movs	r3, #0
 8000652:	607b      	str	r3, [r7, #4]
 8000654:	f107 0308 	add.w	r3, r7, #8
 8000658:	2226      	movs	r2, #38	; 0x26
 800065a:	2100      	movs	r1, #0
 800065c:	4618      	mov	r0, r3
 800065e:	f008 fbf3 	bl	8008e48 <memset>
      ////CDC_Transmit_HS(tempBuf, 42);

      //CDC_Transmit_HS(tempBuf, 42);
      //uint8_t poop;
      //poop = sprintf(tempBuf, "%u\n", (uint8_t) dma_buf[0]);
      if (lower_data_available) {
 8000662:	4b11      	ldr	r3, [pc, #68]	; (80006a8 <main+0xbc>)
 8000664:	781b      	ldrb	r3, [r3, #0]
 8000666:	b2db      	uxtb	r3, r3
 8000668:	2b00      	cmp	r3, #0
 800066a:	d007      	beq.n	800067c <main+0x90>
          //poop = sprintf(tempBuf, "%u l\n", (uint8_t) dma_buf[0]);
          lower_data_available = 0;
 800066c:	4b0e      	ldr	r3, [pc, #56]	; (80006a8 <main+0xbc>)
 800066e:	2200      	movs	r2, #0
 8000670:	701a      	strb	r2, [r3, #0]
          CDC_Transmit_HS(dma_buf, DMA_LEN/4);
 8000672:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8000676:	480a      	ldr	r0, [pc, #40]	; (80006a0 <main+0xb4>)
 8000678:	f007 feec 	bl	8008454 <CDC_Transmit_HS>
      }

      if (upper_data_available) {
 800067c:	4b0b      	ldr	r3, [pc, #44]	; (80006ac <main+0xc0>)
 800067e:	781b      	ldrb	r3, [r3, #0]
 8000680:	b2db      	uxtb	r3, r3
 8000682:	2b00      	cmp	r3, #0
 8000684:	d0e4      	beq.n	8000650 <main+0x64>
          //poop = sprintf(tempBuf, "%u u\n", (uint8_t) dma_buf[0]);
          upper_data_available = 0;
 8000686:	4b09      	ldr	r3, [pc, #36]	; (80006ac <main+0xc0>)
 8000688:	2200      	movs	r2, #0
 800068a:	701a      	strb	r2, [r3, #0]
          CDC_Transmit_HS(dma_buf + DMA_LEN/4, DMA_LEN/4);
 800068c:	4b08      	ldr	r3, [pc, #32]	; (80006b0 <main+0xc4>)
 800068e:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8000692:	4618      	mov	r0, r3
 8000694:	f007 fede 	bl	8008454 <CDC_Transmit_HS>
  {
 8000698:	e7da      	b.n	8000650 <main+0x64>
 800069a:	bf00      	nop
 800069c:	40023800 	.word	0x40023800
 80006a0:	200001a4 	.word	0x200001a4
 80006a4:	20012218 	.word	0x20012218
 80006a8:	200121a4 	.word	0x200121a4
 80006ac:	200121a5 	.word	0x200121a5
 80006b0:	200031a4 	.word	0x200031a4

080006b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	b094      	sub	sp, #80	; 0x50
 80006b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006ba:	f107 0320 	add.w	r3, r7, #32
 80006be:	2230      	movs	r2, #48	; 0x30
 80006c0:	2100      	movs	r1, #0
 80006c2:	4618      	mov	r0, r3
 80006c4:	f008 fbc0 	bl	8008e48 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006c8:	f107 030c 	add.w	r3, r7, #12
 80006cc:	2200      	movs	r2, #0
 80006ce:	601a      	str	r2, [r3, #0]
 80006d0:	605a      	str	r2, [r3, #4]
 80006d2:	609a      	str	r2, [r3, #8]
 80006d4:	60da      	str	r2, [r3, #12]
 80006d6:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80006d8:	f002 fd9c 	bl	8003214 <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006dc:	4b2b      	ldr	r3, [pc, #172]	; (800078c <SystemClock_Config+0xd8>)
 80006de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006e0:	4a2a      	ldr	r2, [pc, #168]	; (800078c <SystemClock_Config+0xd8>)
 80006e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006e6:	6413      	str	r3, [r2, #64]	; 0x40
 80006e8:	4b28      	ldr	r3, [pc, #160]	; (800078c <SystemClock_Config+0xd8>)
 80006ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006f0:	60bb      	str	r3, [r7, #8]
 80006f2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006f4:	4b26      	ldr	r3, [pc, #152]	; (8000790 <SystemClock_Config+0xdc>)
 80006f6:	681b      	ldr	r3, [r3, #0]
 80006f8:	4a25      	ldr	r2, [pc, #148]	; (8000790 <SystemClock_Config+0xdc>)
 80006fa:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80006fe:	6013      	str	r3, [r2, #0]
 8000700:	4b23      	ldr	r3, [pc, #140]	; (8000790 <SystemClock_Config+0xdc>)
 8000702:	681b      	ldr	r3, [r3, #0]
 8000704:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000708:	607b      	str	r3, [r7, #4]
 800070a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800070c:	2301      	movs	r3, #1
 800070e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000710:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000714:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000716:	2302      	movs	r3, #2
 8000718:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800071a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800071e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000720:	2319      	movs	r3, #25
 8000722:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 432;
 8000724:	f44f 73d8 	mov.w	r3, #432	; 0x1b0
 8000728:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800072a:	2302      	movs	r3, #2
 800072c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 9;
 800072e:	2309      	movs	r3, #9
 8000730:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000732:	f107 0320 	add.w	r3, r7, #32
 8000736:	4618      	mov	r0, r3
 8000738:	f002 fdcc 	bl	80032d4 <HAL_RCC_OscConfig>
 800073c:	4603      	mov	r3, r0
 800073e:	2b00      	cmp	r3, #0
 8000740:	d001      	beq.n	8000746 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000742:	f000 fc9b 	bl	800107c <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000746:	f002 fd75 	bl	8003234 <HAL_PWREx_EnableOverDrive>
 800074a:	4603      	mov	r3, r0
 800074c:	2b00      	cmp	r3, #0
 800074e:	d001      	beq.n	8000754 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 8000750:	f000 fc94 	bl	800107c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000754:	230f      	movs	r3, #15
 8000756:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000758:	2302      	movs	r3, #2
 800075a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800075c:	2300      	movs	r3, #0
 800075e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000760:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000764:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000766:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800076a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 800076c:	f107 030c 	add.w	r3, r7, #12
 8000770:	2107      	movs	r1, #7
 8000772:	4618      	mov	r0, r3
 8000774:	f003 f852 	bl	800381c <HAL_RCC_ClockConfig>
 8000778:	4603      	mov	r3, r0
 800077a:	2b00      	cmp	r3, #0
 800077c:	d001      	beq.n	8000782 <SystemClock_Config+0xce>
  {
    Error_Handler();
 800077e:	f000 fc7d 	bl	800107c <Error_Handler>
  }
}
 8000782:	bf00      	nop
 8000784:	3750      	adds	r7, #80	; 0x50
 8000786:	46bd      	mov	sp, r7
 8000788:	bd80      	pop	{r7, pc}
 800078a:	bf00      	nop
 800078c:	40023800 	.word	0x40023800
 8000790:	40007000 	.word	0x40007000

08000794 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	b08c      	sub	sp, #48	; 0x30
 8000798:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800079a:	f107 0320 	add.w	r3, r7, #32
 800079e:	2200      	movs	r2, #0
 80007a0:	601a      	str	r2, [r3, #0]
 80007a2:	605a      	str	r2, [r3, #4]
 80007a4:	609a      	str	r2, [r3, #8]
 80007a6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007a8:	f107 0314 	add.w	r3, r7, #20
 80007ac:	2200      	movs	r2, #0
 80007ae:	601a      	str	r2, [r3, #0]
 80007b0:	605a      	str	r2, [r3, #4]
 80007b2:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80007b4:	1d3b      	adds	r3, r7, #4
 80007b6:	2200      	movs	r2, #0
 80007b8:	601a      	str	r2, [r3, #0]
 80007ba:	605a      	str	r2, [r3, #4]
 80007bc:	609a      	str	r2, [r3, #8]
 80007be:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80007c0:	4b2b      	ldr	r3, [pc, #172]	; (8000870 <MX_TIM2_Init+0xdc>)
 80007c2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80007c6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80007c8:	4b29      	ldr	r3, [pc, #164]	; (8000870 <MX_TIM2_Init+0xdc>)
 80007ca:	2200      	movs	r2, #0
 80007cc:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007ce:	4b28      	ldr	r3, [pc, #160]	; (8000870 <MX_TIM2_Init+0xdc>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80007d4:	4b26      	ldr	r3, [pc, #152]	; (8000870 <MX_TIM2_Init+0xdc>)
 80007d6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80007da:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007dc:	4b24      	ldr	r3, [pc, #144]	; (8000870 <MX_TIM2_Init+0xdc>)
 80007de:	2200      	movs	r2, #0
 80007e0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007e2:	4b23      	ldr	r3, [pc, #140]	; (8000870 <MX_TIM2_Init+0xdc>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80007e8:	4821      	ldr	r0, [pc, #132]	; (8000870 <MX_TIM2_Init+0xdc>)
 80007ea:	f003 fd0f 	bl	800420c <HAL_TIM_Base_Init>
 80007ee:	4603      	mov	r3, r0
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	d001      	beq.n	80007f8 <MX_TIM2_Init+0x64>
  {
    Error_Handler();
 80007f4:	f000 fc42 	bl	800107c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80007f8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007fc:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80007fe:	f107 0320 	add.w	r3, r7, #32
 8000802:	4619      	mov	r1, r3
 8000804:	481a      	ldr	r0, [pc, #104]	; (8000870 <MX_TIM2_Init+0xdc>)
 8000806:	f004 f827 	bl	8004858 <HAL_TIM_ConfigClockSource>
 800080a:	4603      	mov	r3, r0
 800080c:	2b00      	cmp	r3, #0
 800080e:	d001      	beq.n	8000814 <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 8000810:	f000 fc34 	bl	800107c <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8000814:	4816      	ldr	r0, [pc, #88]	; (8000870 <MX_TIM2_Init+0xdc>)
 8000816:	f003 fd50 	bl	80042ba <HAL_TIM_IC_Init>
 800081a:	4603      	mov	r3, r0
 800081c:	2b00      	cmp	r3, #0
 800081e:	d001      	beq.n	8000824 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8000820:	f000 fc2c 	bl	800107c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000824:	2300      	movs	r3, #0
 8000826:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000828:	2300      	movs	r3, #0
 800082a:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800082c:	f107 0314 	add.w	r3, r7, #20
 8000830:	4619      	mov	r1, r3
 8000832:	480f      	ldr	r0, [pc, #60]	; (8000870 <MX_TIM2_Init+0xdc>)
 8000834:	f004 fc64 	bl	8005100 <HAL_TIMEx_MasterConfigSynchronization>
 8000838:	4603      	mov	r3, r0
 800083a:	2b00      	cmp	r3, #0
 800083c:	d001      	beq.n	8000842 <MX_TIM2_Init+0xae>
  {
    Error_Handler();
 800083e:	f000 fc1d 	bl	800107c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000842:	2300      	movs	r3, #0
 8000844:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000846:	2301      	movs	r3, #1
 8000848:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800084a:	2300      	movs	r3, #0
 800084c:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 800084e:	2300      	movs	r3, #0
 8000850:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 8000852:	1d3b      	adds	r3, r7, #4
 8000854:	220c      	movs	r2, #12
 8000856:	4619      	mov	r1, r3
 8000858:	4805      	ldr	r0, [pc, #20]	; (8000870 <MX_TIM2_Init+0xdc>)
 800085a:	f003 ff61 	bl	8004720 <HAL_TIM_IC_ConfigChannel>
 800085e:	4603      	mov	r3, r0
 8000860:	2b00      	cmp	r3, #0
 8000862:	d001      	beq.n	8000868 <MX_TIM2_Init+0xd4>
  {
    Error_Handler();
 8000864:	f000 fc0a 	bl	800107c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000868:	bf00      	nop
 800086a:	3730      	adds	r7, #48	; 0x30
 800086c:	46bd      	mov	sp, r7
 800086e:	bd80      	pop	{r7, pc}
 8000870:	20012218 	.word	0x20012218

08000874 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	b082      	sub	sp, #8
 8000878:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800087a:	4b0c      	ldr	r3, [pc, #48]	; (80008ac <MX_DMA_Init+0x38>)
 800087c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800087e:	4a0b      	ldr	r2, [pc, #44]	; (80008ac <MX_DMA_Init+0x38>)
 8000880:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000884:	6313      	str	r3, [r2, #48]	; 0x30
 8000886:	4b09      	ldr	r3, [pc, #36]	; (80008ac <MX_DMA_Init+0x38>)
 8000888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800088a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800088e:	607b      	str	r3, [r7, #4]
 8000890:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 0, 0);
 8000892:	2200      	movs	r2, #0
 8000894:	2100      	movs	r1, #0
 8000896:	202f      	movs	r0, #47	; 0x2f
 8000898:	f000 ff33 	bl	8001702 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 800089c:	202f      	movs	r0, #47	; 0x2f
 800089e:	f000 ff4c 	bl	800173a <HAL_NVIC_EnableIRQ>

}
 80008a2:	bf00      	nop
 80008a4:	3708      	adds	r7, #8
 80008a6:	46bd      	mov	sp, r7
 80008a8:	bd80      	pop	{r7, pc}
 80008aa:	bf00      	nop
 80008ac:	40023800 	.word	0x40023800

080008b0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b08e      	sub	sp, #56	; 0x38
 80008b4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008b6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008ba:	2200      	movs	r2, #0
 80008bc:	601a      	str	r2, [r3, #0]
 80008be:	605a      	str	r2, [r3, #4]
 80008c0:	609a      	str	r2, [r3, #8]
 80008c2:	60da      	str	r2, [r3, #12]
 80008c4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80008c6:	4bb3      	ldr	r3, [pc, #716]	; (8000b94 <MX_GPIO_Init+0x2e4>)
 80008c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ca:	4ab2      	ldr	r2, [pc, #712]	; (8000b94 <MX_GPIO_Init+0x2e4>)
 80008cc:	f043 0310 	orr.w	r3, r3, #16
 80008d0:	6313      	str	r3, [r2, #48]	; 0x30
 80008d2:	4bb0      	ldr	r3, [pc, #704]	; (8000b94 <MX_GPIO_Init+0x2e4>)
 80008d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008d6:	f003 0310 	and.w	r3, r3, #16
 80008da:	623b      	str	r3, [r7, #32]
 80008dc:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008de:	4bad      	ldr	r3, [pc, #692]	; (8000b94 <MX_GPIO_Init+0x2e4>)
 80008e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008e2:	4aac      	ldr	r2, [pc, #688]	; (8000b94 <MX_GPIO_Init+0x2e4>)
 80008e4:	f043 0302 	orr.w	r3, r3, #2
 80008e8:	6313      	str	r3, [r2, #48]	; 0x30
 80008ea:	4baa      	ldr	r3, [pc, #680]	; (8000b94 <MX_GPIO_Init+0x2e4>)
 80008ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ee:	f003 0302 	and.w	r3, r3, #2
 80008f2:	61fb      	str	r3, [r7, #28]
 80008f4:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80008f6:	4ba7      	ldr	r3, [pc, #668]	; (8000b94 <MX_GPIO_Init+0x2e4>)
 80008f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008fa:	4aa6      	ldr	r2, [pc, #664]	; (8000b94 <MX_GPIO_Init+0x2e4>)
 80008fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000900:	6313      	str	r3, [r2, #48]	; 0x30
 8000902:	4ba4      	ldr	r3, [pc, #656]	; (8000b94 <MX_GPIO_Init+0x2e4>)
 8000904:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000906:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800090a:	61bb      	str	r3, [r7, #24]
 800090c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800090e:	4ba1      	ldr	r3, [pc, #644]	; (8000b94 <MX_GPIO_Init+0x2e4>)
 8000910:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000912:	4aa0      	ldr	r2, [pc, #640]	; (8000b94 <MX_GPIO_Init+0x2e4>)
 8000914:	f043 0308 	orr.w	r3, r3, #8
 8000918:	6313      	str	r3, [r2, #48]	; 0x30
 800091a:	4b9e      	ldr	r3, [pc, #632]	; (8000b94 <MX_GPIO_Init+0x2e4>)
 800091c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800091e:	f003 0308 	and.w	r3, r3, #8
 8000922:	617b      	str	r3, [r7, #20]
 8000924:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000926:	4b9b      	ldr	r3, [pc, #620]	; (8000b94 <MX_GPIO_Init+0x2e4>)
 8000928:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800092a:	4a9a      	ldr	r2, [pc, #616]	; (8000b94 <MX_GPIO_Init+0x2e4>)
 800092c:	f043 0304 	orr.w	r3, r3, #4
 8000930:	6313      	str	r3, [r2, #48]	; 0x30
 8000932:	4b98      	ldr	r3, [pc, #608]	; (8000b94 <MX_GPIO_Init+0x2e4>)
 8000934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000936:	f003 0304 	and.w	r3, r3, #4
 800093a:	613b      	str	r3, [r7, #16]
 800093c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800093e:	4b95      	ldr	r3, [pc, #596]	; (8000b94 <MX_GPIO_Init+0x2e4>)
 8000940:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000942:	4a94      	ldr	r2, [pc, #592]	; (8000b94 <MX_GPIO_Init+0x2e4>)
 8000944:	f043 0301 	orr.w	r3, r3, #1
 8000948:	6313      	str	r3, [r2, #48]	; 0x30
 800094a:	4b92      	ldr	r3, [pc, #584]	; (8000b94 <MX_GPIO_Init+0x2e4>)
 800094c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800094e:	f003 0301 	and.w	r3, r3, #1
 8000952:	60fb      	str	r3, [r7, #12]
 8000954:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000956:	4b8f      	ldr	r3, [pc, #572]	; (8000b94 <MX_GPIO_Init+0x2e4>)
 8000958:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800095a:	4a8e      	ldr	r2, [pc, #568]	; (8000b94 <MX_GPIO_Init+0x2e4>)
 800095c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000960:	6313      	str	r3, [r2, #48]	; 0x30
 8000962:	4b8c      	ldr	r3, [pc, #560]	; (8000b94 <MX_GPIO_Init+0x2e4>)
 8000964:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000966:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800096a:	60bb      	str	r3, [r7, #8]
 800096c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800096e:	4b89      	ldr	r3, [pc, #548]	; (8000b94 <MX_GPIO_Init+0x2e4>)
 8000970:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000972:	4a88      	ldr	r2, [pc, #544]	; (8000b94 <MX_GPIO_Init+0x2e4>)
 8000974:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000978:	6313      	str	r3, [r2, #48]	; 0x30
 800097a:	4b86      	ldr	r3, [pc, #536]	; (8000b94 <MX_GPIO_Init+0x2e4>)
 800097c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800097e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000982:	607b      	str	r3, [r7, #4]
 8000984:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000986:	4b83      	ldr	r3, [pc, #524]	; (8000b94 <MX_GPIO_Init+0x2e4>)
 8000988:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800098a:	4a82      	ldr	r2, [pc, #520]	; (8000b94 <MX_GPIO_Init+0x2e4>)
 800098c:	f043 0320 	orr.w	r3, r3, #32
 8000990:	6313      	str	r3, [r2, #48]	; 0x30
 8000992:	4b80      	ldr	r3, [pc, #512]	; (8000b94 <MX_GPIO_Init+0x2e4>)
 8000994:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000996:	f003 0320 	and.w	r3, r3, #32
 800099a:	603b      	str	r3, [r7, #0]
 800099c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, ARD_D7_GPIO_Pin|ARD_D8_GPIO_Pin, GPIO_PIN_RESET);
 800099e:	2200      	movs	r2, #0
 80009a0:	2118      	movs	r1, #24
 80009a2:	487d      	ldr	r0, [pc, #500]	; (8000b98 <MX_GPIO_Init+0x2e8>)
 80009a4:	f001 fa6e 	bl	8001e84 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, WIFI_RST_Pin|WIFI_GPIO_0_Pin|PMOD_GPIO_0_Pin|USB_OTGFS_PPWR_EN_Pin, GPIO_PIN_RESET);
 80009a8:	2200      	movs	r2, #0
 80009aa:	f44f 41e2 	mov.w	r1, #28928	; 0x7100
 80009ae:	487b      	ldr	r0, [pc, #492]	; (8000b9c <MX_GPIO_Init+0x2ec>)
 80009b0:	f001 fa68 	bl	8001e84 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, WIFI_GPIO_2_Pin|WIFI_CH_PD_Pin, GPIO_PIN_RESET);
 80009b4:	2200      	movs	r2, #0
 80009b6:	2148      	movs	r1, #72	; 0x48
 80009b8:	4879      	ldr	r0, [pc, #484]	; (8000ba0 <MX_GPIO_Init+0x2f0>)
 80009ba:	f001 fa63 	bl	8001e84 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, STMOD_UART4_RXD_s_Pin|ARD_D2_GPIO_Pin, GPIO_PIN_RESET);
 80009be:	2200      	movs	r2, #0
 80009c0:	f44f 6102 	mov.w	r1, #2080	; 0x820
 80009c4:	4877      	ldr	r0, [pc, #476]	; (8000ba4 <MX_GPIO_Init+0x2f4>)
 80009c6:	f001 fa5d 	bl	8001e84 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, PMOD_SPI2_MOSI_Pin|PMOD_SPI2_MISO_Pin|GPIO_PIN_10, GPIO_PIN_RESET);
 80009ca:	2200      	movs	r2, #0
 80009cc:	f240 410c 	movw	r1, #1036	; 0x40c
 80009d0:	4875      	ldr	r0, [pc, #468]	; (8000ba8 <MX_GPIO_Init+0x2f8>)
 80009d2:	f001 fa57 	bl	8001e84 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(PMOD_SEL_0_GPIO_Port, PMOD_SEL_0_Pin, GPIO_PIN_SET);
 80009d6:	2201      	movs	r2, #1
 80009d8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80009dc:	4873      	ldr	r0, [pc, #460]	; (8000bac <MX_GPIO_Init+0x2fc>)
 80009de:	f001 fa51 	bl	8001e84 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, USB_OTG_FS_ID_Pin|SYS_LD_USER1_Pin, GPIO_PIN_RESET);
 80009e2:	2200      	movs	r2, #0
 80009e4:	f44f 6190 	mov.w	r1, #1152	; 0x480
 80009e8:	4871      	ldr	r0, [pc, #452]	; (8000bb0 <MX_GPIO_Init+0x300>)
 80009ea:	f001 fa4b 	bl	8001e84 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, USAGE_Pin|ARD_D4_GPIO_Pin|USB_OTGHS_PPWR_EN_Pin|CTP_RST_Pin
 80009ee:	2200      	movs	r2, #0
 80009f0:	f241 218c 	movw	r1, #4748	; 0x128c
 80009f4:	486d      	ldr	r0, [pc, #436]	; (8000bac <MX_GPIO_Init+0x2fc>)
 80009f6:	f001 fa45 	bl	8001e84 <HAL_GPIO_WritePin>
                          |LCD_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, USB_OTG_HS_ID_Pin|SYS_LD_USER2_Pin, GPIO_PIN_RESET);
 80009fa:	2200      	movs	r2, #0
 80009fc:	f241 0102 	movw	r1, #4098	; 0x1002
 8000a00:	486c      	ldr	r0, [pc, #432]	; (8000bb4 <MX_GPIO_Init+0x304>)
 8000a02:	f001 fa3f 	bl	8001e84 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : ARD_D7_GPIO_Pin ARD_D8_GPIO_Pin */
  GPIO_InitStruct.Pin = ARD_D7_GPIO_Pin|ARD_D8_GPIO_Pin;
 8000a06:	2318      	movs	r3, #24
 8000a08:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a0a:	2301      	movs	r3, #1
 8000a0c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a0e:	2300      	movs	r3, #0
 8000a10:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a12:	2300      	movs	r3, #0
 8000a14:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000a16:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a1a:	4619      	mov	r1, r3
 8000a1c:	485e      	ldr	r0, [pc, #376]	; (8000b98 <MX_GPIO_Init+0x2e8>)
 8000a1e:	f001 f895 	bl	8001b4c <HAL_GPIO_Init>

  /*Configure GPIO pin : QSPI_D2_Pin */
  GPIO_InitStruct.Pin = QSPI_D2_Pin;
 8000a22:	2304      	movs	r3, #4
 8000a24:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a26:	2302      	movs	r3, #2
 8000a28:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a2e:	2303      	movs	r3, #3
 8000a30:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8000a32:	2309      	movs	r3, #9
 8000a34:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(QSPI_D2_GPIO_Port, &GPIO_InitStruct);
 8000a36:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a3a:	4619      	mov	r1, r3
 8000a3c:	4856      	ldr	r0, [pc, #344]	; (8000b98 <MX_GPIO_Init+0x2e8>)
 8000a3e:	f001 f885 	bl	8001b4c <HAL_GPIO_Init>

  /*Configure GPIO pins : PSRAM_NBL1_Pin PSRAM_NBL0_Pin LCD_PSRAM_D10_Pin LCD_PSRAM_D5_Pin
                           LCD_PSRAM_D6_Pin LCD_PSRAM_D8_Pin LCD_PSRAM_D11_Pin LCD_PSRAM_D4_Pin
                           LCD_PSRAM_D7_Pin LCD_PSRAM_D9_Pin LCD_PSRAM_D12_Pin */
  GPIO_InitStruct.Pin = PSRAM_NBL1_Pin|PSRAM_NBL0_Pin|LCD_PSRAM_D10_Pin|LCD_PSRAM_D5_Pin
 8000a42:	f64f 7383 	movw	r3, #65411	; 0xff83
 8000a46:	627b      	str	r3, [r7, #36]	; 0x24
                          |LCD_PSRAM_D6_Pin|LCD_PSRAM_D8_Pin|LCD_PSRAM_D11_Pin|LCD_PSRAM_D4_Pin
                          |LCD_PSRAM_D7_Pin|LCD_PSRAM_D9_Pin|LCD_PSRAM_D12_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a48:	2302      	movs	r3, #2
 8000a4a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a50:	2303      	movs	r3, #3
 8000a52:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000a54:	230c      	movs	r3, #12
 8000a56:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000a58:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a5c:	4619      	mov	r1, r3
 8000a5e:	484e      	ldr	r0, [pc, #312]	; (8000b98 <MX_GPIO_Init+0x2e8>)
 8000a60:	f001 f874 	bl	8001b4c <HAL_GPIO_Init>

  /*Configure GPIO pins : SAI2_I2C1_SCL_Pin SAI2_I2C1_SDA_Pin */
  GPIO_InitStruct.Pin = SAI2_I2C1_SCL_Pin|SAI2_I2C1_SDA_Pin;
 8000a64:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000a68:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a6a:	2312      	movs	r3, #18
 8000a6c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a6e:	2300      	movs	r3, #0
 8000a70:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a72:	2303      	movs	r3, #3
 8000a74:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000a76:	2304      	movs	r3, #4
 8000a78:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a7a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a7e:	4619      	mov	r1, r3
 8000a80:	484c      	ldr	r0, [pc, #304]	; (8000bb4 <MX_GPIO_Init+0x304>)
 8000a82:	f001 f863 	bl	8001b4c <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D11_TIM3_CH2_SPI1_MOSI_Pin ARD_D12_SPI1_MISO_Pin */
  GPIO_InitStruct.Pin = ARD_D11_TIM3_CH2_SPI1_MOSI_Pin|ARD_D12_SPI1_MISO_Pin;
 8000a86:	2330      	movs	r3, #48	; 0x30
 8000a88:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a8a:	2302      	movs	r3, #2
 8000a8c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a8e:	2300      	movs	r3, #0
 8000a90:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a92:	2303      	movs	r3, #3
 8000a94:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000a96:	2305      	movs	r3, #5
 8000a98:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a9a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a9e:	4619      	mov	r1, r3
 8000aa0:	4844      	ldr	r0, [pc, #272]	; (8000bb4 <MX_GPIO_Init+0x304>)
 8000aa2:	f001 f853 	bl	8001b4c <HAL_GPIO_Init>

  /*Configure GPIO pins : WIFI_RST_Pin WIFI_GPIO_0_Pin PMOD_GPIO_0_Pin USB_OTGFS_PPWR_EN_Pin */
  GPIO_InitStruct.Pin = WIFI_RST_Pin|WIFI_GPIO_0_Pin|PMOD_GPIO_0_Pin|USB_OTGFS_PPWR_EN_Pin;
 8000aa6:	f44f 43e2 	mov.w	r3, #28928	; 0x7100
 8000aaa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000aac:	2301      	movs	r3, #1
 8000aae:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000ab8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000abc:	4619      	mov	r1, r3
 8000abe:	4837      	ldr	r0, [pc, #220]	; (8000b9c <MX_GPIO_Init+0x2ec>)
 8000ac0:	f001 f844 	bl	8001b4c <HAL_GPIO_Init>

  /*Configure GPIO pins : PSRAM_NE1_Pin LCD_PSRAM_D2_Pin LCD_PSRAM_NWE_Pin LCD_PSRAM_D3_Pin
                           LCD_PSRAM_NWED4_Pin LCD_PSRAM_D1_Pin LCD_PSRAM_D0_Pin PSRAM_A17_Pin
                           PSRAM_A16_Pin LCD_PSRAM_D15_Pin LCD_PSRAM_D14_Pin LCD_PSRAM_D13_Pin */
  GPIO_InitStruct.Pin = PSRAM_NE1_Pin|LCD_PSRAM_D2_Pin|LCD_PSRAM_NWE_Pin|LCD_PSRAM_D3_Pin
 8000ac4:	f64d 73b3 	movw	r3, #57267	; 0xdfb3
 8000ac8:	627b      	str	r3, [r7, #36]	; 0x24
                          |LCD_PSRAM_NWED4_Pin|LCD_PSRAM_D1_Pin|LCD_PSRAM_D0_Pin|PSRAM_A17_Pin
                          |PSRAM_A16_Pin|LCD_PSRAM_D15_Pin|LCD_PSRAM_D14_Pin|LCD_PSRAM_D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aca:	2302      	movs	r3, #2
 8000acc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ace:	2300      	movs	r3, #0
 8000ad0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ad2:	2303      	movs	r3, #3
 8000ad4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000ad6:	230c      	movs	r3, #12
 8000ad8:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ada:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ade:	4619      	mov	r1, r3
 8000ae0:	482f      	ldr	r0, [pc, #188]	; (8000ba0 <MX_GPIO_Init+0x2f0>)
 8000ae2:	f001 f833 	bl	8001b4c <HAL_GPIO_Init>

  /*Configure GPIO pin : UART_TXD_WIFI_RX_Pin */
  GPIO_InitStruct.Pin = UART_TXD_WIFI_RX_Pin;
 8000ae6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000aea:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aec:	2302      	movs	r3, #2
 8000aee:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af0:	2300      	movs	r3, #0
 8000af2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000af4:	2303      	movs	r3, #3
 8000af6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8000af8:	2308      	movs	r3, #8
 8000afa:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(UART_TXD_WIFI_RX_GPIO_Port, &GPIO_InitStruct);
 8000afc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b00:	4619      	mov	r1, r3
 8000b02:	4828      	ldr	r0, [pc, #160]	; (8000ba4 <MX_GPIO_Init+0x2f4>)
 8000b04:	f001 f822 	bl	8001b4c <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D3_TIM9_CH1_Pin ARD_D6_TIM9_CH2_Pin */
  GPIO_InitStruct.Pin = ARD_D3_TIM9_CH1_Pin|ARD_D6_TIM9_CH2_Pin;
 8000b08:	2360      	movs	r3, #96	; 0x60
 8000b0a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b0c:	2302      	movs	r3, #2
 8000b0e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b10:	2300      	movs	r3, #0
 8000b12:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b14:	2300      	movs	r3, #0
 8000b16:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 8000b18:	2303      	movs	r3, #3
 8000b1a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000b1c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b20:	4619      	mov	r1, r3
 8000b22:	481d      	ldr	r0, [pc, #116]	; (8000b98 <MX_GPIO_Init+0x2e8>)
 8000b24:	f001 f812 	bl	8001b4c <HAL_GPIO_Init>

  /*Configure GPIO pin : NC1_Pin */
  GPIO_InitStruct.Pin = NC1_Pin;
 8000b28:	2380      	movs	r3, #128	; 0x80
 8000b2a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b2c:	2302      	movs	r3, #2
 8000b2e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b30:	2300      	movs	r3, #0
 8000b32:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b34:	2303      	movs	r3, #3
 8000b36:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000b38:	230c      	movs	r3, #12
 8000b3a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(NC1_GPIO_Port, &GPIO_InitStruct);
 8000b3c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b40:	4619      	mov	r1, r3
 8000b42:	481c      	ldr	r0, [pc, #112]	; (8000bb4 <MX_GPIO_Init+0x304>)
 8000b44:	f001 f802 	bl	8001b4c <HAL_GPIO_Init>

  /*Configure GPIO pin : QSPI_NCS_Pin */
  GPIO_InitStruct.Pin = QSPI_NCS_Pin;
 8000b48:	2340      	movs	r3, #64	; 0x40
 8000b4a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b4c:	2302      	movs	r3, #2
 8000b4e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b50:	2300      	movs	r3, #0
 8000b52:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b54:	2303      	movs	r3, #3
 8000b56:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8000b58:	230a      	movs	r3, #10
 8000b5a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(QSPI_NCS_GPIO_Port, &GPIO_InitStruct);
 8000b5c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b60:	4619      	mov	r1, r3
 8000b62:	4814      	ldr	r0, [pc, #80]	; (8000bb4 <MX_GPIO_Init+0x304>)
 8000b64:	f000 fff2 	bl	8001b4c <HAL_GPIO_Init>

  /*Configure GPIO pin : SAI2_INT_Pin */
  GPIO_InitStruct.Pin = SAI2_INT_Pin;
 8000b68:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000b6c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000b6e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000b72:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b74:	2300      	movs	r3, #0
 8000b76:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(SAI2_INT_GPIO_Port, &GPIO_InitStruct);
 8000b78:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b7c:	4619      	mov	r1, r3
 8000b7e:	4807      	ldr	r0, [pc, #28]	; (8000b9c <MX_GPIO_Init+0x2ec>)
 8000b80:	f000 ffe4 	bl	8001b4c <HAL_GPIO_Init>

  /*Configure GPIO pin : SAI2_SD_B_Pin */
  GPIO_InitStruct.Pin = SAI2_SD_B_Pin;
 8000b84:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b88:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b8a:	2302      	movs	r3, #2
 8000b8c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b8e:	2300      	movs	r3, #0
 8000b90:	e012      	b.n	8000bb8 <MX_GPIO_Init+0x308>
 8000b92:	bf00      	nop
 8000b94:	40023800 	.word	0x40023800
 8000b98:	40021000 	.word	0x40021000
 8000b9c:	40021800 	.word	0x40021800
 8000ba0:	40020c00 	.word	0x40020c00
 8000ba4:	40020800 	.word	0x40020800
 8000ba8:	40022000 	.word	0x40022000
 8000bac:	40021c00 	.word	0x40021c00
 8000bb0:	40020000 	.word	0x40020000
 8000bb4:	40020400 	.word	0x40020400
 8000bb8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bba:	2300      	movs	r3, #0
 8000bbc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8000bbe:	230a      	movs	r3, #10
 8000bc0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(SAI2_SD_B_GPIO_Port, &GPIO_InitStruct);
 8000bc2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bc6:	4619      	mov	r1, r3
 8000bc8:	48bc      	ldr	r0, [pc, #752]	; (8000ebc <MX_GPIO_Init+0x60c>)
 8000bca:	f000 ffbf 	bl	8001b4c <HAL_GPIO_Init>

  /*Configure GPIO pins : WIFI_GPIO_2_Pin WIFI_CH_PD_Pin */
  GPIO_InitStruct.Pin = WIFI_GPIO_2_Pin|WIFI_CH_PD_Pin;
 8000bce:	2348      	movs	r3, #72	; 0x48
 8000bd0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bd2:	2301      	movs	r3, #1
 8000bd4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bda:	2300      	movs	r3, #0
 8000bdc:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000bde:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000be2:	4619      	mov	r1, r3
 8000be4:	48b6      	ldr	r0, [pc, #728]	; (8000ec0 <MX_GPIO_Init+0x610>)
 8000be6:	f000 ffb1 	bl	8001b4c <HAL_GPIO_Init>

  /*Configure GPIO pins : STMOD_UART4_RXD_s_Pin ARD_D2_GPIO_Pin */
  GPIO_InitStruct.Pin = STMOD_UART4_RXD_s_Pin|ARD_D2_GPIO_Pin;
 8000bea:	f44f 6302 	mov.w	r3, #2080	; 0x820
 8000bee:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bf0:	2301      	movs	r3, #1
 8000bf2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000bfc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c00:	4619      	mov	r1, r3
 8000c02:	48b0      	ldr	r0, [pc, #704]	; (8000ec4 <MX_GPIO_Init+0x614>)
 8000c04:	f000 ffa2 	bl	8001b4c <HAL_GPIO_Init>

  /*Configure GPIO pins : QSPI_D1_Pin QSPI_D0_Pin */
  GPIO_InitStruct.Pin = QSPI_D1_Pin|QSPI_D0_Pin;
 8000c08:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000c0c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c0e:	2302      	movs	r3, #2
 8000c10:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c12:	2300      	movs	r3, #0
 8000c14:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c16:	2303      	movs	r3, #3
 8000c18:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8000c1a:	2309      	movs	r3, #9
 8000c1c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c1e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c22:	4619      	mov	r1, r3
 8000c24:	48a7      	ldr	r0, [pc, #668]	; (8000ec4 <MX_GPIO_Init+0x614>)
 8000c26:	f000 ff91 	bl	8001b4c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA12 PA11 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_11;
 8000c2a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000c2e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c30:	2302      	movs	r3, #2
 8000c32:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c34:	2300      	movs	r3, #0
 8000c36:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c38:	2303      	movs	r3, #3
 8000c3a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000c3c:	230a      	movs	r3, #10
 8000c3e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c40:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c44:	4619      	mov	r1, r3
 8000c46:	48a0      	ldr	r0, [pc, #640]	; (8000ec8 <MX_GPIO_Init+0x618>)
 8000c48:	f000 ff80 	bl	8001b4c <HAL_GPIO_Init>

  /*Configure GPIO pins : SAI2_FS_A_Pin SAI2_SD_A_Pin SAI2_SCK_A_Pin SAI2_MCLK_A_Pin */
  GPIO_InitStruct.Pin = SAI2_FS_A_Pin|SAI2_SD_A_Pin|SAI2_SCK_A_Pin|SAI2_MCLK_A_Pin;
 8000c4c:	23f0      	movs	r3, #240	; 0xf0
 8000c4e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c50:	2302      	movs	r3, #2
 8000c52:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c54:	2300      	movs	r3, #0
 8000c56:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c58:	2300      	movs	r3, #0
 8000c5a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8000c5c:	230a      	movs	r3, #10
 8000c5e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000c60:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c64:	4619      	mov	r1, r3
 8000c66:	4899      	ldr	r0, [pc, #612]	; (8000ecc <MX_GPIO_Init+0x61c>)
 8000c68:	f000 ff70 	bl	8001b4c <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_NE_Pin PSRAM_A15_Pin PSRAM_A14_Pin PSRAM_A13_Pin
                           PSRAM_A12_Pin PSRAM_A11_Pin PSRAM_A10_Pin */
  GPIO_InitStruct.Pin = LCD_NE_Pin|PSRAM_A15_Pin|PSRAM_A14_Pin|PSRAM_A13_Pin
 8000c6c:	f240 233f 	movw	r3, #575	; 0x23f
 8000c70:	627b      	str	r3, [r7, #36]	; 0x24
                          |PSRAM_A12_Pin|PSRAM_A11_Pin|PSRAM_A10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c72:	2302      	movs	r3, #2
 8000c74:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c76:	2300      	movs	r3, #0
 8000c78:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c7a:	2303      	movs	r3, #3
 8000c7c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000c7e:	230c      	movs	r3, #12
 8000c80:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000c82:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c86:	4619      	mov	r1, r3
 8000c88:	488c      	ldr	r0, [pc, #560]	; (8000ebc <MX_GPIO_Init+0x60c>)
 8000c8a:	f000 ff5f 	bl	8001b4c <HAL_GPIO_Init>

  /*Configure GPIO pins : PMOD_SPI2_MOSI_Pin PMOD_SPI2_MISO_Pin PI10 */
  GPIO_InitStruct.Pin = PMOD_SPI2_MOSI_Pin|PMOD_SPI2_MISO_Pin|GPIO_PIN_10;
 8000c8e:	f240 430c 	movw	r3, #1036	; 0x40c
 8000c92:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c94:	2301      	movs	r3, #1
 8000c96:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c98:	2300      	movs	r3, #0
 8000c9a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000ca0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ca4:	4619      	mov	r1, r3
 8000ca6:	4889      	ldr	r0, [pc, #548]	; (8000ecc <MX_GPIO_Init+0x61c>)
 8000ca8:	f000 ff50 	bl	8001b4c <HAL_GPIO_Init>

  /*Configure GPIO pin : CTP_INT_Pin */
  GPIO_InitStruct.Pin = CTP_INT_Pin;
 8000cac:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000cb0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000cb2:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000cb6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cb8:	2300      	movs	r3, #0
 8000cba:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CTP_INT_GPIO_Port, &GPIO_InitStruct);
 8000cbc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cc0:	4619      	mov	r1, r3
 8000cc2:	4882      	ldr	r0, [pc, #520]	; (8000ecc <MX_GPIO_Init+0x61c>)
 8000cc4:	f000 ff42 	bl	8001b4c <HAL_GPIO_Init>

  /*Configure GPIO pin : UART_RXD_WIFI_TX_Pin */
  GPIO_InitStruct.Pin = UART_RXD_WIFI_TX_Pin;
 8000cc8:	2304      	movs	r3, #4
 8000cca:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ccc:	2302      	movs	r3, #2
 8000cce:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cd4:	2303      	movs	r3, #3
 8000cd6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8000cd8:	2308      	movs	r3, #8
 8000cda:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(UART_RXD_WIFI_TX_GPIO_Port, &GPIO_InitStruct);
 8000cdc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ce0:	4619      	mov	r1, r3
 8000ce2:	4877      	ldr	r0, [pc, #476]	; (8000ec0 <MX_GPIO_Init+0x610>)
 8000ce4:	f000 ff32 	bl	8001b4c <HAL_GPIO_Init>

  /*Configure GPIO pins : PMOD_SEL_0_Pin ARD_D4_GPIO_Pin USB_OTGHS_PPWR_EN_Pin CTP_RST_Pin
                           LCD_RST_Pin */
  GPIO_InitStruct.Pin = PMOD_SEL_0_Pin|ARD_D4_GPIO_Pin|USB_OTGHS_PPWR_EN_Pin|CTP_RST_Pin
 8000ce8:	f249 2388 	movw	r3, #37512	; 0x9288
 8000cec:	627b      	str	r3, [r7, #36]	; 0x24
                          |LCD_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cee:	2301      	movs	r3, #1
 8000cf0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000cfa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cfe:	4619      	mov	r1, r3
 8000d00:	4873      	ldr	r0, [pc, #460]	; (8000ed0 <MX_GPIO_Init+0x620>)
 8000d02:	f000 ff23 	bl	8001b4c <HAL_GPIO_Init>

  /*Configure GPIO pins : PMOD_SPI2_SCK_Pin PMOD_SPI2_NSS_Pin */
  GPIO_InitStruct.Pin = PMOD_SPI2_SCK_Pin|PMOD_SPI2_NSS_Pin;
 8000d06:	2303      	movs	r3, #3
 8000d08:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d0a:	2302      	movs	r3, #2
 8000d0c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d0e:	2300      	movs	r3, #0
 8000d10:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d12:	2303      	movs	r3, #3
 8000d14:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000d16:	2305      	movs	r3, #5
 8000d18:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000d1a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d1e:	4619      	mov	r1, r3
 8000d20:	486a      	ldr	r0, [pc, #424]	; (8000ecc <MX_GPIO_Init+0x61c>)
 8000d22:	f000 ff13 	bl	8001b4c <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_ID_Pin SYS_LD_USER1_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_ID_Pin|SYS_LD_USER1_Pin;
 8000d26:	f44f 6390 	mov.w	r3, #1152	; 0x480
 8000d2a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d2c:	2301      	movs	r3, #1
 8000d2e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d30:	2300      	movs	r3, #0
 8000d32:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d34:	2300      	movs	r3, #0
 8000d36:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d38:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d3c:	4619      	mov	r1, r3
 8000d3e:	4862      	ldr	r0, [pc, #392]	; (8000ec8 <MX_GPIO_Init+0x618>)
 8000d40:	f000 ff04 	bl	8001b4c <HAL_GPIO_Init>

  /*Configure GPIO pins : PSRAM_A0_Pin PSRAM_A2_Pin PSRAM_A1_Pin PSRAM_A3_Pin
                           PSRAM_A4_Pin PSRAM_A5_Pin PSRAM_A7_Pin PSRAM_A6_Pin
                           PSRAM_A9_Pin PSRAM_A8_Pin */
  GPIO_InitStruct.Pin = PSRAM_A0_Pin|PSRAM_A2_Pin|PSRAM_A1_Pin|PSRAM_A3_Pin
 8000d44:	f24f 033f 	movw	r3, #61503	; 0xf03f
 8000d48:	627b      	str	r3, [r7, #36]	; 0x24
                          |PSRAM_A4_Pin|PSRAM_A5_Pin|PSRAM_A7_Pin|PSRAM_A6_Pin
                          |PSRAM_A9_Pin|PSRAM_A8_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d4a:	2302      	movs	r3, #2
 8000d4c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d4e:	2300      	movs	r3, #0
 8000d50:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d52:	2303      	movs	r3, #3
 8000d54:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000d56:	230c      	movs	r3, #12
 8000d58:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000d5a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d5e:	4619      	mov	r1, r3
 8000d60:	485c      	ldr	r0, [pc, #368]	; (8000ed4 <MX_GPIO_Init+0x624>)
 8000d62:	f000 fef3 	bl	8001b4c <HAL_GPIO_Init>

  /*Configure GPIO pins : STMOD_UART4_TXD_Pin STMOD_UART4_RXD_Pin */
  GPIO_InitStruct.Pin = STMOD_UART4_TXD_Pin|STMOD_UART4_RXD_Pin;
 8000d66:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8000d6a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d6c:	2302      	movs	r3, #2
 8000d6e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d70:	2300      	movs	r3, #0
 8000d72:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d74:	2303      	movs	r3, #3
 8000d76:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8000d78:	2308      	movs	r3, #8
 8000d7a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000d7c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d80:	4619      	mov	r1, r3
 8000d82:	4853      	ldr	r0, [pc, #332]	; (8000ed0 <MX_GPIO_Init+0x620>)
 8000d84:	f000 fee2 	bl	8001b4c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000d88:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000d8c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d8e:	2300      	movs	r3, #0
 8000d90:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d92:	2300      	movs	r3, #0
 8000d94:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d96:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d9a:	4619      	mov	r1, r3
 8000d9c:	484a      	ldr	r0, [pc, #296]	; (8000ec8 <MX_GPIO_Init+0x618>)
 8000d9e:	f000 fed5 	bl	8001b4c <HAL_GPIO_Init>

  /*Configure GPIO pin : USAGE_Pin */
  GPIO_InitStruct.Pin = USAGE_Pin;
 8000da2:	2304      	movs	r3, #4
 8000da4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000da6:	2301      	movs	r3, #1
 8000da8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000daa:	2300      	movs	r3, #0
 8000dac:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dae:	2303      	movs	r3, #3
 8000db0:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USAGE_GPIO_Port, &GPIO_InitStruct);
 8000db2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000db6:	4619      	mov	r1, r3
 8000db8:	4845      	ldr	r0, [pc, #276]	; (8000ed0 <MX_GPIO_Init+0x620>)
 8000dba:	f000 fec7 	bl	8001b4c <HAL_GPIO_Init>

  /*Configure GPIO pin : CTP_SCL_Pin */
  GPIO_InitStruct.Pin = CTP_SCL_Pin;
 8000dbe:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000dc2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000dc4:	2312      	movs	r3, #18
 8000dc6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dc8:	2300      	movs	r3, #0
 8000dca:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dcc:	2303      	movs	r3, #3
 8000dce:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000dd0:	2304      	movs	r3, #4
 8000dd2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(CTP_SCL_GPIO_Port, &GPIO_InitStruct);
 8000dd4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000dd8:	4619      	mov	r1, r3
 8000dda:	483b      	ldr	r0, [pc, #236]	; (8000ec8 <MX_GPIO_Init+0x618>)
 8000ddc:	f000 feb6 	bl	8001b4c <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_TE_INT_Pin */
  GPIO_InitStruct.Pin = LCD_TE_INT_Pin;
 8000de0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000de4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000de6:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000dea:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dec:	2300      	movs	r3, #0
 8000dee:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(LCD_TE_INT_GPIO_Port, &GPIO_InitStruct);
 8000df0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000df4:	4619      	mov	r1, r3
 8000df6:	4833      	ldr	r0, [pc, #204]	; (8000ec4 <MX_GPIO_Init+0x614>)
 8000df8:	f000 fea8 	bl	8001b4c <HAL_GPIO_Init>

  /*Configure GPIO pins : VCP_RX_Pin VCP_TX_Pin */
  GPIO_InitStruct.Pin = VCP_RX_Pin|VCP_TX_Pin;
 8000dfc:	23c0      	movs	r3, #192	; 0xc0
 8000dfe:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e00:	2302      	movs	r3, #2
 8000e02:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e04:	2300      	movs	r3, #0
 8000e06:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e08:	2303      	movs	r3, #3
 8000e0a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8000e0c:	2308      	movs	r3, #8
 8000e0e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e10:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e14:	4619      	mov	r1, r3
 8000e16:	482b      	ldr	r0, [pc, #172]	; (8000ec4 <MX_GPIO_Init+0x614>)
 8000e18:	f000 fe98 	bl	8001b4c <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D15_STMOD_I2C2_SCL_Pin ARD_D14_STMOD_I2C2_SDA_Pin */
  GPIO_InitStruct.Pin = ARD_D15_STMOD_I2C2_SCL_Pin|ARD_D14_STMOD_I2C2_SDA_Pin;
 8000e1c:	2330      	movs	r3, #48	; 0x30
 8000e1e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e20:	2312      	movs	r3, #18
 8000e22:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e24:	2300      	movs	r3, #0
 8000e26:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e28:	2303      	movs	r3, #3
 8000e2a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000e2c:	2304      	movs	r3, #4
 8000e2e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000e30:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e34:	4619      	mov	r1, r3
 8000e36:	4826      	ldr	r0, [pc, #152]	; (8000ed0 <MX_GPIO_Init+0x620>)
 8000e38:	f000 fe88 	bl	8001b4c <HAL_GPIO_Init>

  /*Configure GPIO pins : PMOD_UART7_TXD_Pin PMOD_UART7_RXD_Pin PMOD_UART7_CTS_Pin PMOD_UART7_RTS_Pin */
  GPIO_InitStruct.Pin = PMOD_UART7_TXD_Pin|PMOD_UART7_RXD_Pin|PMOD_UART7_CTS_Pin|PMOD_UART7_RTS_Pin;
 8000e3c:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8000e40:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e42:	2302      	movs	r3, #2
 8000e44:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e46:	2300      	movs	r3, #0
 8000e48:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e4a:	2303      	movs	r3, #3
 8000e4c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF8_UART7;
 8000e4e:	2308      	movs	r3, #8
 8000e50:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000e52:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e56:	4619      	mov	r1, r3
 8000e58:	481e      	ldr	r0, [pc, #120]	; (8000ed4 <MX_GPIO_Init+0x624>)
 8000e5a:	f000 fe77 	bl	8001b4c <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_A3_ADC3_IN8_Pin */
  GPIO_InitStruct.Pin = ARD_A3_ADC3_IN8_Pin;
 8000e5e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000e62:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e64:	2303      	movs	r3, #3
 8000e66:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e68:	2300      	movs	r3, #0
 8000e6a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(ARD_A3_ADC3_IN8_GPIO_Port, &GPIO_InitStruct);
 8000e6c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e70:	4619      	mov	r1, r3
 8000e72:	4818      	ldr	r0, [pc, #96]	; (8000ed4 <MX_GPIO_Init+0x624>)
 8000e74:	f000 fe6a 	bl	8001b4c <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_BL_Pin */
  GPIO_InitStruct.Pin = LCD_BL_Pin;
 8000e78:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000e7c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e7e:	2302      	movs	r3, #2
 8000e80:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e82:	2300      	movs	r3, #0
 8000e84:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e86:	2300      	movs	r3, #0
 8000e88:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8000e8a:	2302      	movs	r3, #2
 8000e8c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(LCD_BL_GPIO_Port, &GPIO_InitStruct);
 8000e8e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e92:	4619      	mov	r1, r3
 8000e94:	480e      	ldr	r0, [pc, #56]	; (8000ed0 <MX_GPIO_Init+0x620>)
 8000e96:	f000 fe59 	bl	8001b4c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTGHS_OVCR_INT_Pin */
  GPIO_InitStruct.Pin = USB_OTGHS_OVCR_INT_Pin;
 8000e9a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000e9e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_OTGHS_OVCR_INT_GPIO_Port, &GPIO_InitStruct);
 8000ea8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000eac:	4619      	mov	r1, r3
 8000eae:	4808      	ldr	r0, [pc, #32]	; (8000ed0 <MX_GPIO_Init+0x620>)
 8000eb0:	f000 fe4c 	bl	8001b4c <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_A4_Pin ARD_A5_Pin ARD_A2_Pin */
  GPIO_InitStruct.Pin = ARD_A4_Pin|ARD_A5_Pin|ARD_A2_Pin;
 8000eb4:	2313      	movs	r3, #19
 8000eb6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000eb8:	2303      	movs	r3, #3
 8000eba:	e00d      	b.n	8000ed8 <MX_GPIO_Init+0x628>
 8000ebc:	40021800 	.word	0x40021800
 8000ec0:	40020c00 	.word	0x40020c00
 8000ec4:	40020800 	.word	0x40020800
 8000ec8:	40020000 	.word	0x40020000
 8000ecc:	40022000 	.word	0x40022000
 8000ed0:	40021c00 	.word	0x40021c00
 8000ed4:	40021400 	.word	0x40021400
 8000ed8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eda:	2300      	movs	r3, #0
 8000edc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ede:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ee2:	4619      	mov	r1, r3
 8000ee4:	485f      	ldr	r0, [pc, #380]	; (8001064 <MX_GPIO_Init+0x7b4>)
 8000ee6:	f000 fe31 	bl	8001b4c <HAL_GPIO_Init>

  /*Configure GPIO pins : STMOD_SPI2_MISOs_Pin STMOD_SPI2_MOSIs_Pin */
  GPIO_InitStruct.Pin = STMOD_SPI2_MISOs_Pin|STMOD_SPI2_MOSIs_Pin;
 8000eea:	230c      	movs	r3, #12
 8000eec:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eee:	2302      	movs	r3, #2
 8000ef0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ef6:	2303      	movs	r3, #3
 8000ef8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000efa:	2305      	movs	r3, #5
 8000efc:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000efe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f02:	4619      	mov	r1, r3
 8000f04:	4857      	ldr	r0, [pc, #348]	; (8001064 <MX_GPIO_Init+0x7b4>)
 8000f06:	f000 fe21 	bl	8001b4c <HAL_GPIO_Init>

  /*Configure GPIO pin : QSPI_CLK_Pin */
  GPIO_InitStruct.Pin = QSPI_CLK_Pin;
 8000f0a:	2304      	movs	r3, #4
 8000f0c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f0e:	2302      	movs	r3, #2
 8000f10:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f12:	2300      	movs	r3, #0
 8000f14:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f16:	2303      	movs	r3, #3
 8000f18:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8000f1a:	2309      	movs	r3, #9
 8000f1c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(QSPI_CLK_GPIO_Port, &GPIO_InitStruct);
 8000f1e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f22:	4619      	mov	r1, r3
 8000f24:	4850      	ldr	r0, [pc, #320]	; (8001068 <MX_GPIO_Init+0x7b8>)
 8000f26:	f000 fe11 	bl	8001b4c <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D9_TIM12_CH1_Pin */
  GPIO_InitStruct.Pin = ARD_D9_TIM12_CH1_Pin;
 8000f2a:	2340      	movs	r3, #64	; 0x40
 8000f2c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f2e:	2302      	movs	r3, #2
 8000f30:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f32:	2300      	movs	r3, #0
 8000f34:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f36:	2300      	movs	r3, #0
 8000f38:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8000f3a:	2309      	movs	r3, #9
 8000f3c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ARD_D9_TIM12_CH1_GPIO_Port, &GPIO_InitStruct);
 8000f3e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f42:	4619      	mov	r1, r3
 8000f44:	4849      	ldr	r0, [pc, #292]	; (800106c <MX_GPIO_Init+0x7bc>)
 8000f46:	f000 fe01 	bl	8001b4c <HAL_GPIO_Init>

  /*Configure GPIO pin : CTP_SDA_Pin */
  GPIO_InitStruct.Pin = CTP_SDA_Pin;
 8000f4a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000f4e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000f50:	2312      	movs	r3, #18
 8000f52:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f54:	2300      	movs	r3, #0
 8000f56:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f58:	2303      	movs	r3, #3
 8000f5a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000f5c:	2304      	movs	r3, #4
 8000f5e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(CTP_SDA_GPIO_Port, &GPIO_InitStruct);
 8000f60:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f64:	4619      	mov	r1, r3
 8000f66:	4841      	ldr	r0, [pc, #260]	; (800106c <MX_GPIO_Init+0x7bc>)
 8000f68:	f000 fdf0 	bl	8001b4c <HAL_GPIO_Init>

  /*Configure GPIO pin : QSPI_D3_Pin */
  GPIO_InitStruct.Pin = QSPI_D3_Pin;
 8000f6c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000f70:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f72:	2302      	movs	r3, #2
 8000f74:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f76:	2300      	movs	r3, #0
 8000f78:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f7a:	2303      	movs	r3, #3
 8000f7c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8000f7e:	2309      	movs	r3, #9
 8000f80:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(QSPI_D3_GPIO_Port, &GPIO_InitStruct);
 8000f82:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f86:	4619      	mov	r1, r3
 8000f88:	4839      	ldr	r0, [pc, #228]	; (8001070 <MX_GPIO_Init+0x7c0>)
 8000f8a:	f000 fddf 	bl	8001b4c <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_A1_Pin ARD_A0_Pin */
  GPIO_InitStruct.Pin = ARD_A1_Pin|ARD_A0_Pin;
 8000f8e:	2350      	movs	r3, #80	; 0x50
 8000f90:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f92:	2303      	movs	r3, #3
 8000f94:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f96:	2300      	movs	r3, #0
 8000f98:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f9a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f9e:	4619      	mov	r1, r3
 8000fa0:	4834      	ldr	r0, [pc, #208]	; (8001074 <MX_GPIO_Init+0x7c4>)
 8000fa2:	f000 fdd3 	bl	8001b4c <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D1_USART2_TX_Pin ARD_D0_USART2_RX_Pin */
  GPIO_InitStruct.Pin = ARD_D1_USART2_TX_Pin|ARD_D0_USART2_RX_Pin;
 8000fa6:	230c      	movs	r3, #12
 8000fa8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000faa:	2302      	movs	r3, #2
 8000fac:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fae:	2300      	movs	r3, #0
 8000fb0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fb2:	2303      	movs	r3, #3
 8000fb4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000fb6:	2307      	movs	r3, #7
 8000fb8:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fbe:	4619      	mov	r1, r3
 8000fc0:	482c      	ldr	r0, [pc, #176]	; (8001074 <MX_GPIO_Init+0x7c4>)
 8000fc2:	f000 fdc3 	bl	8001b4c <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D13_SPI1_SCK_Pin */
  GPIO_InitStruct.Pin = ARD_D13_SPI1_SCK_Pin;
 8000fc6:	2320      	movs	r3, #32
 8000fc8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fca:	2302      	movs	r3, #2
 8000fcc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fce:	2300      	movs	r3, #0
 8000fd0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fd2:	2303      	movs	r3, #3
 8000fd4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000fd6:	2305      	movs	r3, #5
 8000fd8:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ARD_D13_SPI1_SCK_GPIO_Port, &GPIO_InitStruct);
 8000fda:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fde:	4619      	mov	r1, r3
 8000fe0:	4824      	ldr	r0, [pc, #144]	; (8001074 <MX_GPIO_Init+0x7c4>)
 8000fe2:	f000 fdb3 	bl	8001b4c <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_HS_ID_Pin SYS_LD_USER2_Pin */
  GPIO_InitStruct.Pin = USB_OTG_HS_ID_Pin|SYS_LD_USER2_Pin;
 8000fe6:	f241 0302 	movw	r3, #4098	; 0x1002
 8000fea:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fec:	2301      	movs	r3, #1
 8000fee:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ff8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ffc:	4619      	mov	r1, r3
 8000ffe:	481a      	ldr	r0, [pc, #104]	; (8001068 <MX_GPIO_Init+0x7b8>)
 8001000:	f000 fda4 	bl	8001b4c <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_HS_VBUS_Pin USB_OTGFS_OVCR_INT_Pin */
  GPIO_InitStruct.Pin = USB_OTG_HS_VBUS_Pin|USB_OTGFS_OVCR_INT_Pin;
 8001004:	f44f 5310 	mov.w	r3, #9216	; 0x2400
 8001008:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800100a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800100e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001010:	2300      	movs	r3, #0
 8001012:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001014:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001018:	4619      	mov	r1, r3
 800101a:	4813      	ldr	r0, [pc, #76]	; (8001068 <MX_GPIO_Init+0x7b8>)
 800101c:	f000 fd96 	bl	8001b4c <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D5_STMOD_TIM3_CH3_Pin */
  GPIO_InitStruct.Pin = ARD_D5_STMOD_TIM3_CH3_Pin;
 8001020:	2301      	movs	r3, #1
 8001022:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001024:	2302      	movs	r3, #2
 8001026:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001028:	2300      	movs	r3, #0
 800102a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800102c:	2300      	movs	r3, #0
 800102e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001030:	2302      	movs	r3, #2
 8001032:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ARD_D5_STMOD_TIM3_CH3_GPIO_Port, &GPIO_InitStruct);
 8001034:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001038:	4619      	mov	r1, r3
 800103a:	480b      	ldr	r0, [pc, #44]	; (8001068 <MX_GPIO_Init+0x7b8>)
 800103c:	f000 fd86 	bl	8001b4c <HAL_GPIO_Init>

  /*Configure GPIO pin : PMOD_RESET_Pin */
  GPIO_InitStruct.Pin = PMOD_RESET_Pin;
 8001040:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001044:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001046:	2300      	movs	r3, #0
 8001048:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800104a:	2300      	movs	r3, #0
 800104c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PMOD_RESET_GPIO_Port, &GPIO_InitStruct);
 800104e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001052:	4619      	mov	r1, r3
 8001054:	4808      	ldr	r0, [pc, #32]	; (8001078 <MX_GPIO_Init+0x7c8>)
 8001056:	f000 fd79 	bl	8001b4c <HAL_GPIO_Init>

}
 800105a:	bf00      	nop
 800105c:	3738      	adds	r7, #56	; 0x38
 800105e:	46bd      	mov	sp, r7
 8001060:	bd80      	pop	{r7, pc}
 8001062:	bf00      	nop
 8001064:	40020800 	.word	0x40020800
 8001068:	40020400 	.word	0x40020400
 800106c:	40021c00 	.word	0x40021c00
 8001070:	40020c00 	.word	0x40020c00
 8001074:	40020000 	.word	0x40020000
 8001078:	40021400 	.word	0x40021400

0800107c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800107c:	b480      	push	{r7}
 800107e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001080:	b672      	cpsid	i
}
 8001082:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001084:	e7fe      	b.n	8001084 <Error_Handler+0x8>
	...

08001088 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001088:	b480      	push	{r7}
 800108a:	b083      	sub	sp, #12
 800108c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800108e:	4b0f      	ldr	r3, [pc, #60]	; (80010cc <HAL_MspInit+0x44>)
 8001090:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001092:	4a0e      	ldr	r2, [pc, #56]	; (80010cc <HAL_MspInit+0x44>)
 8001094:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001098:	6413      	str	r3, [r2, #64]	; 0x40
 800109a:	4b0c      	ldr	r3, [pc, #48]	; (80010cc <HAL_MspInit+0x44>)
 800109c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800109e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010a2:	607b      	str	r3, [r7, #4]
 80010a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010a6:	4b09      	ldr	r3, [pc, #36]	; (80010cc <HAL_MspInit+0x44>)
 80010a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010aa:	4a08      	ldr	r2, [pc, #32]	; (80010cc <HAL_MspInit+0x44>)
 80010ac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010b0:	6453      	str	r3, [r2, #68]	; 0x44
 80010b2:	4b06      	ldr	r3, [pc, #24]	; (80010cc <HAL_MspInit+0x44>)
 80010b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010ba:	603b      	str	r3, [r7, #0]
 80010bc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80010be:	bf00      	nop
 80010c0:	370c      	adds	r7, #12
 80010c2:	46bd      	mov	sp, r7
 80010c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c8:	4770      	bx	lr
 80010ca:	bf00      	nop
 80010cc:	40023800 	.word	0x40023800

080010d0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b08a      	sub	sp, #40	; 0x28
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010d8:	f107 0314 	add.w	r3, r7, #20
 80010dc:	2200      	movs	r2, #0
 80010de:	601a      	str	r2, [r3, #0]
 80010e0:	605a      	str	r2, [r3, #4]
 80010e2:	609a      	str	r2, [r3, #8]
 80010e4:	60da      	str	r2, [r3, #12]
 80010e6:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM2)
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80010f0:	f040 8085 	bne.w	80011fe <HAL_TIM_Base_MspInit+0x12e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80010f4:	4b44      	ldr	r3, [pc, #272]	; (8001208 <HAL_TIM_Base_MspInit+0x138>)
 80010f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010f8:	4a43      	ldr	r2, [pc, #268]	; (8001208 <HAL_TIM_Base_MspInit+0x138>)
 80010fa:	f043 0301 	orr.w	r3, r3, #1
 80010fe:	6413      	str	r3, [r2, #64]	; 0x40
 8001100:	4b41      	ldr	r3, [pc, #260]	; (8001208 <HAL_TIM_Base_MspInit+0x138>)
 8001102:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001104:	f003 0301 	and.w	r3, r3, #1
 8001108:	613b      	str	r3, [r7, #16]
 800110a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800110c:	4b3e      	ldr	r3, [pc, #248]	; (8001208 <HAL_TIM_Base_MspInit+0x138>)
 800110e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001110:	4a3d      	ldr	r2, [pc, #244]	; (8001208 <HAL_TIM_Base_MspInit+0x138>)
 8001112:	f043 0301 	orr.w	r3, r3, #1
 8001116:	6313      	str	r3, [r2, #48]	; 0x30
 8001118:	4b3b      	ldr	r3, [pc, #236]	; (8001208 <HAL_TIM_Base_MspInit+0x138>)
 800111a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800111c:	f003 0301 	and.w	r3, r3, #1
 8001120:	60fb      	str	r3, [r7, #12]
 8001122:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001124:	4b38      	ldr	r3, [pc, #224]	; (8001208 <HAL_TIM_Base_MspInit+0x138>)
 8001126:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001128:	4a37      	ldr	r2, [pc, #220]	; (8001208 <HAL_TIM_Base_MspInit+0x138>)
 800112a:	f043 0302 	orr.w	r3, r3, #2
 800112e:	6313      	str	r3, [r2, #48]	; 0x30
 8001130:	4b35      	ldr	r3, [pc, #212]	; (8001208 <HAL_TIM_Base_MspInit+0x138>)
 8001132:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001134:	f003 0302 	and.w	r3, r3, #2
 8001138:	60bb      	str	r3, [r7, #8]
 800113a:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    PB11     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = STMOD_TIM2_CH1_2_ETR_Pin|ARD_D10_TIM2_CH2_SPI1_NSS_Pin;
 800113c:	f248 0302 	movw	r3, #32770	; 0x8002
 8001140:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001142:	2302      	movs	r3, #2
 8001144:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001146:	2300      	movs	r3, #0
 8001148:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800114a:	2300      	movs	r3, #0
 800114c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800114e:	2301      	movs	r3, #1
 8001150:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001152:	f107 0314 	add.w	r3, r7, #20
 8001156:	4619      	mov	r1, r3
 8001158:	482c      	ldr	r0, [pc, #176]	; (800120c <HAL_TIM_Base_MspInit+0x13c>)
 800115a:	f000 fcf7 	bl	8001b4c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800115e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001162:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001164:	2302      	movs	r3, #2
 8001166:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001168:	2300      	movs	r3, #0
 800116a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800116c:	2300      	movs	r3, #0
 800116e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001170:	2301      	movs	r3, #1
 8001172:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001174:	f107 0314 	add.w	r3, r7, #20
 8001178:	4619      	mov	r1, r3
 800117a:	4825      	ldr	r0, [pc, #148]	; (8001210 <HAL_TIM_Base_MspInit+0x140>)
 800117c:	f000 fce6 	bl	8001b4c <HAL_GPIO_Init>

    /* TIM2 DMA Init */
    /* TIM2_UP_CH4 Init */
    hdma_tim2_up_ch4.Instance = DMA1_Stream7;
 8001180:	4b24      	ldr	r3, [pc, #144]	; (8001214 <HAL_TIM_Base_MspInit+0x144>)
 8001182:	4a25      	ldr	r2, [pc, #148]	; (8001218 <HAL_TIM_Base_MspInit+0x148>)
 8001184:	601a      	str	r2, [r3, #0]
    hdma_tim2_up_ch4.Init.Channel = DMA_CHANNEL_3;
 8001186:	4b23      	ldr	r3, [pc, #140]	; (8001214 <HAL_TIM_Base_MspInit+0x144>)
 8001188:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 800118c:	605a      	str	r2, [r3, #4]
    hdma_tim2_up_ch4.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800118e:	4b21      	ldr	r3, [pc, #132]	; (8001214 <HAL_TIM_Base_MspInit+0x144>)
 8001190:	2200      	movs	r2, #0
 8001192:	609a      	str	r2, [r3, #8]
    hdma_tim2_up_ch4.Init.PeriphInc = DMA_PINC_DISABLE;
 8001194:	4b1f      	ldr	r3, [pc, #124]	; (8001214 <HAL_TIM_Base_MspInit+0x144>)
 8001196:	2200      	movs	r2, #0
 8001198:	60da      	str	r2, [r3, #12]
    hdma_tim2_up_ch4.Init.MemInc = DMA_MINC_ENABLE;
 800119a:	4b1e      	ldr	r3, [pc, #120]	; (8001214 <HAL_TIM_Base_MspInit+0x144>)
 800119c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80011a0:	611a      	str	r2, [r3, #16]
    hdma_tim2_up_ch4.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80011a2:	4b1c      	ldr	r3, [pc, #112]	; (8001214 <HAL_TIM_Base_MspInit+0x144>)
 80011a4:	2200      	movs	r2, #0
 80011a6:	615a      	str	r2, [r3, #20]
    hdma_tim2_up_ch4.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80011a8:	4b1a      	ldr	r3, [pc, #104]	; (8001214 <HAL_TIM_Base_MspInit+0x144>)
 80011aa:	2200      	movs	r2, #0
 80011ac:	619a      	str	r2, [r3, #24]
    hdma_tim2_up_ch4.Init.Mode = DMA_CIRCULAR;
 80011ae:	4b19      	ldr	r3, [pc, #100]	; (8001214 <HAL_TIM_Base_MspInit+0x144>)
 80011b0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80011b4:	61da      	str	r2, [r3, #28]
    hdma_tim2_up_ch4.Init.Priority = DMA_PRIORITY_LOW;
 80011b6:	4b17      	ldr	r3, [pc, #92]	; (8001214 <HAL_TIM_Base_MspInit+0x144>)
 80011b8:	2200      	movs	r2, #0
 80011ba:	621a      	str	r2, [r3, #32]
    hdma_tim2_up_ch4.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80011bc:	4b15      	ldr	r3, [pc, #84]	; (8001214 <HAL_TIM_Base_MspInit+0x144>)
 80011be:	2204      	movs	r2, #4
 80011c0:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_tim2_up_ch4.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80011c2:	4b14      	ldr	r3, [pc, #80]	; (8001214 <HAL_TIM_Base_MspInit+0x144>)
 80011c4:	2203      	movs	r2, #3
 80011c6:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_tim2_up_ch4.Init.MemBurst = DMA_MBURST_INC4;
 80011c8:	4b12      	ldr	r3, [pc, #72]	; (8001214 <HAL_TIM_Base_MspInit+0x144>)
 80011ca:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80011ce:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_tim2_up_ch4.Init.PeriphBurst = DMA_PBURST_SINGLE;
 80011d0:	4b10      	ldr	r3, [pc, #64]	; (8001214 <HAL_TIM_Base_MspInit+0x144>)
 80011d2:	2200      	movs	r2, #0
 80011d4:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_tim2_up_ch4) != HAL_OK)
 80011d6:	480f      	ldr	r0, [pc, #60]	; (8001214 <HAL_TIM_Base_MspInit+0x144>)
 80011d8:	f000 faca 	bl	8001770 <HAL_DMA_Init>
 80011dc:	4603      	mov	r3, r0
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d001      	beq.n	80011e6 <HAL_TIM_Base_MspInit+0x116>
    {
      Error_Handler();
 80011e2:	f7ff ff4b 	bl	800107c <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one stream to perform all the requested DMAs. */
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_UPDATE],hdma_tim2_up_ch4);
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	4a0a      	ldr	r2, [pc, #40]	; (8001214 <HAL_TIM_Base_MspInit+0x144>)
 80011ea:	621a      	str	r2, [r3, #32]
 80011ec:	4a09      	ldr	r2, [pc, #36]	; (8001214 <HAL_TIM_Base_MspInit+0x144>)
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC4],hdma_tim2_up_ch4);
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	4a07      	ldr	r2, [pc, #28]	; (8001214 <HAL_TIM_Base_MspInit+0x144>)
 80011f6:	631a      	str	r2, [r3, #48]	; 0x30
 80011f8:	4a06      	ldr	r2, [pc, #24]	; (8001214 <HAL_TIM_Base_MspInit+0x144>)
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80011fe:	bf00      	nop
 8001200:	3728      	adds	r7, #40	; 0x28
 8001202:	46bd      	mov	sp, r7
 8001204:	bd80      	pop	{r7, pc}
 8001206:	bf00      	nop
 8001208:	40023800 	.word	0x40023800
 800120c:	40020000 	.word	0x40020000
 8001210:	40020400 	.word	0x40020400
 8001214:	200121b8 	.word	0x200121b8
 8001218:	400260b8 	.word	0x400260b8

0800121c <Handle_DMA>:
uint16_t *addr = &addr2;

#pragma GCC optimize ("O3")
void Handle_DMA(DMA_HandleTypeDef *hdma) {
    /* calculate DMA base and stream number */
    *regs = (DMA_Base_Registers*) hdma->StreamBaseAddress;
 800121c:	4a2c      	ldr	r2, [pc, #176]	; (80012d0 <Handle_DMA+0xb4>)
    *tmpisr = (*regs)->ISR;
 800121e:	4b2d      	ldr	r3, [pc, #180]	; (80012d4 <Handle_DMA+0xb8>)
void Handle_DMA(DMA_HandleTypeDef *hdma) {
 8001220:	b4f0      	push	{r4, r5, r6, r7}
    *regs = (DMA_Base_Registers*) hdma->StreamBaseAddress;
 8001222:	6817      	ldr	r7, [r2, #0]
    /* Half Transfer Complete Interrupt management ******************************/
    if (((*tmpisr) & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET) {
 8001224:	2410      	movs	r4, #16
    *regs = (DMA_Base_Registers*) hdma->StreamBaseAddress;
 8001226:	6d82      	ldr	r2, [r0, #88]	; 0x58
    *tmpisr = (*regs)->ISR;
 8001228:	f8d3 c000 	ldr.w	ip, [r3]
 800122c:	6813      	ldr	r3, [r2, #0]
    *regs = (DMA_Base_Registers*) hdma->StreamBaseAddress;
 800122e:	603a      	str	r2, [r7, #0]
    *tmpisr = (*regs)->ISR;
 8001230:	f8cc 3000 	str.w	r3, [ip]
    if (((*tmpisr) & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET) {
 8001234:	6dc1      	ldr	r1, [r0, #92]	; 0x5c
 8001236:	408c      	lsls	r4, r1
 8001238:	4223      	tst	r3, r4
 800123a:	d021      	beq.n	8001280 <Handle_DMA+0x64>
        if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET) {
 800123c:	6805      	ldr	r5, [r0, #0]
 800123e:	682d      	ldr	r5, [r5, #0]
 8001240:	072d      	lsls	r5, r5, #28
 8001242:	d51d      	bpl.n	8001280 <Handle_DMA+0x64>
            //HAL_GPIO_WritePin(LOWER_GPIO_Port, LOWER_Pin, 1);
            /* Clear the half transfer complete flag */
            (*regs)->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
            for ((*i) = 0; (*i) < DMA_LEN / 2; (*i) += 2) {
 8001244:	4b24      	ldr	r3, [pc, #144]	; (80012d8 <Handle_DMA+0xbc>)
 8001246:	2500      	movs	r5, #0
            (*regs)->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001248:	6094      	str	r4, [r2, #8]
            for ((*i) = 0; (*i) < DMA_LEN / 2; (*i) += 2) {
 800124a:	681e      	ldr	r6, [r3, #0]
 800124c:	462b      	mov	r3, r5
 800124e:	4923      	ldr	r1, [pc, #140]	; (80012dc <Handle_DMA+0xc0>)
 8001250:	4c23      	ldr	r4, [pc, #140]	; (80012e0 <Handle_DMA+0xc4>)
 8001252:	6035      	str	r5, [r6, #0]
                out_buf[*i / 2] = (dma_buf[*i] & 0xf0)
                        | (dma_buf[*i + 1] & 0x0f);
 8001254:	1c5d      	adds	r5, r3, #1
                out_buf[*i / 2] = (dma_buf[*i] & 0xf0)
 8001256:	5cca      	ldrb	r2, [r1, r3]
 8001258:	085b      	lsrs	r3, r3, #1
                        | (dma_buf[*i + 1] & 0x0f);
 800125a:	5d4d      	ldrb	r5, [r1, r5]
                out_buf[*i / 2] = (dma_buf[*i] & 0xf0)
 800125c:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
                        | (dma_buf[*i + 1] & 0x0f);
 8001260:	f005 050f 	and.w	r5, r5, #15
 8001264:	432a      	orrs	r2, r5
                out_buf[*i / 2] = (dma_buf[*i] & 0xf0)
 8001266:	54e2      	strb	r2, [r4, r3]
            for ((*i) = 0; (*i) < DMA_LEN / 2; (*i) += 2) {
 8001268:	6833      	ldr	r3, [r6, #0]
 800126a:	3302      	adds	r3, #2
 800126c:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8001270:	6033      	str	r3, [r6, #0]
 8001272:	d3ef      	bcc.n	8001254 <Handle_DMA+0x38>
            }
            lower_data_available = 1;
 8001274:	4b1b      	ldr	r3, [pc, #108]	; (80012e4 <Handle_DMA+0xc8>)
 8001276:	2201      	movs	r2, #1
 8001278:	6dc1      	ldr	r1, [r0, #92]	; 0x5c
 800127a:	701a      	strb	r2, [r3, #0]
 800127c:	f8dc 3000 	ldr.w	r3, [ip]
            //HAL_GPIO_WritePin(LOWER_GPIO_Port, LOWER_Pin, 0);
        }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if (((*tmpisr) & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET) {
 8001280:	2220      	movs	r2, #32
 8001282:	408a      	lsls	r2, r1
 8001284:	421a      	tst	r2, r3
 8001286:	d020      	beq.n	80012ca <Handle_DMA+0xae>
        if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET) {
 8001288:	6803      	ldr	r3, [r0, #0]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	06db      	lsls	r3, r3, #27
 800128e:	d51c      	bpl.n	80012ca <Handle_DMA+0xae>
            //HAL_GPIO_WritePin(UPPER_GPIO_Port, UPPER_Pin, 1);
            /* Clear the transfer complete flag */
            (*regs)->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001290:	683c      	ldr	r4, [r7, #0]
            for ((*i) = DMA_LEN / 2; (*i) < DMA_LEN; (*i) += 2) {
 8001292:	f44f 40c0 	mov.w	r0, #24576	; 0x6000
 8001296:	4b10      	ldr	r3, [pc, #64]	; (80012d8 <Handle_DMA+0xbc>)
            (*regs)->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001298:	60a2      	str	r2, [r4, #8]
            for ((*i) = DMA_LEN / 2; (*i) < DMA_LEN; (*i) += 2) {
 800129a:	681d      	ldr	r5, [r3, #0]
 800129c:	4603      	mov	r3, r0
 800129e:	490f      	ldr	r1, [pc, #60]	; (80012dc <Handle_DMA+0xc0>)
 80012a0:	4c0f      	ldr	r4, [pc, #60]	; (80012e0 <Handle_DMA+0xc4>)
 80012a2:	6028      	str	r0, [r5, #0]
                out_buf[*i / 2] = (dma_buf[*i] & 0xf0)
                        | (dma_buf[*i + 1] & 0x0f);
 80012a4:	1c58      	adds	r0, r3, #1
                out_buf[*i / 2] = (dma_buf[*i] & 0xf0)
 80012a6:	5cca      	ldrb	r2, [r1, r3]
 80012a8:	085b      	lsrs	r3, r3, #1
                        | (dma_buf[*i + 1] & 0x0f);
 80012aa:	5c08      	ldrb	r0, [r1, r0]
                out_buf[*i / 2] = (dma_buf[*i] & 0xf0)
 80012ac:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
                        | (dma_buf[*i + 1] & 0x0f);
 80012b0:	f000 000f 	and.w	r0, r0, #15
 80012b4:	4302      	orrs	r2, r0
                out_buf[*i / 2] = (dma_buf[*i] & 0xf0)
 80012b6:	54e2      	strb	r2, [r4, r3]
            for ((*i) = DMA_LEN / 2; (*i) < DMA_LEN; (*i) += 2) {
 80012b8:	682b      	ldr	r3, [r5, #0]
 80012ba:	3302      	adds	r3, #2
 80012bc:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80012c0:	602b      	str	r3, [r5, #0]
 80012c2:	d3ef      	bcc.n	80012a4 <Handle_DMA+0x88>
            }
            upper_data_available = 1;
 80012c4:	4b08      	ldr	r3, [pc, #32]	; (80012e8 <Handle_DMA+0xcc>)
 80012c6:	2201      	movs	r2, #1
 80012c8:	701a      	strb	r2, [r3, #0]
            //HAL_GPIO_WritePin(UPPER_GPIO_Port, UPPER_Pin, 0);
        }
    }
}
 80012ca:	bcf0      	pop	{r4, r5, r6, r7}
 80012cc:	4770      	bx	lr
 80012ce:	bf00      	nop
 80012d0:	20000004 	.word	0x20000004
 80012d4:	20000008 	.word	0x20000008
 80012d8:	20000000 	.word	0x20000000
 80012dc:	200001a4 	.word	0x200001a4
 80012e0:	2000c1a4 	.word	0x2000c1a4
 80012e4:	200121a4 	.word	0x200121a4
 80012e8:	200121a5 	.word	0x200121a5

080012ec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80012ec:	e7fe      	b.n	80012ec <NMI_Handler>
 80012ee:	bf00      	nop

080012f0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80012f0:	e7fe      	b.n	80012f0 <HardFault_Handler>
 80012f2:	bf00      	nop

080012f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80012f4:	e7fe      	b.n	80012f4 <MemManage_Handler>
 80012f6:	bf00      	nop

080012f8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80012f8:	e7fe      	b.n	80012f8 <BusFault_Handler>
 80012fa:	bf00      	nop

080012fc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80012fc:	e7fe      	b.n	80012fc <UsageFault_Handler>
 80012fe:	bf00      	nop

08001300 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001300:	4770      	bx	lr
 8001302:	bf00      	nop

08001304 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001304:	4770      	bx	lr
 8001306:	bf00      	nop

08001308 <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001308:	4770      	bx	lr
 800130a:	bf00      	nop

0800130c <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800130c:	f000 b8da 	b.w	80014c4 <HAL_IncTick>

08001310 <DMA1_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA1 stream7 global interrupt.
  */
void DMA1_Stream7_IRQHandler(void)
{
 8001310:	b510      	push	{r4, lr}
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */
	HAL_GPIO_WritePin(USAGE_GPIO_Port, USAGE_Pin, SET);
 8001312:	4c08      	ldr	r4, [pc, #32]	; (8001334 <DMA1_Stream7_IRQHandler+0x24>)
 8001314:	2201      	movs	r2, #1
 8001316:	2104      	movs	r1, #4
 8001318:	4620      	mov	r0, r4
 800131a:	f000 fdb3 	bl	8001e84 <HAL_GPIO_WritePin>
	Handle_DMA(&hdma_tim2_up_ch4);
 800131e:	4806      	ldr	r0, [pc, #24]	; (8001338 <DMA1_Stream7_IRQHandler+0x28>)
 8001320:	f7ff ff7c 	bl	800121c <Handle_DMA>
	HAL_GPIO_WritePin(USAGE_GPIO_Port, USAGE_Pin, RESET);
 8001324:	4620      	mov	r0, r4
 8001326:	2200      	movs	r2, #0
 8001328:	2104      	movs	r1, #4
  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_up_ch4);
  /* USER CODE BEGIN DMA1_Stream7_IRQn 1 */

  /* USER CODE END DMA1_Stream7_IRQn 1 */
}
 800132a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	HAL_GPIO_WritePin(USAGE_GPIO_Port, USAGE_Pin, RESET);
 800132e:	f000 bda9 	b.w	8001e84 <HAL_GPIO_WritePin>
 8001332:	bf00      	nop
 8001334:	40021c00 	.word	0x40021c00
 8001338:	200121b8 	.word	0x200121b8

0800133c <OTG_HS_IRQHandler>:
void OTG_HS_IRQHandler(void)
{
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_HS);
 800133c:	4801      	ldr	r0, [pc, #4]	; (8001344 <OTG_HS_IRQHandler+0x8>)
 800133e:	f000 bf00 	b.w	8002142 <HAL_PCD_IRQHandler>
 8001342:	bf00      	nop
 8001344:	20013748 	.word	0x20013748

08001348 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	b086      	sub	sp, #24
 800134c:	af00      	add	r7, sp, #0
 800134e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001350:	4a14      	ldr	r2, [pc, #80]	; (80013a4 <_sbrk+0x5c>)
 8001352:	4b15      	ldr	r3, [pc, #84]	; (80013a8 <_sbrk+0x60>)
 8001354:	1ad3      	subs	r3, r2, r3
 8001356:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001358:	697b      	ldr	r3, [r7, #20]
 800135a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800135c:	4b13      	ldr	r3, [pc, #76]	; (80013ac <_sbrk+0x64>)
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	2b00      	cmp	r3, #0
 8001362:	d102      	bne.n	800136a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001364:	4b11      	ldr	r3, [pc, #68]	; (80013ac <_sbrk+0x64>)
 8001366:	4a12      	ldr	r2, [pc, #72]	; (80013b0 <_sbrk+0x68>)
 8001368:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800136a:	4b10      	ldr	r3, [pc, #64]	; (80013ac <_sbrk+0x64>)
 800136c:	681a      	ldr	r2, [r3, #0]
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	4413      	add	r3, r2
 8001372:	693a      	ldr	r2, [r7, #16]
 8001374:	429a      	cmp	r2, r3
 8001376:	d207      	bcs.n	8001388 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001378:	f007 fd2c 	bl	8008dd4 <__errno>
 800137c:	4603      	mov	r3, r0
 800137e:	220c      	movs	r2, #12
 8001380:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001382:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001386:	e009      	b.n	800139c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001388:	4b08      	ldr	r3, [pc, #32]	; (80013ac <_sbrk+0x64>)
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800138e:	4b07      	ldr	r3, [pc, #28]	; (80013ac <_sbrk+0x64>)
 8001390:	681a      	ldr	r2, [r3, #0]
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	4413      	add	r3, r2
 8001396:	4a05      	ldr	r2, [pc, #20]	; (80013ac <_sbrk+0x64>)
 8001398:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800139a:	68fb      	ldr	r3, [r7, #12]
}
 800139c:	4618      	mov	r0, r3
 800139e:	3718      	adds	r7, #24
 80013a0:	46bd      	mov	sp, r7
 80013a2:	bd80      	pop	{r7, pc}
 80013a4:	20040000 	.word	0x20040000
 80013a8:	00000400 	.word	0x00000400
 80013ac:	200121a8 	.word	0x200121a8
 80013b0:	20013b60 	.word	0x20013b60

080013b4 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80013b4:	b480      	push	{r7}
 80013b6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80013b8:	4b06      	ldr	r3, [pc, #24]	; (80013d4 <SystemInit+0x20>)
 80013ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80013be:	4a05      	ldr	r2, [pc, #20]	; (80013d4 <SystemInit+0x20>)
 80013c0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80013c4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80013c8:	bf00      	nop
 80013ca:	46bd      	mov	sp, r7
 80013cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d0:	4770      	bx	lr
 80013d2:	bf00      	nop
 80013d4:	e000ed00 	.word	0xe000ed00

080013d8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80013d8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001410 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80013dc:	480d      	ldr	r0, [pc, #52]	; (8001414 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80013de:	490e      	ldr	r1, [pc, #56]	; (8001418 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80013e0:	4a0e      	ldr	r2, [pc, #56]	; (800141c <LoopFillZerobss+0x1e>)
  movs r3, #0
 80013e2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80013e4:	e002      	b.n	80013ec <LoopCopyDataInit>

080013e6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80013e6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80013e8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80013ea:	3304      	adds	r3, #4

080013ec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80013ec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80013ee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80013f0:	d3f9      	bcc.n	80013e6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80013f2:	4a0b      	ldr	r2, [pc, #44]	; (8001420 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80013f4:	4c0b      	ldr	r4, [pc, #44]	; (8001424 <LoopFillZerobss+0x26>)
  movs r3, #0
 80013f6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80013f8:	e001      	b.n	80013fe <LoopFillZerobss>

080013fa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80013fa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80013fc:	3204      	adds	r2, #4

080013fe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80013fe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001400:	d3fb      	bcc.n	80013fa <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001402:	f7ff ffd7 	bl	80013b4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001406:	f007 fceb 	bl	8008de0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800140a:	f7ff f8ef 	bl	80005ec <main>
  bx  lr    
 800140e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001410:	20040000 	.word	0x20040000
  ldr r0, =_sdata
 8001414:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001418:	20000188 	.word	0x20000188
  ldr r2, =_sidata
 800141c:	08009070 	.word	0x08009070
  ldr r2, =_sbss
 8001420:	20000188 	.word	0x20000188
  ldr r4, =_ebss
 8001424:	20013b5c 	.word	0x20013b5c

08001428 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001428:	e7fe      	b.n	8001428 <ADC_IRQHandler>
	...

0800142c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	af00      	add	r7, sp, #0
  /* Configure Instruction cache through ART accelerator */ 
#if (ART_ACCLERATOR_ENABLE != 0)
  __HAL_FLASH_ART_ENABLE();
 8001430:	4b0b      	ldr	r3, [pc, #44]	; (8001460 <HAL_Init+0x34>)
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	4a0a      	ldr	r2, [pc, #40]	; (8001460 <HAL_Init+0x34>)
 8001436:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800143a:	6013      	str	r3, [r2, #0]
#endif /* ART_ACCLERATOR_ENABLE */

  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800143c:	4b08      	ldr	r3, [pc, #32]	; (8001460 <HAL_Init+0x34>)
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	4a07      	ldr	r2, [pc, #28]	; (8001460 <HAL_Init+0x34>)
 8001442:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001446:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001448:	2003      	movs	r0, #3
 800144a:	f000 f94f 	bl	80016ec <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800144e:	2000      	movs	r0, #0
 8001450:	f000 f808 	bl	8001464 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001454:	f7ff fe18 	bl	8001088 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001458:	2300      	movs	r3, #0
}
 800145a:	4618      	mov	r0, r3
 800145c:	bd80      	pop	{r7, pc}
 800145e:	bf00      	nop
 8001460:	40023c00 	.word	0x40023c00

08001464 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	b082      	sub	sp, #8
 8001468:	af00      	add	r7, sp, #0
 800146a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800146c:	4b12      	ldr	r3, [pc, #72]	; (80014b8 <HAL_InitTick+0x54>)
 800146e:	681a      	ldr	r2, [r3, #0]
 8001470:	4b12      	ldr	r3, [pc, #72]	; (80014bc <HAL_InitTick+0x58>)
 8001472:	781b      	ldrb	r3, [r3, #0]
 8001474:	4619      	mov	r1, r3
 8001476:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800147a:	fbb3 f3f1 	udiv	r3, r3, r1
 800147e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001482:	4618      	mov	r0, r3
 8001484:	f000 f967 	bl	8001756 <HAL_SYSTICK_Config>
 8001488:	4603      	mov	r3, r0
 800148a:	2b00      	cmp	r3, #0
 800148c:	d001      	beq.n	8001492 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800148e:	2301      	movs	r3, #1
 8001490:	e00e      	b.n	80014b0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	2b0f      	cmp	r3, #15
 8001496:	d80a      	bhi.n	80014ae <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001498:	2200      	movs	r2, #0
 800149a:	6879      	ldr	r1, [r7, #4]
 800149c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80014a0:	f000 f92f 	bl	8001702 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80014a4:	4a06      	ldr	r2, [pc, #24]	; (80014c0 <HAL_InitTick+0x5c>)
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80014aa:	2300      	movs	r3, #0
 80014ac:	e000      	b.n	80014b0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80014ae:	2301      	movs	r3, #1
}
 80014b0:	4618      	mov	r0, r3
 80014b2:	3708      	adds	r7, #8
 80014b4:	46bd      	mov	sp, r7
 80014b6:	bd80      	pop	{r7, pc}
 80014b8:	2000000c 	.word	0x2000000c
 80014bc:	20000014 	.word	0x20000014
 80014c0:	20000010 	.word	0x20000010

080014c4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80014c4:	b480      	push	{r7}
 80014c6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80014c8:	4b06      	ldr	r3, [pc, #24]	; (80014e4 <HAL_IncTick+0x20>)
 80014ca:	781b      	ldrb	r3, [r3, #0]
 80014cc:	461a      	mov	r2, r3
 80014ce:	4b06      	ldr	r3, [pc, #24]	; (80014e8 <HAL_IncTick+0x24>)
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	4413      	add	r3, r2
 80014d4:	4a04      	ldr	r2, [pc, #16]	; (80014e8 <HAL_IncTick+0x24>)
 80014d6:	6013      	str	r3, [r2, #0]
}
 80014d8:	bf00      	nop
 80014da:	46bd      	mov	sp, r7
 80014dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e0:	4770      	bx	lr
 80014e2:	bf00      	nop
 80014e4:	20000014 	.word	0x20000014
 80014e8:	20012274 	.word	0x20012274

080014ec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80014ec:	b480      	push	{r7}
 80014ee:	af00      	add	r7, sp, #0
  return uwTick;
 80014f0:	4b03      	ldr	r3, [pc, #12]	; (8001500 <HAL_GetTick+0x14>)
 80014f2:	681b      	ldr	r3, [r3, #0]
}
 80014f4:	4618      	mov	r0, r3
 80014f6:	46bd      	mov	sp, r7
 80014f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fc:	4770      	bx	lr
 80014fe:	bf00      	nop
 8001500:	20012274 	.word	0x20012274

08001504 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	b084      	sub	sp, #16
 8001508:	af00      	add	r7, sp, #0
 800150a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800150c:	f7ff ffee 	bl	80014ec <HAL_GetTick>
 8001510:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001516:	68fb      	ldr	r3, [r7, #12]
 8001518:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800151c:	d005      	beq.n	800152a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800151e:	4b0a      	ldr	r3, [pc, #40]	; (8001548 <HAL_Delay+0x44>)
 8001520:	781b      	ldrb	r3, [r3, #0]
 8001522:	461a      	mov	r2, r3
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	4413      	add	r3, r2
 8001528:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800152a:	bf00      	nop
 800152c:	f7ff ffde 	bl	80014ec <HAL_GetTick>
 8001530:	4602      	mov	r2, r0
 8001532:	68bb      	ldr	r3, [r7, #8]
 8001534:	1ad3      	subs	r3, r2, r3
 8001536:	68fa      	ldr	r2, [r7, #12]
 8001538:	429a      	cmp	r2, r3
 800153a:	d8f7      	bhi.n	800152c <HAL_Delay+0x28>
  {
  }
}
 800153c:	bf00      	nop
 800153e:	bf00      	nop
 8001540:	3710      	adds	r7, #16
 8001542:	46bd      	mov	sp, r7
 8001544:	bd80      	pop	{r7, pc}
 8001546:	bf00      	nop
 8001548:	20000014 	.word	0x20000014

0800154c <__NVIC_SetPriorityGrouping>:
{
 800154c:	b480      	push	{r7}
 800154e:	b085      	sub	sp, #20
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	f003 0307 	and.w	r3, r3, #7
 800155a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800155c:	4b0b      	ldr	r3, [pc, #44]	; (800158c <__NVIC_SetPriorityGrouping+0x40>)
 800155e:	68db      	ldr	r3, [r3, #12]
 8001560:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001562:	68ba      	ldr	r2, [r7, #8]
 8001564:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001568:	4013      	ands	r3, r2
 800156a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001570:	68bb      	ldr	r3, [r7, #8]
 8001572:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001574:	4b06      	ldr	r3, [pc, #24]	; (8001590 <__NVIC_SetPriorityGrouping+0x44>)
 8001576:	4313      	orrs	r3, r2
 8001578:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800157a:	4a04      	ldr	r2, [pc, #16]	; (800158c <__NVIC_SetPriorityGrouping+0x40>)
 800157c:	68bb      	ldr	r3, [r7, #8]
 800157e:	60d3      	str	r3, [r2, #12]
}
 8001580:	bf00      	nop
 8001582:	3714      	adds	r7, #20
 8001584:	46bd      	mov	sp, r7
 8001586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158a:	4770      	bx	lr
 800158c:	e000ed00 	.word	0xe000ed00
 8001590:	05fa0000 	.word	0x05fa0000

08001594 <__NVIC_GetPriorityGrouping>:
{
 8001594:	b480      	push	{r7}
 8001596:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001598:	4b04      	ldr	r3, [pc, #16]	; (80015ac <__NVIC_GetPriorityGrouping+0x18>)
 800159a:	68db      	ldr	r3, [r3, #12]
 800159c:	0a1b      	lsrs	r3, r3, #8
 800159e:	f003 0307 	and.w	r3, r3, #7
}
 80015a2:	4618      	mov	r0, r3
 80015a4:	46bd      	mov	sp, r7
 80015a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015aa:	4770      	bx	lr
 80015ac:	e000ed00 	.word	0xe000ed00

080015b0 <__NVIC_EnableIRQ>:
{
 80015b0:	b480      	push	{r7}
 80015b2:	b083      	sub	sp, #12
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	4603      	mov	r3, r0
 80015b8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015be:	2b00      	cmp	r3, #0
 80015c0:	db0b      	blt.n	80015da <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80015c2:	79fb      	ldrb	r3, [r7, #7]
 80015c4:	f003 021f 	and.w	r2, r3, #31
 80015c8:	4907      	ldr	r1, [pc, #28]	; (80015e8 <__NVIC_EnableIRQ+0x38>)
 80015ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015ce:	095b      	lsrs	r3, r3, #5
 80015d0:	2001      	movs	r0, #1
 80015d2:	fa00 f202 	lsl.w	r2, r0, r2
 80015d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80015da:	bf00      	nop
 80015dc:	370c      	adds	r7, #12
 80015de:	46bd      	mov	sp, r7
 80015e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e4:	4770      	bx	lr
 80015e6:	bf00      	nop
 80015e8:	e000e100 	.word	0xe000e100

080015ec <__NVIC_SetPriority>:
{
 80015ec:	b480      	push	{r7}
 80015ee:	b083      	sub	sp, #12
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	4603      	mov	r3, r0
 80015f4:	6039      	str	r1, [r7, #0]
 80015f6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	db0a      	blt.n	8001616 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001600:	683b      	ldr	r3, [r7, #0]
 8001602:	b2da      	uxtb	r2, r3
 8001604:	490c      	ldr	r1, [pc, #48]	; (8001638 <__NVIC_SetPriority+0x4c>)
 8001606:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800160a:	0112      	lsls	r2, r2, #4
 800160c:	b2d2      	uxtb	r2, r2
 800160e:	440b      	add	r3, r1
 8001610:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001614:	e00a      	b.n	800162c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001616:	683b      	ldr	r3, [r7, #0]
 8001618:	b2da      	uxtb	r2, r3
 800161a:	4908      	ldr	r1, [pc, #32]	; (800163c <__NVIC_SetPriority+0x50>)
 800161c:	79fb      	ldrb	r3, [r7, #7]
 800161e:	f003 030f 	and.w	r3, r3, #15
 8001622:	3b04      	subs	r3, #4
 8001624:	0112      	lsls	r2, r2, #4
 8001626:	b2d2      	uxtb	r2, r2
 8001628:	440b      	add	r3, r1
 800162a:	761a      	strb	r2, [r3, #24]
}
 800162c:	bf00      	nop
 800162e:	370c      	adds	r7, #12
 8001630:	46bd      	mov	sp, r7
 8001632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001636:	4770      	bx	lr
 8001638:	e000e100 	.word	0xe000e100
 800163c:	e000ed00 	.word	0xe000ed00

08001640 <NVIC_EncodePriority>:
{
 8001640:	b480      	push	{r7}
 8001642:	b089      	sub	sp, #36	; 0x24
 8001644:	af00      	add	r7, sp, #0
 8001646:	60f8      	str	r0, [r7, #12]
 8001648:	60b9      	str	r1, [r7, #8]
 800164a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	f003 0307 	and.w	r3, r3, #7
 8001652:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001654:	69fb      	ldr	r3, [r7, #28]
 8001656:	f1c3 0307 	rsb	r3, r3, #7
 800165a:	2b04      	cmp	r3, #4
 800165c:	bf28      	it	cs
 800165e:	2304      	movcs	r3, #4
 8001660:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001662:	69fb      	ldr	r3, [r7, #28]
 8001664:	3304      	adds	r3, #4
 8001666:	2b06      	cmp	r3, #6
 8001668:	d902      	bls.n	8001670 <NVIC_EncodePriority+0x30>
 800166a:	69fb      	ldr	r3, [r7, #28]
 800166c:	3b03      	subs	r3, #3
 800166e:	e000      	b.n	8001672 <NVIC_EncodePriority+0x32>
 8001670:	2300      	movs	r3, #0
 8001672:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001674:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001678:	69bb      	ldr	r3, [r7, #24]
 800167a:	fa02 f303 	lsl.w	r3, r2, r3
 800167e:	43da      	mvns	r2, r3
 8001680:	68bb      	ldr	r3, [r7, #8]
 8001682:	401a      	ands	r2, r3
 8001684:	697b      	ldr	r3, [r7, #20]
 8001686:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001688:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800168c:	697b      	ldr	r3, [r7, #20]
 800168e:	fa01 f303 	lsl.w	r3, r1, r3
 8001692:	43d9      	mvns	r1, r3
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001698:	4313      	orrs	r3, r2
}
 800169a:	4618      	mov	r0, r3
 800169c:	3724      	adds	r7, #36	; 0x24
 800169e:	46bd      	mov	sp, r7
 80016a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a4:	4770      	bx	lr
	...

080016a8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b082      	sub	sp, #8
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	3b01      	subs	r3, #1
 80016b4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80016b8:	d301      	bcc.n	80016be <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80016ba:	2301      	movs	r3, #1
 80016bc:	e00f      	b.n	80016de <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80016be:	4a0a      	ldr	r2, [pc, #40]	; (80016e8 <SysTick_Config+0x40>)
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	3b01      	subs	r3, #1
 80016c4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80016c6:	210f      	movs	r1, #15
 80016c8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80016cc:	f7ff ff8e 	bl	80015ec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80016d0:	4b05      	ldr	r3, [pc, #20]	; (80016e8 <SysTick_Config+0x40>)
 80016d2:	2200      	movs	r2, #0
 80016d4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80016d6:	4b04      	ldr	r3, [pc, #16]	; (80016e8 <SysTick_Config+0x40>)
 80016d8:	2207      	movs	r2, #7
 80016da:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80016dc:	2300      	movs	r3, #0
}
 80016de:	4618      	mov	r0, r3
 80016e0:	3708      	adds	r7, #8
 80016e2:	46bd      	mov	sp, r7
 80016e4:	bd80      	pop	{r7, pc}
 80016e6:	bf00      	nop
 80016e8:	e000e010 	.word	0xe000e010

080016ec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b082      	sub	sp, #8
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80016f4:	6878      	ldr	r0, [r7, #4]
 80016f6:	f7ff ff29 	bl	800154c <__NVIC_SetPriorityGrouping>
}
 80016fa:	bf00      	nop
 80016fc:	3708      	adds	r7, #8
 80016fe:	46bd      	mov	sp, r7
 8001700:	bd80      	pop	{r7, pc}

08001702 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001702:	b580      	push	{r7, lr}
 8001704:	b086      	sub	sp, #24
 8001706:	af00      	add	r7, sp, #0
 8001708:	4603      	mov	r3, r0
 800170a:	60b9      	str	r1, [r7, #8]
 800170c:	607a      	str	r2, [r7, #4]
 800170e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001710:	2300      	movs	r3, #0
 8001712:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001714:	f7ff ff3e 	bl	8001594 <__NVIC_GetPriorityGrouping>
 8001718:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800171a:	687a      	ldr	r2, [r7, #4]
 800171c:	68b9      	ldr	r1, [r7, #8]
 800171e:	6978      	ldr	r0, [r7, #20]
 8001720:	f7ff ff8e 	bl	8001640 <NVIC_EncodePriority>
 8001724:	4602      	mov	r2, r0
 8001726:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800172a:	4611      	mov	r1, r2
 800172c:	4618      	mov	r0, r3
 800172e:	f7ff ff5d 	bl	80015ec <__NVIC_SetPriority>
}
 8001732:	bf00      	nop
 8001734:	3718      	adds	r7, #24
 8001736:	46bd      	mov	sp, r7
 8001738:	bd80      	pop	{r7, pc}

0800173a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800173a:	b580      	push	{r7, lr}
 800173c:	b082      	sub	sp, #8
 800173e:	af00      	add	r7, sp, #0
 8001740:	4603      	mov	r3, r0
 8001742:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001744:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001748:	4618      	mov	r0, r3
 800174a:	f7ff ff31 	bl	80015b0 <__NVIC_EnableIRQ>
}
 800174e:	bf00      	nop
 8001750:	3708      	adds	r7, #8
 8001752:	46bd      	mov	sp, r7
 8001754:	bd80      	pop	{r7, pc}

08001756 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001756:	b580      	push	{r7, lr}
 8001758:	b082      	sub	sp, #8
 800175a:	af00      	add	r7, sp, #0
 800175c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800175e:	6878      	ldr	r0, [r7, #4]
 8001760:	f7ff ffa2 	bl	80016a8 <SysTick_Config>
 8001764:	4603      	mov	r3, r0
}
 8001766:	4618      	mov	r0, r3
 8001768:	3708      	adds	r7, #8
 800176a:	46bd      	mov	sp, r7
 800176c:	bd80      	pop	{r7, pc}
	...

08001770 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	b086      	sub	sp, #24
 8001774:	af00      	add	r7, sp, #0
 8001776:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001778:	2300      	movs	r3, #0
 800177a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800177c:	f7ff feb6 	bl	80014ec <HAL_GetTick>
 8001780:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	2b00      	cmp	r3, #0
 8001786:	d101      	bne.n	800178c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001788:	2301      	movs	r3, #1
 800178a:	e099      	b.n	80018c0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	2202      	movs	r2, #2
 8001790:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	2200      	movs	r2, #0
 8001798:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	681a      	ldr	r2, [r3, #0]
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	f022 0201 	bic.w	r2, r2, #1
 80017aa:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80017ac:	e00f      	b.n	80017ce <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80017ae:	f7ff fe9d 	bl	80014ec <HAL_GetTick>
 80017b2:	4602      	mov	r2, r0
 80017b4:	693b      	ldr	r3, [r7, #16]
 80017b6:	1ad3      	subs	r3, r2, r3
 80017b8:	2b05      	cmp	r3, #5
 80017ba:	d908      	bls.n	80017ce <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	2220      	movs	r2, #32
 80017c0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	2203      	movs	r2, #3
 80017c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80017ca:	2303      	movs	r3, #3
 80017cc:	e078      	b.n	80018c0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	f003 0301 	and.w	r3, r3, #1
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d1e8      	bne.n	80017ae <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80017e4:	697a      	ldr	r2, [r7, #20]
 80017e6:	4b38      	ldr	r3, [pc, #224]	; (80018c8 <HAL_DMA_Init+0x158>)
 80017e8:	4013      	ands	r3, r2
 80017ea:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	685a      	ldr	r2, [r3, #4]
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	689b      	ldr	r3, [r3, #8]
 80017f4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80017fa:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	691b      	ldr	r3, [r3, #16]
 8001800:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001806:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	699b      	ldr	r3, [r3, #24]
 800180c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001812:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	6a1b      	ldr	r3, [r3, #32]
 8001818:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800181a:	697a      	ldr	r2, [r7, #20]
 800181c:	4313      	orrs	r3, r2
 800181e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001824:	2b04      	cmp	r3, #4
 8001826:	d107      	bne.n	8001838 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001830:	4313      	orrs	r3, r2
 8001832:	697a      	ldr	r2, [r7, #20]
 8001834:	4313      	orrs	r3, r2
 8001836:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	697a      	ldr	r2, [r7, #20]
 800183e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	695b      	ldr	r3, [r3, #20]
 8001846:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001848:	697b      	ldr	r3, [r7, #20]
 800184a:	f023 0307 	bic.w	r3, r3, #7
 800184e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001854:	697a      	ldr	r2, [r7, #20]
 8001856:	4313      	orrs	r3, r2
 8001858:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800185e:	2b04      	cmp	r3, #4
 8001860:	d117      	bne.n	8001892 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001866:	697a      	ldr	r2, [r7, #20]
 8001868:	4313      	orrs	r3, r2
 800186a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001870:	2b00      	cmp	r3, #0
 8001872:	d00e      	beq.n	8001892 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001874:	6878      	ldr	r0, [r7, #4]
 8001876:	f000 f8ed 	bl	8001a54 <DMA_CheckFifoParam>
 800187a:	4603      	mov	r3, r0
 800187c:	2b00      	cmp	r3, #0
 800187e:	d008      	beq.n	8001892 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	2240      	movs	r2, #64	; 0x40
 8001884:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	2201      	movs	r2, #1
 800188a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800188e:	2301      	movs	r3, #1
 8001890:	e016      	b.n	80018c0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	697a      	ldr	r2, [r7, #20]
 8001898:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800189a:	6878      	ldr	r0, [r7, #4]
 800189c:	f000 f8a4 	bl	80019e8 <DMA_CalcBaseAndBitshift>
 80018a0:	4603      	mov	r3, r0
 80018a2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018a8:	223f      	movs	r2, #63	; 0x3f
 80018aa:	409a      	lsls	r2, r3
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	2200      	movs	r2, #0
 80018b4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	2201      	movs	r2, #1
 80018ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80018be:	2300      	movs	r3, #0
}
 80018c0:	4618      	mov	r0, r3
 80018c2:	3718      	adds	r7, #24
 80018c4:	46bd      	mov	sp, r7
 80018c6:	bd80      	pop	{r7, pc}
 80018c8:	e010803f 	.word	0xe010803f

080018cc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	b086      	sub	sp, #24
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	60f8      	str	r0, [r7, #12]
 80018d4:	60b9      	str	r1, [r7, #8]
 80018d6:	607a      	str	r2, [r7, #4]
 80018d8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80018da:	2300      	movs	r3, #0
 80018dc:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018e2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80018ea:	2b01      	cmp	r3, #1
 80018ec:	d101      	bne.n	80018f2 <HAL_DMA_Start_IT+0x26>
 80018ee:	2302      	movs	r3, #2
 80018f0:	e048      	b.n	8001984 <HAL_DMA_Start_IT+0xb8>
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	2201      	movs	r2, #1
 80018f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001900:	b2db      	uxtb	r3, r3
 8001902:	2b01      	cmp	r3, #1
 8001904:	d137      	bne.n	8001976 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	2202      	movs	r2, #2
 800190a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	2200      	movs	r2, #0
 8001912:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001914:	683b      	ldr	r3, [r7, #0]
 8001916:	687a      	ldr	r2, [r7, #4]
 8001918:	68b9      	ldr	r1, [r7, #8]
 800191a:	68f8      	ldr	r0, [r7, #12]
 800191c:	f000 f836 	bl	800198c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001924:	223f      	movs	r2, #63	; 0x3f
 8001926:	409a      	lsls	r2, r3
 8001928:	693b      	ldr	r3, [r7, #16]
 800192a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	681a      	ldr	r2, [r3, #0]
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	f042 0216 	orr.w	r2, r2, #22
 800193a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	695a      	ldr	r2, [r3, #20]
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800194a:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001950:	2b00      	cmp	r3, #0
 8001952:	d007      	beq.n	8001964 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	681a      	ldr	r2, [r3, #0]
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	f042 0208 	orr.w	r2, r2, #8
 8001962:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	681a      	ldr	r2, [r3, #0]
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	f042 0201 	orr.w	r2, r2, #1
 8001972:	601a      	str	r2, [r3, #0]
 8001974:	e005      	b.n	8001982 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	2200      	movs	r2, #0
 800197a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800197e:	2302      	movs	r3, #2
 8001980:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001982:	7dfb      	ldrb	r3, [r7, #23]
}
 8001984:	4618      	mov	r0, r3
 8001986:	3718      	adds	r7, #24
 8001988:	46bd      	mov	sp, r7
 800198a:	bd80      	pop	{r7, pc}

0800198c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800198c:	b480      	push	{r7}
 800198e:	b085      	sub	sp, #20
 8001990:	af00      	add	r7, sp, #0
 8001992:	60f8      	str	r0, [r7, #12]
 8001994:	60b9      	str	r1, [r7, #8]
 8001996:	607a      	str	r2, [r7, #4]
 8001998:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	681a      	ldr	r2, [r3, #0]
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80019a8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	683a      	ldr	r2, [r7, #0]
 80019b0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	689b      	ldr	r3, [r3, #8]
 80019b6:	2b40      	cmp	r3, #64	; 0x40
 80019b8:	d108      	bne.n	80019cc <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	687a      	ldr	r2, [r7, #4]
 80019c0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	68ba      	ldr	r2, [r7, #8]
 80019c8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80019ca:	e007      	b.n	80019dc <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	68ba      	ldr	r2, [r7, #8]
 80019d2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	687a      	ldr	r2, [r7, #4]
 80019da:	60da      	str	r2, [r3, #12]
}
 80019dc:	bf00      	nop
 80019de:	3714      	adds	r7, #20
 80019e0:	46bd      	mov	sp, r7
 80019e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e6:	4770      	bx	lr

080019e8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80019e8:	b480      	push	{r7}
 80019ea:	b085      	sub	sp, #20
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	b2db      	uxtb	r3, r3
 80019f6:	3b10      	subs	r3, #16
 80019f8:	4a13      	ldr	r2, [pc, #76]	; (8001a48 <DMA_CalcBaseAndBitshift+0x60>)
 80019fa:	fba2 2303 	umull	r2, r3, r2, r3
 80019fe:	091b      	lsrs	r3, r3, #4
 8001a00:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001a02:	4a12      	ldr	r2, [pc, #72]	; (8001a4c <DMA_CalcBaseAndBitshift+0x64>)
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	4413      	add	r3, r2
 8001a08:	781b      	ldrb	r3, [r3, #0]
 8001a0a:	461a      	mov	r2, r3
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	2b03      	cmp	r3, #3
 8001a14:	d908      	bls.n	8001a28 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	461a      	mov	r2, r3
 8001a1c:	4b0c      	ldr	r3, [pc, #48]	; (8001a50 <DMA_CalcBaseAndBitshift+0x68>)
 8001a1e:	4013      	ands	r3, r2
 8001a20:	1d1a      	adds	r2, r3, #4
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	659a      	str	r2, [r3, #88]	; 0x58
 8001a26:	e006      	b.n	8001a36 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	461a      	mov	r2, r3
 8001a2e:	4b08      	ldr	r3, [pc, #32]	; (8001a50 <DMA_CalcBaseAndBitshift+0x68>)
 8001a30:	4013      	ands	r3, r2
 8001a32:	687a      	ldr	r2, [r7, #4]
 8001a34:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	3714      	adds	r7, #20
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a44:	4770      	bx	lr
 8001a46:	bf00      	nop
 8001a48:	aaaaaaab 	.word	0xaaaaaaab
 8001a4c:	08009058 	.word	0x08009058
 8001a50:	fffffc00 	.word	0xfffffc00

08001a54 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001a54:	b480      	push	{r7}
 8001a56:	b085      	sub	sp, #20
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001a5c:	2300      	movs	r3, #0
 8001a5e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a64:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	699b      	ldr	r3, [r3, #24]
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d11f      	bne.n	8001aae <DMA_CheckFifoParam+0x5a>
 8001a6e:	68bb      	ldr	r3, [r7, #8]
 8001a70:	2b03      	cmp	r3, #3
 8001a72:	d856      	bhi.n	8001b22 <DMA_CheckFifoParam+0xce>
 8001a74:	a201      	add	r2, pc, #4	; (adr r2, 8001a7c <DMA_CheckFifoParam+0x28>)
 8001a76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a7a:	bf00      	nop
 8001a7c:	08001a8d 	.word	0x08001a8d
 8001a80:	08001a9f 	.word	0x08001a9f
 8001a84:	08001a8d 	.word	0x08001a8d
 8001a88:	08001b23 	.word	0x08001b23
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a90:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d046      	beq.n	8001b26 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001a98:	2301      	movs	r3, #1
 8001a9a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001a9c:	e043      	b.n	8001b26 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001aa2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001aa6:	d140      	bne.n	8001b2a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001aa8:	2301      	movs	r3, #1
 8001aaa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001aac:	e03d      	b.n	8001b2a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	699b      	ldr	r3, [r3, #24]
 8001ab2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001ab6:	d121      	bne.n	8001afc <DMA_CheckFifoParam+0xa8>
 8001ab8:	68bb      	ldr	r3, [r7, #8]
 8001aba:	2b03      	cmp	r3, #3
 8001abc:	d837      	bhi.n	8001b2e <DMA_CheckFifoParam+0xda>
 8001abe:	a201      	add	r2, pc, #4	; (adr r2, 8001ac4 <DMA_CheckFifoParam+0x70>)
 8001ac0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ac4:	08001ad5 	.word	0x08001ad5
 8001ac8:	08001adb 	.word	0x08001adb
 8001acc:	08001ad5 	.word	0x08001ad5
 8001ad0:	08001aed 	.word	0x08001aed
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001ad4:	2301      	movs	r3, #1
 8001ad6:	73fb      	strb	r3, [r7, #15]
      break;
 8001ad8:	e030      	b.n	8001b3c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ade:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d025      	beq.n	8001b32 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001ae6:	2301      	movs	r3, #1
 8001ae8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001aea:	e022      	b.n	8001b32 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001af0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001af4:	d11f      	bne.n	8001b36 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001af6:	2301      	movs	r3, #1
 8001af8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001afa:	e01c      	b.n	8001b36 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001afc:	68bb      	ldr	r3, [r7, #8]
 8001afe:	2b02      	cmp	r3, #2
 8001b00:	d903      	bls.n	8001b0a <DMA_CheckFifoParam+0xb6>
 8001b02:	68bb      	ldr	r3, [r7, #8]
 8001b04:	2b03      	cmp	r3, #3
 8001b06:	d003      	beq.n	8001b10 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001b08:	e018      	b.n	8001b3c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001b0a:	2301      	movs	r3, #1
 8001b0c:	73fb      	strb	r3, [r7, #15]
      break;
 8001b0e:	e015      	b.n	8001b3c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b14:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d00e      	beq.n	8001b3a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001b1c:	2301      	movs	r3, #1
 8001b1e:	73fb      	strb	r3, [r7, #15]
      break;
 8001b20:	e00b      	b.n	8001b3a <DMA_CheckFifoParam+0xe6>
      break;
 8001b22:	bf00      	nop
 8001b24:	e00a      	b.n	8001b3c <DMA_CheckFifoParam+0xe8>
      break;
 8001b26:	bf00      	nop
 8001b28:	e008      	b.n	8001b3c <DMA_CheckFifoParam+0xe8>
      break;
 8001b2a:	bf00      	nop
 8001b2c:	e006      	b.n	8001b3c <DMA_CheckFifoParam+0xe8>
      break;
 8001b2e:	bf00      	nop
 8001b30:	e004      	b.n	8001b3c <DMA_CheckFifoParam+0xe8>
      break;
 8001b32:	bf00      	nop
 8001b34:	e002      	b.n	8001b3c <DMA_CheckFifoParam+0xe8>
      break;   
 8001b36:	bf00      	nop
 8001b38:	e000      	b.n	8001b3c <DMA_CheckFifoParam+0xe8>
      break;
 8001b3a:	bf00      	nop
    }
  } 
  
  return status; 
 8001b3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b3e:	4618      	mov	r0, r3
 8001b40:	3714      	adds	r7, #20
 8001b42:	46bd      	mov	sp, r7
 8001b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b48:	4770      	bx	lr
 8001b4a:	bf00      	nop

08001b4c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b4c:	b480      	push	{r7}
 8001b4e:	b089      	sub	sp, #36	; 0x24
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	6078      	str	r0, [r7, #4]
 8001b54:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001b56:	2300      	movs	r3, #0
 8001b58:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001b5e:	2300      	movs	r3, #0
 8001b60:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001b62:	2300      	movs	r3, #0
 8001b64:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8001b66:	2300      	movs	r3, #0
 8001b68:	61fb      	str	r3, [r7, #28]
 8001b6a:	e169      	b.n	8001e40 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001b6c:	2201      	movs	r2, #1
 8001b6e:	69fb      	ldr	r3, [r7, #28]
 8001b70:	fa02 f303 	lsl.w	r3, r2, r3
 8001b74:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001b76:	683b      	ldr	r3, [r7, #0]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	697a      	ldr	r2, [r7, #20]
 8001b7c:	4013      	ands	r3, r2
 8001b7e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001b80:	693a      	ldr	r2, [r7, #16]
 8001b82:	697b      	ldr	r3, [r7, #20]
 8001b84:	429a      	cmp	r2, r3
 8001b86:	f040 8158 	bne.w	8001e3a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001b8a:	683b      	ldr	r3, [r7, #0]
 8001b8c:	685b      	ldr	r3, [r3, #4]
 8001b8e:	f003 0303 	and.w	r3, r3, #3
 8001b92:	2b01      	cmp	r3, #1
 8001b94:	d005      	beq.n	8001ba2 <HAL_GPIO_Init+0x56>
 8001b96:	683b      	ldr	r3, [r7, #0]
 8001b98:	685b      	ldr	r3, [r3, #4]
 8001b9a:	f003 0303 	and.w	r3, r3, #3
 8001b9e:	2b02      	cmp	r3, #2
 8001ba0:	d130      	bne.n	8001c04 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	689b      	ldr	r3, [r3, #8]
 8001ba6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001ba8:	69fb      	ldr	r3, [r7, #28]
 8001baa:	005b      	lsls	r3, r3, #1
 8001bac:	2203      	movs	r2, #3
 8001bae:	fa02 f303 	lsl.w	r3, r2, r3
 8001bb2:	43db      	mvns	r3, r3
 8001bb4:	69ba      	ldr	r2, [r7, #24]
 8001bb6:	4013      	ands	r3, r2
 8001bb8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001bba:	683b      	ldr	r3, [r7, #0]
 8001bbc:	68da      	ldr	r2, [r3, #12]
 8001bbe:	69fb      	ldr	r3, [r7, #28]
 8001bc0:	005b      	lsls	r3, r3, #1
 8001bc2:	fa02 f303 	lsl.w	r3, r2, r3
 8001bc6:	69ba      	ldr	r2, [r7, #24]
 8001bc8:	4313      	orrs	r3, r2
 8001bca:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	69ba      	ldr	r2, [r7, #24]
 8001bd0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	685b      	ldr	r3, [r3, #4]
 8001bd6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001bd8:	2201      	movs	r2, #1
 8001bda:	69fb      	ldr	r3, [r7, #28]
 8001bdc:	fa02 f303 	lsl.w	r3, r2, r3
 8001be0:	43db      	mvns	r3, r3
 8001be2:	69ba      	ldr	r2, [r7, #24]
 8001be4:	4013      	ands	r3, r2
 8001be6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001be8:	683b      	ldr	r3, [r7, #0]
 8001bea:	685b      	ldr	r3, [r3, #4]
 8001bec:	091b      	lsrs	r3, r3, #4
 8001bee:	f003 0201 	and.w	r2, r3, #1
 8001bf2:	69fb      	ldr	r3, [r7, #28]
 8001bf4:	fa02 f303 	lsl.w	r3, r2, r3
 8001bf8:	69ba      	ldr	r2, [r7, #24]
 8001bfa:	4313      	orrs	r3, r2
 8001bfc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	69ba      	ldr	r2, [r7, #24]
 8001c02:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001c04:	683b      	ldr	r3, [r7, #0]
 8001c06:	685b      	ldr	r3, [r3, #4]
 8001c08:	f003 0303 	and.w	r3, r3, #3
 8001c0c:	2b03      	cmp	r3, #3
 8001c0e:	d017      	beq.n	8001c40 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	68db      	ldr	r3, [r3, #12]
 8001c14:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001c16:	69fb      	ldr	r3, [r7, #28]
 8001c18:	005b      	lsls	r3, r3, #1
 8001c1a:	2203      	movs	r2, #3
 8001c1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c20:	43db      	mvns	r3, r3
 8001c22:	69ba      	ldr	r2, [r7, #24]
 8001c24:	4013      	ands	r3, r2
 8001c26:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8001c28:	683b      	ldr	r3, [r7, #0]
 8001c2a:	689a      	ldr	r2, [r3, #8]
 8001c2c:	69fb      	ldr	r3, [r7, #28]
 8001c2e:	005b      	lsls	r3, r3, #1
 8001c30:	fa02 f303 	lsl.w	r3, r2, r3
 8001c34:	69ba      	ldr	r2, [r7, #24]
 8001c36:	4313      	orrs	r3, r2
 8001c38:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	69ba      	ldr	r2, [r7, #24]
 8001c3e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c40:	683b      	ldr	r3, [r7, #0]
 8001c42:	685b      	ldr	r3, [r3, #4]
 8001c44:	f003 0303 	and.w	r3, r3, #3
 8001c48:	2b02      	cmp	r3, #2
 8001c4a:	d123      	bne.n	8001c94 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001c4c:	69fb      	ldr	r3, [r7, #28]
 8001c4e:	08da      	lsrs	r2, r3, #3
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	3208      	adds	r2, #8
 8001c54:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c58:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001c5a:	69fb      	ldr	r3, [r7, #28]
 8001c5c:	f003 0307 	and.w	r3, r3, #7
 8001c60:	009b      	lsls	r3, r3, #2
 8001c62:	220f      	movs	r2, #15
 8001c64:	fa02 f303 	lsl.w	r3, r2, r3
 8001c68:	43db      	mvns	r3, r3
 8001c6a:	69ba      	ldr	r2, [r7, #24]
 8001c6c:	4013      	ands	r3, r2
 8001c6e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001c70:	683b      	ldr	r3, [r7, #0]
 8001c72:	691a      	ldr	r2, [r3, #16]
 8001c74:	69fb      	ldr	r3, [r7, #28]
 8001c76:	f003 0307 	and.w	r3, r3, #7
 8001c7a:	009b      	lsls	r3, r3, #2
 8001c7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c80:	69ba      	ldr	r2, [r7, #24]
 8001c82:	4313      	orrs	r3, r2
 8001c84:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001c86:	69fb      	ldr	r3, [r7, #28]
 8001c88:	08da      	lsrs	r2, r3, #3
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	3208      	adds	r2, #8
 8001c8e:	69b9      	ldr	r1, [r7, #24]
 8001c90:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001c9a:	69fb      	ldr	r3, [r7, #28]
 8001c9c:	005b      	lsls	r3, r3, #1
 8001c9e:	2203      	movs	r2, #3
 8001ca0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ca4:	43db      	mvns	r3, r3
 8001ca6:	69ba      	ldr	r2, [r7, #24]
 8001ca8:	4013      	ands	r3, r2
 8001caa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001cac:	683b      	ldr	r3, [r7, #0]
 8001cae:	685b      	ldr	r3, [r3, #4]
 8001cb0:	f003 0203 	and.w	r2, r3, #3
 8001cb4:	69fb      	ldr	r3, [r7, #28]
 8001cb6:	005b      	lsls	r3, r3, #1
 8001cb8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cbc:	69ba      	ldr	r2, [r7, #24]
 8001cbe:	4313      	orrs	r3, r2
 8001cc0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	69ba      	ldr	r2, [r7, #24]
 8001cc6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001cc8:	683b      	ldr	r3, [r7, #0]
 8001cca:	685b      	ldr	r3, [r3, #4]
 8001ccc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	f000 80b2 	beq.w	8001e3a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001cd6:	4b60      	ldr	r3, [pc, #384]	; (8001e58 <HAL_GPIO_Init+0x30c>)
 8001cd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cda:	4a5f      	ldr	r2, [pc, #380]	; (8001e58 <HAL_GPIO_Init+0x30c>)
 8001cdc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ce0:	6453      	str	r3, [r2, #68]	; 0x44
 8001ce2:	4b5d      	ldr	r3, [pc, #372]	; (8001e58 <HAL_GPIO_Init+0x30c>)
 8001ce4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ce6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001cea:	60fb      	str	r3, [r7, #12]
 8001cec:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001cee:	4a5b      	ldr	r2, [pc, #364]	; (8001e5c <HAL_GPIO_Init+0x310>)
 8001cf0:	69fb      	ldr	r3, [r7, #28]
 8001cf2:	089b      	lsrs	r3, r3, #2
 8001cf4:	3302      	adds	r3, #2
 8001cf6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001cfa:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001cfc:	69fb      	ldr	r3, [r7, #28]
 8001cfe:	f003 0303 	and.w	r3, r3, #3
 8001d02:	009b      	lsls	r3, r3, #2
 8001d04:	220f      	movs	r2, #15
 8001d06:	fa02 f303 	lsl.w	r3, r2, r3
 8001d0a:	43db      	mvns	r3, r3
 8001d0c:	69ba      	ldr	r2, [r7, #24]
 8001d0e:	4013      	ands	r3, r2
 8001d10:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	4a52      	ldr	r2, [pc, #328]	; (8001e60 <HAL_GPIO_Init+0x314>)
 8001d16:	4293      	cmp	r3, r2
 8001d18:	d02b      	beq.n	8001d72 <HAL_GPIO_Init+0x226>
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	4a51      	ldr	r2, [pc, #324]	; (8001e64 <HAL_GPIO_Init+0x318>)
 8001d1e:	4293      	cmp	r3, r2
 8001d20:	d025      	beq.n	8001d6e <HAL_GPIO_Init+0x222>
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	4a50      	ldr	r2, [pc, #320]	; (8001e68 <HAL_GPIO_Init+0x31c>)
 8001d26:	4293      	cmp	r3, r2
 8001d28:	d01f      	beq.n	8001d6a <HAL_GPIO_Init+0x21e>
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	4a4f      	ldr	r2, [pc, #316]	; (8001e6c <HAL_GPIO_Init+0x320>)
 8001d2e:	4293      	cmp	r3, r2
 8001d30:	d019      	beq.n	8001d66 <HAL_GPIO_Init+0x21a>
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	4a4e      	ldr	r2, [pc, #312]	; (8001e70 <HAL_GPIO_Init+0x324>)
 8001d36:	4293      	cmp	r3, r2
 8001d38:	d013      	beq.n	8001d62 <HAL_GPIO_Init+0x216>
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	4a4d      	ldr	r2, [pc, #308]	; (8001e74 <HAL_GPIO_Init+0x328>)
 8001d3e:	4293      	cmp	r3, r2
 8001d40:	d00d      	beq.n	8001d5e <HAL_GPIO_Init+0x212>
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	4a4c      	ldr	r2, [pc, #304]	; (8001e78 <HAL_GPIO_Init+0x32c>)
 8001d46:	4293      	cmp	r3, r2
 8001d48:	d007      	beq.n	8001d5a <HAL_GPIO_Init+0x20e>
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	4a4b      	ldr	r2, [pc, #300]	; (8001e7c <HAL_GPIO_Init+0x330>)
 8001d4e:	4293      	cmp	r3, r2
 8001d50:	d101      	bne.n	8001d56 <HAL_GPIO_Init+0x20a>
 8001d52:	2307      	movs	r3, #7
 8001d54:	e00e      	b.n	8001d74 <HAL_GPIO_Init+0x228>
 8001d56:	2308      	movs	r3, #8
 8001d58:	e00c      	b.n	8001d74 <HAL_GPIO_Init+0x228>
 8001d5a:	2306      	movs	r3, #6
 8001d5c:	e00a      	b.n	8001d74 <HAL_GPIO_Init+0x228>
 8001d5e:	2305      	movs	r3, #5
 8001d60:	e008      	b.n	8001d74 <HAL_GPIO_Init+0x228>
 8001d62:	2304      	movs	r3, #4
 8001d64:	e006      	b.n	8001d74 <HAL_GPIO_Init+0x228>
 8001d66:	2303      	movs	r3, #3
 8001d68:	e004      	b.n	8001d74 <HAL_GPIO_Init+0x228>
 8001d6a:	2302      	movs	r3, #2
 8001d6c:	e002      	b.n	8001d74 <HAL_GPIO_Init+0x228>
 8001d6e:	2301      	movs	r3, #1
 8001d70:	e000      	b.n	8001d74 <HAL_GPIO_Init+0x228>
 8001d72:	2300      	movs	r3, #0
 8001d74:	69fa      	ldr	r2, [r7, #28]
 8001d76:	f002 0203 	and.w	r2, r2, #3
 8001d7a:	0092      	lsls	r2, r2, #2
 8001d7c:	4093      	lsls	r3, r2
 8001d7e:	69ba      	ldr	r2, [r7, #24]
 8001d80:	4313      	orrs	r3, r2
 8001d82:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001d84:	4935      	ldr	r1, [pc, #212]	; (8001e5c <HAL_GPIO_Init+0x310>)
 8001d86:	69fb      	ldr	r3, [r7, #28]
 8001d88:	089b      	lsrs	r3, r3, #2
 8001d8a:	3302      	adds	r3, #2
 8001d8c:	69ba      	ldr	r2, [r7, #24]
 8001d8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001d92:	4b3b      	ldr	r3, [pc, #236]	; (8001e80 <HAL_GPIO_Init+0x334>)
 8001d94:	689b      	ldr	r3, [r3, #8]
 8001d96:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d98:	693b      	ldr	r3, [r7, #16]
 8001d9a:	43db      	mvns	r3, r3
 8001d9c:	69ba      	ldr	r2, [r7, #24]
 8001d9e:	4013      	ands	r3, r2
 8001da0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001da2:	683b      	ldr	r3, [r7, #0]
 8001da4:	685b      	ldr	r3, [r3, #4]
 8001da6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d003      	beq.n	8001db6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001dae:	69ba      	ldr	r2, [r7, #24]
 8001db0:	693b      	ldr	r3, [r7, #16]
 8001db2:	4313      	orrs	r3, r2
 8001db4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001db6:	4a32      	ldr	r2, [pc, #200]	; (8001e80 <HAL_GPIO_Init+0x334>)
 8001db8:	69bb      	ldr	r3, [r7, #24]
 8001dba:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001dbc:	4b30      	ldr	r3, [pc, #192]	; (8001e80 <HAL_GPIO_Init+0x334>)
 8001dbe:	68db      	ldr	r3, [r3, #12]
 8001dc0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001dc2:	693b      	ldr	r3, [r7, #16]
 8001dc4:	43db      	mvns	r3, r3
 8001dc6:	69ba      	ldr	r2, [r7, #24]
 8001dc8:	4013      	ands	r3, r2
 8001dca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001dcc:	683b      	ldr	r3, [r7, #0]
 8001dce:	685b      	ldr	r3, [r3, #4]
 8001dd0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d003      	beq.n	8001de0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001dd8:	69ba      	ldr	r2, [r7, #24]
 8001dda:	693b      	ldr	r3, [r7, #16]
 8001ddc:	4313      	orrs	r3, r2
 8001dde:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001de0:	4a27      	ldr	r2, [pc, #156]	; (8001e80 <HAL_GPIO_Init+0x334>)
 8001de2:	69bb      	ldr	r3, [r7, #24]
 8001de4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001de6:	4b26      	ldr	r3, [pc, #152]	; (8001e80 <HAL_GPIO_Init+0x334>)
 8001de8:	685b      	ldr	r3, [r3, #4]
 8001dea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001dec:	693b      	ldr	r3, [r7, #16]
 8001dee:	43db      	mvns	r3, r3
 8001df0:	69ba      	ldr	r2, [r7, #24]
 8001df2:	4013      	ands	r3, r2
 8001df4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001df6:	683b      	ldr	r3, [r7, #0]
 8001df8:	685b      	ldr	r3, [r3, #4]
 8001dfa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d003      	beq.n	8001e0a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001e02:	69ba      	ldr	r2, [r7, #24]
 8001e04:	693b      	ldr	r3, [r7, #16]
 8001e06:	4313      	orrs	r3, r2
 8001e08:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001e0a:	4a1d      	ldr	r2, [pc, #116]	; (8001e80 <HAL_GPIO_Init+0x334>)
 8001e0c:	69bb      	ldr	r3, [r7, #24]
 8001e0e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001e10:	4b1b      	ldr	r3, [pc, #108]	; (8001e80 <HAL_GPIO_Init+0x334>)
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e16:	693b      	ldr	r3, [r7, #16]
 8001e18:	43db      	mvns	r3, r3
 8001e1a:	69ba      	ldr	r2, [r7, #24]
 8001e1c:	4013      	ands	r3, r2
 8001e1e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001e20:	683b      	ldr	r3, [r7, #0]
 8001e22:	685b      	ldr	r3, [r3, #4]
 8001e24:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d003      	beq.n	8001e34 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001e2c:	69ba      	ldr	r2, [r7, #24]
 8001e2e:	693b      	ldr	r3, [r7, #16]
 8001e30:	4313      	orrs	r3, r2
 8001e32:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001e34:	4a12      	ldr	r2, [pc, #72]	; (8001e80 <HAL_GPIO_Init+0x334>)
 8001e36:	69bb      	ldr	r3, [r7, #24]
 8001e38:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8001e3a:	69fb      	ldr	r3, [r7, #28]
 8001e3c:	3301      	adds	r3, #1
 8001e3e:	61fb      	str	r3, [r7, #28]
 8001e40:	69fb      	ldr	r3, [r7, #28]
 8001e42:	2b0f      	cmp	r3, #15
 8001e44:	f67f ae92 	bls.w	8001b6c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001e48:	bf00      	nop
 8001e4a:	bf00      	nop
 8001e4c:	3724      	adds	r7, #36	; 0x24
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e54:	4770      	bx	lr
 8001e56:	bf00      	nop
 8001e58:	40023800 	.word	0x40023800
 8001e5c:	40013800 	.word	0x40013800
 8001e60:	40020000 	.word	0x40020000
 8001e64:	40020400 	.word	0x40020400
 8001e68:	40020800 	.word	0x40020800
 8001e6c:	40020c00 	.word	0x40020c00
 8001e70:	40021000 	.word	0x40021000
 8001e74:	40021400 	.word	0x40021400
 8001e78:	40021800 	.word	0x40021800
 8001e7c:	40021c00 	.word	0x40021c00
 8001e80:	40013c00 	.word	0x40013c00

08001e84 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e84:	b480      	push	{r7}
 8001e86:	b083      	sub	sp, #12
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	6078      	str	r0, [r7, #4]
 8001e8c:	460b      	mov	r3, r1
 8001e8e:	807b      	strh	r3, [r7, #2]
 8001e90:	4613      	mov	r3, r2
 8001e92:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001e94:	787b      	ldrb	r3, [r7, #1]
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d003      	beq.n	8001ea2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001e9a:	887a      	ldrh	r2, [r7, #2]
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8001ea0:	e003      	b.n	8001eaa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8001ea2:	887b      	ldrh	r3, [r7, #2]
 8001ea4:	041a      	lsls	r2, r3, #16
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	619a      	str	r2, [r3, #24]
}
 8001eaa:	bf00      	nop
 8001eac:	370c      	adds	r7, #12
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb4:	4770      	bx	lr

08001eb6 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001eb6:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001eb8:	b08f      	sub	sp, #60	; 0x3c
 8001eba:	af0a      	add	r7, sp, #40	; 0x28
 8001ebc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d101      	bne.n	8001ec8 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001ec4:	2301      	movs	r3, #1
 8001ec6:	e116      	b.n	80020f6 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8001ed4:	b2db      	uxtb	r3, r3
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d106      	bne.n	8001ee8 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	2200      	movs	r2, #0
 8001ede:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001ee2:	6878      	ldr	r0, [r7, #4]
 8001ee4:	f006 fc10 	bl	8008708 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	2203      	movs	r2, #3
 8001eec:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001ef0:	68bb      	ldr	r3, [r7, #8]
 8001ef2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ef4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d102      	bne.n	8001f02 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	2200      	movs	r2, #0
 8001f00:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	4618      	mov	r0, r3
 8001f08:	f003 fad1 	bl	80054ae <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	603b      	str	r3, [r7, #0]
 8001f12:	687e      	ldr	r6, [r7, #4]
 8001f14:	466d      	mov	r5, sp
 8001f16:	f106 0410 	add.w	r4, r6, #16
 8001f1a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001f1c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001f1e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001f20:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001f22:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001f26:	e885 0003 	stmia.w	r5, {r0, r1}
 8001f2a:	1d33      	adds	r3, r6, #4
 8001f2c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001f2e:	6838      	ldr	r0, [r7, #0]
 8001f30:	f003 f974 	bl	800521c <USB_CoreInit>
 8001f34:	4603      	mov	r3, r0
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d005      	beq.n	8001f46 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	2202      	movs	r2, #2
 8001f3e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8001f42:	2301      	movs	r3, #1
 8001f44:	e0d7      	b.n	80020f6 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	2100      	movs	r1, #0
 8001f4c:	4618      	mov	r0, r3
 8001f4e:	f003 fabf 	bl	80054d0 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001f52:	2300      	movs	r3, #0
 8001f54:	73fb      	strb	r3, [r7, #15]
 8001f56:	e04a      	b.n	8001fee <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001f58:	7bfa      	ldrb	r2, [r7, #15]
 8001f5a:	6879      	ldr	r1, [r7, #4]
 8001f5c:	4613      	mov	r3, r2
 8001f5e:	00db      	lsls	r3, r3, #3
 8001f60:	1a9b      	subs	r3, r3, r2
 8001f62:	009b      	lsls	r3, r3, #2
 8001f64:	440b      	add	r3, r1
 8001f66:	333d      	adds	r3, #61	; 0x3d
 8001f68:	2201      	movs	r2, #1
 8001f6a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001f6c:	7bfa      	ldrb	r2, [r7, #15]
 8001f6e:	6879      	ldr	r1, [r7, #4]
 8001f70:	4613      	mov	r3, r2
 8001f72:	00db      	lsls	r3, r3, #3
 8001f74:	1a9b      	subs	r3, r3, r2
 8001f76:	009b      	lsls	r3, r3, #2
 8001f78:	440b      	add	r3, r1
 8001f7a:	333c      	adds	r3, #60	; 0x3c
 8001f7c:	7bfa      	ldrb	r2, [r7, #15]
 8001f7e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001f80:	7bfa      	ldrb	r2, [r7, #15]
 8001f82:	7bfb      	ldrb	r3, [r7, #15]
 8001f84:	b298      	uxth	r0, r3
 8001f86:	6879      	ldr	r1, [r7, #4]
 8001f88:	4613      	mov	r3, r2
 8001f8a:	00db      	lsls	r3, r3, #3
 8001f8c:	1a9b      	subs	r3, r3, r2
 8001f8e:	009b      	lsls	r3, r3, #2
 8001f90:	440b      	add	r3, r1
 8001f92:	3342      	adds	r3, #66	; 0x42
 8001f94:	4602      	mov	r2, r0
 8001f96:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001f98:	7bfa      	ldrb	r2, [r7, #15]
 8001f9a:	6879      	ldr	r1, [r7, #4]
 8001f9c:	4613      	mov	r3, r2
 8001f9e:	00db      	lsls	r3, r3, #3
 8001fa0:	1a9b      	subs	r3, r3, r2
 8001fa2:	009b      	lsls	r3, r3, #2
 8001fa4:	440b      	add	r3, r1
 8001fa6:	333f      	adds	r3, #63	; 0x3f
 8001fa8:	2200      	movs	r2, #0
 8001faa:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001fac:	7bfa      	ldrb	r2, [r7, #15]
 8001fae:	6879      	ldr	r1, [r7, #4]
 8001fb0:	4613      	mov	r3, r2
 8001fb2:	00db      	lsls	r3, r3, #3
 8001fb4:	1a9b      	subs	r3, r3, r2
 8001fb6:	009b      	lsls	r3, r3, #2
 8001fb8:	440b      	add	r3, r1
 8001fba:	3344      	adds	r3, #68	; 0x44
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001fc0:	7bfa      	ldrb	r2, [r7, #15]
 8001fc2:	6879      	ldr	r1, [r7, #4]
 8001fc4:	4613      	mov	r3, r2
 8001fc6:	00db      	lsls	r3, r3, #3
 8001fc8:	1a9b      	subs	r3, r3, r2
 8001fca:	009b      	lsls	r3, r3, #2
 8001fcc:	440b      	add	r3, r1
 8001fce:	3348      	adds	r3, #72	; 0x48
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001fd4:	7bfa      	ldrb	r2, [r7, #15]
 8001fd6:	6879      	ldr	r1, [r7, #4]
 8001fd8:	4613      	mov	r3, r2
 8001fda:	00db      	lsls	r3, r3, #3
 8001fdc:	1a9b      	subs	r3, r3, r2
 8001fde:	009b      	lsls	r3, r3, #2
 8001fe0:	440b      	add	r3, r1
 8001fe2:	3350      	adds	r3, #80	; 0x50
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001fe8:	7bfb      	ldrb	r3, [r7, #15]
 8001fea:	3301      	adds	r3, #1
 8001fec:	73fb      	strb	r3, [r7, #15]
 8001fee:	7bfa      	ldrb	r2, [r7, #15]
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	685b      	ldr	r3, [r3, #4]
 8001ff4:	429a      	cmp	r2, r3
 8001ff6:	d3af      	bcc.n	8001f58 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001ff8:	2300      	movs	r3, #0
 8001ffa:	73fb      	strb	r3, [r7, #15]
 8001ffc:	e044      	b.n	8002088 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001ffe:	7bfa      	ldrb	r2, [r7, #15]
 8002000:	6879      	ldr	r1, [r7, #4]
 8002002:	4613      	mov	r3, r2
 8002004:	00db      	lsls	r3, r3, #3
 8002006:	1a9b      	subs	r3, r3, r2
 8002008:	009b      	lsls	r3, r3, #2
 800200a:	440b      	add	r3, r1
 800200c:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8002010:	2200      	movs	r2, #0
 8002012:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002014:	7bfa      	ldrb	r2, [r7, #15]
 8002016:	6879      	ldr	r1, [r7, #4]
 8002018:	4613      	mov	r3, r2
 800201a:	00db      	lsls	r3, r3, #3
 800201c:	1a9b      	subs	r3, r3, r2
 800201e:	009b      	lsls	r3, r3, #2
 8002020:	440b      	add	r3, r1
 8002022:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8002026:	7bfa      	ldrb	r2, [r7, #15]
 8002028:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800202a:	7bfa      	ldrb	r2, [r7, #15]
 800202c:	6879      	ldr	r1, [r7, #4]
 800202e:	4613      	mov	r3, r2
 8002030:	00db      	lsls	r3, r3, #3
 8002032:	1a9b      	subs	r3, r3, r2
 8002034:	009b      	lsls	r3, r3, #2
 8002036:	440b      	add	r3, r1
 8002038:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800203c:	2200      	movs	r2, #0
 800203e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002040:	7bfa      	ldrb	r2, [r7, #15]
 8002042:	6879      	ldr	r1, [r7, #4]
 8002044:	4613      	mov	r3, r2
 8002046:	00db      	lsls	r3, r3, #3
 8002048:	1a9b      	subs	r3, r3, r2
 800204a:	009b      	lsls	r3, r3, #2
 800204c:	440b      	add	r3, r1
 800204e:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002052:	2200      	movs	r2, #0
 8002054:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002056:	7bfa      	ldrb	r2, [r7, #15]
 8002058:	6879      	ldr	r1, [r7, #4]
 800205a:	4613      	mov	r3, r2
 800205c:	00db      	lsls	r3, r3, #3
 800205e:	1a9b      	subs	r3, r3, r2
 8002060:	009b      	lsls	r3, r3, #2
 8002062:	440b      	add	r3, r1
 8002064:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002068:	2200      	movs	r2, #0
 800206a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800206c:	7bfa      	ldrb	r2, [r7, #15]
 800206e:	6879      	ldr	r1, [r7, #4]
 8002070:	4613      	mov	r3, r2
 8002072:	00db      	lsls	r3, r3, #3
 8002074:	1a9b      	subs	r3, r3, r2
 8002076:	009b      	lsls	r3, r3, #2
 8002078:	440b      	add	r3, r1
 800207a:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800207e:	2200      	movs	r2, #0
 8002080:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002082:	7bfb      	ldrb	r3, [r7, #15]
 8002084:	3301      	adds	r3, #1
 8002086:	73fb      	strb	r3, [r7, #15]
 8002088:	7bfa      	ldrb	r2, [r7, #15]
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	685b      	ldr	r3, [r3, #4]
 800208e:	429a      	cmp	r2, r3
 8002090:	d3b5      	bcc.n	8001ffe <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	603b      	str	r3, [r7, #0]
 8002098:	687e      	ldr	r6, [r7, #4]
 800209a:	466d      	mov	r5, sp
 800209c:	f106 0410 	add.w	r4, r6, #16
 80020a0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80020a2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80020a4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80020a6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80020a8:	e894 0003 	ldmia.w	r4, {r0, r1}
 80020ac:	e885 0003 	stmia.w	r5, {r0, r1}
 80020b0:	1d33      	adds	r3, r6, #4
 80020b2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80020b4:	6838      	ldr	r0, [r7, #0]
 80020b6:	f003 fa57 	bl	8005568 <USB_DevInit>
 80020ba:	4603      	mov	r3, r0
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d005      	beq.n	80020cc <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	2202      	movs	r2, #2
 80020c4:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80020c8:	2301      	movs	r3, #1
 80020ca:	e014      	b.n	80020f6 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	2200      	movs	r2, #0
 80020d0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	2201      	movs	r2, #1
 80020d8:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020e0:	2b01      	cmp	r3, #1
 80020e2:	d102      	bne.n	80020ea <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80020e4:	6878      	ldr	r0, [r7, #4]
 80020e6:	f001 f871 	bl	80031cc <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	4618      	mov	r0, r3
 80020f0:	f004 faff 	bl	80066f2 <USB_DevDisconnect>

  return HAL_OK;
 80020f4:	2300      	movs	r3, #0
}
 80020f6:	4618      	mov	r0, r3
 80020f8:	3714      	adds	r7, #20
 80020fa:	46bd      	mov	sp, r7
 80020fc:	bdf0      	pop	{r4, r5, r6, r7, pc}

080020fe <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80020fe:	b580      	push	{r7, lr}
 8002100:	b082      	sub	sp, #8
 8002102:	af00      	add	r7, sp, #0
 8002104:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800210c:	2b01      	cmp	r3, #1
 800210e:	d101      	bne.n	8002114 <HAL_PCD_Start+0x16>
 8002110:	2302      	movs	r3, #2
 8002112:	e012      	b.n	800213a <HAL_PCD_Start+0x3c>
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	2201      	movs	r2, #1
 8002118:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  __HAL_PCD_ENABLE(hpcd);
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	4618      	mov	r0, r3
 8002122:	f003 f9b3 	bl	800548c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	4618      	mov	r0, r3
 800212c:	f004 fac0 	bl	80066b0 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	2200      	movs	r2, #0
 8002134:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002138:	2300      	movs	r3, #0
}
 800213a:	4618      	mov	r0, r3
 800213c:	3708      	adds	r7, #8
 800213e:	46bd      	mov	sp, r7
 8002140:	bd80      	pop	{r7, pc}

08002142 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002142:	b590      	push	{r4, r7, lr}
 8002144:	b08d      	sub	sp, #52	; 0x34
 8002146:	af00      	add	r7, sp, #0
 8002148:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002150:	6a3b      	ldr	r3, [r7, #32]
 8002152:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t temp;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	4618      	mov	r0, r3
 800215a:	f004 fb7e 	bl	800685a <USB_GetMode>
 800215e:	4603      	mov	r3, r0
 8002160:	2b00      	cmp	r3, #0
 8002162:	f040 83ba 	bne.w	80028da <HAL_PCD_IRQHandler+0x798>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	4618      	mov	r0, r3
 800216c:	f004 fae2 	bl	8006734 <USB_ReadInterrupts>
 8002170:	4603      	mov	r3, r0
 8002172:	2b00      	cmp	r3, #0
 8002174:	f000 83b0 	beq.w	80028d8 <HAL_PCD_IRQHandler+0x796>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	4618      	mov	r0, r3
 800217e:	f004 fad9 	bl	8006734 <USB_ReadInterrupts>
 8002182:	4603      	mov	r3, r0
 8002184:	f003 0302 	and.w	r3, r3, #2
 8002188:	2b02      	cmp	r3, #2
 800218a:	d107      	bne.n	800219c <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	695a      	ldr	r2, [r3, #20]
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	f002 0202 	and.w	r2, r2, #2
 800219a:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	4618      	mov	r0, r3
 80021a2:	f004 fac7 	bl	8006734 <USB_ReadInterrupts>
 80021a6:	4603      	mov	r3, r0
 80021a8:	f003 0310 	and.w	r3, r3, #16
 80021ac:	2b10      	cmp	r3, #16
 80021ae:	d161      	bne.n	8002274 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	699a      	ldr	r2, [r3, #24]
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f022 0210 	bic.w	r2, r2, #16
 80021be:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 80021c0:	6a3b      	ldr	r3, [r7, #32]
 80021c2:	6a1b      	ldr	r3, [r3, #32]
 80021c4:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 80021c6:	69bb      	ldr	r3, [r7, #24]
 80021c8:	f003 020f 	and.w	r2, r3, #15
 80021cc:	4613      	mov	r3, r2
 80021ce:	00db      	lsls	r3, r3, #3
 80021d0:	1a9b      	subs	r3, r3, r2
 80021d2:	009b      	lsls	r3, r3, #2
 80021d4:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80021d8:	687a      	ldr	r2, [r7, #4]
 80021da:	4413      	add	r3, r2
 80021dc:	3304      	adds	r3, #4
 80021de:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80021e0:	69bb      	ldr	r3, [r7, #24]
 80021e2:	0c5b      	lsrs	r3, r3, #17
 80021e4:	f003 030f 	and.w	r3, r3, #15
 80021e8:	2b02      	cmp	r3, #2
 80021ea:	d124      	bne.n	8002236 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 80021ec:	69ba      	ldr	r2, [r7, #24]
 80021ee:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80021f2:	4013      	ands	r3, r2
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d035      	beq.n	8002264 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80021f8:	697b      	ldr	r3, [r7, #20]
 80021fa:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 80021fc:	69bb      	ldr	r3, [r7, #24]
 80021fe:	091b      	lsrs	r3, r3, #4
 8002200:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002202:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002206:	b29b      	uxth	r3, r3
 8002208:	461a      	mov	r2, r3
 800220a:	6a38      	ldr	r0, [r7, #32]
 800220c:	f004 f8fe 	bl	800640c <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002210:	697b      	ldr	r3, [r7, #20]
 8002212:	68da      	ldr	r2, [r3, #12]
 8002214:	69bb      	ldr	r3, [r7, #24]
 8002216:	091b      	lsrs	r3, r3, #4
 8002218:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800221c:	441a      	add	r2, r3
 800221e:	697b      	ldr	r3, [r7, #20]
 8002220:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002222:	697b      	ldr	r3, [r7, #20]
 8002224:	699a      	ldr	r2, [r3, #24]
 8002226:	69bb      	ldr	r3, [r7, #24]
 8002228:	091b      	lsrs	r3, r3, #4
 800222a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800222e:	441a      	add	r2, r3
 8002230:	697b      	ldr	r3, [r7, #20]
 8002232:	619a      	str	r2, [r3, #24]
 8002234:	e016      	b.n	8002264 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8002236:	69bb      	ldr	r3, [r7, #24]
 8002238:	0c5b      	lsrs	r3, r3, #17
 800223a:	f003 030f 	and.w	r3, r3, #15
 800223e:	2b06      	cmp	r3, #6
 8002240:	d110      	bne.n	8002264 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002248:	2208      	movs	r2, #8
 800224a:	4619      	mov	r1, r3
 800224c:	6a38      	ldr	r0, [r7, #32]
 800224e:	f004 f8dd 	bl	800640c <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002252:	697b      	ldr	r3, [r7, #20]
 8002254:	699a      	ldr	r2, [r3, #24]
 8002256:	69bb      	ldr	r3, [r7, #24]
 8002258:	091b      	lsrs	r3, r3, #4
 800225a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800225e:	441a      	add	r2, r3
 8002260:	697b      	ldr	r3, [r7, #20]
 8002262:	619a      	str	r2, [r3, #24]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	699a      	ldr	r2, [r3, #24]
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f042 0210 	orr.w	r2, r2, #16
 8002272:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	4618      	mov	r0, r3
 800227a:	f004 fa5b 	bl	8006734 <USB_ReadInterrupts>
 800227e:	4603      	mov	r3, r0
 8002280:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002284:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002288:	d16e      	bne.n	8002368 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 800228a:	2300      	movs	r3, #0
 800228c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	4618      	mov	r0, r3
 8002294:	f004 fa61 	bl	800675a <USB_ReadDevAllOutEpInterrupt>
 8002298:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 800229a:	e062      	b.n	8002362 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 800229c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800229e:	f003 0301 	and.w	r3, r3, #1
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d057      	beq.n	8002356 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80022ac:	b2d2      	uxtb	r2, r2
 80022ae:	4611      	mov	r1, r2
 80022b0:	4618      	mov	r0, r3
 80022b2:	f004 fa86 	bl	80067c2 <USB_ReadDevOutEPInterrupt>
 80022b6:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80022b8:	693b      	ldr	r3, [r7, #16]
 80022ba:	f003 0301 	and.w	r3, r3, #1
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d00c      	beq.n	80022dc <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80022c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022c4:	015a      	lsls	r2, r3, #5
 80022c6:	69fb      	ldr	r3, [r7, #28]
 80022c8:	4413      	add	r3, r2
 80022ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80022ce:	461a      	mov	r2, r3
 80022d0:	2301      	movs	r3, #1
 80022d2:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80022d4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80022d6:	6878      	ldr	r0, [r7, #4]
 80022d8:	f000 fdce 	bl	8002e78 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80022dc:	693b      	ldr	r3, [r7, #16]
 80022de:	f003 0308 	and.w	r3, r3, #8
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d00c      	beq.n	8002300 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80022e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022e8:	015a      	lsls	r2, r3, #5
 80022ea:	69fb      	ldr	r3, [r7, #28]
 80022ec:	4413      	add	r3, r2
 80022ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80022f2:	461a      	mov	r2, r3
 80022f4:	2308      	movs	r3, #8
 80022f6:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80022f8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80022fa:	6878      	ldr	r0, [r7, #4]
 80022fc:	f000 fec8 	bl	8003090 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002300:	693b      	ldr	r3, [r7, #16]
 8002302:	f003 0310 	and.w	r3, r3, #16
 8002306:	2b00      	cmp	r3, #0
 8002308:	d008      	beq.n	800231c <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800230a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800230c:	015a      	lsls	r2, r3, #5
 800230e:	69fb      	ldr	r3, [r7, #28]
 8002310:	4413      	add	r3, r2
 8002312:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002316:	461a      	mov	r2, r3
 8002318:	2310      	movs	r3, #16
 800231a:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800231c:	693b      	ldr	r3, [r7, #16]
 800231e:	f003 0320 	and.w	r3, r3, #32
 8002322:	2b00      	cmp	r3, #0
 8002324:	d008      	beq.n	8002338 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002326:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002328:	015a      	lsls	r2, r3, #5
 800232a:	69fb      	ldr	r3, [r7, #28]
 800232c:	4413      	add	r3, r2
 800232e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002332:	461a      	mov	r2, r3
 8002334:	2320      	movs	r3, #32
 8002336:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002338:	693b      	ldr	r3, [r7, #16]
 800233a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800233e:	2b00      	cmp	r3, #0
 8002340:	d009      	beq.n	8002356 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8002342:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002344:	015a      	lsls	r2, r3, #5
 8002346:	69fb      	ldr	r3, [r7, #28]
 8002348:	4413      	add	r3, r2
 800234a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800234e:	461a      	mov	r2, r3
 8002350:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002354:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8002356:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002358:	3301      	adds	r3, #1
 800235a:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800235c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800235e:	085b      	lsrs	r3, r3, #1
 8002360:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002362:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002364:	2b00      	cmp	r3, #0
 8002366:	d199      	bne.n	800229c <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	4618      	mov	r0, r3
 800236e:	f004 f9e1 	bl	8006734 <USB_ReadInterrupts>
 8002372:	4603      	mov	r3, r0
 8002374:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002378:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800237c:	f040 80c0 	bne.w	8002500 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	4618      	mov	r0, r3
 8002386:	f004 fa02 	bl	800678e <USB_ReadDevAllInEpInterrupt>
 800238a:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 800238c:	2300      	movs	r3, #0
 800238e:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8002390:	e0b2      	b.n	80024f8 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002392:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002394:	f003 0301 	and.w	r3, r3, #1
 8002398:	2b00      	cmp	r3, #0
 800239a:	f000 80a7 	beq.w	80024ec <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80023a4:	b2d2      	uxtb	r2, r2
 80023a6:	4611      	mov	r1, r2
 80023a8:	4618      	mov	r0, r3
 80023aa:	f004 fa28 	bl	80067fe <USB_ReadDevInEPInterrupt>
 80023ae:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80023b0:	693b      	ldr	r3, [r7, #16]
 80023b2:	f003 0301 	and.w	r3, r3, #1
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d057      	beq.n	800246a <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80023ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023bc:	f003 030f 	and.w	r3, r3, #15
 80023c0:	2201      	movs	r2, #1
 80023c2:	fa02 f303 	lsl.w	r3, r2, r3
 80023c6:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80023c8:	69fb      	ldr	r3, [r7, #28]
 80023ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80023ce:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	43db      	mvns	r3, r3
 80023d4:	69f9      	ldr	r1, [r7, #28]
 80023d6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80023da:	4013      	ands	r3, r2
 80023dc:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80023de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023e0:	015a      	lsls	r2, r3, #5
 80023e2:	69fb      	ldr	r3, [r7, #28]
 80023e4:	4413      	add	r3, r2
 80023e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80023ea:	461a      	mov	r2, r3
 80023ec:	2301      	movs	r3, #1
 80023ee:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	691b      	ldr	r3, [r3, #16]
 80023f4:	2b01      	cmp	r3, #1
 80023f6:	d132      	bne.n	800245e <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80023f8:	6879      	ldr	r1, [r7, #4]
 80023fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80023fc:	4613      	mov	r3, r2
 80023fe:	00db      	lsls	r3, r3, #3
 8002400:	1a9b      	subs	r3, r3, r2
 8002402:	009b      	lsls	r3, r3, #2
 8002404:	440b      	add	r3, r1
 8002406:	3348      	adds	r3, #72	; 0x48
 8002408:	6819      	ldr	r1, [r3, #0]
 800240a:	6878      	ldr	r0, [r7, #4]
 800240c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800240e:	4613      	mov	r3, r2
 8002410:	00db      	lsls	r3, r3, #3
 8002412:	1a9b      	subs	r3, r3, r2
 8002414:	009b      	lsls	r3, r3, #2
 8002416:	4403      	add	r3, r0
 8002418:	3344      	adds	r3, #68	; 0x44
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	4419      	add	r1, r3
 800241e:	6878      	ldr	r0, [r7, #4]
 8002420:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002422:	4613      	mov	r3, r2
 8002424:	00db      	lsls	r3, r3, #3
 8002426:	1a9b      	subs	r3, r3, r2
 8002428:	009b      	lsls	r3, r3, #2
 800242a:	4403      	add	r3, r0
 800242c:	3348      	adds	r3, #72	; 0x48
 800242e:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8002430:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002432:	2b00      	cmp	r3, #0
 8002434:	d113      	bne.n	800245e <HAL_PCD_IRQHandler+0x31c>
 8002436:	6879      	ldr	r1, [r7, #4]
 8002438:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800243a:	4613      	mov	r3, r2
 800243c:	00db      	lsls	r3, r3, #3
 800243e:	1a9b      	subs	r3, r3, r2
 8002440:	009b      	lsls	r3, r3, #2
 8002442:	440b      	add	r3, r1
 8002444:	3350      	adds	r3, #80	; 0x50
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	2b00      	cmp	r3, #0
 800244a:	d108      	bne.n	800245e <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	6818      	ldr	r0, [r3, #0]
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002456:	461a      	mov	r2, r3
 8002458:	2101      	movs	r1, #1
 800245a:	f004 fa31 	bl	80068c0 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800245e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002460:	b2db      	uxtb	r3, r3
 8002462:	4619      	mov	r1, r3
 8002464:	6878      	ldr	r0, [r7, #4]
 8002466:	f006 f9e4 	bl	8008832 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800246a:	693b      	ldr	r3, [r7, #16]
 800246c:	f003 0308 	and.w	r3, r3, #8
 8002470:	2b00      	cmp	r3, #0
 8002472:	d008      	beq.n	8002486 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002474:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002476:	015a      	lsls	r2, r3, #5
 8002478:	69fb      	ldr	r3, [r7, #28]
 800247a:	4413      	add	r3, r2
 800247c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002480:	461a      	mov	r2, r3
 8002482:	2308      	movs	r3, #8
 8002484:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002486:	693b      	ldr	r3, [r7, #16]
 8002488:	f003 0310 	and.w	r3, r3, #16
 800248c:	2b00      	cmp	r3, #0
 800248e:	d008      	beq.n	80024a2 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8002490:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002492:	015a      	lsls	r2, r3, #5
 8002494:	69fb      	ldr	r3, [r7, #28]
 8002496:	4413      	add	r3, r2
 8002498:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800249c:	461a      	mov	r2, r3
 800249e:	2310      	movs	r3, #16
 80024a0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80024a2:	693b      	ldr	r3, [r7, #16]
 80024a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d008      	beq.n	80024be <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80024ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024ae:	015a      	lsls	r2, r3, #5
 80024b0:	69fb      	ldr	r3, [r7, #28]
 80024b2:	4413      	add	r3, r2
 80024b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80024b8:	461a      	mov	r2, r3
 80024ba:	2340      	movs	r3, #64	; 0x40
 80024bc:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80024be:	693b      	ldr	r3, [r7, #16]
 80024c0:	f003 0302 	and.w	r3, r3, #2
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d008      	beq.n	80024da <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80024c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024ca:	015a      	lsls	r2, r3, #5
 80024cc:	69fb      	ldr	r3, [r7, #28]
 80024ce:	4413      	add	r3, r2
 80024d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80024d4:	461a      	mov	r2, r3
 80024d6:	2302      	movs	r3, #2
 80024d8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80024da:	693b      	ldr	r3, [r7, #16]
 80024dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d003      	beq.n	80024ec <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80024e4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80024e6:	6878      	ldr	r0, [r7, #4]
 80024e8:	f000 fc38 	bl	8002d5c <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80024ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024ee:	3301      	adds	r3, #1
 80024f0:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80024f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024f4:	085b      	lsrs	r3, r3, #1
 80024f6:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80024f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	f47f af49 	bne.w	8002392 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	4618      	mov	r0, r3
 8002506:	f004 f915 	bl	8006734 <USB_ReadInterrupts>
 800250a:	4603      	mov	r3, r0
 800250c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002510:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002514:	d122      	bne.n	800255c <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002516:	69fb      	ldr	r3, [r7, #28]
 8002518:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800251c:	685b      	ldr	r3, [r3, #4]
 800251e:	69fa      	ldr	r2, [r7, #28]
 8002520:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002524:	f023 0301 	bic.w	r3, r3, #1
 8002528:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8002530:	2b01      	cmp	r3, #1
 8002532:	d108      	bne.n	8002546 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	2200      	movs	r2, #0
 8002538:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800253c:	2100      	movs	r1, #0
 800253e:	6878      	ldr	r0, [r7, #4]
 8002540:	f006 fbc8 	bl	8008cd4 <HAL_PCDEx_LPM_Callback>
 8002544:	e002      	b.n	800254c <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8002546:	6878      	ldr	r0, [r7, #4]
 8002548:	f006 f9ea 	bl	8008920 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	695a      	ldr	r2, [r3, #20]
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800255a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	4618      	mov	r0, r3
 8002562:	f004 f8e7 	bl	8006734 <USB_ReadInterrupts>
 8002566:	4603      	mov	r3, r0
 8002568:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800256c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002570:	d112      	bne.n	8002598 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002572:	69fb      	ldr	r3, [r7, #28]
 8002574:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002578:	689b      	ldr	r3, [r3, #8]
 800257a:	f003 0301 	and.w	r3, r3, #1
 800257e:	2b01      	cmp	r3, #1
 8002580:	d102      	bne.n	8002588 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002582:	6878      	ldr	r0, [r7, #4]
 8002584:	f006 f9a6 	bl	80088d4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	695a      	ldr	r2, [r3, #20]
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8002596:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	4618      	mov	r0, r3
 800259e:	f004 f8c9 	bl	8006734 <USB_ReadInterrupts>
 80025a2:	4603      	mov	r3, r0
 80025a4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80025a8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80025ac:	d121      	bne.n	80025f2 <HAL_PCD_IRQHandler+0x4b0>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	695a      	ldr	r2, [r3, #20]
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 80025bc:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d111      	bne.n	80025ec <HAL_PCD_IRQHandler+0x4aa>
      {
        hpcd->LPM_State = LPM_L1;
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	2201      	movs	r2, #1
 80025cc:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025d6:	089b      	lsrs	r3, r3, #2
 80025d8:	f003 020f 	and.w	r2, r3, #15
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80025e2:	2101      	movs	r1, #1
 80025e4:	6878      	ldr	r0, [r7, #4]
 80025e6:	f006 fb75 	bl	8008cd4 <HAL_PCDEx_LPM_Callback>
 80025ea:	e002      	b.n	80025f2 <HAL_PCD_IRQHandler+0x4b0>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80025ec:	6878      	ldr	r0, [r7, #4]
 80025ee:	f006 f971 	bl	80088d4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	4618      	mov	r0, r3
 80025f8:	f004 f89c 	bl	8006734 <USB_ReadInterrupts>
 80025fc:	4603      	mov	r3, r0
 80025fe:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002602:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002606:	f040 80b7 	bne.w	8002778 <HAL_PCD_IRQHandler+0x636>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800260a:	69fb      	ldr	r3, [r7, #28]
 800260c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002610:	685b      	ldr	r3, [r3, #4]
 8002612:	69fa      	ldr	r2, [r7, #28]
 8002614:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002618:	f023 0301 	bic.w	r3, r3, #1
 800261c:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	2110      	movs	r1, #16
 8002624:	4618      	mov	r0, r3
 8002626:	f003 f90d 	bl	8005844 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800262a:	2300      	movs	r3, #0
 800262c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800262e:	e046      	b.n	80026be <HAL_PCD_IRQHandler+0x57c>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8002630:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002632:	015a      	lsls	r2, r3, #5
 8002634:	69fb      	ldr	r3, [r7, #28]
 8002636:	4413      	add	r3, r2
 8002638:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800263c:	461a      	mov	r2, r3
 800263e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002642:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002644:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002646:	015a      	lsls	r2, r3, #5
 8002648:	69fb      	ldr	r3, [r7, #28]
 800264a:	4413      	add	r3, r2
 800264c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002654:	0151      	lsls	r1, r2, #5
 8002656:	69fa      	ldr	r2, [r7, #28]
 8002658:	440a      	add	r2, r1
 800265a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800265e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002662:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002664:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002666:	015a      	lsls	r2, r3, #5
 8002668:	69fb      	ldr	r3, [r7, #28]
 800266a:	4413      	add	r3, r2
 800266c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002670:	461a      	mov	r2, r3
 8002672:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002676:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002678:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800267a:	015a      	lsls	r2, r3, #5
 800267c:	69fb      	ldr	r3, [r7, #28]
 800267e:	4413      	add	r3, r2
 8002680:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002688:	0151      	lsls	r1, r2, #5
 800268a:	69fa      	ldr	r2, [r7, #28]
 800268c:	440a      	add	r2, r1
 800268e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002692:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002696:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002698:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800269a:	015a      	lsls	r2, r3, #5
 800269c:	69fb      	ldr	r3, [r7, #28]
 800269e:	4413      	add	r3, r2
 80026a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80026a8:	0151      	lsls	r1, r2, #5
 80026aa:	69fa      	ldr	r2, [r7, #28]
 80026ac:	440a      	add	r2, r1
 80026ae:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80026b2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80026b6:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80026b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026ba:	3301      	adds	r3, #1
 80026bc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	685b      	ldr	r3, [r3, #4]
 80026c2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80026c4:	429a      	cmp	r2, r3
 80026c6:	d3b3      	bcc.n	8002630 <HAL_PCD_IRQHandler+0x4ee>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80026c8:	69fb      	ldr	r3, [r7, #28]
 80026ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80026ce:	69db      	ldr	r3, [r3, #28]
 80026d0:	69fa      	ldr	r2, [r7, #28]
 80026d2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80026d6:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80026da:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d016      	beq.n	8002712 <HAL_PCD_IRQHandler+0x5d0>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80026e4:	69fb      	ldr	r3, [r7, #28]
 80026e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80026ea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80026ee:	69fa      	ldr	r2, [r7, #28]
 80026f0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80026f4:	f043 030b 	orr.w	r3, r3, #11
 80026f8:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80026fc:	69fb      	ldr	r3, [r7, #28]
 80026fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002702:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002704:	69fa      	ldr	r2, [r7, #28]
 8002706:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800270a:	f043 030b 	orr.w	r3, r3, #11
 800270e:	6453      	str	r3, [r2, #68]	; 0x44
 8002710:	e015      	b.n	800273e <HAL_PCD_IRQHandler+0x5fc>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002712:	69fb      	ldr	r3, [r7, #28]
 8002714:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002718:	695a      	ldr	r2, [r3, #20]
 800271a:	69fb      	ldr	r3, [r7, #28]
 800271c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002720:	4619      	mov	r1, r3
 8002722:	f242 032b 	movw	r3, #8235	; 0x202b
 8002726:	4313      	orrs	r3, r2
 8002728:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800272a:	69fb      	ldr	r3, [r7, #28]
 800272c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002730:	691b      	ldr	r3, [r3, #16]
 8002732:	69fa      	ldr	r2, [r7, #28]
 8002734:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002738:	f043 030b 	orr.w	r3, r3, #11
 800273c:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800273e:	69fb      	ldr	r3, [r7, #28]
 8002740:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	69fa      	ldr	r2, [r7, #28]
 8002748:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800274c:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8002750:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	6818      	ldr	r0, [r3, #0]
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	691b      	ldr	r3, [r3, #16]
 800275a:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002762:	461a      	mov	r2, r3
 8002764:	f004 f8ac 	bl	80068c0 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	695a      	ldr	r2, [r3, #20]
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8002776:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	4618      	mov	r0, r3
 800277e:	f003 ffd9 	bl	8006734 <USB_ReadInterrupts>
 8002782:	4603      	mov	r3, r0
 8002784:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002788:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800278c:	d124      	bne.n	80027d8 <HAL_PCD_IRQHandler+0x696>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	4618      	mov	r0, r3
 8002794:	f004 f870 	bl	8006878 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	4618      	mov	r0, r3
 800279e:	f003 f8ca 	bl	8005936 <USB_GetDevSpeed>
 80027a2:	4603      	mov	r3, r0
 80027a4:	461a      	mov	r2, r3
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681c      	ldr	r4, [r3, #0]
 80027ae:	f001 f9d7 	bl	8003b60 <HAL_RCC_GetHCLKFreq>
 80027b2:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80027b8:	b2db      	uxtb	r3, r3
 80027ba:	461a      	mov	r2, r3
 80027bc:	4620      	mov	r0, r4
 80027be:	f002 fdc3 	bl	8005348 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80027c2:	6878      	ldr	r0, [r7, #4]
 80027c4:	f006 f85d 	bl	8008882 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	695a      	ldr	r2, [r3, #20]
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80027d6:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	4618      	mov	r0, r3
 80027de:	f003 ffa9 	bl	8006734 <USB_ReadInterrupts>
 80027e2:	4603      	mov	r3, r0
 80027e4:	f003 0308 	and.w	r3, r3, #8
 80027e8:	2b08      	cmp	r3, #8
 80027ea:	d10a      	bne.n	8002802 <HAL_PCD_IRQHandler+0x6c0>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80027ec:	6878      	ldr	r0, [r7, #4]
 80027ee:	f006 f83a 	bl	8008866 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	695a      	ldr	r2, [r3, #20]
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f002 0208 	and.w	r2, r2, #8
 8002800:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	4618      	mov	r0, r3
 8002808:	f003 ff94 	bl	8006734 <USB_ReadInterrupts>
 800280c:	4603      	mov	r3, r0
 800280e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002812:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002816:	d10f      	bne.n	8002838 <HAL_PCD_IRQHandler+0x6f6>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8002818:	2300      	movs	r3, #0
 800281a:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800281c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800281e:	b2db      	uxtb	r3, r3
 8002820:	4619      	mov	r1, r3
 8002822:	6878      	ldr	r0, [r7, #4]
 8002824:	f006 f89c 	bl	8008960 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	695a      	ldr	r2, [r3, #20]
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8002836:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	4618      	mov	r0, r3
 800283e:	f003 ff79 	bl	8006734 <USB_ReadInterrupts>
 8002842:	4603      	mov	r3, r0
 8002844:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002848:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800284c:	d10f      	bne.n	800286e <HAL_PCD_IRQHandler+0x72c>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 800284e:	2300      	movs	r3, #0
 8002850:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002852:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002854:	b2db      	uxtb	r3, r3
 8002856:	4619      	mov	r1, r3
 8002858:	6878      	ldr	r0, [r7, #4]
 800285a:	f006 f86f 	bl	800893c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	695a      	ldr	r2, [r3, #20]
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 800286c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	4618      	mov	r0, r3
 8002874:	f003 ff5e 	bl	8006734 <USB_ReadInterrupts>
 8002878:	4603      	mov	r3, r0
 800287a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800287e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002882:	d10a      	bne.n	800289a <HAL_PCD_IRQHandler+0x758>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8002884:	6878      	ldr	r0, [r7, #4]
 8002886:	f006 f87d 	bl	8008984 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	695a      	ldr	r2, [r3, #20]
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8002898:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	4618      	mov	r0, r3
 80028a0:	f003 ff48 	bl	8006734 <USB_ReadInterrupts>
 80028a4:	4603      	mov	r3, r0
 80028a6:	f003 0304 	and.w	r3, r3, #4
 80028aa:	2b04      	cmp	r3, #4
 80028ac:	d115      	bne.n	80028da <HAL_PCD_IRQHandler+0x798>
    {
      temp = hpcd->Instance->GOTGINT;
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	685b      	ldr	r3, [r3, #4]
 80028b4:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80028b6:	69bb      	ldr	r3, [r7, #24]
 80028b8:	f003 0304 	and.w	r3, r3, #4
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d002      	beq.n	80028c6 <HAL_PCD_IRQHandler+0x784>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80028c0:	6878      	ldr	r0, [r7, #4]
 80028c2:	f006 f86d 	bl	80089a0 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	6859      	ldr	r1, [r3, #4]
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	69ba      	ldr	r2, [r7, #24]
 80028d2:	430a      	orrs	r2, r1
 80028d4:	605a      	str	r2, [r3, #4]
 80028d6:	e000      	b.n	80028da <HAL_PCD_IRQHandler+0x798>
      return;
 80028d8:	bf00      	nop
    }
  }
}
 80028da:	3734      	adds	r7, #52	; 0x34
 80028dc:	46bd      	mov	sp, r7
 80028de:	bd90      	pop	{r4, r7, pc}

080028e0 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80028e0:	b580      	push	{r7, lr}
 80028e2:	b082      	sub	sp, #8
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	6078      	str	r0, [r7, #4]
 80028e8:	460b      	mov	r3, r1
 80028ea:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80028f2:	2b01      	cmp	r3, #1
 80028f4:	d101      	bne.n	80028fa <HAL_PCD_SetAddress+0x1a>
 80028f6:	2302      	movs	r3, #2
 80028f8:	e013      	b.n	8002922 <HAL_PCD_SetAddress+0x42>
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	2201      	movs	r2, #1
 80028fe:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	78fa      	ldrb	r2, [r7, #3]
 8002906:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	78fa      	ldrb	r2, [r7, #3]
 8002910:	4611      	mov	r1, r2
 8002912:	4618      	mov	r0, r3
 8002914:	f003 fea6 	bl	8006664 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	2200      	movs	r2, #0
 800291c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002920:	2300      	movs	r3, #0
}
 8002922:	4618      	mov	r0, r3
 8002924:	3708      	adds	r7, #8
 8002926:	46bd      	mov	sp, r7
 8002928:	bd80      	pop	{r7, pc}

0800292a <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800292a:	b580      	push	{r7, lr}
 800292c:	b084      	sub	sp, #16
 800292e:	af00      	add	r7, sp, #0
 8002930:	6078      	str	r0, [r7, #4]
 8002932:	4608      	mov	r0, r1
 8002934:	4611      	mov	r1, r2
 8002936:	461a      	mov	r2, r3
 8002938:	4603      	mov	r3, r0
 800293a:	70fb      	strb	r3, [r7, #3]
 800293c:	460b      	mov	r3, r1
 800293e:	803b      	strh	r3, [r7, #0]
 8002940:	4613      	mov	r3, r2
 8002942:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002944:	2300      	movs	r3, #0
 8002946:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002948:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800294c:	2b00      	cmp	r3, #0
 800294e:	da0f      	bge.n	8002970 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002950:	78fb      	ldrb	r3, [r7, #3]
 8002952:	f003 020f 	and.w	r2, r3, #15
 8002956:	4613      	mov	r3, r2
 8002958:	00db      	lsls	r3, r3, #3
 800295a:	1a9b      	subs	r3, r3, r2
 800295c:	009b      	lsls	r3, r3, #2
 800295e:	3338      	adds	r3, #56	; 0x38
 8002960:	687a      	ldr	r2, [r7, #4]
 8002962:	4413      	add	r3, r2
 8002964:	3304      	adds	r3, #4
 8002966:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	2201      	movs	r2, #1
 800296c:	705a      	strb	r2, [r3, #1]
 800296e:	e00f      	b.n	8002990 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002970:	78fb      	ldrb	r3, [r7, #3]
 8002972:	f003 020f 	and.w	r2, r3, #15
 8002976:	4613      	mov	r3, r2
 8002978:	00db      	lsls	r3, r3, #3
 800297a:	1a9b      	subs	r3, r3, r2
 800297c:	009b      	lsls	r3, r3, #2
 800297e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002982:	687a      	ldr	r2, [r7, #4]
 8002984:	4413      	add	r3, r2
 8002986:	3304      	adds	r3, #4
 8002988:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	2200      	movs	r2, #0
 800298e:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002990:	78fb      	ldrb	r3, [r7, #3]
 8002992:	f003 030f 	and.w	r3, r3, #15
 8002996:	b2da      	uxtb	r2, r3
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800299c:	883a      	ldrh	r2, [r7, #0]
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	78ba      	ldrb	r2, [r7, #2]
 80029a6:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	785b      	ldrb	r3, [r3, #1]
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d004      	beq.n	80029ba <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	781b      	ldrb	r3, [r3, #0]
 80029b4:	b29a      	uxth	r2, r3
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80029ba:	78bb      	ldrb	r3, [r7, #2]
 80029bc:	2b02      	cmp	r3, #2
 80029be:	d102      	bne.n	80029c6 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	2200      	movs	r2, #0
 80029c4:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80029cc:	2b01      	cmp	r3, #1
 80029ce:	d101      	bne.n	80029d4 <HAL_PCD_EP_Open+0xaa>
 80029d0:	2302      	movs	r3, #2
 80029d2:	e00e      	b.n	80029f2 <HAL_PCD_EP_Open+0xc8>
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	2201      	movs	r2, #1
 80029d8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	68f9      	ldr	r1, [r7, #12]
 80029e2:	4618      	mov	r0, r3
 80029e4:	f002 ffcc 	bl	8005980 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	2200      	movs	r2, #0
 80029ec:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 80029f0:	7afb      	ldrb	r3, [r7, #11]
}
 80029f2:	4618      	mov	r0, r3
 80029f4:	3710      	adds	r7, #16
 80029f6:	46bd      	mov	sp, r7
 80029f8:	bd80      	pop	{r7, pc}

080029fa <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80029fa:	b580      	push	{r7, lr}
 80029fc:	b084      	sub	sp, #16
 80029fe:	af00      	add	r7, sp, #0
 8002a00:	6078      	str	r0, [r7, #4]
 8002a02:	460b      	mov	r3, r1
 8002a04:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002a06:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	da0f      	bge.n	8002a2e <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002a0e:	78fb      	ldrb	r3, [r7, #3]
 8002a10:	f003 020f 	and.w	r2, r3, #15
 8002a14:	4613      	mov	r3, r2
 8002a16:	00db      	lsls	r3, r3, #3
 8002a18:	1a9b      	subs	r3, r3, r2
 8002a1a:	009b      	lsls	r3, r3, #2
 8002a1c:	3338      	adds	r3, #56	; 0x38
 8002a1e:	687a      	ldr	r2, [r7, #4]
 8002a20:	4413      	add	r3, r2
 8002a22:	3304      	adds	r3, #4
 8002a24:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	2201      	movs	r2, #1
 8002a2a:	705a      	strb	r2, [r3, #1]
 8002a2c:	e00f      	b.n	8002a4e <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002a2e:	78fb      	ldrb	r3, [r7, #3]
 8002a30:	f003 020f 	and.w	r2, r3, #15
 8002a34:	4613      	mov	r3, r2
 8002a36:	00db      	lsls	r3, r3, #3
 8002a38:	1a9b      	subs	r3, r3, r2
 8002a3a:	009b      	lsls	r3, r3, #2
 8002a3c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002a40:	687a      	ldr	r2, [r7, #4]
 8002a42:	4413      	add	r3, r2
 8002a44:	3304      	adds	r3, #4
 8002a46:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	2200      	movs	r2, #0
 8002a4c:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8002a4e:	78fb      	ldrb	r3, [r7, #3]
 8002a50:	f003 030f 	and.w	r3, r3, #15
 8002a54:	b2da      	uxtb	r2, r3
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002a60:	2b01      	cmp	r3, #1
 8002a62:	d101      	bne.n	8002a68 <HAL_PCD_EP_Close+0x6e>
 8002a64:	2302      	movs	r3, #2
 8002a66:	e00e      	b.n	8002a86 <HAL_PCD_EP_Close+0x8c>
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	2201      	movs	r2, #1
 8002a6c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	68f9      	ldr	r1, [r7, #12]
 8002a76:	4618      	mov	r0, r3
 8002a78:	f003 f80a 	bl	8005a90 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	2200      	movs	r2, #0
 8002a80:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8002a84:	2300      	movs	r3, #0
}
 8002a86:	4618      	mov	r0, r3
 8002a88:	3710      	adds	r7, #16
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	bd80      	pop	{r7, pc}

08002a8e <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002a8e:	b580      	push	{r7, lr}
 8002a90:	b086      	sub	sp, #24
 8002a92:	af00      	add	r7, sp, #0
 8002a94:	60f8      	str	r0, [r7, #12]
 8002a96:	607a      	str	r2, [r7, #4]
 8002a98:	603b      	str	r3, [r7, #0]
 8002a9a:	460b      	mov	r3, r1
 8002a9c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002a9e:	7afb      	ldrb	r3, [r7, #11]
 8002aa0:	f003 020f 	and.w	r2, r3, #15
 8002aa4:	4613      	mov	r3, r2
 8002aa6:	00db      	lsls	r3, r3, #3
 8002aa8:	1a9b      	subs	r3, r3, r2
 8002aaa:	009b      	lsls	r3, r3, #2
 8002aac:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002ab0:	68fa      	ldr	r2, [r7, #12]
 8002ab2:	4413      	add	r3, r2
 8002ab4:	3304      	adds	r3, #4
 8002ab6:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002ab8:	697b      	ldr	r3, [r7, #20]
 8002aba:	687a      	ldr	r2, [r7, #4]
 8002abc:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002abe:	697b      	ldr	r3, [r7, #20]
 8002ac0:	683a      	ldr	r2, [r7, #0]
 8002ac2:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8002ac4:	697b      	ldr	r3, [r7, #20]
 8002ac6:	2200      	movs	r2, #0
 8002ac8:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8002aca:	697b      	ldr	r3, [r7, #20]
 8002acc:	2200      	movs	r2, #0
 8002ace:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002ad0:	7afb      	ldrb	r3, [r7, #11]
 8002ad2:	f003 030f 	and.w	r3, r3, #15
 8002ad6:	b2da      	uxtb	r2, r3
 8002ad8:	697b      	ldr	r3, [r7, #20]
 8002ada:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	691b      	ldr	r3, [r3, #16]
 8002ae0:	2b01      	cmp	r3, #1
 8002ae2:	d102      	bne.n	8002aea <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002ae4:	687a      	ldr	r2, [r7, #4]
 8002ae6:	697b      	ldr	r3, [r7, #20]
 8002ae8:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002aea:	7afb      	ldrb	r3, [r7, #11]
 8002aec:	f003 030f 	and.w	r3, r3, #15
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d109      	bne.n	8002b08 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	6818      	ldr	r0, [r3, #0]
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	691b      	ldr	r3, [r3, #16]
 8002afc:	b2db      	uxtb	r3, r3
 8002afe:	461a      	mov	r2, r3
 8002b00:	6979      	ldr	r1, [r7, #20]
 8002b02:	f003 faed 	bl	80060e0 <USB_EP0StartXfer>
 8002b06:	e008      	b.n	8002b1a <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	6818      	ldr	r0, [r3, #0]
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	691b      	ldr	r3, [r3, #16]
 8002b10:	b2db      	uxtb	r3, r3
 8002b12:	461a      	mov	r2, r3
 8002b14:	6979      	ldr	r1, [r7, #20]
 8002b16:	f003 f897 	bl	8005c48 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002b1a:	2300      	movs	r3, #0
}
 8002b1c:	4618      	mov	r0, r3
 8002b1e:	3718      	adds	r7, #24
 8002b20:	46bd      	mov	sp, r7
 8002b22:	bd80      	pop	{r7, pc}

08002b24 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002b24:	b480      	push	{r7}
 8002b26:	b083      	sub	sp, #12
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	6078      	str	r0, [r7, #4]
 8002b2c:	460b      	mov	r3, r1
 8002b2e:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002b30:	78fb      	ldrb	r3, [r7, #3]
 8002b32:	f003 020f 	and.w	r2, r3, #15
 8002b36:	6879      	ldr	r1, [r7, #4]
 8002b38:	4613      	mov	r3, r2
 8002b3a:	00db      	lsls	r3, r3, #3
 8002b3c:	1a9b      	subs	r3, r3, r2
 8002b3e:	009b      	lsls	r3, r3, #2
 8002b40:	440b      	add	r3, r1
 8002b42:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8002b46:	681b      	ldr	r3, [r3, #0]
}
 8002b48:	4618      	mov	r0, r3
 8002b4a:	370c      	adds	r7, #12
 8002b4c:	46bd      	mov	sp, r7
 8002b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b52:	4770      	bx	lr

08002b54 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002b54:	b580      	push	{r7, lr}
 8002b56:	b086      	sub	sp, #24
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	60f8      	str	r0, [r7, #12]
 8002b5c:	607a      	str	r2, [r7, #4]
 8002b5e:	603b      	str	r3, [r7, #0]
 8002b60:	460b      	mov	r3, r1
 8002b62:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002b64:	7afb      	ldrb	r3, [r7, #11]
 8002b66:	f003 020f 	and.w	r2, r3, #15
 8002b6a:	4613      	mov	r3, r2
 8002b6c:	00db      	lsls	r3, r3, #3
 8002b6e:	1a9b      	subs	r3, r3, r2
 8002b70:	009b      	lsls	r3, r3, #2
 8002b72:	3338      	adds	r3, #56	; 0x38
 8002b74:	68fa      	ldr	r2, [r7, #12]
 8002b76:	4413      	add	r3, r2
 8002b78:	3304      	adds	r3, #4
 8002b7a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002b7c:	697b      	ldr	r3, [r7, #20]
 8002b7e:	687a      	ldr	r2, [r7, #4]
 8002b80:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002b82:	697b      	ldr	r3, [r7, #20]
 8002b84:	683a      	ldr	r2, [r7, #0]
 8002b86:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8002b88:	697b      	ldr	r3, [r7, #20]
 8002b8a:	2200      	movs	r2, #0
 8002b8c:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8002b8e:	697b      	ldr	r3, [r7, #20]
 8002b90:	2201      	movs	r2, #1
 8002b92:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002b94:	7afb      	ldrb	r3, [r7, #11]
 8002b96:	f003 030f 	and.w	r3, r3, #15
 8002b9a:	b2da      	uxtb	r2, r3
 8002b9c:	697b      	ldr	r3, [r7, #20]
 8002b9e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	691b      	ldr	r3, [r3, #16]
 8002ba4:	2b01      	cmp	r3, #1
 8002ba6:	d102      	bne.n	8002bae <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002ba8:	687a      	ldr	r2, [r7, #4]
 8002baa:	697b      	ldr	r3, [r7, #20]
 8002bac:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002bae:	7afb      	ldrb	r3, [r7, #11]
 8002bb0:	f003 030f 	and.w	r3, r3, #15
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d109      	bne.n	8002bcc <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	6818      	ldr	r0, [r3, #0]
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	691b      	ldr	r3, [r3, #16]
 8002bc0:	b2db      	uxtb	r3, r3
 8002bc2:	461a      	mov	r2, r3
 8002bc4:	6979      	ldr	r1, [r7, #20]
 8002bc6:	f003 fa8b 	bl	80060e0 <USB_EP0StartXfer>
 8002bca:	e008      	b.n	8002bde <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	6818      	ldr	r0, [r3, #0]
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	691b      	ldr	r3, [r3, #16]
 8002bd4:	b2db      	uxtb	r3, r3
 8002bd6:	461a      	mov	r2, r3
 8002bd8:	6979      	ldr	r1, [r7, #20]
 8002bda:	f003 f835 	bl	8005c48 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002bde:	2300      	movs	r3, #0
}
 8002be0:	4618      	mov	r0, r3
 8002be2:	3718      	adds	r7, #24
 8002be4:	46bd      	mov	sp, r7
 8002be6:	bd80      	pop	{r7, pc}

08002be8 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002be8:	b580      	push	{r7, lr}
 8002bea:	b084      	sub	sp, #16
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	6078      	str	r0, [r7, #4]
 8002bf0:	460b      	mov	r3, r1
 8002bf2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002bf4:	78fb      	ldrb	r3, [r7, #3]
 8002bf6:	f003 020f 	and.w	r2, r3, #15
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	685b      	ldr	r3, [r3, #4]
 8002bfe:	429a      	cmp	r2, r3
 8002c00:	d901      	bls.n	8002c06 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002c02:	2301      	movs	r3, #1
 8002c04:	e050      	b.n	8002ca8 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002c06:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	da0f      	bge.n	8002c2e <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002c0e:	78fb      	ldrb	r3, [r7, #3]
 8002c10:	f003 020f 	and.w	r2, r3, #15
 8002c14:	4613      	mov	r3, r2
 8002c16:	00db      	lsls	r3, r3, #3
 8002c18:	1a9b      	subs	r3, r3, r2
 8002c1a:	009b      	lsls	r3, r3, #2
 8002c1c:	3338      	adds	r3, #56	; 0x38
 8002c1e:	687a      	ldr	r2, [r7, #4]
 8002c20:	4413      	add	r3, r2
 8002c22:	3304      	adds	r3, #4
 8002c24:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	2201      	movs	r2, #1
 8002c2a:	705a      	strb	r2, [r3, #1]
 8002c2c:	e00d      	b.n	8002c4a <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002c2e:	78fa      	ldrb	r2, [r7, #3]
 8002c30:	4613      	mov	r3, r2
 8002c32:	00db      	lsls	r3, r3, #3
 8002c34:	1a9b      	subs	r3, r3, r2
 8002c36:	009b      	lsls	r3, r3, #2
 8002c38:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002c3c:	687a      	ldr	r2, [r7, #4]
 8002c3e:	4413      	add	r3, r2
 8002c40:	3304      	adds	r3, #4
 8002c42:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	2200      	movs	r2, #0
 8002c48:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	2201      	movs	r2, #1
 8002c4e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002c50:	78fb      	ldrb	r3, [r7, #3]
 8002c52:	f003 030f 	and.w	r3, r3, #15
 8002c56:	b2da      	uxtb	r2, r3
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002c62:	2b01      	cmp	r3, #1
 8002c64:	d101      	bne.n	8002c6a <HAL_PCD_EP_SetStall+0x82>
 8002c66:	2302      	movs	r3, #2
 8002c68:	e01e      	b.n	8002ca8 <HAL_PCD_EP_SetStall+0xc0>
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	2201      	movs	r2, #1
 8002c6e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	68f9      	ldr	r1, [r7, #12]
 8002c78:	4618      	mov	r0, r3
 8002c7a:	f003 fc1f 	bl	80064bc <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002c7e:	78fb      	ldrb	r3, [r7, #3]
 8002c80:	f003 030f 	and.w	r3, r3, #15
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d10a      	bne.n	8002c9e <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	6818      	ldr	r0, [r3, #0]
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	691b      	ldr	r3, [r3, #16]
 8002c90:	b2d9      	uxtb	r1, r3
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002c98:	461a      	mov	r2, r3
 8002c9a:	f003 fe11 	bl	80068c0 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	2200      	movs	r2, #0
 8002ca2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002ca6:	2300      	movs	r3, #0
}
 8002ca8:	4618      	mov	r0, r3
 8002caa:	3710      	adds	r7, #16
 8002cac:	46bd      	mov	sp, r7
 8002cae:	bd80      	pop	{r7, pc}

08002cb0 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002cb0:	b580      	push	{r7, lr}
 8002cb2:	b084      	sub	sp, #16
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	6078      	str	r0, [r7, #4]
 8002cb8:	460b      	mov	r3, r1
 8002cba:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002cbc:	78fb      	ldrb	r3, [r7, #3]
 8002cbe:	f003 020f 	and.w	r2, r3, #15
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	685b      	ldr	r3, [r3, #4]
 8002cc6:	429a      	cmp	r2, r3
 8002cc8:	d901      	bls.n	8002cce <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002cca:	2301      	movs	r3, #1
 8002ccc:	e042      	b.n	8002d54 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002cce:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	da0f      	bge.n	8002cf6 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002cd6:	78fb      	ldrb	r3, [r7, #3]
 8002cd8:	f003 020f 	and.w	r2, r3, #15
 8002cdc:	4613      	mov	r3, r2
 8002cde:	00db      	lsls	r3, r3, #3
 8002ce0:	1a9b      	subs	r3, r3, r2
 8002ce2:	009b      	lsls	r3, r3, #2
 8002ce4:	3338      	adds	r3, #56	; 0x38
 8002ce6:	687a      	ldr	r2, [r7, #4]
 8002ce8:	4413      	add	r3, r2
 8002cea:	3304      	adds	r3, #4
 8002cec:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	2201      	movs	r2, #1
 8002cf2:	705a      	strb	r2, [r3, #1]
 8002cf4:	e00f      	b.n	8002d16 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002cf6:	78fb      	ldrb	r3, [r7, #3]
 8002cf8:	f003 020f 	and.w	r2, r3, #15
 8002cfc:	4613      	mov	r3, r2
 8002cfe:	00db      	lsls	r3, r3, #3
 8002d00:	1a9b      	subs	r3, r3, r2
 8002d02:	009b      	lsls	r3, r3, #2
 8002d04:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002d08:	687a      	ldr	r2, [r7, #4]
 8002d0a:	4413      	add	r3, r2
 8002d0c:	3304      	adds	r3, #4
 8002d0e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	2200      	movs	r2, #0
 8002d14:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	2200      	movs	r2, #0
 8002d1a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002d1c:	78fb      	ldrb	r3, [r7, #3]
 8002d1e:	f003 030f 	and.w	r3, r3, #15
 8002d22:	b2da      	uxtb	r2, r3
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002d2e:	2b01      	cmp	r3, #1
 8002d30:	d101      	bne.n	8002d36 <HAL_PCD_EP_ClrStall+0x86>
 8002d32:	2302      	movs	r3, #2
 8002d34:	e00e      	b.n	8002d54 <HAL_PCD_EP_ClrStall+0xa4>
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	2201      	movs	r2, #1
 8002d3a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	68f9      	ldr	r1, [r7, #12]
 8002d44:	4618      	mov	r0, r3
 8002d46:	f003 fc27 	bl	8006598 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	2200      	movs	r2, #0
 8002d4e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002d52:	2300      	movs	r3, #0
}
 8002d54:	4618      	mov	r0, r3
 8002d56:	3710      	adds	r7, #16
 8002d58:	46bd      	mov	sp, r7
 8002d5a:	bd80      	pop	{r7, pc}

08002d5c <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002d5c:	b580      	push	{r7, lr}
 8002d5e:	b08a      	sub	sp, #40	; 0x28
 8002d60:	af02      	add	r7, sp, #8
 8002d62:	6078      	str	r0, [r7, #4]
 8002d64:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002d6c:	697b      	ldr	r3, [r7, #20]
 8002d6e:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8002d70:	683a      	ldr	r2, [r7, #0]
 8002d72:	4613      	mov	r3, r2
 8002d74:	00db      	lsls	r3, r3, #3
 8002d76:	1a9b      	subs	r3, r3, r2
 8002d78:	009b      	lsls	r3, r3, #2
 8002d7a:	3338      	adds	r3, #56	; 0x38
 8002d7c:	687a      	ldr	r2, [r7, #4]
 8002d7e:	4413      	add	r3, r2
 8002d80:	3304      	adds	r3, #4
 8002d82:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	699a      	ldr	r2, [r3, #24]
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	695b      	ldr	r3, [r3, #20]
 8002d8c:	429a      	cmp	r2, r3
 8002d8e:	d901      	bls.n	8002d94 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8002d90:	2301      	movs	r3, #1
 8002d92:	e06c      	b.n	8002e6e <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	695a      	ldr	r2, [r3, #20]
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	699b      	ldr	r3, [r3, #24]
 8002d9c:	1ad3      	subs	r3, r2, r3
 8002d9e:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	689b      	ldr	r3, [r3, #8]
 8002da4:	69fa      	ldr	r2, [r7, #28]
 8002da6:	429a      	cmp	r2, r3
 8002da8:	d902      	bls.n	8002db0 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	689b      	ldr	r3, [r3, #8]
 8002dae:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8002db0:	69fb      	ldr	r3, [r7, #28]
 8002db2:	3303      	adds	r3, #3
 8002db4:	089b      	lsrs	r3, r3, #2
 8002db6:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002db8:	e02b      	b.n	8002e12 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	695a      	ldr	r2, [r3, #20]
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	699b      	ldr	r3, [r3, #24]
 8002dc2:	1ad3      	subs	r3, r2, r3
 8002dc4:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	689b      	ldr	r3, [r3, #8]
 8002dca:	69fa      	ldr	r2, [r7, #28]
 8002dcc:	429a      	cmp	r2, r3
 8002dce:	d902      	bls.n	8002dd6 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	689b      	ldr	r3, [r3, #8]
 8002dd4:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8002dd6:	69fb      	ldr	r3, [r7, #28]
 8002dd8:	3303      	adds	r3, #3
 8002dda:	089b      	lsrs	r3, r3, #2
 8002ddc:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	68d9      	ldr	r1, [r3, #12]
 8002de2:	683b      	ldr	r3, [r7, #0]
 8002de4:	b2da      	uxtb	r2, r3
 8002de6:	69fb      	ldr	r3, [r7, #28]
 8002de8:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002dee:	b2db      	uxtb	r3, r3
 8002df0:	9300      	str	r3, [sp, #0]
 8002df2:	4603      	mov	r3, r0
 8002df4:	6978      	ldr	r0, [r7, #20]
 8002df6:	f003 facb 	bl	8006390 <USB_WritePacket>

    ep->xfer_buff  += len;
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	68da      	ldr	r2, [r3, #12]
 8002dfe:	69fb      	ldr	r3, [r7, #28]
 8002e00:	441a      	add	r2, r3
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	699a      	ldr	r2, [r3, #24]
 8002e0a:	69fb      	ldr	r3, [r7, #28]
 8002e0c:	441a      	add	r2, r3
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002e12:	683b      	ldr	r3, [r7, #0]
 8002e14:	015a      	lsls	r2, r3, #5
 8002e16:	693b      	ldr	r3, [r7, #16]
 8002e18:	4413      	add	r3, r2
 8002e1a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002e1e:	699b      	ldr	r3, [r3, #24]
 8002e20:	b29b      	uxth	r3, r3
 8002e22:	69ba      	ldr	r2, [r7, #24]
 8002e24:	429a      	cmp	r2, r3
 8002e26:	d809      	bhi.n	8002e3c <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	699a      	ldr	r2, [r3, #24]
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002e30:	429a      	cmp	r2, r3
 8002e32:	d203      	bcs.n	8002e3c <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	695b      	ldr	r3, [r3, #20]
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d1be      	bne.n	8002dba <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	695a      	ldr	r2, [r3, #20]
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	699b      	ldr	r3, [r3, #24]
 8002e44:	429a      	cmp	r2, r3
 8002e46:	d811      	bhi.n	8002e6c <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002e48:	683b      	ldr	r3, [r7, #0]
 8002e4a:	f003 030f 	and.w	r3, r3, #15
 8002e4e:	2201      	movs	r2, #1
 8002e50:	fa02 f303 	lsl.w	r3, r2, r3
 8002e54:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002e56:	693b      	ldr	r3, [r7, #16]
 8002e58:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002e5c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002e5e:	68bb      	ldr	r3, [r7, #8]
 8002e60:	43db      	mvns	r3, r3
 8002e62:	6939      	ldr	r1, [r7, #16]
 8002e64:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002e68:	4013      	ands	r3, r2
 8002e6a:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8002e6c:	2300      	movs	r3, #0
}
 8002e6e:	4618      	mov	r0, r3
 8002e70:	3720      	adds	r7, #32
 8002e72:	46bd      	mov	sp, r7
 8002e74:	bd80      	pop	{r7, pc}
	...

08002e78 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002e78:	b580      	push	{r7, lr}
 8002e7a:	b086      	sub	sp, #24
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	6078      	str	r0, [r7, #4]
 8002e80:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002e88:	697b      	ldr	r3, [r7, #20]
 8002e8a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002e8c:	697b      	ldr	r3, [r7, #20]
 8002e8e:	333c      	adds	r3, #60	; 0x3c
 8002e90:	3304      	adds	r3, #4
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002e96:	683b      	ldr	r3, [r7, #0]
 8002e98:	015a      	lsls	r2, r3, #5
 8002e9a:	693b      	ldr	r3, [r7, #16]
 8002e9c:	4413      	add	r3, r2
 8002e9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002ea2:	689b      	ldr	r3, [r3, #8]
 8002ea4:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	691b      	ldr	r3, [r3, #16]
 8002eaa:	2b01      	cmp	r3, #1
 8002eac:	f040 80a0 	bne.w	8002ff0 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8002eb0:	68bb      	ldr	r3, [r7, #8]
 8002eb2:	f003 0308 	and.w	r3, r3, #8
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d015      	beq.n	8002ee6 <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	4a72      	ldr	r2, [pc, #456]	; (8003088 <PCD_EP_OutXfrComplete_int+0x210>)
 8002ebe:	4293      	cmp	r3, r2
 8002ec0:	f240 80dd 	bls.w	800307e <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002ec4:	68bb      	ldr	r3, [r7, #8]
 8002ec6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	f000 80d7 	beq.w	800307e <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002ed0:	683b      	ldr	r3, [r7, #0]
 8002ed2:	015a      	lsls	r2, r3, #5
 8002ed4:	693b      	ldr	r3, [r7, #16]
 8002ed6:	4413      	add	r3, r2
 8002ed8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002edc:	461a      	mov	r2, r3
 8002ede:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002ee2:	6093      	str	r3, [r2, #8]
 8002ee4:	e0cb      	b.n	800307e <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8002ee6:	68bb      	ldr	r3, [r7, #8]
 8002ee8:	f003 0320 	and.w	r3, r3, #32
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d009      	beq.n	8002f04 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002ef0:	683b      	ldr	r3, [r7, #0]
 8002ef2:	015a      	lsls	r2, r3, #5
 8002ef4:	693b      	ldr	r3, [r7, #16]
 8002ef6:	4413      	add	r3, r2
 8002ef8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002efc:	461a      	mov	r2, r3
 8002efe:	2320      	movs	r3, #32
 8002f00:	6093      	str	r3, [r2, #8]
 8002f02:	e0bc      	b.n	800307e <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8002f04:	68bb      	ldr	r3, [r7, #8]
 8002f06:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	f040 80b7 	bne.w	800307e <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	4a5d      	ldr	r2, [pc, #372]	; (8003088 <PCD_EP_OutXfrComplete_int+0x210>)
 8002f14:	4293      	cmp	r3, r2
 8002f16:	d90f      	bls.n	8002f38 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002f18:	68bb      	ldr	r3, [r7, #8]
 8002f1a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d00a      	beq.n	8002f38 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002f22:	683b      	ldr	r3, [r7, #0]
 8002f24:	015a      	lsls	r2, r3, #5
 8002f26:	693b      	ldr	r3, [r7, #16]
 8002f28:	4413      	add	r3, r2
 8002f2a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002f2e:	461a      	mov	r2, r3
 8002f30:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002f34:	6093      	str	r3, [r2, #8]
 8002f36:	e0a2      	b.n	800307e <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8002f38:	6879      	ldr	r1, [r7, #4]
 8002f3a:	683a      	ldr	r2, [r7, #0]
 8002f3c:	4613      	mov	r3, r2
 8002f3e:	00db      	lsls	r3, r3, #3
 8002f40:	1a9b      	subs	r3, r3, r2
 8002f42:	009b      	lsls	r3, r3, #2
 8002f44:	440b      	add	r3, r1
 8002f46:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002f4a:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8002f4c:	683b      	ldr	r3, [r7, #0]
 8002f4e:	0159      	lsls	r1, r3, #5
 8002f50:	693b      	ldr	r3, [r7, #16]
 8002f52:	440b      	add	r3, r1
 8002f54:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002f58:	691b      	ldr	r3, [r3, #16]
 8002f5a:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8002f5e:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8002f60:	6878      	ldr	r0, [r7, #4]
 8002f62:	683a      	ldr	r2, [r7, #0]
 8002f64:	4613      	mov	r3, r2
 8002f66:	00db      	lsls	r3, r3, #3
 8002f68:	1a9b      	subs	r3, r3, r2
 8002f6a:	009b      	lsls	r3, r3, #2
 8002f6c:	4403      	add	r3, r0
 8002f6e:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8002f72:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8002f74:	6879      	ldr	r1, [r7, #4]
 8002f76:	683a      	ldr	r2, [r7, #0]
 8002f78:	4613      	mov	r3, r2
 8002f7a:	00db      	lsls	r3, r3, #3
 8002f7c:	1a9b      	subs	r3, r3, r2
 8002f7e:	009b      	lsls	r3, r3, #2
 8002f80:	440b      	add	r3, r1
 8002f82:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002f86:	6819      	ldr	r1, [r3, #0]
 8002f88:	6878      	ldr	r0, [r7, #4]
 8002f8a:	683a      	ldr	r2, [r7, #0]
 8002f8c:	4613      	mov	r3, r2
 8002f8e:	00db      	lsls	r3, r3, #3
 8002f90:	1a9b      	subs	r3, r3, r2
 8002f92:	009b      	lsls	r3, r3, #2
 8002f94:	4403      	add	r3, r0
 8002f96:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	4419      	add	r1, r3
 8002f9e:	6878      	ldr	r0, [r7, #4]
 8002fa0:	683a      	ldr	r2, [r7, #0]
 8002fa2:	4613      	mov	r3, r2
 8002fa4:	00db      	lsls	r3, r3, #3
 8002fa6:	1a9b      	subs	r3, r3, r2
 8002fa8:	009b      	lsls	r3, r3, #2
 8002faa:	4403      	add	r3, r0
 8002fac:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002fb0:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002fb2:	683b      	ldr	r3, [r7, #0]
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d114      	bne.n	8002fe2 <PCD_EP_OutXfrComplete_int+0x16a>
 8002fb8:	6879      	ldr	r1, [r7, #4]
 8002fba:	683a      	ldr	r2, [r7, #0]
 8002fbc:	4613      	mov	r3, r2
 8002fbe:	00db      	lsls	r3, r3, #3
 8002fc0:	1a9b      	subs	r3, r3, r2
 8002fc2:	009b      	lsls	r3, r3, #2
 8002fc4:	440b      	add	r3, r1
 8002fc6:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d108      	bne.n	8002fe2 <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	6818      	ldr	r0, [r3, #0]
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002fda:	461a      	mov	r2, r3
 8002fdc:	2101      	movs	r1, #1
 8002fde:	f003 fc6f 	bl	80068c0 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002fe2:	683b      	ldr	r3, [r7, #0]
 8002fe4:	b2db      	uxtb	r3, r3
 8002fe6:	4619      	mov	r1, r3
 8002fe8:	6878      	ldr	r0, [r7, #4]
 8002fea:	f005 fc07 	bl	80087fc <HAL_PCD_DataOutStageCallback>
 8002fee:	e046      	b.n	800307e <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	4a26      	ldr	r2, [pc, #152]	; (800308c <PCD_EP_OutXfrComplete_int+0x214>)
 8002ff4:	4293      	cmp	r3, r2
 8002ff6:	d124      	bne.n	8003042 <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8002ff8:	68bb      	ldr	r3, [r7, #8]
 8002ffa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d00a      	beq.n	8003018 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003002:	683b      	ldr	r3, [r7, #0]
 8003004:	015a      	lsls	r2, r3, #5
 8003006:	693b      	ldr	r3, [r7, #16]
 8003008:	4413      	add	r3, r2
 800300a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800300e:	461a      	mov	r2, r3
 8003010:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003014:	6093      	str	r3, [r2, #8]
 8003016:	e032      	b.n	800307e <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003018:	68bb      	ldr	r3, [r7, #8]
 800301a:	f003 0320 	and.w	r3, r3, #32
 800301e:	2b00      	cmp	r3, #0
 8003020:	d008      	beq.n	8003034 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003022:	683b      	ldr	r3, [r7, #0]
 8003024:	015a      	lsls	r2, r3, #5
 8003026:	693b      	ldr	r3, [r7, #16]
 8003028:	4413      	add	r3, r2
 800302a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800302e:	461a      	mov	r2, r3
 8003030:	2320      	movs	r3, #32
 8003032:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003034:	683b      	ldr	r3, [r7, #0]
 8003036:	b2db      	uxtb	r3, r3
 8003038:	4619      	mov	r1, r3
 800303a:	6878      	ldr	r0, [r7, #4]
 800303c:	f005 fbde 	bl	80087fc <HAL_PCD_DataOutStageCallback>
 8003040:	e01d      	b.n	800307e <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003042:	683b      	ldr	r3, [r7, #0]
 8003044:	2b00      	cmp	r3, #0
 8003046:	d114      	bne.n	8003072 <PCD_EP_OutXfrComplete_int+0x1fa>
 8003048:	6879      	ldr	r1, [r7, #4]
 800304a:	683a      	ldr	r2, [r7, #0]
 800304c:	4613      	mov	r3, r2
 800304e:	00db      	lsls	r3, r3, #3
 8003050:	1a9b      	subs	r3, r3, r2
 8003052:	009b      	lsls	r3, r3, #2
 8003054:	440b      	add	r3, r1
 8003056:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	2b00      	cmp	r3, #0
 800305e:	d108      	bne.n	8003072 <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	6818      	ldr	r0, [r3, #0]
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800306a:	461a      	mov	r2, r3
 800306c:	2100      	movs	r1, #0
 800306e:	f003 fc27 	bl	80068c0 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003072:	683b      	ldr	r3, [r7, #0]
 8003074:	b2db      	uxtb	r3, r3
 8003076:	4619      	mov	r1, r3
 8003078:	6878      	ldr	r0, [r7, #4]
 800307a:	f005 fbbf 	bl	80087fc <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800307e:	2300      	movs	r3, #0
}
 8003080:	4618      	mov	r0, r3
 8003082:	3718      	adds	r7, #24
 8003084:	46bd      	mov	sp, r7
 8003086:	bd80      	pop	{r7, pc}
 8003088:	4f54300a 	.word	0x4f54300a
 800308c:	4f54310a 	.word	0x4f54310a

08003090 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003090:	b580      	push	{r7, lr}
 8003092:	b086      	sub	sp, #24
 8003094:	af00      	add	r7, sp, #0
 8003096:	6078      	str	r0, [r7, #4]
 8003098:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80030a0:	697b      	ldr	r3, [r7, #20]
 80030a2:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80030a4:	697b      	ldr	r3, [r7, #20]
 80030a6:	333c      	adds	r3, #60	; 0x3c
 80030a8:	3304      	adds	r3, #4
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80030ae:	683b      	ldr	r3, [r7, #0]
 80030b0:	015a      	lsls	r2, r3, #5
 80030b2:	693b      	ldr	r3, [r7, #16]
 80030b4:	4413      	add	r3, r2
 80030b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80030ba:	689b      	ldr	r3, [r3, #8]
 80030bc:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	4a15      	ldr	r2, [pc, #84]	; (8003118 <PCD_EP_OutSetupPacket_int+0x88>)
 80030c2:	4293      	cmp	r3, r2
 80030c4:	d90e      	bls.n	80030e4 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80030c6:	68bb      	ldr	r3, [r7, #8]
 80030c8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d009      	beq.n	80030e4 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80030d0:	683b      	ldr	r3, [r7, #0]
 80030d2:	015a      	lsls	r2, r3, #5
 80030d4:	693b      	ldr	r3, [r7, #16]
 80030d6:	4413      	add	r3, r2
 80030d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80030dc:	461a      	mov	r2, r3
 80030de:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80030e2:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80030e4:	6878      	ldr	r0, [r7, #4]
 80030e6:	f005 fb77 	bl	80087d8 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	4a0a      	ldr	r2, [pc, #40]	; (8003118 <PCD_EP_OutSetupPacket_int+0x88>)
 80030ee:	4293      	cmp	r3, r2
 80030f0:	d90c      	bls.n	800310c <PCD_EP_OutSetupPacket_int+0x7c>
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	691b      	ldr	r3, [r3, #16]
 80030f6:	2b01      	cmp	r3, #1
 80030f8:	d108      	bne.n	800310c <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	6818      	ldr	r0, [r3, #0]
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003104:	461a      	mov	r2, r3
 8003106:	2101      	movs	r1, #1
 8003108:	f003 fbda 	bl	80068c0 <USB_EP0_OutStart>
  }

  return HAL_OK;
 800310c:	2300      	movs	r3, #0
}
 800310e:	4618      	mov	r0, r3
 8003110:	3718      	adds	r7, #24
 8003112:	46bd      	mov	sp, r7
 8003114:	bd80      	pop	{r7, pc}
 8003116:	bf00      	nop
 8003118:	4f54300a 	.word	0x4f54300a

0800311c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800311c:	b480      	push	{r7}
 800311e:	b085      	sub	sp, #20
 8003120:	af00      	add	r7, sp, #0
 8003122:	6078      	str	r0, [r7, #4]
 8003124:	460b      	mov	r3, r1
 8003126:	70fb      	strb	r3, [r7, #3]
 8003128:	4613      	mov	r3, r2
 800312a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003132:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8003134:	78fb      	ldrb	r3, [r7, #3]
 8003136:	2b00      	cmp	r3, #0
 8003138:	d107      	bne.n	800314a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800313a:	883b      	ldrh	r3, [r7, #0]
 800313c:	0419      	lsls	r1, r3, #16
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	68ba      	ldr	r2, [r7, #8]
 8003144:	430a      	orrs	r2, r1
 8003146:	629a      	str	r2, [r3, #40]	; 0x28
 8003148:	e028      	b.n	800319c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003150:	0c1b      	lsrs	r3, r3, #16
 8003152:	68ba      	ldr	r2, [r7, #8]
 8003154:	4413      	add	r3, r2
 8003156:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003158:	2300      	movs	r3, #0
 800315a:	73fb      	strb	r3, [r7, #15]
 800315c:	e00d      	b.n	800317a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681a      	ldr	r2, [r3, #0]
 8003162:	7bfb      	ldrb	r3, [r7, #15]
 8003164:	3340      	adds	r3, #64	; 0x40
 8003166:	009b      	lsls	r3, r3, #2
 8003168:	4413      	add	r3, r2
 800316a:	685b      	ldr	r3, [r3, #4]
 800316c:	0c1b      	lsrs	r3, r3, #16
 800316e:	68ba      	ldr	r2, [r7, #8]
 8003170:	4413      	add	r3, r2
 8003172:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003174:	7bfb      	ldrb	r3, [r7, #15]
 8003176:	3301      	adds	r3, #1
 8003178:	73fb      	strb	r3, [r7, #15]
 800317a:	7bfa      	ldrb	r2, [r7, #15]
 800317c:	78fb      	ldrb	r3, [r7, #3]
 800317e:	3b01      	subs	r3, #1
 8003180:	429a      	cmp	r2, r3
 8003182:	d3ec      	bcc.n	800315e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003184:	883b      	ldrh	r3, [r7, #0]
 8003186:	0418      	lsls	r0, r3, #16
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	6819      	ldr	r1, [r3, #0]
 800318c:	78fb      	ldrb	r3, [r7, #3]
 800318e:	3b01      	subs	r3, #1
 8003190:	68ba      	ldr	r2, [r7, #8]
 8003192:	4302      	orrs	r2, r0
 8003194:	3340      	adds	r3, #64	; 0x40
 8003196:	009b      	lsls	r3, r3, #2
 8003198:	440b      	add	r3, r1
 800319a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800319c:	2300      	movs	r3, #0
}
 800319e:	4618      	mov	r0, r3
 80031a0:	3714      	adds	r7, #20
 80031a2:	46bd      	mov	sp, r7
 80031a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a8:	4770      	bx	lr

080031aa <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80031aa:	b480      	push	{r7}
 80031ac:	b083      	sub	sp, #12
 80031ae:	af00      	add	r7, sp, #0
 80031b0:	6078      	str	r0, [r7, #4]
 80031b2:	460b      	mov	r3, r1
 80031b4:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	887a      	ldrh	r2, [r7, #2]
 80031bc:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80031be:	2300      	movs	r3, #0
}
 80031c0:	4618      	mov	r0, r3
 80031c2:	370c      	adds	r7, #12
 80031c4:	46bd      	mov	sp, r7
 80031c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ca:	4770      	bx	lr

080031cc <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80031cc:	b480      	push	{r7}
 80031ce:	b085      	sub	sp, #20
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	2201      	movs	r2, #1
 80031de:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	2200      	movs	r2, #0
 80031e6:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	699b      	ldr	r3, [r3, #24]
 80031ee:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80031fa:	4b05      	ldr	r3, [pc, #20]	; (8003210 <HAL_PCDEx_ActivateLPM+0x44>)
 80031fc:	4313      	orrs	r3, r2
 80031fe:	68fa      	ldr	r2, [r7, #12]
 8003200:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8003202:	2300      	movs	r3, #0
}
 8003204:	4618      	mov	r0, r3
 8003206:	3714      	adds	r7, #20
 8003208:	46bd      	mov	sp, r7
 800320a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800320e:	4770      	bx	lr
 8003210:	10000003 	.word	0x10000003

08003214 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003214:	b480      	push	{r7}
 8003216:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003218:	4b05      	ldr	r3, [pc, #20]	; (8003230 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	4a04      	ldr	r2, [pc, #16]	; (8003230 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800321e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003222:	6013      	str	r3, [r2, #0]
}
 8003224:	bf00      	nop
 8003226:	46bd      	mov	sp, r7
 8003228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800322c:	4770      	bx	lr
 800322e:	bf00      	nop
 8003230:	40007000 	.word	0x40007000

08003234 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003234:	b580      	push	{r7, lr}
 8003236:	b082      	sub	sp, #8
 8003238:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800323a:	2300      	movs	r3, #0
 800323c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800323e:	4b23      	ldr	r3, [pc, #140]	; (80032cc <HAL_PWREx_EnableOverDrive+0x98>)
 8003240:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003242:	4a22      	ldr	r2, [pc, #136]	; (80032cc <HAL_PWREx_EnableOverDrive+0x98>)
 8003244:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003248:	6413      	str	r3, [r2, #64]	; 0x40
 800324a:	4b20      	ldr	r3, [pc, #128]	; (80032cc <HAL_PWREx_EnableOverDrive+0x98>)
 800324c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800324e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003252:	603b      	str	r3, [r7, #0]
 8003254:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8003256:	4b1e      	ldr	r3, [pc, #120]	; (80032d0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	4a1d      	ldr	r2, [pc, #116]	; (80032d0 <HAL_PWREx_EnableOverDrive+0x9c>)
 800325c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003260:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003262:	f7fe f943 	bl	80014ec <HAL_GetTick>
 8003266:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003268:	e009      	b.n	800327e <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800326a:	f7fe f93f 	bl	80014ec <HAL_GetTick>
 800326e:	4602      	mov	r2, r0
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	1ad3      	subs	r3, r2, r3
 8003274:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003278:	d901      	bls.n	800327e <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800327a:	2303      	movs	r3, #3
 800327c:	e022      	b.n	80032c4 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800327e:	4b14      	ldr	r3, [pc, #80]	; (80032d0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003280:	685b      	ldr	r3, [r3, #4]
 8003282:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003286:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800328a:	d1ee      	bne.n	800326a <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800328c:	4b10      	ldr	r3, [pc, #64]	; (80032d0 <HAL_PWREx_EnableOverDrive+0x9c>)
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	4a0f      	ldr	r2, [pc, #60]	; (80032d0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003292:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003296:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003298:	f7fe f928 	bl	80014ec <HAL_GetTick>
 800329c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800329e:	e009      	b.n	80032b4 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80032a0:	f7fe f924 	bl	80014ec <HAL_GetTick>
 80032a4:	4602      	mov	r2, r0
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	1ad3      	subs	r3, r2, r3
 80032aa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80032ae:	d901      	bls.n	80032b4 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80032b0:	2303      	movs	r3, #3
 80032b2:	e007      	b.n	80032c4 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80032b4:	4b06      	ldr	r3, [pc, #24]	; (80032d0 <HAL_PWREx_EnableOverDrive+0x9c>)
 80032b6:	685b      	ldr	r3, [r3, #4]
 80032b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032bc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80032c0:	d1ee      	bne.n	80032a0 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80032c2:	2300      	movs	r3, #0
}
 80032c4:	4618      	mov	r0, r3
 80032c6:	3708      	adds	r7, #8
 80032c8:	46bd      	mov	sp, r7
 80032ca:	bd80      	pop	{r7, pc}
 80032cc:	40023800 	.word	0x40023800
 80032d0:	40007000 	.word	0x40007000

080032d4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80032d4:	b580      	push	{r7, lr}
 80032d6:	b086      	sub	sp, #24
 80032d8:	af00      	add	r7, sp, #0
 80032da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80032dc:	2300      	movs	r3, #0
 80032de:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d101      	bne.n	80032ea <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80032e6:	2301      	movs	r3, #1
 80032e8:	e291      	b.n	800380e <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f003 0301 	and.w	r3, r3, #1
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	f000 8087 	beq.w	8003406 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80032f8:	4b96      	ldr	r3, [pc, #600]	; (8003554 <HAL_RCC_OscConfig+0x280>)
 80032fa:	689b      	ldr	r3, [r3, #8]
 80032fc:	f003 030c 	and.w	r3, r3, #12
 8003300:	2b04      	cmp	r3, #4
 8003302:	d00c      	beq.n	800331e <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003304:	4b93      	ldr	r3, [pc, #588]	; (8003554 <HAL_RCC_OscConfig+0x280>)
 8003306:	689b      	ldr	r3, [r3, #8]
 8003308:	f003 030c 	and.w	r3, r3, #12
 800330c:	2b08      	cmp	r3, #8
 800330e:	d112      	bne.n	8003336 <HAL_RCC_OscConfig+0x62>
 8003310:	4b90      	ldr	r3, [pc, #576]	; (8003554 <HAL_RCC_OscConfig+0x280>)
 8003312:	685b      	ldr	r3, [r3, #4]
 8003314:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003318:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800331c:	d10b      	bne.n	8003336 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800331e:	4b8d      	ldr	r3, [pc, #564]	; (8003554 <HAL_RCC_OscConfig+0x280>)
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003326:	2b00      	cmp	r3, #0
 8003328:	d06c      	beq.n	8003404 <HAL_RCC_OscConfig+0x130>
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	685b      	ldr	r3, [r3, #4]
 800332e:	2b00      	cmp	r3, #0
 8003330:	d168      	bne.n	8003404 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8003332:	2301      	movs	r3, #1
 8003334:	e26b      	b.n	800380e <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	685b      	ldr	r3, [r3, #4]
 800333a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800333e:	d106      	bne.n	800334e <HAL_RCC_OscConfig+0x7a>
 8003340:	4b84      	ldr	r3, [pc, #528]	; (8003554 <HAL_RCC_OscConfig+0x280>)
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	4a83      	ldr	r2, [pc, #524]	; (8003554 <HAL_RCC_OscConfig+0x280>)
 8003346:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800334a:	6013      	str	r3, [r2, #0]
 800334c:	e02e      	b.n	80033ac <HAL_RCC_OscConfig+0xd8>
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	685b      	ldr	r3, [r3, #4]
 8003352:	2b00      	cmp	r3, #0
 8003354:	d10c      	bne.n	8003370 <HAL_RCC_OscConfig+0x9c>
 8003356:	4b7f      	ldr	r3, [pc, #508]	; (8003554 <HAL_RCC_OscConfig+0x280>)
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	4a7e      	ldr	r2, [pc, #504]	; (8003554 <HAL_RCC_OscConfig+0x280>)
 800335c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003360:	6013      	str	r3, [r2, #0]
 8003362:	4b7c      	ldr	r3, [pc, #496]	; (8003554 <HAL_RCC_OscConfig+0x280>)
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	4a7b      	ldr	r2, [pc, #492]	; (8003554 <HAL_RCC_OscConfig+0x280>)
 8003368:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800336c:	6013      	str	r3, [r2, #0]
 800336e:	e01d      	b.n	80033ac <HAL_RCC_OscConfig+0xd8>
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	685b      	ldr	r3, [r3, #4]
 8003374:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003378:	d10c      	bne.n	8003394 <HAL_RCC_OscConfig+0xc0>
 800337a:	4b76      	ldr	r3, [pc, #472]	; (8003554 <HAL_RCC_OscConfig+0x280>)
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	4a75      	ldr	r2, [pc, #468]	; (8003554 <HAL_RCC_OscConfig+0x280>)
 8003380:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003384:	6013      	str	r3, [r2, #0]
 8003386:	4b73      	ldr	r3, [pc, #460]	; (8003554 <HAL_RCC_OscConfig+0x280>)
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	4a72      	ldr	r2, [pc, #456]	; (8003554 <HAL_RCC_OscConfig+0x280>)
 800338c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003390:	6013      	str	r3, [r2, #0]
 8003392:	e00b      	b.n	80033ac <HAL_RCC_OscConfig+0xd8>
 8003394:	4b6f      	ldr	r3, [pc, #444]	; (8003554 <HAL_RCC_OscConfig+0x280>)
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	4a6e      	ldr	r2, [pc, #440]	; (8003554 <HAL_RCC_OscConfig+0x280>)
 800339a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800339e:	6013      	str	r3, [r2, #0]
 80033a0:	4b6c      	ldr	r3, [pc, #432]	; (8003554 <HAL_RCC_OscConfig+0x280>)
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	4a6b      	ldr	r2, [pc, #428]	; (8003554 <HAL_RCC_OscConfig+0x280>)
 80033a6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80033aa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	685b      	ldr	r3, [r3, #4]
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d013      	beq.n	80033dc <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033b4:	f7fe f89a 	bl	80014ec <HAL_GetTick>
 80033b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033ba:	e008      	b.n	80033ce <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80033bc:	f7fe f896 	bl	80014ec <HAL_GetTick>
 80033c0:	4602      	mov	r2, r0
 80033c2:	693b      	ldr	r3, [r7, #16]
 80033c4:	1ad3      	subs	r3, r2, r3
 80033c6:	2b64      	cmp	r3, #100	; 0x64
 80033c8:	d901      	bls.n	80033ce <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80033ca:	2303      	movs	r3, #3
 80033cc:	e21f      	b.n	800380e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033ce:	4b61      	ldr	r3, [pc, #388]	; (8003554 <HAL_RCC_OscConfig+0x280>)
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d0f0      	beq.n	80033bc <HAL_RCC_OscConfig+0xe8>
 80033da:	e014      	b.n	8003406 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033dc:	f7fe f886 	bl	80014ec <HAL_GetTick>
 80033e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80033e2:	e008      	b.n	80033f6 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80033e4:	f7fe f882 	bl	80014ec <HAL_GetTick>
 80033e8:	4602      	mov	r2, r0
 80033ea:	693b      	ldr	r3, [r7, #16]
 80033ec:	1ad3      	subs	r3, r2, r3
 80033ee:	2b64      	cmp	r3, #100	; 0x64
 80033f0:	d901      	bls.n	80033f6 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80033f2:	2303      	movs	r3, #3
 80033f4:	e20b      	b.n	800380e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80033f6:	4b57      	ldr	r3, [pc, #348]	; (8003554 <HAL_RCC_OscConfig+0x280>)
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d1f0      	bne.n	80033e4 <HAL_RCC_OscConfig+0x110>
 8003402:	e000      	b.n	8003406 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003404:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f003 0302 	and.w	r3, r3, #2
 800340e:	2b00      	cmp	r3, #0
 8003410:	d069      	beq.n	80034e6 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003412:	4b50      	ldr	r3, [pc, #320]	; (8003554 <HAL_RCC_OscConfig+0x280>)
 8003414:	689b      	ldr	r3, [r3, #8]
 8003416:	f003 030c 	and.w	r3, r3, #12
 800341a:	2b00      	cmp	r3, #0
 800341c:	d00b      	beq.n	8003436 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800341e:	4b4d      	ldr	r3, [pc, #308]	; (8003554 <HAL_RCC_OscConfig+0x280>)
 8003420:	689b      	ldr	r3, [r3, #8]
 8003422:	f003 030c 	and.w	r3, r3, #12
 8003426:	2b08      	cmp	r3, #8
 8003428:	d11c      	bne.n	8003464 <HAL_RCC_OscConfig+0x190>
 800342a:	4b4a      	ldr	r3, [pc, #296]	; (8003554 <HAL_RCC_OscConfig+0x280>)
 800342c:	685b      	ldr	r3, [r3, #4]
 800342e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003432:	2b00      	cmp	r3, #0
 8003434:	d116      	bne.n	8003464 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003436:	4b47      	ldr	r3, [pc, #284]	; (8003554 <HAL_RCC_OscConfig+0x280>)
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f003 0302 	and.w	r3, r3, #2
 800343e:	2b00      	cmp	r3, #0
 8003440:	d005      	beq.n	800344e <HAL_RCC_OscConfig+0x17a>
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	68db      	ldr	r3, [r3, #12]
 8003446:	2b01      	cmp	r3, #1
 8003448:	d001      	beq.n	800344e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800344a:	2301      	movs	r3, #1
 800344c:	e1df      	b.n	800380e <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800344e:	4b41      	ldr	r3, [pc, #260]	; (8003554 <HAL_RCC_OscConfig+0x280>)
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	691b      	ldr	r3, [r3, #16]
 800345a:	00db      	lsls	r3, r3, #3
 800345c:	493d      	ldr	r1, [pc, #244]	; (8003554 <HAL_RCC_OscConfig+0x280>)
 800345e:	4313      	orrs	r3, r2
 8003460:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003462:	e040      	b.n	80034e6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	68db      	ldr	r3, [r3, #12]
 8003468:	2b00      	cmp	r3, #0
 800346a:	d023      	beq.n	80034b4 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800346c:	4b39      	ldr	r3, [pc, #228]	; (8003554 <HAL_RCC_OscConfig+0x280>)
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	4a38      	ldr	r2, [pc, #224]	; (8003554 <HAL_RCC_OscConfig+0x280>)
 8003472:	f043 0301 	orr.w	r3, r3, #1
 8003476:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003478:	f7fe f838 	bl	80014ec <HAL_GetTick>
 800347c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800347e:	e008      	b.n	8003492 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003480:	f7fe f834 	bl	80014ec <HAL_GetTick>
 8003484:	4602      	mov	r2, r0
 8003486:	693b      	ldr	r3, [r7, #16]
 8003488:	1ad3      	subs	r3, r2, r3
 800348a:	2b02      	cmp	r3, #2
 800348c:	d901      	bls.n	8003492 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800348e:	2303      	movs	r3, #3
 8003490:	e1bd      	b.n	800380e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003492:	4b30      	ldr	r3, [pc, #192]	; (8003554 <HAL_RCC_OscConfig+0x280>)
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	f003 0302 	and.w	r3, r3, #2
 800349a:	2b00      	cmp	r3, #0
 800349c:	d0f0      	beq.n	8003480 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800349e:	4b2d      	ldr	r3, [pc, #180]	; (8003554 <HAL_RCC_OscConfig+0x280>)
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	691b      	ldr	r3, [r3, #16]
 80034aa:	00db      	lsls	r3, r3, #3
 80034ac:	4929      	ldr	r1, [pc, #164]	; (8003554 <HAL_RCC_OscConfig+0x280>)
 80034ae:	4313      	orrs	r3, r2
 80034b0:	600b      	str	r3, [r1, #0]
 80034b2:	e018      	b.n	80034e6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80034b4:	4b27      	ldr	r3, [pc, #156]	; (8003554 <HAL_RCC_OscConfig+0x280>)
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	4a26      	ldr	r2, [pc, #152]	; (8003554 <HAL_RCC_OscConfig+0x280>)
 80034ba:	f023 0301 	bic.w	r3, r3, #1
 80034be:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034c0:	f7fe f814 	bl	80014ec <HAL_GetTick>
 80034c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80034c6:	e008      	b.n	80034da <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80034c8:	f7fe f810 	bl	80014ec <HAL_GetTick>
 80034cc:	4602      	mov	r2, r0
 80034ce:	693b      	ldr	r3, [r7, #16]
 80034d0:	1ad3      	subs	r3, r2, r3
 80034d2:	2b02      	cmp	r3, #2
 80034d4:	d901      	bls.n	80034da <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80034d6:	2303      	movs	r3, #3
 80034d8:	e199      	b.n	800380e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80034da:	4b1e      	ldr	r3, [pc, #120]	; (8003554 <HAL_RCC_OscConfig+0x280>)
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f003 0302 	and.w	r3, r3, #2
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d1f0      	bne.n	80034c8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	f003 0308 	and.w	r3, r3, #8
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d038      	beq.n	8003564 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	695b      	ldr	r3, [r3, #20]
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d019      	beq.n	800352e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80034fa:	4b16      	ldr	r3, [pc, #88]	; (8003554 <HAL_RCC_OscConfig+0x280>)
 80034fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80034fe:	4a15      	ldr	r2, [pc, #84]	; (8003554 <HAL_RCC_OscConfig+0x280>)
 8003500:	f043 0301 	orr.w	r3, r3, #1
 8003504:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003506:	f7fd fff1 	bl	80014ec <HAL_GetTick>
 800350a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800350c:	e008      	b.n	8003520 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800350e:	f7fd ffed 	bl	80014ec <HAL_GetTick>
 8003512:	4602      	mov	r2, r0
 8003514:	693b      	ldr	r3, [r7, #16]
 8003516:	1ad3      	subs	r3, r2, r3
 8003518:	2b02      	cmp	r3, #2
 800351a:	d901      	bls.n	8003520 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800351c:	2303      	movs	r3, #3
 800351e:	e176      	b.n	800380e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003520:	4b0c      	ldr	r3, [pc, #48]	; (8003554 <HAL_RCC_OscConfig+0x280>)
 8003522:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003524:	f003 0302 	and.w	r3, r3, #2
 8003528:	2b00      	cmp	r3, #0
 800352a:	d0f0      	beq.n	800350e <HAL_RCC_OscConfig+0x23a>
 800352c:	e01a      	b.n	8003564 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800352e:	4b09      	ldr	r3, [pc, #36]	; (8003554 <HAL_RCC_OscConfig+0x280>)
 8003530:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003532:	4a08      	ldr	r2, [pc, #32]	; (8003554 <HAL_RCC_OscConfig+0x280>)
 8003534:	f023 0301 	bic.w	r3, r3, #1
 8003538:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800353a:	f7fd ffd7 	bl	80014ec <HAL_GetTick>
 800353e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003540:	e00a      	b.n	8003558 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003542:	f7fd ffd3 	bl	80014ec <HAL_GetTick>
 8003546:	4602      	mov	r2, r0
 8003548:	693b      	ldr	r3, [r7, #16]
 800354a:	1ad3      	subs	r3, r2, r3
 800354c:	2b02      	cmp	r3, #2
 800354e:	d903      	bls.n	8003558 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003550:	2303      	movs	r3, #3
 8003552:	e15c      	b.n	800380e <HAL_RCC_OscConfig+0x53a>
 8003554:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003558:	4b91      	ldr	r3, [pc, #580]	; (80037a0 <HAL_RCC_OscConfig+0x4cc>)
 800355a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800355c:	f003 0302 	and.w	r3, r3, #2
 8003560:	2b00      	cmp	r3, #0
 8003562:	d1ee      	bne.n	8003542 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f003 0304 	and.w	r3, r3, #4
 800356c:	2b00      	cmp	r3, #0
 800356e:	f000 80a4 	beq.w	80036ba <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003572:	4b8b      	ldr	r3, [pc, #556]	; (80037a0 <HAL_RCC_OscConfig+0x4cc>)
 8003574:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003576:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800357a:	2b00      	cmp	r3, #0
 800357c:	d10d      	bne.n	800359a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800357e:	4b88      	ldr	r3, [pc, #544]	; (80037a0 <HAL_RCC_OscConfig+0x4cc>)
 8003580:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003582:	4a87      	ldr	r2, [pc, #540]	; (80037a0 <HAL_RCC_OscConfig+0x4cc>)
 8003584:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003588:	6413      	str	r3, [r2, #64]	; 0x40
 800358a:	4b85      	ldr	r3, [pc, #532]	; (80037a0 <HAL_RCC_OscConfig+0x4cc>)
 800358c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800358e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003592:	60bb      	str	r3, [r7, #8]
 8003594:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003596:	2301      	movs	r3, #1
 8003598:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800359a:	4b82      	ldr	r3, [pc, #520]	; (80037a4 <HAL_RCC_OscConfig+0x4d0>)
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d118      	bne.n	80035d8 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80035a6:	4b7f      	ldr	r3, [pc, #508]	; (80037a4 <HAL_RCC_OscConfig+0x4d0>)
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	4a7e      	ldr	r2, [pc, #504]	; (80037a4 <HAL_RCC_OscConfig+0x4d0>)
 80035ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80035b0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80035b2:	f7fd ff9b 	bl	80014ec <HAL_GetTick>
 80035b6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80035b8:	e008      	b.n	80035cc <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80035ba:	f7fd ff97 	bl	80014ec <HAL_GetTick>
 80035be:	4602      	mov	r2, r0
 80035c0:	693b      	ldr	r3, [r7, #16]
 80035c2:	1ad3      	subs	r3, r2, r3
 80035c4:	2b64      	cmp	r3, #100	; 0x64
 80035c6:	d901      	bls.n	80035cc <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80035c8:	2303      	movs	r3, #3
 80035ca:	e120      	b.n	800380e <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80035cc:	4b75      	ldr	r3, [pc, #468]	; (80037a4 <HAL_RCC_OscConfig+0x4d0>)
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d0f0      	beq.n	80035ba <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	689b      	ldr	r3, [r3, #8]
 80035dc:	2b01      	cmp	r3, #1
 80035de:	d106      	bne.n	80035ee <HAL_RCC_OscConfig+0x31a>
 80035e0:	4b6f      	ldr	r3, [pc, #444]	; (80037a0 <HAL_RCC_OscConfig+0x4cc>)
 80035e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035e4:	4a6e      	ldr	r2, [pc, #440]	; (80037a0 <HAL_RCC_OscConfig+0x4cc>)
 80035e6:	f043 0301 	orr.w	r3, r3, #1
 80035ea:	6713      	str	r3, [r2, #112]	; 0x70
 80035ec:	e02d      	b.n	800364a <HAL_RCC_OscConfig+0x376>
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	689b      	ldr	r3, [r3, #8]
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d10c      	bne.n	8003610 <HAL_RCC_OscConfig+0x33c>
 80035f6:	4b6a      	ldr	r3, [pc, #424]	; (80037a0 <HAL_RCC_OscConfig+0x4cc>)
 80035f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035fa:	4a69      	ldr	r2, [pc, #420]	; (80037a0 <HAL_RCC_OscConfig+0x4cc>)
 80035fc:	f023 0301 	bic.w	r3, r3, #1
 8003600:	6713      	str	r3, [r2, #112]	; 0x70
 8003602:	4b67      	ldr	r3, [pc, #412]	; (80037a0 <HAL_RCC_OscConfig+0x4cc>)
 8003604:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003606:	4a66      	ldr	r2, [pc, #408]	; (80037a0 <HAL_RCC_OscConfig+0x4cc>)
 8003608:	f023 0304 	bic.w	r3, r3, #4
 800360c:	6713      	str	r3, [r2, #112]	; 0x70
 800360e:	e01c      	b.n	800364a <HAL_RCC_OscConfig+0x376>
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	689b      	ldr	r3, [r3, #8]
 8003614:	2b05      	cmp	r3, #5
 8003616:	d10c      	bne.n	8003632 <HAL_RCC_OscConfig+0x35e>
 8003618:	4b61      	ldr	r3, [pc, #388]	; (80037a0 <HAL_RCC_OscConfig+0x4cc>)
 800361a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800361c:	4a60      	ldr	r2, [pc, #384]	; (80037a0 <HAL_RCC_OscConfig+0x4cc>)
 800361e:	f043 0304 	orr.w	r3, r3, #4
 8003622:	6713      	str	r3, [r2, #112]	; 0x70
 8003624:	4b5e      	ldr	r3, [pc, #376]	; (80037a0 <HAL_RCC_OscConfig+0x4cc>)
 8003626:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003628:	4a5d      	ldr	r2, [pc, #372]	; (80037a0 <HAL_RCC_OscConfig+0x4cc>)
 800362a:	f043 0301 	orr.w	r3, r3, #1
 800362e:	6713      	str	r3, [r2, #112]	; 0x70
 8003630:	e00b      	b.n	800364a <HAL_RCC_OscConfig+0x376>
 8003632:	4b5b      	ldr	r3, [pc, #364]	; (80037a0 <HAL_RCC_OscConfig+0x4cc>)
 8003634:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003636:	4a5a      	ldr	r2, [pc, #360]	; (80037a0 <HAL_RCC_OscConfig+0x4cc>)
 8003638:	f023 0301 	bic.w	r3, r3, #1
 800363c:	6713      	str	r3, [r2, #112]	; 0x70
 800363e:	4b58      	ldr	r3, [pc, #352]	; (80037a0 <HAL_RCC_OscConfig+0x4cc>)
 8003640:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003642:	4a57      	ldr	r2, [pc, #348]	; (80037a0 <HAL_RCC_OscConfig+0x4cc>)
 8003644:	f023 0304 	bic.w	r3, r3, #4
 8003648:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	689b      	ldr	r3, [r3, #8]
 800364e:	2b00      	cmp	r3, #0
 8003650:	d015      	beq.n	800367e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003652:	f7fd ff4b 	bl	80014ec <HAL_GetTick>
 8003656:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003658:	e00a      	b.n	8003670 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800365a:	f7fd ff47 	bl	80014ec <HAL_GetTick>
 800365e:	4602      	mov	r2, r0
 8003660:	693b      	ldr	r3, [r7, #16]
 8003662:	1ad3      	subs	r3, r2, r3
 8003664:	f241 3288 	movw	r2, #5000	; 0x1388
 8003668:	4293      	cmp	r3, r2
 800366a:	d901      	bls.n	8003670 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 800366c:	2303      	movs	r3, #3
 800366e:	e0ce      	b.n	800380e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003670:	4b4b      	ldr	r3, [pc, #300]	; (80037a0 <HAL_RCC_OscConfig+0x4cc>)
 8003672:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003674:	f003 0302 	and.w	r3, r3, #2
 8003678:	2b00      	cmp	r3, #0
 800367a:	d0ee      	beq.n	800365a <HAL_RCC_OscConfig+0x386>
 800367c:	e014      	b.n	80036a8 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800367e:	f7fd ff35 	bl	80014ec <HAL_GetTick>
 8003682:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003684:	e00a      	b.n	800369c <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003686:	f7fd ff31 	bl	80014ec <HAL_GetTick>
 800368a:	4602      	mov	r2, r0
 800368c:	693b      	ldr	r3, [r7, #16]
 800368e:	1ad3      	subs	r3, r2, r3
 8003690:	f241 3288 	movw	r2, #5000	; 0x1388
 8003694:	4293      	cmp	r3, r2
 8003696:	d901      	bls.n	800369c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8003698:	2303      	movs	r3, #3
 800369a:	e0b8      	b.n	800380e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800369c:	4b40      	ldr	r3, [pc, #256]	; (80037a0 <HAL_RCC_OscConfig+0x4cc>)
 800369e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036a0:	f003 0302 	and.w	r3, r3, #2
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d1ee      	bne.n	8003686 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80036a8:	7dfb      	ldrb	r3, [r7, #23]
 80036aa:	2b01      	cmp	r3, #1
 80036ac:	d105      	bne.n	80036ba <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80036ae:	4b3c      	ldr	r3, [pc, #240]	; (80037a0 <HAL_RCC_OscConfig+0x4cc>)
 80036b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036b2:	4a3b      	ldr	r2, [pc, #236]	; (80037a0 <HAL_RCC_OscConfig+0x4cc>)
 80036b4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80036b8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	699b      	ldr	r3, [r3, #24]
 80036be:	2b00      	cmp	r3, #0
 80036c0:	f000 80a4 	beq.w	800380c <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80036c4:	4b36      	ldr	r3, [pc, #216]	; (80037a0 <HAL_RCC_OscConfig+0x4cc>)
 80036c6:	689b      	ldr	r3, [r3, #8]
 80036c8:	f003 030c 	and.w	r3, r3, #12
 80036cc:	2b08      	cmp	r3, #8
 80036ce:	d06b      	beq.n	80037a8 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	699b      	ldr	r3, [r3, #24]
 80036d4:	2b02      	cmp	r3, #2
 80036d6:	d149      	bne.n	800376c <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80036d8:	4b31      	ldr	r3, [pc, #196]	; (80037a0 <HAL_RCC_OscConfig+0x4cc>)
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	4a30      	ldr	r2, [pc, #192]	; (80037a0 <HAL_RCC_OscConfig+0x4cc>)
 80036de:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80036e2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036e4:	f7fd ff02 	bl	80014ec <HAL_GetTick>
 80036e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80036ea:	e008      	b.n	80036fe <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80036ec:	f7fd fefe 	bl	80014ec <HAL_GetTick>
 80036f0:	4602      	mov	r2, r0
 80036f2:	693b      	ldr	r3, [r7, #16]
 80036f4:	1ad3      	subs	r3, r2, r3
 80036f6:	2b02      	cmp	r3, #2
 80036f8:	d901      	bls.n	80036fe <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80036fa:	2303      	movs	r3, #3
 80036fc:	e087      	b.n	800380e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80036fe:	4b28      	ldr	r3, [pc, #160]	; (80037a0 <HAL_RCC_OscConfig+0x4cc>)
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003706:	2b00      	cmp	r3, #0
 8003708:	d1f0      	bne.n	80036ec <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	69da      	ldr	r2, [r3, #28]
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	6a1b      	ldr	r3, [r3, #32]
 8003712:	431a      	orrs	r2, r3
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003718:	019b      	lsls	r3, r3, #6
 800371a:	431a      	orrs	r2, r3
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003720:	085b      	lsrs	r3, r3, #1
 8003722:	3b01      	subs	r3, #1
 8003724:	041b      	lsls	r3, r3, #16
 8003726:	431a      	orrs	r2, r3
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800372c:	061b      	lsls	r3, r3, #24
 800372e:	4313      	orrs	r3, r2
 8003730:	4a1b      	ldr	r2, [pc, #108]	; (80037a0 <HAL_RCC_OscConfig+0x4cc>)
 8003732:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003736:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003738:	4b19      	ldr	r3, [pc, #100]	; (80037a0 <HAL_RCC_OscConfig+0x4cc>)
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	4a18      	ldr	r2, [pc, #96]	; (80037a0 <HAL_RCC_OscConfig+0x4cc>)
 800373e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003742:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003744:	f7fd fed2 	bl	80014ec <HAL_GetTick>
 8003748:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800374a:	e008      	b.n	800375e <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800374c:	f7fd fece 	bl	80014ec <HAL_GetTick>
 8003750:	4602      	mov	r2, r0
 8003752:	693b      	ldr	r3, [r7, #16]
 8003754:	1ad3      	subs	r3, r2, r3
 8003756:	2b02      	cmp	r3, #2
 8003758:	d901      	bls.n	800375e <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 800375a:	2303      	movs	r3, #3
 800375c:	e057      	b.n	800380e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800375e:	4b10      	ldr	r3, [pc, #64]	; (80037a0 <HAL_RCC_OscConfig+0x4cc>)
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003766:	2b00      	cmp	r3, #0
 8003768:	d0f0      	beq.n	800374c <HAL_RCC_OscConfig+0x478>
 800376a:	e04f      	b.n	800380c <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800376c:	4b0c      	ldr	r3, [pc, #48]	; (80037a0 <HAL_RCC_OscConfig+0x4cc>)
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	4a0b      	ldr	r2, [pc, #44]	; (80037a0 <HAL_RCC_OscConfig+0x4cc>)
 8003772:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003776:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003778:	f7fd feb8 	bl	80014ec <HAL_GetTick>
 800377c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800377e:	e008      	b.n	8003792 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003780:	f7fd feb4 	bl	80014ec <HAL_GetTick>
 8003784:	4602      	mov	r2, r0
 8003786:	693b      	ldr	r3, [r7, #16]
 8003788:	1ad3      	subs	r3, r2, r3
 800378a:	2b02      	cmp	r3, #2
 800378c:	d901      	bls.n	8003792 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 800378e:	2303      	movs	r3, #3
 8003790:	e03d      	b.n	800380e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003792:	4b03      	ldr	r3, [pc, #12]	; (80037a0 <HAL_RCC_OscConfig+0x4cc>)
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800379a:	2b00      	cmp	r3, #0
 800379c:	d1f0      	bne.n	8003780 <HAL_RCC_OscConfig+0x4ac>
 800379e:	e035      	b.n	800380c <HAL_RCC_OscConfig+0x538>
 80037a0:	40023800 	.word	0x40023800
 80037a4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80037a8:	4b1b      	ldr	r3, [pc, #108]	; (8003818 <HAL_RCC_OscConfig+0x544>)
 80037aa:	685b      	ldr	r3, [r3, #4]
 80037ac:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	699b      	ldr	r3, [r3, #24]
 80037b2:	2b01      	cmp	r3, #1
 80037b4:	d028      	beq.n	8003808 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80037c0:	429a      	cmp	r2, r3
 80037c2:	d121      	bne.n	8003808 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80037ce:	429a      	cmp	r2, r3
 80037d0:	d11a      	bne.n	8003808 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80037d2:	68fa      	ldr	r2, [r7, #12]
 80037d4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80037d8:	4013      	ands	r3, r2
 80037da:	687a      	ldr	r2, [r7, #4]
 80037dc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80037de:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80037e0:	4293      	cmp	r3, r2
 80037e2:	d111      	bne.n	8003808 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037ee:	085b      	lsrs	r3, r3, #1
 80037f0:	3b01      	subs	r3, #1
 80037f2:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80037f4:	429a      	cmp	r2, r3
 80037f6:	d107      	bne.n	8003808 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003802:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003804:	429a      	cmp	r2, r3
 8003806:	d001      	beq.n	800380c <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8003808:	2301      	movs	r3, #1
 800380a:	e000      	b.n	800380e <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 800380c:	2300      	movs	r3, #0
}
 800380e:	4618      	mov	r0, r3
 8003810:	3718      	adds	r7, #24
 8003812:	46bd      	mov	sp, r7
 8003814:	bd80      	pop	{r7, pc}
 8003816:	bf00      	nop
 8003818:	40023800 	.word	0x40023800

0800381c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800381c:	b580      	push	{r7, lr}
 800381e:	b084      	sub	sp, #16
 8003820:	af00      	add	r7, sp, #0
 8003822:	6078      	str	r0, [r7, #4]
 8003824:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8003826:	2300      	movs	r3, #0
 8003828:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	2b00      	cmp	r3, #0
 800382e:	d101      	bne.n	8003834 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003830:	2301      	movs	r3, #1
 8003832:	e0d0      	b.n	80039d6 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003834:	4b6a      	ldr	r3, [pc, #424]	; (80039e0 <HAL_RCC_ClockConfig+0x1c4>)
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f003 030f 	and.w	r3, r3, #15
 800383c:	683a      	ldr	r2, [r7, #0]
 800383e:	429a      	cmp	r2, r3
 8003840:	d910      	bls.n	8003864 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003842:	4b67      	ldr	r3, [pc, #412]	; (80039e0 <HAL_RCC_ClockConfig+0x1c4>)
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	f023 020f 	bic.w	r2, r3, #15
 800384a:	4965      	ldr	r1, [pc, #404]	; (80039e0 <HAL_RCC_ClockConfig+0x1c4>)
 800384c:	683b      	ldr	r3, [r7, #0]
 800384e:	4313      	orrs	r3, r2
 8003850:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003852:	4b63      	ldr	r3, [pc, #396]	; (80039e0 <HAL_RCC_ClockConfig+0x1c4>)
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f003 030f 	and.w	r3, r3, #15
 800385a:	683a      	ldr	r2, [r7, #0]
 800385c:	429a      	cmp	r2, r3
 800385e:	d001      	beq.n	8003864 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003860:	2301      	movs	r3, #1
 8003862:	e0b8      	b.n	80039d6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	f003 0302 	and.w	r3, r3, #2
 800386c:	2b00      	cmp	r3, #0
 800386e:	d020      	beq.n	80038b2 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	f003 0304 	and.w	r3, r3, #4
 8003878:	2b00      	cmp	r3, #0
 800387a:	d005      	beq.n	8003888 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800387c:	4b59      	ldr	r3, [pc, #356]	; (80039e4 <HAL_RCC_ClockConfig+0x1c8>)
 800387e:	689b      	ldr	r3, [r3, #8]
 8003880:	4a58      	ldr	r2, [pc, #352]	; (80039e4 <HAL_RCC_ClockConfig+0x1c8>)
 8003882:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003886:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	f003 0308 	and.w	r3, r3, #8
 8003890:	2b00      	cmp	r3, #0
 8003892:	d005      	beq.n	80038a0 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003894:	4b53      	ldr	r3, [pc, #332]	; (80039e4 <HAL_RCC_ClockConfig+0x1c8>)
 8003896:	689b      	ldr	r3, [r3, #8]
 8003898:	4a52      	ldr	r2, [pc, #328]	; (80039e4 <HAL_RCC_ClockConfig+0x1c8>)
 800389a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800389e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80038a0:	4b50      	ldr	r3, [pc, #320]	; (80039e4 <HAL_RCC_ClockConfig+0x1c8>)
 80038a2:	689b      	ldr	r3, [r3, #8]
 80038a4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	689b      	ldr	r3, [r3, #8]
 80038ac:	494d      	ldr	r1, [pc, #308]	; (80039e4 <HAL_RCC_ClockConfig+0x1c8>)
 80038ae:	4313      	orrs	r3, r2
 80038b0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f003 0301 	and.w	r3, r3, #1
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d040      	beq.n	8003940 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	685b      	ldr	r3, [r3, #4]
 80038c2:	2b01      	cmp	r3, #1
 80038c4:	d107      	bne.n	80038d6 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80038c6:	4b47      	ldr	r3, [pc, #284]	; (80039e4 <HAL_RCC_ClockConfig+0x1c8>)
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d115      	bne.n	80038fe <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80038d2:	2301      	movs	r3, #1
 80038d4:	e07f      	b.n	80039d6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	685b      	ldr	r3, [r3, #4]
 80038da:	2b02      	cmp	r3, #2
 80038dc:	d107      	bne.n	80038ee <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80038de:	4b41      	ldr	r3, [pc, #260]	; (80039e4 <HAL_RCC_ClockConfig+0x1c8>)
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d109      	bne.n	80038fe <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80038ea:	2301      	movs	r3, #1
 80038ec:	e073      	b.n	80039d6 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80038ee:	4b3d      	ldr	r3, [pc, #244]	; (80039e4 <HAL_RCC_ClockConfig+0x1c8>)
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	f003 0302 	and.w	r3, r3, #2
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d101      	bne.n	80038fe <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80038fa:	2301      	movs	r3, #1
 80038fc:	e06b      	b.n	80039d6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80038fe:	4b39      	ldr	r3, [pc, #228]	; (80039e4 <HAL_RCC_ClockConfig+0x1c8>)
 8003900:	689b      	ldr	r3, [r3, #8]
 8003902:	f023 0203 	bic.w	r2, r3, #3
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	685b      	ldr	r3, [r3, #4]
 800390a:	4936      	ldr	r1, [pc, #216]	; (80039e4 <HAL_RCC_ClockConfig+0x1c8>)
 800390c:	4313      	orrs	r3, r2
 800390e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003910:	f7fd fdec 	bl	80014ec <HAL_GetTick>
 8003914:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003916:	e00a      	b.n	800392e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003918:	f7fd fde8 	bl	80014ec <HAL_GetTick>
 800391c:	4602      	mov	r2, r0
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	1ad3      	subs	r3, r2, r3
 8003922:	f241 3288 	movw	r2, #5000	; 0x1388
 8003926:	4293      	cmp	r3, r2
 8003928:	d901      	bls.n	800392e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800392a:	2303      	movs	r3, #3
 800392c:	e053      	b.n	80039d6 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800392e:	4b2d      	ldr	r3, [pc, #180]	; (80039e4 <HAL_RCC_ClockConfig+0x1c8>)
 8003930:	689b      	ldr	r3, [r3, #8]
 8003932:	f003 020c 	and.w	r2, r3, #12
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	685b      	ldr	r3, [r3, #4]
 800393a:	009b      	lsls	r3, r3, #2
 800393c:	429a      	cmp	r2, r3
 800393e:	d1eb      	bne.n	8003918 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003940:	4b27      	ldr	r3, [pc, #156]	; (80039e0 <HAL_RCC_ClockConfig+0x1c4>)
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	f003 030f 	and.w	r3, r3, #15
 8003948:	683a      	ldr	r2, [r7, #0]
 800394a:	429a      	cmp	r2, r3
 800394c:	d210      	bcs.n	8003970 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800394e:	4b24      	ldr	r3, [pc, #144]	; (80039e0 <HAL_RCC_ClockConfig+0x1c4>)
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	f023 020f 	bic.w	r2, r3, #15
 8003956:	4922      	ldr	r1, [pc, #136]	; (80039e0 <HAL_RCC_ClockConfig+0x1c4>)
 8003958:	683b      	ldr	r3, [r7, #0]
 800395a:	4313      	orrs	r3, r2
 800395c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800395e:	4b20      	ldr	r3, [pc, #128]	; (80039e0 <HAL_RCC_ClockConfig+0x1c4>)
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	f003 030f 	and.w	r3, r3, #15
 8003966:	683a      	ldr	r2, [r7, #0]
 8003968:	429a      	cmp	r2, r3
 800396a:	d001      	beq.n	8003970 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 800396c:	2301      	movs	r3, #1
 800396e:	e032      	b.n	80039d6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	f003 0304 	and.w	r3, r3, #4
 8003978:	2b00      	cmp	r3, #0
 800397a:	d008      	beq.n	800398e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800397c:	4b19      	ldr	r3, [pc, #100]	; (80039e4 <HAL_RCC_ClockConfig+0x1c8>)
 800397e:	689b      	ldr	r3, [r3, #8]
 8003980:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	68db      	ldr	r3, [r3, #12]
 8003988:	4916      	ldr	r1, [pc, #88]	; (80039e4 <HAL_RCC_ClockConfig+0x1c8>)
 800398a:	4313      	orrs	r3, r2
 800398c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	f003 0308 	and.w	r3, r3, #8
 8003996:	2b00      	cmp	r3, #0
 8003998:	d009      	beq.n	80039ae <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800399a:	4b12      	ldr	r3, [pc, #72]	; (80039e4 <HAL_RCC_ClockConfig+0x1c8>)
 800399c:	689b      	ldr	r3, [r3, #8]
 800399e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	691b      	ldr	r3, [r3, #16]
 80039a6:	00db      	lsls	r3, r3, #3
 80039a8:	490e      	ldr	r1, [pc, #56]	; (80039e4 <HAL_RCC_ClockConfig+0x1c8>)
 80039aa:	4313      	orrs	r3, r2
 80039ac:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80039ae:	f000 f821 	bl	80039f4 <HAL_RCC_GetSysClockFreq>
 80039b2:	4602      	mov	r2, r0
 80039b4:	4b0b      	ldr	r3, [pc, #44]	; (80039e4 <HAL_RCC_ClockConfig+0x1c8>)
 80039b6:	689b      	ldr	r3, [r3, #8]
 80039b8:	091b      	lsrs	r3, r3, #4
 80039ba:	f003 030f 	and.w	r3, r3, #15
 80039be:	490a      	ldr	r1, [pc, #40]	; (80039e8 <HAL_RCC_ClockConfig+0x1cc>)
 80039c0:	5ccb      	ldrb	r3, [r1, r3]
 80039c2:	fa22 f303 	lsr.w	r3, r2, r3
 80039c6:	4a09      	ldr	r2, [pc, #36]	; (80039ec <HAL_RCC_ClockConfig+0x1d0>)
 80039c8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80039ca:	4b09      	ldr	r3, [pc, #36]	; (80039f0 <HAL_RCC_ClockConfig+0x1d4>)
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	4618      	mov	r0, r3
 80039d0:	f7fd fd48 	bl	8001464 <HAL_InitTick>

  return HAL_OK;
 80039d4:	2300      	movs	r3, #0
}
 80039d6:	4618      	mov	r0, r3
 80039d8:	3710      	adds	r7, #16
 80039da:	46bd      	mov	sp, r7
 80039dc:	bd80      	pop	{r7, pc}
 80039de:	bf00      	nop
 80039e0:	40023c00 	.word	0x40023c00
 80039e4:	40023800 	.word	0x40023800
 80039e8:	08009048 	.word	0x08009048
 80039ec:	2000000c 	.word	0x2000000c
 80039f0:	20000010 	.word	0x20000010

080039f4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80039f4:	b5b0      	push	{r4, r5, r7, lr}
 80039f6:	b084      	sub	sp, #16
 80039f8:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80039fa:	2100      	movs	r1, #0
 80039fc:	6079      	str	r1, [r7, #4]
 80039fe:	2100      	movs	r1, #0
 8003a00:	60f9      	str	r1, [r7, #12]
 8003a02:	2100      	movs	r1, #0
 8003a04:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0;
 8003a06:	2100      	movs	r1, #0
 8003a08:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003a0a:	4952      	ldr	r1, [pc, #328]	; (8003b54 <HAL_RCC_GetSysClockFreq+0x160>)
 8003a0c:	6889      	ldr	r1, [r1, #8]
 8003a0e:	f001 010c 	and.w	r1, r1, #12
 8003a12:	2908      	cmp	r1, #8
 8003a14:	d00d      	beq.n	8003a32 <HAL_RCC_GetSysClockFreq+0x3e>
 8003a16:	2908      	cmp	r1, #8
 8003a18:	f200 8094 	bhi.w	8003b44 <HAL_RCC_GetSysClockFreq+0x150>
 8003a1c:	2900      	cmp	r1, #0
 8003a1e:	d002      	beq.n	8003a26 <HAL_RCC_GetSysClockFreq+0x32>
 8003a20:	2904      	cmp	r1, #4
 8003a22:	d003      	beq.n	8003a2c <HAL_RCC_GetSysClockFreq+0x38>
 8003a24:	e08e      	b.n	8003b44 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003a26:	4b4c      	ldr	r3, [pc, #304]	; (8003b58 <HAL_RCC_GetSysClockFreq+0x164>)
 8003a28:	60bb      	str	r3, [r7, #8]
      break;
 8003a2a:	e08e      	b.n	8003b4a <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003a2c:	4b4b      	ldr	r3, [pc, #300]	; (8003b5c <HAL_RCC_GetSysClockFreq+0x168>)
 8003a2e:	60bb      	str	r3, [r7, #8]
      break;
 8003a30:	e08b      	b.n	8003b4a <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003a32:	4948      	ldr	r1, [pc, #288]	; (8003b54 <HAL_RCC_GetSysClockFreq+0x160>)
 8003a34:	6849      	ldr	r1, [r1, #4]
 8003a36:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8003a3a:	6079      	str	r1, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8003a3c:	4945      	ldr	r1, [pc, #276]	; (8003b54 <HAL_RCC_GetSysClockFreq+0x160>)
 8003a3e:	6849      	ldr	r1, [r1, #4]
 8003a40:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8003a44:	2900      	cmp	r1, #0
 8003a46:	d024      	beq.n	8003a92 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003a48:	4942      	ldr	r1, [pc, #264]	; (8003b54 <HAL_RCC_GetSysClockFreq+0x160>)
 8003a4a:	6849      	ldr	r1, [r1, #4]
 8003a4c:	0989      	lsrs	r1, r1, #6
 8003a4e:	4608      	mov	r0, r1
 8003a50:	f04f 0100 	mov.w	r1, #0
 8003a54:	f240 14ff 	movw	r4, #511	; 0x1ff
 8003a58:	f04f 0500 	mov.w	r5, #0
 8003a5c:	ea00 0204 	and.w	r2, r0, r4
 8003a60:	ea01 0305 	and.w	r3, r1, r5
 8003a64:	493d      	ldr	r1, [pc, #244]	; (8003b5c <HAL_RCC_GetSysClockFreq+0x168>)
 8003a66:	fb01 f003 	mul.w	r0, r1, r3
 8003a6a:	2100      	movs	r1, #0
 8003a6c:	fb01 f102 	mul.w	r1, r1, r2
 8003a70:	1844      	adds	r4, r0, r1
 8003a72:	493a      	ldr	r1, [pc, #232]	; (8003b5c <HAL_RCC_GetSysClockFreq+0x168>)
 8003a74:	fba2 0101 	umull	r0, r1, r2, r1
 8003a78:	1863      	adds	r3, r4, r1
 8003a7a:	4619      	mov	r1, r3
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	461a      	mov	r2, r3
 8003a80:	f04f 0300 	mov.w	r3, #0
 8003a84:	f7fc fbcc 	bl	8000220 <__aeabi_uldivmod>
 8003a88:	4602      	mov	r2, r0
 8003a8a:	460b      	mov	r3, r1
 8003a8c:	4613      	mov	r3, r2
 8003a8e:	60fb      	str	r3, [r7, #12]
 8003a90:	e04a      	b.n	8003b28 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003a92:	4b30      	ldr	r3, [pc, #192]	; (8003b54 <HAL_RCC_GetSysClockFreq+0x160>)
 8003a94:	685b      	ldr	r3, [r3, #4]
 8003a96:	099b      	lsrs	r3, r3, #6
 8003a98:	461a      	mov	r2, r3
 8003a9a:	f04f 0300 	mov.w	r3, #0
 8003a9e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003aa2:	f04f 0100 	mov.w	r1, #0
 8003aa6:	ea02 0400 	and.w	r4, r2, r0
 8003aaa:	ea03 0501 	and.w	r5, r3, r1
 8003aae:	4620      	mov	r0, r4
 8003ab0:	4629      	mov	r1, r5
 8003ab2:	f04f 0200 	mov.w	r2, #0
 8003ab6:	f04f 0300 	mov.w	r3, #0
 8003aba:	014b      	lsls	r3, r1, #5
 8003abc:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003ac0:	0142      	lsls	r2, r0, #5
 8003ac2:	4610      	mov	r0, r2
 8003ac4:	4619      	mov	r1, r3
 8003ac6:	1b00      	subs	r0, r0, r4
 8003ac8:	eb61 0105 	sbc.w	r1, r1, r5
 8003acc:	f04f 0200 	mov.w	r2, #0
 8003ad0:	f04f 0300 	mov.w	r3, #0
 8003ad4:	018b      	lsls	r3, r1, #6
 8003ad6:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003ada:	0182      	lsls	r2, r0, #6
 8003adc:	1a12      	subs	r2, r2, r0
 8003ade:	eb63 0301 	sbc.w	r3, r3, r1
 8003ae2:	f04f 0000 	mov.w	r0, #0
 8003ae6:	f04f 0100 	mov.w	r1, #0
 8003aea:	00d9      	lsls	r1, r3, #3
 8003aec:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003af0:	00d0      	lsls	r0, r2, #3
 8003af2:	4602      	mov	r2, r0
 8003af4:	460b      	mov	r3, r1
 8003af6:	1912      	adds	r2, r2, r4
 8003af8:	eb45 0303 	adc.w	r3, r5, r3
 8003afc:	f04f 0000 	mov.w	r0, #0
 8003b00:	f04f 0100 	mov.w	r1, #0
 8003b04:	0299      	lsls	r1, r3, #10
 8003b06:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8003b0a:	0290      	lsls	r0, r2, #10
 8003b0c:	4602      	mov	r2, r0
 8003b0e:	460b      	mov	r3, r1
 8003b10:	4610      	mov	r0, r2
 8003b12:	4619      	mov	r1, r3
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	461a      	mov	r2, r3
 8003b18:	f04f 0300 	mov.w	r3, #0
 8003b1c:	f7fc fb80 	bl	8000220 <__aeabi_uldivmod>
 8003b20:	4602      	mov	r2, r0
 8003b22:	460b      	mov	r3, r1
 8003b24:	4613      	mov	r3, r2
 8003b26:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8003b28:	4b0a      	ldr	r3, [pc, #40]	; (8003b54 <HAL_RCC_GetSysClockFreq+0x160>)
 8003b2a:	685b      	ldr	r3, [r3, #4]
 8003b2c:	0c1b      	lsrs	r3, r3, #16
 8003b2e:	f003 0303 	and.w	r3, r3, #3
 8003b32:	3301      	adds	r3, #1
 8003b34:	005b      	lsls	r3, r3, #1
 8003b36:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8003b38:	68fa      	ldr	r2, [r7, #12]
 8003b3a:	683b      	ldr	r3, [r7, #0]
 8003b3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b40:	60bb      	str	r3, [r7, #8]
      break;
 8003b42:	e002      	b.n	8003b4a <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003b44:	4b04      	ldr	r3, [pc, #16]	; (8003b58 <HAL_RCC_GetSysClockFreq+0x164>)
 8003b46:	60bb      	str	r3, [r7, #8]
      break;
 8003b48:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003b4a:	68bb      	ldr	r3, [r7, #8]
}
 8003b4c:	4618      	mov	r0, r3
 8003b4e:	3710      	adds	r7, #16
 8003b50:	46bd      	mov	sp, r7
 8003b52:	bdb0      	pop	{r4, r5, r7, pc}
 8003b54:	40023800 	.word	0x40023800
 8003b58:	00f42400 	.word	0x00f42400
 8003b5c:	017d7840 	.word	0x017d7840

08003b60 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003b60:	b480      	push	{r7}
 8003b62:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003b64:	4b03      	ldr	r3, [pc, #12]	; (8003b74 <HAL_RCC_GetHCLKFreq+0x14>)
 8003b66:	681b      	ldr	r3, [r3, #0]
}
 8003b68:	4618      	mov	r0, r3
 8003b6a:	46bd      	mov	sp, r7
 8003b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b70:	4770      	bx	lr
 8003b72:	bf00      	nop
 8003b74:	2000000c 	.word	0x2000000c

08003b78 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003b78:	b580      	push	{r7, lr}
 8003b7a:	b088      	sub	sp, #32
 8003b7c:	af00      	add	r7, sp, #0
 8003b7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8003b80:	2300      	movs	r3, #0
 8003b82:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8003b84:	2300      	movs	r3, #0
 8003b86:	613b      	str	r3, [r7, #16]
  uint32_t plli2sused = 0;
 8003b88:	2300      	movs	r3, #0
 8003b8a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8003b8c:	2300      	movs	r3, #0
 8003b8e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	f003 0301 	and.w	r3, r3, #1
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d012      	beq.n	8003bc2 <HAL_RCCEx_PeriphCLKConfig+0x4a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003b9c:	4b65      	ldr	r3, [pc, #404]	; (8003d34 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003b9e:	689b      	ldr	r3, [r3, #8]
 8003ba0:	4a64      	ldr	r2, [pc, #400]	; (8003d34 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003ba2:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003ba6:	6093      	str	r3, [r2, #8]
 8003ba8:	4b62      	ldr	r3, [pc, #392]	; (8003d34 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003baa:	689a      	ldr	r2, [r3, #8]
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bb0:	4960      	ldr	r1, [pc, #384]	; (8003d34 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003bb2:	4313      	orrs	r3, r2
 8003bb4:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d101      	bne.n	8003bc2 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      plli2sused = 1;
 8003bbe:	2301      	movs	r3, #1
 8003bc0:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d017      	beq.n	8003bfe <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003bce:	4b59      	ldr	r3, [pc, #356]	; (8003d34 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003bd0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003bd4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003bdc:	4955      	ldr	r1, [pc, #340]	; (8003d34 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003bde:	4313      	orrs	r3, r2
 8003be0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003be8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003bec:	d101      	bne.n	8003bf2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
    {
      plli2sused = 1;
 8003bee:	2301      	movs	r3, #1
 8003bf0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d101      	bne.n	8003bfe <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      pllsaiused = 1;
 8003bfa:	2301      	movs	r3, #1
 8003bfc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d017      	beq.n	8003c3a <HAL_RCCEx_PeriphCLKConfig+0xc2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003c0a:	4b4a      	ldr	r3, [pc, #296]	; (8003d34 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003c0c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003c10:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c18:	4946      	ldr	r1, [pc, #280]	; (8003d34 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003c1a:	4313      	orrs	r3, r2
 8003c1c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c24:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003c28:	d101      	bne.n	8003c2e <HAL_RCCEx_PeriphCLKConfig+0xb6>
    {
      plli2sused = 1;
 8003c2a:	2301      	movs	r3, #1
 8003c2c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d101      	bne.n	8003c3a <HAL_RCCEx_PeriphCLKConfig+0xc2>
    {
      pllsaiused = 1;
 8003c36:	2301      	movs	r3, #1
 8003c38:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	f003 0320 	and.w	r3, r3, #32
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	f000 808b 	beq.w	8003d5e <HAL_RCCEx_PeriphCLKConfig+0x1e6>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003c48:	4b3a      	ldr	r3, [pc, #232]	; (8003d34 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003c4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c4c:	4a39      	ldr	r2, [pc, #228]	; (8003d34 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003c4e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c52:	6413      	str	r3, [r2, #64]	; 0x40
 8003c54:	4b37      	ldr	r3, [pc, #220]	; (8003d34 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003c56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c58:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c5c:	60fb      	str	r3, [r7, #12]
 8003c5e:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003c60:	4b35      	ldr	r3, [pc, #212]	; (8003d38 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	4a34      	ldr	r2, [pc, #208]	; (8003d38 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003c66:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c6a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003c6c:	f7fd fc3e 	bl	80014ec <HAL_GetTick>
 8003c70:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003c72:	e008      	b.n	8003c86 <HAL_RCCEx_PeriphCLKConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c74:	f7fd fc3a 	bl	80014ec <HAL_GetTick>
 8003c78:	4602      	mov	r2, r0
 8003c7a:	697b      	ldr	r3, [r7, #20]
 8003c7c:	1ad3      	subs	r3, r2, r3
 8003c7e:	2b64      	cmp	r3, #100	; 0x64
 8003c80:	d901      	bls.n	8003c86 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003c82:	2303      	movs	r3, #3
 8003c84:	e2bc      	b.n	8004200 <HAL_RCCEx_PeriphCLKConfig+0x688>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003c86:	4b2c      	ldr	r3, [pc, #176]	; (8003d38 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d0f0      	beq.n	8003c74 <HAL_RCCEx_PeriphCLKConfig+0xfc>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003c92:	4b28      	ldr	r3, [pc, #160]	; (8003d34 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003c94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c96:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c9a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003c9c:	693b      	ldr	r3, [r7, #16]
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d035      	beq.n	8003d0e <HAL_RCCEx_PeriphCLKConfig+0x196>
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ca6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003caa:	693a      	ldr	r2, [r7, #16]
 8003cac:	429a      	cmp	r2, r3
 8003cae:	d02e      	beq.n	8003d0e <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003cb0:	4b20      	ldr	r3, [pc, #128]	; (8003d34 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003cb2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cb4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003cb8:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003cba:	4b1e      	ldr	r3, [pc, #120]	; (8003d34 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003cbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cbe:	4a1d      	ldr	r2, [pc, #116]	; (8003d34 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003cc0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003cc4:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003cc6:	4b1b      	ldr	r3, [pc, #108]	; (8003d34 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003cc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cca:	4a1a      	ldr	r2, [pc, #104]	; (8003d34 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003ccc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003cd0:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8003cd2:	4a18      	ldr	r2, [pc, #96]	; (8003d34 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003cd4:	693b      	ldr	r3, [r7, #16]
 8003cd6:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003cd8:	4b16      	ldr	r3, [pc, #88]	; (8003d34 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003cda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cdc:	f003 0301 	and.w	r3, r3, #1
 8003ce0:	2b01      	cmp	r3, #1
 8003ce2:	d114      	bne.n	8003d0e <HAL_RCCEx_PeriphCLKConfig+0x196>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ce4:	f7fd fc02 	bl	80014ec <HAL_GetTick>
 8003ce8:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003cea:	e00a      	b.n	8003d02 <HAL_RCCEx_PeriphCLKConfig+0x18a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003cec:	f7fd fbfe 	bl	80014ec <HAL_GetTick>
 8003cf0:	4602      	mov	r2, r0
 8003cf2:	697b      	ldr	r3, [r7, #20]
 8003cf4:	1ad3      	subs	r3, r2, r3
 8003cf6:	f241 3288 	movw	r2, #5000	; 0x1388
 8003cfa:	4293      	cmp	r3, r2
 8003cfc:	d901      	bls.n	8003d02 <HAL_RCCEx_PeriphCLKConfig+0x18a>
          {
            return HAL_TIMEOUT;
 8003cfe:	2303      	movs	r3, #3
 8003d00:	e27e      	b.n	8004200 <HAL_RCCEx_PeriphCLKConfig+0x688>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d02:	4b0c      	ldr	r3, [pc, #48]	; (8003d34 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003d04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d06:	f003 0302 	and.w	r3, r3, #2
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d0ee      	beq.n	8003cec <HAL_RCCEx_PeriphCLKConfig+0x174>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d12:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d16:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003d1a:	d111      	bne.n	8003d40 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
 8003d1c:	4b05      	ldr	r3, [pc, #20]	; (8003d34 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003d1e:	689b      	ldr	r3, [r3, #8]
 8003d20:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8003d28:	4b04      	ldr	r3, [pc, #16]	; (8003d3c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8003d2a:	400b      	ands	r3, r1
 8003d2c:	4901      	ldr	r1, [pc, #4]	; (8003d34 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003d2e:	4313      	orrs	r3, r2
 8003d30:	608b      	str	r3, [r1, #8]
 8003d32:	e00b      	b.n	8003d4c <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 8003d34:	40023800 	.word	0x40023800
 8003d38:	40007000 	.word	0x40007000
 8003d3c:	0ffffcff 	.word	0x0ffffcff
 8003d40:	4ba4      	ldr	r3, [pc, #656]	; (8003fd4 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8003d42:	689b      	ldr	r3, [r3, #8]
 8003d44:	4aa3      	ldr	r2, [pc, #652]	; (8003fd4 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8003d46:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003d4a:	6093      	str	r3, [r2, #8]
 8003d4c:	4ba1      	ldr	r3, [pc, #644]	; (8003fd4 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8003d4e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d54:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d58:	499e      	ldr	r1, [pc, #632]	; (8003fd4 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8003d5a:	4313      	orrs	r3, r2
 8003d5c:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	f003 0310 	and.w	r3, r3, #16
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d010      	beq.n	8003d8c <HAL_RCCEx_PeriphCLKConfig+0x214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003d6a:	4b9a      	ldr	r3, [pc, #616]	; (8003fd4 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8003d6c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003d70:	4a98      	ldr	r2, [pc, #608]	; (8003fd4 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8003d72:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003d76:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8003d7a:	4b96      	ldr	r3, [pc, #600]	; (8003fd4 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8003d7c:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d84:	4993      	ldr	r1, [pc, #588]	; (8003fd4 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8003d86:	4313      	orrs	r3, r2
 8003d88:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d00a      	beq.n	8003dae <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003d98:	4b8e      	ldr	r3, [pc, #568]	; (8003fd4 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8003d9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d9e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003da6:	498b      	ldr	r1, [pc, #556]	; (8003fd4 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8003da8:	4313      	orrs	r3, r2
 8003daa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d00a      	beq.n	8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003dba:	4b86      	ldr	r3, [pc, #536]	; (8003fd4 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8003dbc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003dc0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003dc8:	4982      	ldr	r1, [pc, #520]	; (8003fd4 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8003dca:	4313      	orrs	r3, r2
 8003dcc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d00a      	beq.n	8003df2 <HAL_RCCEx_PeriphCLKConfig+0x27a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003ddc:	4b7d      	ldr	r3, [pc, #500]	; (8003fd4 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8003dde:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003de2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003dea:	497a      	ldr	r1, [pc, #488]	; (8003fd4 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8003dec:	4313      	orrs	r3, r2
 8003dee:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d00a      	beq.n	8003e14 <HAL_RCCEx_PeriphCLKConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003dfe:	4b75      	ldr	r3, [pc, #468]	; (8003fd4 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8003e00:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e04:	f023 0203 	bic.w	r2, r3, #3
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e0c:	4971      	ldr	r1, [pc, #452]	; (8003fd4 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8003e0e:	4313      	orrs	r3, r2
 8003e10:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d00a      	beq.n	8003e36 <HAL_RCCEx_PeriphCLKConfig+0x2be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003e20:	4b6c      	ldr	r3, [pc, #432]	; (8003fd4 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8003e22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e26:	f023 020c 	bic.w	r2, r3, #12
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e2e:	4969      	ldr	r1, [pc, #420]	; (8003fd4 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8003e30:	4313      	orrs	r3, r2
 8003e32:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d00a      	beq.n	8003e58 <HAL_RCCEx_PeriphCLKConfig+0x2e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003e42:	4b64      	ldr	r3, [pc, #400]	; (8003fd4 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8003e44:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e48:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e50:	4960      	ldr	r1, [pc, #384]	; (8003fd4 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8003e52:	4313      	orrs	r3, r2
 8003e54:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d00a      	beq.n	8003e7a <HAL_RCCEx_PeriphCLKConfig+0x302>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003e64:	4b5b      	ldr	r3, [pc, #364]	; (8003fd4 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8003e66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e6a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e72:	4958      	ldr	r1, [pc, #352]	; (8003fd4 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8003e74:	4313      	orrs	r3, r2
 8003e76:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d00a      	beq.n	8003e9c <HAL_RCCEx_PeriphCLKConfig+0x324>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003e86:	4b53      	ldr	r3, [pc, #332]	; (8003fd4 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8003e88:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e8c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e94:	494f      	ldr	r1, [pc, #316]	; (8003fd4 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8003e96:	4313      	orrs	r3, r2
 8003e98:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d00a      	beq.n	8003ebe <HAL_RCCEx_PeriphCLKConfig+0x346>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8003ea8:	4b4a      	ldr	r3, [pc, #296]	; (8003fd4 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8003eaa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003eae:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003eb6:	4947      	ldr	r1, [pc, #284]	; (8003fd4 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8003eb8:	4313      	orrs	r3, r2
 8003eba:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d00a      	beq.n	8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x368>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8003eca:	4b42      	ldr	r3, [pc, #264]	; (8003fd4 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8003ecc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ed0:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ed8:	493e      	ldr	r1, [pc, #248]	; (8003fd4 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8003eda:	4313      	orrs	r3, r2
 8003edc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d00a      	beq.n	8003f02 <HAL_RCCEx_PeriphCLKConfig+0x38a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8003eec:	4b39      	ldr	r3, [pc, #228]	; (8003fd4 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8003eee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ef2:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003efa:	4936      	ldr	r1, [pc, #216]	; (8003fd4 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8003efc:	4313      	orrs	r3, r2
 8003efe:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d011      	beq.n	8003f32 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003f0e:	4b31      	ldr	r3, [pc, #196]	; (8003fd4 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8003f10:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f14:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f1c:	492d      	ldr	r1, [pc, #180]	; (8003fd4 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8003f1e:	4313      	orrs	r3, r2
 8003f20:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f28:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003f2c:	d101      	bne.n	8003f32 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      pllsaiused = 1;
 8003f2e:	2301      	movs	r3, #1
 8003f30:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d00a      	beq.n	8003f54 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003f3e:	4b25      	ldr	r3, [pc, #148]	; (8003fd4 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8003f40:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f44:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003f4c:	4921      	ldr	r1, [pc, #132]	; (8003fd4 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8003f4e:	4313      	orrs	r3, r2
 8003f50:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d00a      	beq.n	8003f76 <HAL_RCCEx_PeriphCLKConfig+0x3fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003f60:	4b1c      	ldr	r3, [pc, #112]	; (8003fd4 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8003f62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f66:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003f6e:	4919      	ldr	r1, [pc, #100]	; (8003fd4 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8003f70:	4313      	orrs	r3, r2
 8003f72:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d00a      	beq.n	8003f98 <HAL_RCCEx_PeriphCLKConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8003f82:	4b14      	ldr	r3, [pc, #80]	; (8003fd4 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8003f84:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f88:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003f90:	4910      	ldr	r1, [pc, #64]	; (8003fd4 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8003f92:	4313      	orrs	r3, r2
 8003f94:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2 or I2S */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003f98:	69fb      	ldr	r3, [r7, #28]
 8003f9a:	2b01      	cmp	r3, #1
 8003f9c:	d006      	beq.n	8003fac <HAL_RCCEx_PeriphCLKConfig+0x434>
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	f000 809d 	beq.w	80040e6 <HAL_RCCEx_PeriphCLKConfig+0x56e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003fac:	4b09      	ldr	r3, [pc, #36]	; (8003fd4 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	4a08      	ldr	r2, [pc, #32]	; (8003fd4 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8003fb2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003fb6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003fb8:	f7fd fa98 	bl	80014ec <HAL_GetTick>
 8003fbc:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003fbe:	e00b      	b.n	8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x460>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003fc0:	f7fd fa94 	bl	80014ec <HAL_GetTick>
 8003fc4:	4602      	mov	r2, r0
 8003fc6:	697b      	ldr	r3, [r7, #20]
 8003fc8:	1ad3      	subs	r3, r2, r3
 8003fca:	2b64      	cmp	r3, #100	; 0x64
 8003fcc:	d904      	bls.n	8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x460>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003fce:	2303      	movs	r3, #3
 8003fd0:	e116      	b.n	8004200 <HAL_RCCEx_PeriphCLKConfig+0x688>
 8003fd2:	bf00      	nop
 8003fd4:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003fd8:	4b8b      	ldr	r3, [pc, #556]	; (8004208 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d1ed      	bne.n	8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x448>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	f003 0301 	and.w	r3, r3, #1
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d017      	beq.n	8004020 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d113      	bne.n	8004020 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003ff8:	4b83      	ldr	r3, [pc, #524]	; (8004208 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8003ffa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003ffe:	0e1b      	lsrs	r3, r3, #24
 8004000:	f003 030f 	and.w	r3, r3, #15
 8004004:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, PeriphClkInit->PLLI2S.PLLI2SR);
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	685b      	ldr	r3, [r3, #4]
 800400a:	019a      	lsls	r2, r3, #6
 800400c:	693b      	ldr	r3, [r7, #16]
 800400e:	061b      	lsls	r3, r3, #24
 8004010:	431a      	orrs	r2, r3
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	689b      	ldr	r3, [r3, #8]
 8004016:	071b      	lsls	r3, r3, #28
 8004018:	497b      	ldr	r1, [pc, #492]	; (8004208 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800401a:	4313      	orrs	r3, r2
 800401c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004028:	2b00      	cmp	r3, #0
 800402a:	d004      	beq.n	8004036 <HAL_RCCEx_PeriphCLKConfig+0x4be>
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004030:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004034:	d00a      	beq.n	800404c <HAL_RCCEx_PeriphCLKConfig+0x4d4>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800403e:	2b00      	cmp	r3, #0
 8004040:	d024      	beq.n	800408c <HAL_RCCEx_PeriphCLKConfig+0x514>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004046:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800404a:	d11f      	bne.n	800408c <HAL_RCCEx_PeriphCLKConfig+0x514>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800404c:	4b6e      	ldr	r3, [pc, #440]	; (8004208 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800404e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004052:	0f1b      	lsrs	r3, r3, #28
 8004054:	f003 0307 	and.w	r3, r3, #7
 8004058:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg0);
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	685b      	ldr	r3, [r3, #4]
 800405e:	019a      	lsls	r2, r3, #6
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	68db      	ldr	r3, [r3, #12]
 8004064:	061b      	lsls	r3, r3, #24
 8004066:	431a      	orrs	r2, r3
 8004068:	693b      	ldr	r3, [r7, #16]
 800406a:	071b      	lsls	r3, r3, #28
 800406c:	4966      	ldr	r1, [pc, #408]	; (8004208 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800406e:	4313      	orrs	r3, r2
 8004070:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004074:	4b64      	ldr	r3, [pc, #400]	; (8004208 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8004076:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800407a:	f023 021f 	bic.w	r2, r3, #31
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	69db      	ldr	r3, [r3, #28]
 8004082:	3b01      	subs	r3, #1
 8004084:	4960      	ldr	r1, [pc, #384]	; (8004208 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8004086:	4313      	orrs	r3, r2
 8004088:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004094:	2b00      	cmp	r3, #0
 8004096:	d00d      	beq.n	80040b4 <HAL_RCCEx_PeriphCLKConfig+0x53c>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	685b      	ldr	r3, [r3, #4]
 800409c:	019a      	lsls	r2, r3, #6
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	68db      	ldr	r3, [r3, #12]
 80040a2:	061b      	lsls	r3, r3, #24
 80040a4:	431a      	orrs	r2, r3
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	689b      	ldr	r3, [r3, #8]
 80040aa:	071b      	lsls	r3, r3, #28
 80040ac:	4956      	ldr	r1, [pc, #344]	; (8004208 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80040ae:	4313      	orrs	r3, r2
 80040b0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80040b4:	4b54      	ldr	r3, [pc, #336]	; (8004208 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	4a53      	ldr	r2, [pc, #332]	; (8004208 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80040ba:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80040be:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80040c0:	f7fd fa14 	bl	80014ec <HAL_GetTick>
 80040c4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80040c6:	e008      	b.n	80040da <HAL_RCCEx_PeriphCLKConfig+0x562>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80040c8:	f7fd fa10 	bl	80014ec <HAL_GetTick>
 80040cc:	4602      	mov	r2, r0
 80040ce:	697b      	ldr	r3, [r7, #20]
 80040d0:	1ad3      	subs	r3, r2, r3
 80040d2:	2b64      	cmp	r3, #100	; 0x64
 80040d4:	d901      	bls.n	80040da <HAL_RCCEx_PeriphCLKConfig+0x562>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80040d6:	2303      	movs	r3, #3
 80040d8:	e092      	b.n	8004200 <HAL_RCCEx_PeriphCLKConfig+0x688>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80040da:	4b4b      	ldr	r3, [pc, #300]	; (8004208 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d0f0      	beq.n	80040c8 <HAL_RCCEx_PeriphCLKConfig+0x550>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80040e6:	69bb      	ldr	r3, [r7, #24]
 80040e8:	2b01      	cmp	r3, #1
 80040ea:	f040 8088 	bne.w	80041fe <HAL_RCCEx_PeriphCLKConfig+0x686>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80040ee:	4b46      	ldr	r3, [pc, #280]	; (8004208 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	4a45      	ldr	r2, [pc, #276]	; (8004208 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80040f4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80040f8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80040fa:	f7fd f9f7 	bl	80014ec <HAL_GetTick>
 80040fe:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004100:	e008      	b.n	8004114 <HAL_RCCEx_PeriphCLKConfig+0x59c>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004102:	f7fd f9f3 	bl	80014ec <HAL_GetTick>
 8004106:	4602      	mov	r2, r0
 8004108:	697b      	ldr	r3, [r7, #20]
 800410a:	1ad3      	subs	r3, r2, r3
 800410c:	2b64      	cmp	r3, #100	; 0x64
 800410e:	d901      	bls.n	8004114 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004110:	2303      	movs	r3, #3
 8004112:	e075      	b.n	8004200 <HAL_RCCEx_PeriphCLKConfig+0x688>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004114:	4b3c      	ldr	r3, [pc, #240]	; (8004208 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800411c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004120:	d0ef      	beq.n	8004102 <HAL_RCCEx_PeriphCLKConfig+0x58a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800412a:	2b00      	cmp	r3, #0
 800412c:	d003      	beq.n	8004136 <HAL_RCCEx_PeriphCLKConfig+0x5be>
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004132:	2b00      	cmp	r3, #0
 8004134:	d009      	beq.n	800414a <HAL_RCCEx_PeriphCLKConfig+0x5d2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800413e:	2b00      	cmp	r3, #0
 8004140:	d024      	beq.n	800418c <HAL_RCCEx_PeriphCLKConfig+0x614>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004146:	2b00      	cmp	r3, #0
 8004148:	d120      	bne.n	800418c <HAL_RCCEx_PeriphCLKConfig+0x614>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800414a:	4b2f      	ldr	r3, [pc, #188]	; (8004208 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800414c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004150:	0c1b      	lsrs	r3, r3, #16
 8004152:	f003 0303 	and.w	r3, r3, #3
 8004156:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ);
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	691b      	ldr	r3, [r3, #16]
 800415c:	019a      	lsls	r2, r3, #6
 800415e:	693b      	ldr	r3, [r7, #16]
 8004160:	041b      	lsls	r3, r3, #16
 8004162:	431a      	orrs	r2, r3
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	695b      	ldr	r3, [r3, #20]
 8004168:	061b      	lsls	r3, r3, #24
 800416a:	4927      	ldr	r1, [pc, #156]	; (8004208 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800416c:	4313      	orrs	r3, r2
 800416e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004172:	4b25      	ldr	r3, [pc, #148]	; (8004208 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8004174:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004178:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	6a1b      	ldr	r3, [r3, #32]
 8004180:	3b01      	subs	r3, #1
 8004182:	021b      	lsls	r3, r3, #8
 8004184:	4920      	ldr	r1, [pc, #128]	; (8004208 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8004186:	4313      	orrs	r3, r2
 8004188:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004194:	2b00      	cmp	r3, #0
 8004196:	d018      	beq.n	80041ca <HAL_RCCEx_PeriphCLKConfig+0x652>
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800419c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80041a0:	d113      	bne.n	80041ca <HAL_RCCEx_PeriphCLKConfig+0x652>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80041a2:	4b19      	ldr	r3, [pc, #100]	; (8004208 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80041a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041a8:	0e1b      	lsrs	r3, r3, #24
 80041aa:	f003 030f 	and.w	r3, r3, #15
 80041ae:	613b      	str	r3, [r7, #16]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0);
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	691b      	ldr	r3, [r3, #16]
 80041b4:	019a      	lsls	r2, r3, #6
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	699b      	ldr	r3, [r3, #24]
 80041ba:	041b      	lsls	r3, r3, #16
 80041bc:	431a      	orrs	r2, r3
 80041be:	693b      	ldr	r3, [r7, #16]
 80041c0:	061b      	lsls	r3, r3, #24
 80041c2:	4911      	ldr	r1, [pc, #68]	; (8004208 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80041c4:	4313      	orrs	r3, r2
 80041c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80041ca:	4b0f      	ldr	r3, [pc, #60]	; (8004208 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	4a0e      	ldr	r2, [pc, #56]	; (8004208 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80041d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80041d4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80041d6:	f7fd f989 	bl	80014ec <HAL_GetTick>
 80041da:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80041dc:	e008      	b.n	80041f0 <HAL_RCCEx_PeriphCLKConfig+0x678>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80041de:	f7fd f985 	bl	80014ec <HAL_GetTick>
 80041e2:	4602      	mov	r2, r0
 80041e4:	697b      	ldr	r3, [r7, #20]
 80041e6:	1ad3      	subs	r3, r2, r3
 80041e8:	2b64      	cmp	r3, #100	; 0x64
 80041ea:	d901      	bls.n	80041f0 <HAL_RCCEx_PeriphCLKConfig+0x678>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80041ec:	2303      	movs	r3, #3
 80041ee:	e007      	b.n	8004200 <HAL_RCCEx_PeriphCLKConfig+0x688>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80041f0:	4b05      	ldr	r3, [pc, #20]	; (8004208 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80041f8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80041fc:	d1ef      	bne.n	80041de <HAL_RCCEx_PeriphCLKConfig+0x666>
      }
    }
  }
  return HAL_OK;
 80041fe:	2300      	movs	r3, #0
}
 8004200:	4618      	mov	r0, r3
 8004202:	3720      	adds	r7, #32
 8004204:	46bd      	mov	sp, r7
 8004206:	bd80      	pop	{r7, pc}
 8004208:	40023800 	.word	0x40023800

0800420c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800420c:	b580      	push	{r7, lr}
 800420e:	b082      	sub	sp, #8
 8004210:	af00      	add	r7, sp, #0
 8004212:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	2b00      	cmp	r3, #0
 8004218:	d101      	bne.n	800421e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800421a:	2301      	movs	r3, #1
 800421c:	e049      	b.n	80042b2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004224:	b2db      	uxtb	r3, r3
 8004226:	2b00      	cmp	r3, #0
 8004228:	d106      	bne.n	8004238 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	2200      	movs	r2, #0
 800422e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004232:	6878      	ldr	r0, [r7, #4]
 8004234:	f7fc ff4c 	bl	80010d0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	2202      	movs	r2, #2
 800423c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681a      	ldr	r2, [r3, #0]
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	3304      	adds	r3, #4
 8004248:	4619      	mov	r1, r3
 800424a:	4610      	mov	r0, r2
 800424c:	f000 fcce 	bl	8004bec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	2201      	movs	r2, #1
 8004254:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	2201      	movs	r2, #1
 800425c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	2201      	movs	r2, #1
 8004264:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	2201      	movs	r2, #1
 800426c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	2201      	movs	r2, #1
 8004274:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	2201      	movs	r2, #1
 800427c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	2201      	movs	r2, #1
 8004284:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	2201      	movs	r2, #1
 800428c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	2201      	movs	r2, #1
 8004294:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	2201      	movs	r2, #1
 800429c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	2201      	movs	r2, #1
 80042a4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	2201      	movs	r2, #1
 80042ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80042b0:	2300      	movs	r3, #0
}
 80042b2:	4618      	mov	r0, r3
 80042b4:	3708      	adds	r7, #8
 80042b6:	46bd      	mov	sp, r7
 80042b8:	bd80      	pop	{r7, pc}

080042ba <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80042ba:	b580      	push	{r7, lr}
 80042bc:	b082      	sub	sp, #8
 80042be:	af00      	add	r7, sp, #0
 80042c0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d101      	bne.n	80042cc <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80042c8:	2301      	movs	r3, #1
 80042ca:	e049      	b.n	8004360 <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80042d2:	b2db      	uxtb	r3, r3
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d106      	bne.n	80042e6 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	2200      	movs	r2, #0
 80042dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80042e0:	6878      	ldr	r0, [r7, #4]
 80042e2:	f000 f841 	bl	8004368 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	2202      	movs	r2, #2
 80042ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681a      	ldr	r2, [r3, #0]
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	3304      	adds	r3, #4
 80042f6:	4619      	mov	r1, r3
 80042f8:	4610      	mov	r0, r2
 80042fa:	f000 fc77 	bl	8004bec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	2201      	movs	r2, #1
 8004302:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	2201      	movs	r2, #1
 800430a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	2201      	movs	r2, #1
 8004312:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	2201      	movs	r2, #1
 800431a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	2201      	movs	r2, #1
 8004322:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	2201      	movs	r2, #1
 800432a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	2201      	movs	r2, #1
 8004332:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	2201      	movs	r2, #1
 800433a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	2201      	movs	r2, #1
 8004342:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	2201      	movs	r2, #1
 800434a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	2201      	movs	r2, #1
 8004352:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	2201      	movs	r2, #1
 800435a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800435e:	2300      	movs	r3, #0
}
 8004360:	4618      	mov	r0, r3
 8004362:	3708      	adds	r7, #8
 8004364:	46bd      	mov	sp, r7
 8004366:	bd80      	pop	{r7, pc}

08004368 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8004368:	b480      	push	{r7}
 800436a:	b083      	sub	sp, #12
 800436c:	af00      	add	r7, sp, #0
 800436e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8004370:	bf00      	nop
 8004372:	370c      	adds	r7, #12
 8004374:	46bd      	mov	sp, r7
 8004376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800437a:	4770      	bx	lr

0800437c <HAL_TIM_IC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from TIM peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 800437c:	b580      	push	{r7, lr}
 800437e:	b086      	sub	sp, #24
 8004380:	af00      	add	r7, sp, #0
 8004382:	60f8      	str	r0, [r7, #12]
 8004384:	60b9      	str	r1, [r7, #8]
 8004386:	607a      	str	r2, [r7, #4]
 8004388:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 800438a:	2300      	movs	r3, #0
 800438c:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800438e:	68bb      	ldr	r3, [r7, #8]
 8004390:	2b00      	cmp	r3, #0
 8004392:	d104      	bne.n	800439e <HAL_TIM_IC_Start_DMA+0x22>
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800439a:	b2db      	uxtb	r3, r3
 800439c:	e023      	b.n	80043e6 <HAL_TIM_IC_Start_DMA+0x6a>
 800439e:	68bb      	ldr	r3, [r7, #8]
 80043a0:	2b04      	cmp	r3, #4
 80043a2:	d104      	bne.n	80043ae <HAL_TIM_IC_Start_DMA+0x32>
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80043aa:	b2db      	uxtb	r3, r3
 80043ac:	e01b      	b.n	80043e6 <HAL_TIM_IC_Start_DMA+0x6a>
 80043ae:	68bb      	ldr	r3, [r7, #8]
 80043b0:	2b08      	cmp	r3, #8
 80043b2:	d104      	bne.n	80043be <HAL_TIM_IC_Start_DMA+0x42>
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80043ba:	b2db      	uxtb	r3, r3
 80043bc:	e013      	b.n	80043e6 <HAL_TIM_IC_Start_DMA+0x6a>
 80043be:	68bb      	ldr	r3, [r7, #8]
 80043c0:	2b0c      	cmp	r3, #12
 80043c2:	d104      	bne.n	80043ce <HAL_TIM_IC_Start_DMA+0x52>
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80043ca:	b2db      	uxtb	r3, r3
 80043cc:	e00b      	b.n	80043e6 <HAL_TIM_IC_Start_DMA+0x6a>
 80043ce:	68bb      	ldr	r3, [r7, #8]
 80043d0:	2b10      	cmp	r3, #16
 80043d2:	d104      	bne.n	80043de <HAL_TIM_IC_Start_DMA+0x62>
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80043da:	b2db      	uxtb	r3, r3
 80043dc:	e003      	b.n	80043e6 <HAL_TIM_IC_Start_DMA+0x6a>
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80043e4:	b2db      	uxtb	r3, r3
 80043e6:	75bb      	strb	r3, [r7, #22]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 80043e8:	68bb      	ldr	r3, [r7, #8]
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d104      	bne.n	80043f8 <HAL_TIM_IC_Start_DMA+0x7c>
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80043f4:	b2db      	uxtb	r3, r3
 80043f6:	e013      	b.n	8004420 <HAL_TIM_IC_Start_DMA+0xa4>
 80043f8:	68bb      	ldr	r3, [r7, #8]
 80043fa:	2b04      	cmp	r3, #4
 80043fc:	d104      	bne.n	8004408 <HAL_TIM_IC_Start_DMA+0x8c>
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004404:	b2db      	uxtb	r3, r3
 8004406:	e00b      	b.n	8004420 <HAL_TIM_IC_Start_DMA+0xa4>
 8004408:	68bb      	ldr	r3, [r7, #8]
 800440a:	2b08      	cmp	r3, #8
 800440c:	d104      	bne.n	8004418 <HAL_TIM_IC_Start_DMA+0x9c>
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8004414:	b2db      	uxtb	r3, r3
 8004416:	e003      	b.n	8004420 <HAL_TIM_IC_Start_DMA+0xa4>
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 800441e:	b2db      	uxtb	r3, r3
 8004420:	757b      	strb	r3, [r7, #21]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
  assert_param(IS_TIM_DMA_CC_INSTANCE(htim->Instance));

  /* Set the TIM channel state */
  if ((channel_state == HAL_TIM_CHANNEL_STATE_BUSY)
 8004422:	7dbb      	ldrb	r3, [r7, #22]
 8004424:	2b02      	cmp	r3, #2
 8004426:	d002      	beq.n	800442e <HAL_TIM_IC_Start_DMA+0xb2>
      || (complementary_channel_state == HAL_TIM_CHANNEL_STATE_BUSY))
 8004428:	7d7b      	ldrb	r3, [r7, #21]
 800442a:	2b02      	cmp	r3, #2
 800442c:	d101      	bne.n	8004432 <HAL_TIM_IC_Start_DMA+0xb6>
  {
    return HAL_BUSY;
 800442e:	2302      	movs	r3, #2
 8004430:	e15c      	b.n	80046ec <HAL_TIM_IC_Start_DMA+0x370>
  }
  else if ((channel_state == HAL_TIM_CHANNEL_STATE_READY)
 8004432:	7dbb      	ldrb	r3, [r7, #22]
 8004434:	2b01      	cmp	r3, #1
 8004436:	d153      	bne.n	80044e0 <HAL_TIM_IC_Start_DMA+0x164>
           && (complementary_channel_state == HAL_TIM_CHANNEL_STATE_READY))
 8004438:	7d7b      	ldrb	r3, [r7, #21]
 800443a:	2b01      	cmp	r3, #1
 800443c:	d150      	bne.n	80044e0 <HAL_TIM_IC_Start_DMA+0x164>
  {
    if ((pData == NULL) && (Length > 0U))
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	2b00      	cmp	r3, #0
 8004442:	d104      	bne.n	800444e <HAL_TIM_IC_Start_DMA+0xd2>
 8004444:	887b      	ldrh	r3, [r7, #2]
 8004446:	2b00      	cmp	r3, #0
 8004448:	d001      	beq.n	800444e <HAL_TIM_IC_Start_DMA+0xd2>
    {
      return HAL_ERROR;
 800444a:	2301      	movs	r3, #1
 800444c:	e14e      	b.n	80046ec <HAL_TIM_IC_Start_DMA+0x370>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800444e:	68bb      	ldr	r3, [r7, #8]
 8004450:	2b00      	cmp	r3, #0
 8004452:	d104      	bne.n	800445e <HAL_TIM_IC_Start_DMA+0xe2>
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	2202      	movs	r2, #2
 8004458:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800445c:	e023      	b.n	80044a6 <HAL_TIM_IC_Start_DMA+0x12a>
 800445e:	68bb      	ldr	r3, [r7, #8]
 8004460:	2b04      	cmp	r3, #4
 8004462:	d104      	bne.n	800446e <HAL_TIM_IC_Start_DMA+0xf2>
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	2202      	movs	r2, #2
 8004468:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800446c:	e01b      	b.n	80044a6 <HAL_TIM_IC_Start_DMA+0x12a>
 800446e:	68bb      	ldr	r3, [r7, #8]
 8004470:	2b08      	cmp	r3, #8
 8004472:	d104      	bne.n	800447e <HAL_TIM_IC_Start_DMA+0x102>
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	2202      	movs	r2, #2
 8004478:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800447c:	e013      	b.n	80044a6 <HAL_TIM_IC_Start_DMA+0x12a>
 800447e:	68bb      	ldr	r3, [r7, #8]
 8004480:	2b0c      	cmp	r3, #12
 8004482:	d104      	bne.n	800448e <HAL_TIM_IC_Start_DMA+0x112>
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	2202      	movs	r2, #2
 8004488:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800448c:	e00b      	b.n	80044a6 <HAL_TIM_IC_Start_DMA+0x12a>
 800448e:	68bb      	ldr	r3, [r7, #8]
 8004490:	2b10      	cmp	r3, #16
 8004492:	d104      	bne.n	800449e <HAL_TIM_IC_Start_DMA+0x122>
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	2202      	movs	r2, #2
 8004498:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800449c:	e003      	b.n	80044a6 <HAL_TIM_IC_Start_DMA+0x12a>
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	2202      	movs	r2, #2
 80044a2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80044a6:	68bb      	ldr	r3, [r7, #8]
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d104      	bne.n	80044b6 <HAL_TIM_IC_Start_DMA+0x13a>
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	2202      	movs	r2, #2
 80044b0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    if ((pData == NULL) && (Length > 0U))
 80044b4:	e016      	b.n	80044e4 <HAL_TIM_IC_Start_DMA+0x168>
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80044b6:	68bb      	ldr	r3, [r7, #8]
 80044b8:	2b04      	cmp	r3, #4
 80044ba:	d104      	bne.n	80044c6 <HAL_TIM_IC_Start_DMA+0x14a>
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	2202      	movs	r2, #2
 80044c0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    if ((pData == NULL) && (Length > 0U))
 80044c4:	e00e      	b.n	80044e4 <HAL_TIM_IC_Start_DMA+0x168>
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80044c6:	68bb      	ldr	r3, [r7, #8]
 80044c8:	2b08      	cmp	r3, #8
 80044ca:	d104      	bne.n	80044d6 <HAL_TIM_IC_Start_DMA+0x15a>
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	2202      	movs	r2, #2
 80044d0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
    if ((pData == NULL) && (Length > 0U))
 80044d4:	e006      	b.n	80044e4 <HAL_TIM_IC_Start_DMA+0x168>
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	2202      	movs	r2, #2
 80044da:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
    if ((pData == NULL) && (Length > 0U))
 80044de:	e001      	b.n	80044e4 <HAL_TIM_IC_Start_DMA+0x168>
    }
  }
  else
  {
    return HAL_ERROR;
 80044e0:	2301      	movs	r3, #1
 80044e2:	e103      	b.n	80046ec <HAL_TIM_IC_Start_DMA+0x370>
  }

  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	2201      	movs	r2, #1
 80044ea:	68b9      	ldr	r1, [r7, #8]
 80044ec:	4618      	mov	r0, r3
 80044ee:	f000 fde1 	bl	80050b4 <TIM_CCxChannelCmd>
 80044f2:	68bb      	ldr	r3, [r7, #8]
 80044f4:	2b0c      	cmp	r3, #12
 80044f6:	f200 80ad 	bhi.w	8004654 <HAL_TIM_IC_Start_DMA+0x2d8>
 80044fa:	a201      	add	r2, pc, #4	; (adr r2, 8004500 <HAL_TIM_IC_Start_DMA+0x184>)
 80044fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004500:	08004535 	.word	0x08004535
 8004504:	08004655 	.word	0x08004655
 8004508:	08004655 	.word	0x08004655
 800450c:	08004655 	.word	0x08004655
 8004510:	0800457d 	.word	0x0800457d
 8004514:	08004655 	.word	0x08004655
 8004518:	08004655 	.word	0x08004655
 800451c:	08004655 	.word	0x08004655
 8004520:	080045c5 	.word	0x080045c5
 8004524:	08004655 	.word	0x08004655
 8004528:	08004655 	.word	0x08004655
 800452c:	08004655 	.word	0x08004655
 8004530:	0800460d 	.word	0x0800460d
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMACaptureCplt;
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004538:	4a6e      	ldr	r2, [pc, #440]	; (80046f4 <HAL_TIM_IC_Start_DMA+0x378>)
 800453a:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004540:	4a6d      	ldr	r2, [pc, #436]	; (80046f8 <HAL_TIM_IC_Start_DMA+0x37c>)
 8004542:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004548:	4a6c      	ldr	r2, [pc, #432]	; (80046fc <HAL_TIM_IC_Start_DMA+0x380>)
 800454a:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)&htim->Instance->CCR1, (uint32_t)pData,
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	3334      	adds	r3, #52	; 0x34
 8004556:	4619      	mov	r1, r3
 8004558:	687a      	ldr	r2, [r7, #4]
 800455a:	887b      	ldrh	r3, [r7, #2]
 800455c:	f7fd f9b6 	bl	80018cc <HAL_DMA_Start_IT>
 8004560:	4603      	mov	r3, r0
 8004562:	2b00      	cmp	r3, #0
 8004564:	d001      	beq.n	800456a <HAL_TIM_IC_Start_DMA+0x1ee>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8004566:	2301      	movs	r3, #1
 8004568:	e0c0      	b.n	80046ec <HAL_TIM_IC_Start_DMA+0x370>
      }
      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	68da      	ldr	r2, [r3, #12]
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004578:	60da      	str	r2, [r3, #12]
      break;
 800457a:	e06e      	b.n	800465a <HAL_TIM_IC_Start_DMA+0x2de>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMACaptureCplt;
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004580:	4a5c      	ldr	r2, [pc, #368]	; (80046f4 <HAL_TIM_IC_Start_DMA+0x378>)
 8004582:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004588:	4a5b      	ldr	r2, [pc, #364]	; (80046f8 <HAL_TIM_IC_Start_DMA+0x37c>)
 800458a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004590:	4a5a      	ldr	r2, [pc, #360]	; (80046fc <HAL_TIM_IC_Start_DMA+0x380>)
 8004592:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)&htim->Instance->CCR2, (uint32_t)pData,
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	3338      	adds	r3, #56	; 0x38
 800459e:	4619      	mov	r1, r3
 80045a0:	687a      	ldr	r2, [r7, #4]
 80045a2:	887b      	ldrh	r3, [r7, #2]
 80045a4:	f7fd f992 	bl	80018cc <HAL_DMA_Start_IT>
 80045a8:	4603      	mov	r3, r0
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d001      	beq.n	80045b2 <HAL_TIM_IC_Start_DMA+0x236>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80045ae:	2301      	movs	r3, #1
 80045b0:	e09c      	b.n	80046ec <HAL_TIM_IC_Start_DMA+0x370>
      }
      /* Enable the TIM Capture/Compare 2  DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	68da      	ldr	r2, [r3, #12]
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80045c0:	60da      	str	r2, [r3, #12]
      break;
 80045c2:	e04a      	b.n	800465a <HAL_TIM_IC_Start_DMA+0x2de>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMACaptureCplt;
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045c8:	4a4a      	ldr	r2, [pc, #296]	; (80046f4 <HAL_TIM_IC_Start_DMA+0x378>)
 80045ca:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045d0:	4a49      	ldr	r2, [pc, #292]	; (80046f8 <HAL_TIM_IC_Start_DMA+0x37c>)
 80045d2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045d8:	4a48      	ldr	r2, [pc, #288]	; (80046fc <HAL_TIM_IC_Start_DMA+0x380>)
 80045da:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)&htim->Instance->CCR3, (uint32_t)pData,
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	333c      	adds	r3, #60	; 0x3c
 80045e6:	4619      	mov	r1, r3
 80045e8:	687a      	ldr	r2, [r7, #4]
 80045ea:	887b      	ldrh	r3, [r7, #2]
 80045ec:	f7fd f96e 	bl	80018cc <HAL_DMA_Start_IT>
 80045f0:	4603      	mov	r3, r0
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d001      	beq.n	80045fa <HAL_TIM_IC_Start_DMA+0x27e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80045f6:	2301      	movs	r3, #1
 80045f8:	e078      	b.n	80046ec <HAL_TIM_IC_Start_DMA+0x370>
      }
      /* Enable the TIM Capture/Compare 3  DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	68da      	ldr	r2, [r3, #12]
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004608:	60da      	str	r2, [r3, #12]
      break;
 800460a:	e026      	b.n	800465a <HAL_TIM_IC_Start_DMA+0x2de>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMACaptureCplt;
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004610:	4a38      	ldr	r2, [pc, #224]	; (80046f4 <HAL_TIM_IC_Start_DMA+0x378>)
 8004612:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004618:	4a37      	ldr	r2, [pc, #220]	; (80046f8 <HAL_TIM_IC_Start_DMA+0x37c>)
 800461a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004620:	4a36      	ldr	r2, [pc, #216]	; (80046fc <HAL_TIM_IC_Start_DMA+0x380>)
 8004622:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)&htim->Instance->CCR4, (uint32_t)pData,
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	3340      	adds	r3, #64	; 0x40
 800462e:	4619      	mov	r1, r3
 8004630:	687a      	ldr	r2, [r7, #4]
 8004632:	887b      	ldrh	r3, [r7, #2]
 8004634:	f7fd f94a 	bl	80018cc <HAL_DMA_Start_IT>
 8004638:	4603      	mov	r3, r0
 800463a:	2b00      	cmp	r3, #0
 800463c:	d001      	beq.n	8004642 <HAL_TIM_IC_Start_DMA+0x2c6>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800463e:	2301      	movs	r3, #1
 8004640:	e054      	b.n	80046ec <HAL_TIM_IC_Start_DMA+0x370>
      }
      /* Enable the TIM Capture/Compare 4  DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	68da      	ldr	r2, [r3, #12]
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004650:	60da      	str	r2, [r3, #12]
      break;
 8004652:	e002      	b.n	800465a <HAL_TIM_IC_Start_DMA+0x2de>
    }

    default:
      status = HAL_ERROR;
 8004654:	2301      	movs	r3, #1
 8004656:	75fb      	strb	r3, [r7, #23]
      break;
 8004658:	bf00      	nop
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	4a28      	ldr	r2, [pc, #160]	; (8004700 <HAL_TIM_IC_Start_DMA+0x384>)
 8004660:	4293      	cmp	r3, r2
 8004662:	d022      	beq.n	80046aa <HAL_TIM_IC_Start_DMA+0x32e>
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800466c:	d01d      	beq.n	80046aa <HAL_TIM_IC_Start_DMA+0x32e>
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	4a24      	ldr	r2, [pc, #144]	; (8004704 <HAL_TIM_IC_Start_DMA+0x388>)
 8004674:	4293      	cmp	r3, r2
 8004676:	d018      	beq.n	80046aa <HAL_TIM_IC_Start_DMA+0x32e>
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	4a22      	ldr	r2, [pc, #136]	; (8004708 <HAL_TIM_IC_Start_DMA+0x38c>)
 800467e:	4293      	cmp	r3, r2
 8004680:	d013      	beq.n	80046aa <HAL_TIM_IC_Start_DMA+0x32e>
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	4a21      	ldr	r2, [pc, #132]	; (800470c <HAL_TIM_IC_Start_DMA+0x390>)
 8004688:	4293      	cmp	r3, r2
 800468a:	d00e      	beq.n	80046aa <HAL_TIM_IC_Start_DMA+0x32e>
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	4a1f      	ldr	r2, [pc, #124]	; (8004710 <HAL_TIM_IC_Start_DMA+0x394>)
 8004692:	4293      	cmp	r3, r2
 8004694:	d009      	beq.n	80046aa <HAL_TIM_IC_Start_DMA+0x32e>
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	4a1e      	ldr	r2, [pc, #120]	; (8004714 <HAL_TIM_IC_Start_DMA+0x398>)
 800469c:	4293      	cmp	r3, r2
 800469e:	d004      	beq.n	80046aa <HAL_TIM_IC_Start_DMA+0x32e>
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	4a1c      	ldr	r2, [pc, #112]	; (8004718 <HAL_TIM_IC_Start_DMA+0x39c>)
 80046a6:	4293      	cmp	r3, r2
 80046a8:	d115      	bne.n	80046d6 <HAL_TIM_IC_Start_DMA+0x35a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	689a      	ldr	r2, [r3, #8]
 80046b0:	4b1a      	ldr	r3, [pc, #104]	; (800471c <HAL_TIM_IC_Start_DMA+0x3a0>)
 80046b2:	4013      	ands	r3, r2
 80046b4:	613b      	str	r3, [r7, #16]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80046b6:	693b      	ldr	r3, [r7, #16]
 80046b8:	2b06      	cmp	r3, #6
 80046ba:	d015      	beq.n	80046e8 <HAL_TIM_IC_Start_DMA+0x36c>
 80046bc:	693b      	ldr	r3, [r7, #16]
 80046be:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80046c2:	d011      	beq.n	80046e8 <HAL_TIM_IC_Start_DMA+0x36c>
    {
      __HAL_TIM_ENABLE(htim);
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	681a      	ldr	r2, [r3, #0]
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	f042 0201 	orr.w	r2, r2, #1
 80046d2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80046d4:	e008      	b.n	80046e8 <HAL_TIM_IC_Start_DMA+0x36c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	681a      	ldr	r2, [r3, #0]
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	f042 0201 	orr.w	r2, r2, #1
 80046e4:	601a      	str	r2, [r3, #0]
 80046e6:	e000      	b.n	80046ea <HAL_TIM_IC_Start_DMA+0x36e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80046e8:	bf00      	nop
  }

  /* Return function status */
  return status;
 80046ea:	7dfb      	ldrb	r3, [r7, #23]
}
 80046ec:	4618      	mov	r0, r3
 80046ee:	3718      	adds	r7, #24
 80046f0:	46bd      	mov	sp, r7
 80046f2:	bd80      	pop	{r7, pc}
 80046f4:	08004abb 	.word	0x08004abb
 80046f8:	08004b83 	.word	0x08004b83
 80046fc:	08004a29 	.word	0x08004a29
 8004700:	40010000 	.word	0x40010000
 8004704:	40000400 	.word	0x40000400
 8004708:	40000800 	.word	0x40000800
 800470c:	40000c00 	.word	0x40000c00
 8004710:	40010400 	.word	0x40010400
 8004714:	40014000 	.word	0x40014000
 8004718:	40001800 	.word	0x40001800
 800471c:	00010007 	.word	0x00010007

08004720 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8004720:	b580      	push	{r7, lr}
 8004722:	b086      	sub	sp, #24
 8004724:	af00      	add	r7, sp, #0
 8004726:	60f8      	str	r0, [r7, #12]
 8004728:	60b9      	str	r1, [r7, #8]
 800472a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800472c:	2300      	movs	r3, #0
 800472e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004736:	2b01      	cmp	r3, #1
 8004738:	d101      	bne.n	800473e <HAL_TIM_IC_ConfigChannel+0x1e>
 800473a:	2302      	movs	r3, #2
 800473c:	e088      	b.n	8004850 <HAL_TIM_IC_ConfigChannel+0x130>
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	2201      	movs	r2, #1
 8004742:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	2b00      	cmp	r3, #0
 800474a:	d11b      	bne.n	8004784 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	6818      	ldr	r0, [r3, #0]
 8004750:	68bb      	ldr	r3, [r7, #8]
 8004752:	6819      	ldr	r1, [r3, #0]
 8004754:	68bb      	ldr	r3, [r7, #8]
 8004756:	685a      	ldr	r2, [r3, #4]
 8004758:	68bb      	ldr	r3, [r7, #8]
 800475a:	68db      	ldr	r3, [r3, #12]
 800475c:	f000 fae6 	bl	8004d2c <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	699a      	ldr	r2, [r3, #24]
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	f022 020c 	bic.w	r2, r2, #12
 800476e:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	6999      	ldr	r1, [r3, #24]
 8004776:	68bb      	ldr	r3, [r7, #8]
 8004778:	689a      	ldr	r2, [r3, #8]
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	430a      	orrs	r2, r1
 8004780:	619a      	str	r2, [r3, #24]
 8004782:	e060      	b.n	8004846 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	2b04      	cmp	r3, #4
 8004788:	d11c      	bne.n	80047c4 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	6818      	ldr	r0, [r3, #0]
 800478e:	68bb      	ldr	r3, [r7, #8]
 8004790:	6819      	ldr	r1, [r3, #0]
 8004792:	68bb      	ldr	r3, [r7, #8]
 8004794:	685a      	ldr	r2, [r3, #4]
 8004796:	68bb      	ldr	r3, [r7, #8]
 8004798:	68db      	ldr	r3, [r3, #12]
 800479a:	f000 fb6a 	bl	8004e72 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	699a      	ldr	r2, [r3, #24]
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80047ac:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	6999      	ldr	r1, [r3, #24]
 80047b4:	68bb      	ldr	r3, [r7, #8]
 80047b6:	689b      	ldr	r3, [r3, #8]
 80047b8:	021a      	lsls	r2, r3, #8
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	430a      	orrs	r2, r1
 80047c0:	619a      	str	r2, [r3, #24]
 80047c2:	e040      	b.n	8004846 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	2b08      	cmp	r3, #8
 80047c8:	d11b      	bne.n	8004802 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	6818      	ldr	r0, [r3, #0]
 80047ce:	68bb      	ldr	r3, [r7, #8]
 80047d0:	6819      	ldr	r1, [r3, #0]
 80047d2:	68bb      	ldr	r3, [r7, #8]
 80047d4:	685a      	ldr	r2, [r3, #4]
 80047d6:	68bb      	ldr	r3, [r7, #8]
 80047d8:	68db      	ldr	r3, [r3, #12]
 80047da:	f000 fbb7 	bl	8004f4c <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	69da      	ldr	r2, [r3, #28]
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	f022 020c 	bic.w	r2, r2, #12
 80047ec:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	69d9      	ldr	r1, [r3, #28]
 80047f4:	68bb      	ldr	r3, [r7, #8]
 80047f6:	689a      	ldr	r2, [r3, #8]
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	430a      	orrs	r2, r1
 80047fe:	61da      	str	r2, [r3, #28]
 8004800:	e021      	b.n	8004846 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	2b0c      	cmp	r3, #12
 8004806:	d11c      	bne.n	8004842 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	6818      	ldr	r0, [r3, #0]
 800480c:	68bb      	ldr	r3, [r7, #8]
 800480e:	6819      	ldr	r1, [r3, #0]
 8004810:	68bb      	ldr	r3, [r7, #8]
 8004812:	685a      	ldr	r2, [r3, #4]
 8004814:	68bb      	ldr	r3, [r7, #8]
 8004816:	68db      	ldr	r3, [r3, #12]
 8004818:	f000 fbd4 	bl	8004fc4 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	69da      	ldr	r2, [r3, #28]
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800482a:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	69d9      	ldr	r1, [r3, #28]
 8004832:	68bb      	ldr	r3, [r7, #8]
 8004834:	689b      	ldr	r3, [r3, #8]
 8004836:	021a      	lsls	r2, r3, #8
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	430a      	orrs	r2, r1
 800483e:	61da      	str	r2, [r3, #28]
 8004840:	e001      	b.n	8004846 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8004842:	2301      	movs	r3, #1
 8004844:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	2200      	movs	r2, #0
 800484a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800484e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004850:	4618      	mov	r0, r3
 8004852:	3718      	adds	r7, #24
 8004854:	46bd      	mov	sp, r7
 8004856:	bd80      	pop	{r7, pc}

08004858 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004858:	b580      	push	{r7, lr}
 800485a:	b084      	sub	sp, #16
 800485c:	af00      	add	r7, sp, #0
 800485e:	6078      	str	r0, [r7, #4]
 8004860:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004862:	2300      	movs	r3, #0
 8004864:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800486c:	2b01      	cmp	r3, #1
 800486e:	d101      	bne.n	8004874 <HAL_TIM_ConfigClockSource+0x1c>
 8004870:	2302      	movs	r3, #2
 8004872:	e0b4      	b.n	80049de <HAL_TIM_ConfigClockSource+0x186>
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	2201      	movs	r2, #1
 8004878:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	2202      	movs	r2, #2
 8004880:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	689b      	ldr	r3, [r3, #8]
 800488a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800488c:	68ba      	ldr	r2, [r7, #8]
 800488e:	4b56      	ldr	r3, [pc, #344]	; (80049e8 <HAL_TIM_ConfigClockSource+0x190>)
 8004890:	4013      	ands	r3, r2
 8004892:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004894:	68bb      	ldr	r3, [r7, #8]
 8004896:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800489a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	68ba      	ldr	r2, [r7, #8]
 80048a2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80048a4:	683b      	ldr	r3, [r7, #0]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80048ac:	d03e      	beq.n	800492c <HAL_TIM_ConfigClockSource+0xd4>
 80048ae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80048b2:	f200 8087 	bhi.w	80049c4 <HAL_TIM_ConfigClockSource+0x16c>
 80048b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80048ba:	f000 8086 	beq.w	80049ca <HAL_TIM_ConfigClockSource+0x172>
 80048be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80048c2:	d87f      	bhi.n	80049c4 <HAL_TIM_ConfigClockSource+0x16c>
 80048c4:	2b70      	cmp	r3, #112	; 0x70
 80048c6:	d01a      	beq.n	80048fe <HAL_TIM_ConfigClockSource+0xa6>
 80048c8:	2b70      	cmp	r3, #112	; 0x70
 80048ca:	d87b      	bhi.n	80049c4 <HAL_TIM_ConfigClockSource+0x16c>
 80048cc:	2b60      	cmp	r3, #96	; 0x60
 80048ce:	d050      	beq.n	8004972 <HAL_TIM_ConfigClockSource+0x11a>
 80048d0:	2b60      	cmp	r3, #96	; 0x60
 80048d2:	d877      	bhi.n	80049c4 <HAL_TIM_ConfigClockSource+0x16c>
 80048d4:	2b50      	cmp	r3, #80	; 0x50
 80048d6:	d03c      	beq.n	8004952 <HAL_TIM_ConfigClockSource+0xfa>
 80048d8:	2b50      	cmp	r3, #80	; 0x50
 80048da:	d873      	bhi.n	80049c4 <HAL_TIM_ConfigClockSource+0x16c>
 80048dc:	2b40      	cmp	r3, #64	; 0x40
 80048de:	d058      	beq.n	8004992 <HAL_TIM_ConfigClockSource+0x13a>
 80048e0:	2b40      	cmp	r3, #64	; 0x40
 80048e2:	d86f      	bhi.n	80049c4 <HAL_TIM_ConfigClockSource+0x16c>
 80048e4:	2b30      	cmp	r3, #48	; 0x30
 80048e6:	d064      	beq.n	80049b2 <HAL_TIM_ConfigClockSource+0x15a>
 80048e8:	2b30      	cmp	r3, #48	; 0x30
 80048ea:	d86b      	bhi.n	80049c4 <HAL_TIM_ConfigClockSource+0x16c>
 80048ec:	2b20      	cmp	r3, #32
 80048ee:	d060      	beq.n	80049b2 <HAL_TIM_ConfigClockSource+0x15a>
 80048f0:	2b20      	cmp	r3, #32
 80048f2:	d867      	bhi.n	80049c4 <HAL_TIM_ConfigClockSource+0x16c>
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d05c      	beq.n	80049b2 <HAL_TIM_ConfigClockSource+0x15a>
 80048f8:	2b10      	cmp	r3, #16
 80048fa:	d05a      	beq.n	80049b2 <HAL_TIM_ConfigClockSource+0x15a>
 80048fc:	e062      	b.n	80049c4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	6818      	ldr	r0, [r3, #0]
 8004902:	683b      	ldr	r3, [r7, #0]
 8004904:	6899      	ldr	r1, [r3, #8]
 8004906:	683b      	ldr	r3, [r7, #0]
 8004908:	685a      	ldr	r2, [r3, #4]
 800490a:	683b      	ldr	r3, [r7, #0]
 800490c:	68db      	ldr	r3, [r3, #12]
 800490e:	f000 fbb1 	bl	8005074 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	689b      	ldr	r3, [r3, #8]
 8004918:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800491a:	68bb      	ldr	r3, [r7, #8]
 800491c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004920:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	68ba      	ldr	r2, [r7, #8]
 8004928:	609a      	str	r2, [r3, #8]
      break;
 800492a:	e04f      	b.n	80049cc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	6818      	ldr	r0, [r3, #0]
 8004930:	683b      	ldr	r3, [r7, #0]
 8004932:	6899      	ldr	r1, [r3, #8]
 8004934:	683b      	ldr	r3, [r7, #0]
 8004936:	685a      	ldr	r2, [r3, #4]
 8004938:	683b      	ldr	r3, [r7, #0]
 800493a:	68db      	ldr	r3, [r3, #12]
 800493c:	f000 fb9a 	bl	8005074 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	689a      	ldr	r2, [r3, #8]
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800494e:	609a      	str	r2, [r3, #8]
      break;
 8004950:	e03c      	b.n	80049cc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	6818      	ldr	r0, [r3, #0]
 8004956:	683b      	ldr	r3, [r7, #0]
 8004958:	6859      	ldr	r1, [r3, #4]
 800495a:	683b      	ldr	r3, [r7, #0]
 800495c:	68db      	ldr	r3, [r3, #12]
 800495e:	461a      	mov	r2, r3
 8004960:	f000 fa58 	bl	8004e14 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	2150      	movs	r1, #80	; 0x50
 800496a:	4618      	mov	r0, r3
 800496c:	f000 fb67 	bl	800503e <TIM_ITRx_SetConfig>
      break;
 8004970:	e02c      	b.n	80049cc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	6818      	ldr	r0, [r3, #0]
 8004976:	683b      	ldr	r3, [r7, #0]
 8004978:	6859      	ldr	r1, [r3, #4]
 800497a:	683b      	ldr	r3, [r7, #0]
 800497c:	68db      	ldr	r3, [r3, #12]
 800497e:	461a      	mov	r2, r3
 8004980:	f000 fab4 	bl	8004eec <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	2160      	movs	r1, #96	; 0x60
 800498a:	4618      	mov	r0, r3
 800498c:	f000 fb57 	bl	800503e <TIM_ITRx_SetConfig>
      break;
 8004990:	e01c      	b.n	80049cc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	6818      	ldr	r0, [r3, #0]
 8004996:	683b      	ldr	r3, [r7, #0]
 8004998:	6859      	ldr	r1, [r3, #4]
 800499a:	683b      	ldr	r3, [r7, #0]
 800499c:	68db      	ldr	r3, [r3, #12]
 800499e:	461a      	mov	r2, r3
 80049a0:	f000 fa38 	bl	8004e14 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	2140      	movs	r1, #64	; 0x40
 80049aa:	4618      	mov	r0, r3
 80049ac:	f000 fb47 	bl	800503e <TIM_ITRx_SetConfig>
      break;
 80049b0:	e00c      	b.n	80049cc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681a      	ldr	r2, [r3, #0]
 80049b6:	683b      	ldr	r3, [r7, #0]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	4619      	mov	r1, r3
 80049bc:	4610      	mov	r0, r2
 80049be:	f000 fb3e 	bl	800503e <TIM_ITRx_SetConfig>
      break;
 80049c2:	e003      	b.n	80049cc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80049c4:	2301      	movs	r3, #1
 80049c6:	73fb      	strb	r3, [r7, #15]
      break;
 80049c8:	e000      	b.n	80049cc <HAL_TIM_ConfigClockSource+0x174>
      break;
 80049ca:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	2201      	movs	r2, #1
 80049d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	2200      	movs	r2, #0
 80049d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80049dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80049de:	4618      	mov	r0, r3
 80049e0:	3710      	adds	r7, #16
 80049e2:	46bd      	mov	sp, r7
 80049e4:	bd80      	pop	{r7, pc}
 80049e6:	bf00      	nop
 80049e8:	fffeff88 	.word	0xfffeff88

080049ec <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80049ec:	b480      	push	{r7}
 80049ee:	b083      	sub	sp, #12
 80049f0:	af00      	add	r7, sp, #0
 80049f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80049f4:	bf00      	nop
 80049f6:	370c      	adds	r7, #12
 80049f8:	46bd      	mov	sp, r7
 80049fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049fe:	4770      	bx	lr

08004a00 <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8004a00:	b480      	push	{r7}
 8004a02:	b083      	sub	sp, #12
 8004a04:	af00      	add	r7, sp, #0
 8004a06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 8004a08:	bf00      	nop
 8004a0a:	370c      	adds	r7, #12
 8004a0c:	46bd      	mov	sp, r7
 8004a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a12:	4770      	bx	lr

08004a14 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8004a14:	b480      	push	{r7}
 8004a16:	b083      	sub	sp, #12
 8004a18:	af00      	add	r7, sp, #0
 8004a1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8004a1c:	bf00      	nop
 8004a1e:	370c      	adds	r7, #12
 8004a20:	46bd      	mov	sp, r7
 8004a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a26:	4770      	bx	lr

08004a28 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8004a28:	b580      	push	{r7, lr}
 8004a2a:	b084      	sub	sp, #16
 8004a2c:	af00      	add	r7, sp, #0
 8004a2e:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a34:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a3a:	687a      	ldr	r2, [r7, #4]
 8004a3c:	429a      	cmp	r2, r3
 8004a3e:	d107      	bne.n	8004a50 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	2201      	movs	r2, #1
 8004a44:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	2201      	movs	r2, #1
 8004a4a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004a4e:	e02a      	b.n	8004aa6 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a54:	687a      	ldr	r2, [r7, #4]
 8004a56:	429a      	cmp	r2, r3
 8004a58:	d107      	bne.n	8004a6a <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	2202      	movs	r2, #2
 8004a5e:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	2201      	movs	r2, #1
 8004a64:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004a68:	e01d      	b.n	8004aa6 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a6e:	687a      	ldr	r2, [r7, #4]
 8004a70:	429a      	cmp	r2, r3
 8004a72:	d107      	bne.n	8004a84 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	2204      	movs	r2, #4
 8004a78:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	2201      	movs	r2, #1
 8004a7e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004a82:	e010      	b.n	8004aa6 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a88:	687a      	ldr	r2, [r7, #4]
 8004a8a:	429a      	cmp	r2, r3
 8004a8c:	d107      	bne.n	8004a9e <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	2208      	movs	r2, #8
 8004a92:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	2201      	movs	r2, #1
 8004a98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004a9c:	e003      	b.n	8004aa6 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	2201      	movs	r2, #1
 8004aa2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8004aa6:	68f8      	ldr	r0, [r7, #12]
 8004aa8:	f7ff ffb4 	bl	8004a14 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	2200      	movs	r2, #0
 8004ab0:	771a      	strb	r2, [r3, #28]
}
 8004ab2:	bf00      	nop
 8004ab4:	3710      	adds	r7, #16
 8004ab6:	46bd      	mov	sp, r7
 8004ab8:	bd80      	pop	{r7, pc}

08004aba <TIM_DMACaptureCplt>:
  * @brief  TIM DMA Capture complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMACaptureCplt(DMA_HandleTypeDef *hdma)
{
 8004aba:	b580      	push	{r7, lr}
 8004abc:	b084      	sub	sp, #16
 8004abe:	af00      	add	r7, sp, #0
 8004ac0:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ac6:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004acc:	687a      	ldr	r2, [r7, #4]
 8004ace:	429a      	cmp	r2, r3
 8004ad0:	d10f      	bne.n	8004af2 <TIM_DMACaptureCplt+0x38>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	2201      	movs	r2, #1
 8004ad6:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	69db      	ldr	r3, [r3, #28]
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d146      	bne.n	8004b6e <TIM_DMACaptureCplt+0xb4>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	2201      	movs	r2, #1
 8004ae4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	2201      	movs	r2, #1
 8004aec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004af0:	e03d      	b.n	8004b6e <TIM_DMACaptureCplt+0xb4>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004af6:	687a      	ldr	r2, [r7, #4]
 8004af8:	429a      	cmp	r2, r3
 8004afa:	d10f      	bne.n	8004b1c <TIM_DMACaptureCplt+0x62>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	2202      	movs	r2, #2
 8004b00:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	69db      	ldr	r3, [r3, #28]
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d131      	bne.n	8004b6e <TIM_DMACaptureCplt+0xb4>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	2201      	movs	r2, #1
 8004b0e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	2201      	movs	r2, #1
 8004b16:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004b1a:	e028      	b.n	8004b6e <TIM_DMACaptureCplt+0xb4>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b20:	687a      	ldr	r2, [r7, #4]
 8004b22:	429a      	cmp	r2, r3
 8004b24:	d10f      	bne.n	8004b46 <TIM_DMACaptureCplt+0x8c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	2204      	movs	r2, #4
 8004b2a:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	69db      	ldr	r3, [r3, #28]
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d11c      	bne.n	8004b6e <TIM_DMACaptureCplt+0xb4>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	2201      	movs	r2, #1
 8004b38:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	2201      	movs	r2, #1
 8004b40:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004b44:	e013      	b.n	8004b6e <TIM_DMACaptureCplt+0xb4>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b4a:	687a      	ldr	r2, [r7, #4]
 8004b4c:	429a      	cmp	r2, r3
 8004b4e:	d10e      	bne.n	8004b6e <TIM_DMACaptureCplt+0xb4>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	2208      	movs	r2, #8
 8004b54:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	69db      	ldr	r3, [r3, #28]
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d107      	bne.n	8004b6e <TIM_DMACaptureCplt+0xb4>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	2201      	movs	r2, #1
 8004b62:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	2201      	movs	r2, #1
 8004b6a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->IC_CaptureCallback(htim);
#else
  HAL_TIM_IC_CaptureCallback(htim);
 8004b6e:	68f8      	ldr	r0, [r7, #12]
 8004b70:	f7ff ff3c 	bl	80049ec <HAL_TIM_IC_CaptureCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	2200      	movs	r2, #0
 8004b78:	771a      	strb	r2, [r3, #28]
}
 8004b7a:	bf00      	nop
 8004b7c:	3710      	adds	r7, #16
 8004b7e:	46bd      	mov	sp, r7
 8004b80:	bd80      	pop	{r7, pc}

08004b82 <TIM_DMACaptureHalfCplt>:
  * @brief  TIM DMA Capture half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMACaptureHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004b82:	b580      	push	{r7, lr}
 8004b84:	b084      	sub	sp, #16
 8004b86:	af00      	add	r7, sp, #0
 8004b88:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b8e:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b94:	687a      	ldr	r2, [r7, #4]
 8004b96:	429a      	cmp	r2, r3
 8004b98:	d103      	bne.n	8004ba2 <TIM_DMACaptureHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	2201      	movs	r2, #1
 8004b9e:	771a      	strb	r2, [r3, #28]
 8004ba0:	e019      	b.n	8004bd6 <TIM_DMACaptureHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ba6:	687a      	ldr	r2, [r7, #4]
 8004ba8:	429a      	cmp	r2, r3
 8004baa:	d103      	bne.n	8004bb4 <TIM_DMACaptureHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	2202      	movs	r2, #2
 8004bb0:	771a      	strb	r2, [r3, #28]
 8004bb2:	e010      	b.n	8004bd6 <TIM_DMACaptureHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bb8:	687a      	ldr	r2, [r7, #4]
 8004bba:	429a      	cmp	r2, r3
 8004bbc:	d103      	bne.n	8004bc6 <TIM_DMACaptureHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	2204      	movs	r2, #4
 8004bc2:	771a      	strb	r2, [r3, #28]
 8004bc4:	e007      	b.n	8004bd6 <TIM_DMACaptureHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bca:	687a      	ldr	r2, [r7, #4]
 8004bcc:	429a      	cmp	r2, r3
 8004bce:	d102      	bne.n	8004bd6 <TIM_DMACaptureHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	2208      	movs	r2, #8
 8004bd4:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->IC_CaptureHalfCpltCallback(htim);
#else
  HAL_TIM_IC_CaptureHalfCpltCallback(htim);
 8004bd6:	68f8      	ldr	r0, [r7, #12]
 8004bd8:	f7ff ff12 	bl	8004a00 <HAL_TIM_IC_CaptureHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	2200      	movs	r2, #0
 8004be0:	771a      	strb	r2, [r3, #28]
}
 8004be2:	bf00      	nop
 8004be4:	3710      	adds	r7, #16
 8004be6:	46bd      	mov	sp, r7
 8004be8:	bd80      	pop	{r7, pc}
	...

08004bec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004bec:	b480      	push	{r7}
 8004bee:	b085      	sub	sp, #20
 8004bf0:	af00      	add	r7, sp, #0
 8004bf2:	6078      	str	r0, [r7, #4]
 8004bf4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	4a40      	ldr	r2, [pc, #256]	; (8004d00 <TIM_Base_SetConfig+0x114>)
 8004c00:	4293      	cmp	r3, r2
 8004c02:	d013      	beq.n	8004c2c <TIM_Base_SetConfig+0x40>
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c0a:	d00f      	beq.n	8004c2c <TIM_Base_SetConfig+0x40>
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	4a3d      	ldr	r2, [pc, #244]	; (8004d04 <TIM_Base_SetConfig+0x118>)
 8004c10:	4293      	cmp	r3, r2
 8004c12:	d00b      	beq.n	8004c2c <TIM_Base_SetConfig+0x40>
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	4a3c      	ldr	r2, [pc, #240]	; (8004d08 <TIM_Base_SetConfig+0x11c>)
 8004c18:	4293      	cmp	r3, r2
 8004c1a:	d007      	beq.n	8004c2c <TIM_Base_SetConfig+0x40>
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	4a3b      	ldr	r2, [pc, #236]	; (8004d0c <TIM_Base_SetConfig+0x120>)
 8004c20:	4293      	cmp	r3, r2
 8004c22:	d003      	beq.n	8004c2c <TIM_Base_SetConfig+0x40>
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	4a3a      	ldr	r2, [pc, #232]	; (8004d10 <TIM_Base_SetConfig+0x124>)
 8004c28:	4293      	cmp	r3, r2
 8004c2a:	d108      	bne.n	8004c3e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c32:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004c34:	683b      	ldr	r3, [r7, #0]
 8004c36:	685b      	ldr	r3, [r3, #4]
 8004c38:	68fa      	ldr	r2, [r7, #12]
 8004c3a:	4313      	orrs	r3, r2
 8004c3c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	4a2f      	ldr	r2, [pc, #188]	; (8004d00 <TIM_Base_SetConfig+0x114>)
 8004c42:	4293      	cmp	r3, r2
 8004c44:	d02b      	beq.n	8004c9e <TIM_Base_SetConfig+0xb2>
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c4c:	d027      	beq.n	8004c9e <TIM_Base_SetConfig+0xb2>
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	4a2c      	ldr	r2, [pc, #176]	; (8004d04 <TIM_Base_SetConfig+0x118>)
 8004c52:	4293      	cmp	r3, r2
 8004c54:	d023      	beq.n	8004c9e <TIM_Base_SetConfig+0xb2>
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	4a2b      	ldr	r2, [pc, #172]	; (8004d08 <TIM_Base_SetConfig+0x11c>)
 8004c5a:	4293      	cmp	r3, r2
 8004c5c:	d01f      	beq.n	8004c9e <TIM_Base_SetConfig+0xb2>
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	4a2a      	ldr	r2, [pc, #168]	; (8004d0c <TIM_Base_SetConfig+0x120>)
 8004c62:	4293      	cmp	r3, r2
 8004c64:	d01b      	beq.n	8004c9e <TIM_Base_SetConfig+0xb2>
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	4a29      	ldr	r2, [pc, #164]	; (8004d10 <TIM_Base_SetConfig+0x124>)
 8004c6a:	4293      	cmp	r3, r2
 8004c6c:	d017      	beq.n	8004c9e <TIM_Base_SetConfig+0xb2>
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	4a28      	ldr	r2, [pc, #160]	; (8004d14 <TIM_Base_SetConfig+0x128>)
 8004c72:	4293      	cmp	r3, r2
 8004c74:	d013      	beq.n	8004c9e <TIM_Base_SetConfig+0xb2>
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	4a27      	ldr	r2, [pc, #156]	; (8004d18 <TIM_Base_SetConfig+0x12c>)
 8004c7a:	4293      	cmp	r3, r2
 8004c7c:	d00f      	beq.n	8004c9e <TIM_Base_SetConfig+0xb2>
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	4a26      	ldr	r2, [pc, #152]	; (8004d1c <TIM_Base_SetConfig+0x130>)
 8004c82:	4293      	cmp	r3, r2
 8004c84:	d00b      	beq.n	8004c9e <TIM_Base_SetConfig+0xb2>
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	4a25      	ldr	r2, [pc, #148]	; (8004d20 <TIM_Base_SetConfig+0x134>)
 8004c8a:	4293      	cmp	r3, r2
 8004c8c:	d007      	beq.n	8004c9e <TIM_Base_SetConfig+0xb2>
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	4a24      	ldr	r2, [pc, #144]	; (8004d24 <TIM_Base_SetConfig+0x138>)
 8004c92:	4293      	cmp	r3, r2
 8004c94:	d003      	beq.n	8004c9e <TIM_Base_SetConfig+0xb2>
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	4a23      	ldr	r2, [pc, #140]	; (8004d28 <TIM_Base_SetConfig+0x13c>)
 8004c9a:	4293      	cmp	r3, r2
 8004c9c:	d108      	bne.n	8004cb0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004ca4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004ca6:	683b      	ldr	r3, [r7, #0]
 8004ca8:	68db      	ldr	r3, [r3, #12]
 8004caa:	68fa      	ldr	r2, [r7, #12]
 8004cac:	4313      	orrs	r3, r2
 8004cae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004cb6:	683b      	ldr	r3, [r7, #0]
 8004cb8:	695b      	ldr	r3, [r3, #20]
 8004cba:	4313      	orrs	r3, r2
 8004cbc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	68fa      	ldr	r2, [r7, #12]
 8004cc2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004cc4:	683b      	ldr	r3, [r7, #0]
 8004cc6:	689a      	ldr	r2, [r3, #8]
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004ccc:	683b      	ldr	r3, [r7, #0]
 8004cce:	681a      	ldr	r2, [r3, #0]
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	4a0a      	ldr	r2, [pc, #40]	; (8004d00 <TIM_Base_SetConfig+0x114>)
 8004cd8:	4293      	cmp	r3, r2
 8004cda:	d003      	beq.n	8004ce4 <TIM_Base_SetConfig+0xf8>
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	4a0c      	ldr	r2, [pc, #48]	; (8004d10 <TIM_Base_SetConfig+0x124>)
 8004ce0:	4293      	cmp	r3, r2
 8004ce2:	d103      	bne.n	8004cec <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004ce4:	683b      	ldr	r3, [r7, #0]
 8004ce6:	691a      	ldr	r2, [r3, #16]
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	2201      	movs	r2, #1
 8004cf0:	615a      	str	r2, [r3, #20]
}
 8004cf2:	bf00      	nop
 8004cf4:	3714      	adds	r7, #20
 8004cf6:	46bd      	mov	sp, r7
 8004cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cfc:	4770      	bx	lr
 8004cfe:	bf00      	nop
 8004d00:	40010000 	.word	0x40010000
 8004d04:	40000400 	.word	0x40000400
 8004d08:	40000800 	.word	0x40000800
 8004d0c:	40000c00 	.word	0x40000c00
 8004d10:	40010400 	.word	0x40010400
 8004d14:	40014000 	.word	0x40014000
 8004d18:	40014400 	.word	0x40014400
 8004d1c:	40014800 	.word	0x40014800
 8004d20:	40001800 	.word	0x40001800
 8004d24:	40001c00 	.word	0x40001c00
 8004d28:	40002000 	.word	0x40002000

08004d2c <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8004d2c:	b480      	push	{r7}
 8004d2e:	b087      	sub	sp, #28
 8004d30:	af00      	add	r7, sp, #0
 8004d32:	60f8      	str	r0, [r7, #12]
 8004d34:	60b9      	str	r1, [r7, #8]
 8004d36:	607a      	str	r2, [r7, #4]
 8004d38:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	6a1b      	ldr	r3, [r3, #32]
 8004d3e:	f023 0201 	bic.w	r2, r3, #1
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	699b      	ldr	r3, [r3, #24]
 8004d4a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	6a1b      	ldr	r3, [r3, #32]
 8004d50:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	4a28      	ldr	r2, [pc, #160]	; (8004df8 <TIM_TI1_SetConfig+0xcc>)
 8004d56:	4293      	cmp	r3, r2
 8004d58:	d01b      	beq.n	8004d92 <TIM_TI1_SetConfig+0x66>
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d60:	d017      	beq.n	8004d92 <TIM_TI1_SetConfig+0x66>
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	4a25      	ldr	r2, [pc, #148]	; (8004dfc <TIM_TI1_SetConfig+0xd0>)
 8004d66:	4293      	cmp	r3, r2
 8004d68:	d013      	beq.n	8004d92 <TIM_TI1_SetConfig+0x66>
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	4a24      	ldr	r2, [pc, #144]	; (8004e00 <TIM_TI1_SetConfig+0xd4>)
 8004d6e:	4293      	cmp	r3, r2
 8004d70:	d00f      	beq.n	8004d92 <TIM_TI1_SetConfig+0x66>
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	4a23      	ldr	r2, [pc, #140]	; (8004e04 <TIM_TI1_SetConfig+0xd8>)
 8004d76:	4293      	cmp	r3, r2
 8004d78:	d00b      	beq.n	8004d92 <TIM_TI1_SetConfig+0x66>
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	4a22      	ldr	r2, [pc, #136]	; (8004e08 <TIM_TI1_SetConfig+0xdc>)
 8004d7e:	4293      	cmp	r3, r2
 8004d80:	d007      	beq.n	8004d92 <TIM_TI1_SetConfig+0x66>
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	4a21      	ldr	r2, [pc, #132]	; (8004e0c <TIM_TI1_SetConfig+0xe0>)
 8004d86:	4293      	cmp	r3, r2
 8004d88:	d003      	beq.n	8004d92 <TIM_TI1_SetConfig+0x66>
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	4a20      	ldr	r2, [pc, #128]	; (8004e10 <TIM_TI1_SetConfig+0xe4>)
 8004d8e:	4293      	cmp	r3, r2
 8004d90:	d101      	bne.n	8004d96 <TIM_TI1_SetConfig+0x6a>
 8004d92:	2301      	movs	r3, #1
 8004d94:	e000      	b.n	8004d98 <TIM_TI1_SetConfig+0x6c>
 8004d96:	2300      	movs	r3, #0
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d008      	beq.n	8004dae <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8004d9c:	697b      	ldr	r3, [r7, #20]
 8004d9e:	f023 0303 	bic.w	r3, r3, #3
 8004da2:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8004da4:	697a      	ldr	r2, [r7, #20]
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	4313      	orrs	r3, r2
 8004daa:	617b      	str	r3, [r7, #20]
 8004dac:	e003      	b.n	8004db6 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8004dae:	697b      	ldr	r3, [r7, #20]
 8004db0:	f043 0301 	orr.w	r3, r3, #1
 8004db4:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004db6:	697b      	ldr	r3, [r7, #20]
 8004db8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004dbc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8004dbe:	683b      	ldr	r3, [r7, #0]
 8004dc0:	011b      	lsls	r3, r3, #4
 8004dc2:	b2db      	uxtb	r3, r3
 8004dc4:	697a      	ldr	r2, [r7, #20]
 8004dc6:	4313      	orrs	r3, r2
 8004dc8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004dca:	693b      	ldr	r3, [r7, #16]
 8004dcc:	f023 030a 	bic.w	r3, r3, #10
 8004dd0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8004dd2:	68bb      	ldr	r3, [r7, #8]
 8004dd4:	f003 030a 	and.w	r3, r3, #10
 8004dd8:	693a      	ldr	r2, [r7, #16]
 8004dda:	4313      	orrs	r3, r2
 8004ddc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	697a      	ldr	r2, [r7, #20]
 8004de2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	693a      	ldr	r2, [r7, #16]
 8004de8:	621a      	str	r2, [r3, #32]
}
 8004dea:	bf00      	nop
 8004dec:	371c      	adds	r7, #28
 8004dee:	46bd      	mov	sp, r7
 8004df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df4:	4770      	bx	lr
 8004df6:	bf00      	nop
 8004df8:	40010000 	.word	0x40010000
 8004dfc:	40000400 	.word	0x40000400
 8004e00:	40000800 	.word	0x40000800
 8004e04:	40000c00 	.word	0x40000c00
 8004e08:	40010400 	.word	0x40010400
 8004e0c:	40014000 	.word	0x40014000
 8004e10:	40001800 	.word	0x40001800

08004e14 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004e14:	b480      	push	{r7}
 8004e16:	b087      	sub	sp, #28
 8004e18:	af00      	add	r7, sp, #0
 8004e1a:	60f8      	str	r0, [r7, #12]
 8004e1c:	60b9      	str	r1, [r7, #8]
 8004e1e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	6a1b      	ldr	r3, [r3, #32]
 8004e24:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	6a1b      	ldr	r3, [r3, #32]
 8004e2a:	f023 0201 	bic.w	r2, r3, #1
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	699b      	ldr	r3, [r3, #24]
 8004e36:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004e38:	693b      	ldr	r3, [r7, #16]
 8004e3a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004e3e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	011b      	lsls	r3, r3, #4
 8004e44:	693a      	ldr	r2, [r7, #16]
 8004e46:	4313      	orrs	r3, r2
 8004e48:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004e4a:	697b      	ldr	r3, [r7, #20]
 8004e4c:	f023 030a 	bic.w	r3, r3, #10
 8004e50:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004e52:	697a      	ldr	r2, [r7, #20]
 8004e54:	68bb      	ldr	r3, [r7, #8]
 8004e56:	4313      	orrs	r3, r2
 8004e58:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	693a      	ldr	r2, [r7, #16]
 8004e5e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	697a      	ldr	r2, [r7, #20]
 8004e64:	621a      	str	r2, [r3, #32]
}
 8004e66:	bf00      	nop
 8004e68:	371c      	adds	r7, #28
 8004e6a:	46bd      	mov	sp, r7
 8004e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e70:	4770      	bx	lr

08004e72 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004e72:	b480      	push	{r7}
 8004e74:	b087      	sub	sp, #28
 8004e76:	af00      	add	r7, sp, #0
 8004e78:	60f8      	str	r0, [r7, #12]
 8004e7a:	60b9      	str	r1, [r7, #8]
 8004e7c:	607a      	str	r2, [r7, #4]
 8004e7e:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	6a1b      	ldr	r3, [r3, #32]
 8004e84:	f023 0210 	bic.w	r2, r3, #16
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	699b      	ldr	r3, [r3, #24]
 8004e90:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	6a1b      	ldr	r3, [r3, #32]
 8004e96:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8004e98:	697b      	ldr	r3, [r7, #20]
 8004e9a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004e9e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	021b      	lsls	r3, r3, #8
 8004ea4:	697a      	ldr	r2, [r7, #20]
 8004ea6:	4313      	orrs	r3, r2
 8004ea8:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004eaa:	697b      	ldr	r3, [r7, #20]
 8004eac:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004eb0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8004eb2:	683b      	ldr	r3, [r7, #0]
 8004eb4:	031b      	lsls	r3, r3, #12
 8004eb6:	b29b      	uxth	r3, r3
 8004eb8:	697a      	ldr	r2, [r7, #20]
 8004eba:	4313      	orrs	r3, r2
 8004ebc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004ebe:	693b      	ldr	r3, [r7, #16]
 8004ec0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004ec4:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8004ec6:	68bb      	ldr	r3, [r7, #8]
 8004ec8:	011b      	lsls	r3, r3, #4
 8004eca:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8004ece:	693a      	ldr	r2, [r7, #16]
 8004ed0:	4313      	orrs	r3, r2
 8004ed2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	697a      	ldr	r2, [r7, #20]
 8004ed8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	693a      	ldr	r2, [r7, #16]
 8004ede:	621a      	str	r2, [r3, #32]
}
 8004ee0:	bf00      	nop
 8004ee2:	371c      	adds	r7, #28
 8004ee4:	46bd      	mov	sp, r7
 8004ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eea:	4770      	bx	lr

08004eec <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004eec:	b480      	push	{r7}
 8004eee:	b087      	sub	sp, #28
 8004ef0:	af00      	add	r7, sp, #0
 8004ef2:	60f8      	str	r0, [r7, #12]
 8004ef4:	60b9      	str	r1, [r7, #8]
 8004ef6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	6a1b      	ldr	r3, [r3, #32]
 8004efc:	f023 0210 	bic.w	r2, r3, #16
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	699b      	ldr	r3, [r3, #24]
 8004f08:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	6a1b      	ldr	r3, [r3, #32]
 8004f0e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004f10:	697b      	ldr	r3, [r7, #20]
 8004f12:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004f16:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	031b      	lsls	r3, r3, #12
 8004f1c:	697a      	ldr	r2, [r7, #20]
 8004f1e:	4313      	orrs	r3, r2
 8004f20:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004f22:	693b      	ldr	r3, [r7, #16]
 8004f24:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004f28:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004f2a:	68bb      	ldr	r3, [r7, #8]
 8004f2c:	011b      	lsls	r3, r3, #4
 8004f2e:	693a      	ldr	r2, [r7, #16]
 8004f30:	4313      	orrs	r3, r2
 8004f32:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	697a      	ldr	r2, [r7, #20]
 8004f38:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	693a      	ldr	r2, [r7, #16]
 8004f3e:	621a      	str	r2, [r3, #32]
}
 8004f40:	bf00      	nop
 8004f42:	371c      	adds	r7, #28
 8004f44:	46bd      	mov	sp, r7
 8004f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f4a:	4770      	bx	lr

08004f4c <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004f4c:	b480      	push	{r7}
 8004f4e:	b087      	sub	sp, #28
 8004f50:	af00      	add	r7, sp, #0
 8004f52:	60f8      	str	r0, [r7, #12]
 8004f54:	60b9      	str	r1, [r7, #8]
 8004f56:	607a      	str	r2, [r7, #4]
 8004f58:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	6a1b      	ldr	r3, [r3, #32]
 8004f5e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	69db      	ldr	r3, [r3, #28]
 8004f6a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	6a1b      	ldr	r3, [r3, #32]
 8004f70:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8004f72:	697b      	ldr	r3, [r7, #20]
 8004f74:	f023 0303 	bic.w	r3, r3, #3
 8004f78:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8004f7a:	697a      	ldr	r2, [r7, #20]
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	4313      	orrs	r3, r2
 8004f80:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8004f82:	697b      	ldr	r3, [r7, #20]
 8004f84:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004f88:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8004f8a:	683b      	ldr	r3, [r7, #0]
 8004f8c:	011b      	lsls	r3, r3, #4
 8004f8e:	b2db      	uxtb	r3, r3
 8004f90:	697a      	ldr	r2, [r7, #20]
 8004f92:	4313      	orrs	r3, r2
 8004f94:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8004f96:	693b      	ldr	r3, [r7, #16]
 8004f98:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8004f9c:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8004f9e:	68bb      	ldr	r3, [r7, #8]
 8004fa0:	021b      	lsls	r3, r3, #8
 8004fa2:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8004fa6:	693a      	ldr	r2, [r7, #16]
 8004fa8:	4313      	orrs	r3, r2
 8004faa:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	697a      	ldr	r2, [r7, #20]
 8004fb0:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	693a      	ldr	r2, [r7, #16]
 8004fb6:	621a      	str	r2, [r3, #32]
}
 8004fb8:	bf00      	nop
 8004fba:	371c      	adds	r7, #28
 8004fbc:	46bd      	mov	sp, r7
 8004fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc2:	4770      	bx	lr

08004fc4 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004fc4:	b480      	push	{r7}
 8004fc6:	b087      	sub	sp, #28
 8004fc8:	af00      	add	r7, sp, #0
 8004fca:	60f8      	str	r0, [r7, #12]
 8004fcc:	60b9      	str	r1, [r7, #8]
 8004fce:	607a      	str	r2, [r7, #4]
 8004fd0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	6a1b      	ldr	r3, [r3, #32]
 8004fd6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	69db      	ldr	r3, [r3, #28]
 8004fe2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	6a1b      	ldr	r3, [r3, #32]
 8004fe8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8004fea:	697b      	ldr	r3, [r7, #20]
 8004fec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004ff0:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	021b      	lsls	r3, r3, #8
 8004ff6:	697a      	ldr	r2, [r7, #20]
 8004ff8:	4313      	orrs	r3, r2
 8004ffa:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8004ffc:	697b      	ldr	r3, [r7, #20]
 8004ffe:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005002:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8005004:	683b      	ldr	r3, [r7, #0]
 8005006:	031b      	lsls	r3, r3, #12
 8005008:	b29b      	uxth	r3, r3
 800500a:	697a      	ldr	r2, [r7, #20]
 800500c:	4313      	orrs	r3, r2
 800500e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8005010:	693b      	ldr	r3, [r7, #16]
 8005012:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8005016:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8005018:	68bb      	ldr	r3, [r7, #8]
 800501a:	031b      	lsls	r3, r3, #12
 800501c:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8005020:	693a      	ldr	r2, [r7, #16]
 8005022:	4313      	orrs	r3, r2
 8005024:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	697a      	ldr	r2, [r7, #20]
 800502a:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	693a      	ldr	r2, [r7, #16]
 8005030:	621a      	str	r2, [r3, #32]
}
 8005032:	bf00      	nop
 8005034:	371c      	adds	r7, #28
 8005036:	46bd      	mov	sp, r7
 8005038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800503c:	4770      	bx	lr

0800503e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800503e:	b480      	push	{r7}
 8005040:	b085      	sub	sp, #20
 8005042:	af00      	add	r7, sp, #0
 8005044:	6078      	str	r0, [r7, #4]
 8005046:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	689b      	ldr	r3, [r3, #8]
 800504c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005054:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005056:	683a      	ldr	r2, [r7, #0]
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	4313      	orrs	r3, r2
 800505c:	f043 0307 	orr.w	r3, r3, #7
 8005060:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	68fa      	ldr	r2, [r7, #12]
 8005066:	609a      	str	r2, [r3, #8]
}
 8005068:	bf00      	nop
 800506a:	3714      	adds	r7, #20
 800506c:	46bd      	mov	sp, r7
 800506e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005072:	4770      	bx	lr

08005074 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005074:	b480      	push	{r7}
 8005076:	b087      	sub	sp, #28
 8005078:	af00      	add	r7, sp, #0
 800507a:	60f8      	str	r0, [r7, #12]
 800507c:	60b9      	str	r1, [r7, #8]
 800507e:	607a      	str	r2, [r7, #4]
 8005080:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	689b      	ldr	r3, [r3, #8]
 8005086:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005088:	697b      	ldr	r3, [r7, #20]
 800508a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800508e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005090:	683b      	ldr	r3, [r7, #0]
 8005092:	021a      	lsls	r2, r3, #8
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	431a      	orrs	r2, r3
 8005098:	68bb      	ldr	r3, [r7, #8]
 800509a:	4313      	orrs	r3, r2
 800509c:	697a      	ldr	r2, [r7, #20]
 800509e:	4313      	orrs	r3, r2
 80050a0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	697a      	ldr	r2, [r7, #20]
 80050a6:	609a      	str	r2, [r3, #8]
}
 80050a8:	bf00      	nop
 80050aa:	371c      	adds	r7, #28
 80050ac:	46bd      	mov	sp, r7
 80050ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b2:	4770      	bx	lr

080050b4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80050b4:	b480      	push	{r7}
 80050b6:	b087      	sub	sp, #28
 80050b8:	af00      	add	r7, sp, #0
 80050ba:	60f8      	str	r0, [r7, #12]
 80050bc:	60b9      	str	r1, [r7, #8]
 80050be:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80050c0:	68bb      	ldr	r3, [r7, #8]
 80050c2:	f003 031f 	and.w	r3, r3, #31
 80050c6:	2201      	movs	r2, #1
 80050c8:	fa02 f303 	lsl.w	r3, r2, r3
 80050cc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	6a1a      	ldr	r2, [r3, #32]
 80050d2:	697b      	ldr	r3, [r7, #20]
 80050d4:	43db      	mvns	r3, r3
 80050d6:	401a      	ands	r2, r3
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	6a1a      	ldr	r2, [r3, #32]
 80050e0:	68bb      	ldr	r3, [r7, #8]
 80050e2:	f003 031f 	and.w	r3, r3, #31
 80050e6:	6879      	ldr	r1, [r7, #4]
 80050e8:	fa01 f303 	lsl.w	r3, r1, r3
 80050ec:	431a      	orrs	r2, r3
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	621a      	str	r2, [r3, #32]
}
 80050f2:	bf00      	nop
 80050f4:	371c      	adds	r7, #28
 80050f6:	46bd      	mov	sp, r7
 80050f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050fc:	4770      	bx	lr
	...

08005100 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005100:	b480      	push	{r7}
 8005102:	b085      	sub	sp, #20
 8005104:	af00      	add	r7, sp, #0
 8005106:	6078      	str	r0, [r7, #4]
 8005108:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005110:	2b01      	cmp	r3, #1
 8005112:	d101      	bne.n	8005118 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005114:	2302      	movs	r3, #2
 8005116:	e06d      	b.n	80051f4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	2201      	movs	r2, #1
 800511c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	2202      	movs	r2, #2
 8005124:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	685b      	ldr	r3, [r3, #4]
 800512e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	689b      	ldr	r3, [r3, #8]
 8005136:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	4a30      	ldr	r2, [pc, #192]	; (8005200 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800513e:	4293      	cmp	r3, r2
 8005140:	d004      	beq.n	800514c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	4a2f      	ldr	r2, [pc, #188]	; (8005204 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005148:	4293      	cmp	r3, r2
 800514a:	d108      	bne.n	800515e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005152:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005154:	683b      	ldr	r3, [r7, #0]
 8005156:	685b      	ldr	r3, [r3, #4]
 8005158:	68fa      	ldr	r2, [r7, #12]
 800515a:	4313      	orrs	r3, r2
 800515c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005164:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005166:	683b      	ldr	r3, [r7, #0]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	68fa      	ldr	r2, [r7, #12]
 800516c:	4313      	orrs	r3, r2
 800516e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	68fa      	ldr	r2, [r7, #12]
 8005176:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	4a20      	ldr	r2, [pc, #128]	; (8005200 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800517e:	4293      	cmp	r3, r2
 8005180:	d022      	beq.n	80051c8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800518a:	d01d      	beq.n	80051c8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	4a1d      	ldr	r2, [pc, #116]	; (8005208 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8005192:	4293      	cmp	r3, r2
 8005194:	d018      	beq.n	80051c8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	4a1c      	ldr	r2, [pc, #112]	; (800520c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800519c:	4293      	cmp	r3, r2
 800519e:	d013      	beq.n	80051c8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	4a1a      	ldr	r2, [pc, #104]	; (8005210 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80051a6:	4293      	cmp	r3, r2
 80051a8:	d00e      	beq.n	80051c8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	4a15      	ldr	r2, [pc, #84]	; (8005204 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80051b0:	4293      	cmp	r3, r2
 80051b2:	d009      	beq.n	80051c8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	4a16      	ldr	r2, [pc, #88]	; (8005214 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80051ba:	4293      	cmp	r3, r2
 80051bc:	d004      	beq.n	80051c8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	4a15      	ldr	r2, [pc, #84]	; (8005218 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80051c4:	4293      	cmp	r3, r2
 80051c6:	d10c      	bne.n	80051e2 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80051c8:	68bb      	ldr	r3, [r7, #8]
 80051ca:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80051ce:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80051d0:	683b      	ldr	r3, [r7, #0]
 80051d2:	689b      	ldr	r3, [r3, #8]
 80051d4:	68ba      	ldr	r2, [r7, #8]
 80051d6:	4313      	orrs	r3, r2
 80051d8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	68ba      	ldr	r2, [r7, #8]
 80051e0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	2201      	movs	r2, #1
 80051e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	2200      	movs	r2, #0
 80051ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80051f2:	2300      	movs	r3, #0
}
 80051f4:	4618      	mov	r0, r3
 80051f6:	3714      	adds	r7, #20
 80051f8:	46bd      	mov	sp, r7
 80051fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051fe:	4770      	bx	lr
 8005200:	40010000 	.word	0x40010000
 8005204:	40010400 	.word	0x40010400
 8005208:	40000400 	.word	0x40000400
 800520c:	40000800 	.word	0x40000800
 8005210:	40000c00 	.word	0x40000c00
 8005214:	40014000 	.word	0x40014000
 8005218:	40001800 	.word	0x40001800

0800521c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800521c:	b084      	sub	sp, #16
 800521e:	b580      	push	{r7, lr}
 8005220:	b084      	sub	sp, #16
 8005222:	af00      	add	r7, sp, #0
 8005224:	6078      	str	r0, [r7, #4]
 8005226:	f107 001c 	add.w	r0, r7, #28
 800522a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800522e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005230:	2b01      	cmp	r3, #1
 8005232:	d126      	bne.n	8005282 <USB_CoreInit+0x66>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005238:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	68da      	ldr	r2, [r3, #12]
 8005244:	4b3f      	ldr	r3, [pc, #252]	; (8005344 <USB_CoreInit+0x128>)
 8005246:	4013      	ands	r3, r2
 8005248:	687a      	ldr	r2, [r7, #4]
 800524a:	60d3      	str	r3, [r2, #12]

#if defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx)
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	68db      	ldr	r3, [r3, #12]
 8005250:	f043 0210 	orr.w	r2, r3, #16
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	60da      	str	r2, [r3, #12]
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	68db      	ldr	r3, [r3, #12]
 800525c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005264:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005266:	2b01      	cmp	r3, #1
 8005268:	d105      	bne.n	8005276 <USB_CoreInit+0x5a>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	68db      	ldr	r3, [r3, #12]
 800526e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005276:	6878      	ldr	r0, [r7, #4]
 8005278:	f001 fb80 	bl	800697c <USB_CoreReset>
 800527c:	4603      	mov	r3, r0
 800527e:	73fb      	strb	r3, [r7, #15]
 8005280:	e048      	b.n	8005314 <USB_CoreInit+0xf8>
  }
#if defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx)
  else if (cfg.phy_itface == USB_OTG_HS_EMBEDDED_PHY)
 8005282:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005284:	2b03      	cmp	r3, #3
 8005286:	d134      	bne.n	80052f2 <USB_CoreInit+0xd6>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800528c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The UTMI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	68da      	ldr	r2, [r3, #12]
 8005298:	4b2a      	ldr	r3, [pc, #168]	; (8005344 <USB_CoreInit+0x128>)
 800529a:	4013      	ands	r3, r2
 800529c:	687a      	ldr	r2, [r7, #4]
 800529e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	68db      	ldr	r3, [r3, #12]
 80052a4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	60da      	str	r2, [r3, #12]

    /* Select UTMI Interface */
    USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	68db      	ldr	r3, [r3, #12]
 80052b0:	f023 0210 	bic.w	r2, r3, #16
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	60da      	str	r2, [r3, #12]
#ifdef USBPHYC
    /* Enable USB HS PHY */
    USBx->GCCFG |= USB_OTG_GCCFG_PHYHSEN;
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052bc:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enables control of a High Speed USB PHY */
    if (USB_HS_PHYCInit(USBx) != HAL_OK)
 80052c4:	6878      	ldr	r0, [r7, #4]
 80052c6:	f001 fb8b 	bl	80069e0 <USB_HS_PHYCInit>
 80052ca:	4603      	mov	r3, r0
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d001      	beq.n	80052d4 <USB_CoreInit+0xb8>
    {
      return HAL_ERROR;
 80052d0:	2301      	movs	r3, #1
 80052d2:	e02f      	b.n	8005334 <USB_CoreInit+0x118>
    }
#endif /* USBPHYC */

    if (cfg.use_external_vbus == 1U)
 80052d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80052d6:	2b01      	cmp	r3, #1
 80052d8:	d105      	bne.n	80052e6 <USB_CoreInit+0xca>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	68db      	ldr	r3, [r3, #12]
 80052de:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80052e6:	6878      	ldr	r0, [r7, #4]
 80052e8:	f001 fb48 	bl	800697c <USB_CoreReset>
 80052ec:	4603      	mov	r3, r0
 80052ee:	73fb      	strb	r3, [r7, #15]
 80052f0:	e010      	b.n	8005314 <USB_CoreInit+0xf8>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	68db      	ldr	r3, [r3, #12]
 80052f6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80052fe:	6878      	ldr	r0, [r7, #4]
 8005300:	f001 fb3c 	bl	800697c <USB_CoreReset>
 8005304:	4603      	mov	r3, r0
 8005306:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800530c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8005314:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005316:	2b01      	cmp	r3, #1
 8005318:	d10b      	bne.n	8005332 <USB_CoreInit+0x116>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	689b      	ldr	r3, [r3, #8]
 800531e:	f043 0206 	orr.w	r2, r3, #6
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	689b      	ldr	r3, [r3, #8]
 800532a:	f043 0220 	orr.w	r2, r3, #32
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005332:	7bfb      	ldrb	r3, [r7, #15]
}
 8005334:	4618      	mov	r0, r3
 8005336:	3710      	adds	r7, #16
 8005338:	46bd      	mov	sp, r7
 800533a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800533e:	b004      	add	sp, #16
 8005340:	4770      	bx	lr
 8005342:	bf00      	nop
 8005344:	ffbdffbf 	.word	0xffbdffbf

08005348 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8005348:	b480      	push	{r7}
 800534a:	b087      	sub	sp, #28
 800534c:	af00      	add	r7, sp, #0
 800534e:	60f8      	str	r0, [r7, #12]
 8005350:	60b9      	str	r1, [r7, #8]
 8005352:	4613      	mov	r3, r2
 8005354:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8005356:	79fb      	ldrb	r3, [r7, #7]
 8005358:	2b02      	cmp	r3, #2
 800535a:	d165      	bne.n	8005428 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800535c:	68bb      	ldr	r3, [r7, #8]
 800535e:	4a41      	ldr	r2, [pc, #260]	; (8005464 <USB_SetTurnaroundTime+0x11c>)
 8005360:	4293      	cmp	r3, r2
 8005362:	d906      	bls.n	8005372 <USB_SetTurnaroundTime+0x2a>
 8005364:	68bb      	ldr	r3, [r7, #8]
 8005366:	4a40      	ldr	r2, [pc, #256]	; (8005468 <USB_SetTurnaroundTime+0x120>)
 8005368:	4293      	cmp	r3, r2
 800536a:	d202      	bcs.n	8005372 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800536c:	230f      	movs	r3, #15
 800536e:	617b      	str	r3, [r7, #20]
 8005370:	e062      	b.n	8005438 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8005372:	68bb      	ldr	r3, [r7, #8]
 8005374:	4a3c      	ldr	r2, [pc, #240]	; (8005468 <USB_SetTurnaroundTime+0x120>)
 8005376:	4293      	cmp	r3, r2
 8005378:	d306      	bcc.n	8005388 <USB_SetTurnaroundTime+0x40>
 800537a:	68bb      	ldr	r3, [r7, #8]
 800537c:	4a3b      	ldr	r2, [pc, #236]	; (800546c <USB_SetTurnaroundTime+0x124>)
 800537e:	4293      	cmp	r3, r2
 8005380:	d202      	bcs.n	8005388 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8005382:	230e      	movs	r3, #14
 8005384:	617b      	str	r3, [r7, #20]
 8005386:	e057      	b.n	8005438 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8005388:	68bb      	ldr	r3, [r7, #8]
 800538a:	4a38      	ldr	r2, [pc, #224]	; (800546c <USB_SetTurnaroundTime+0x124>)
 800538c:	4293      	cmp	r3, r2
 800538e:	d306      	bcc.n	800539e <USB_SetTurnaroundTime+0x56>
 8005390:	68bb      	ldr	r3, [r7, #8]
 8005392:	4a37      	ldr	r2, [pc, #220]	; (8005470 <USB_SetTurnaroundTime+0x128>)
 8005394:	4293      	cmp	r3, r2
 8005396:	d202      	bcs.n	800539e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8005398:	230d      	movs	r3, #13
 800539a:	617b      	str	r3, [r7, #20]
 800539c:	e04c      	b.n	8005438 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800539e:	68bb      	ldr	r3, [r7, #8]
 80053a0:	4a33      	ldr	r2, [pc, #204]	; (8005470 <USB_SetTurnaroundTime+0x128>)
 80053a2:	4293      	cmp	r3, r2
 80053a4:	d306      	bcc.n	80053b4 <USB_SetTurnaroundTime+0x6c>
 80053a6:	68bb      	ldr	r3, [r7, #8]
 80053a8:	4a32      	ldr	r2, [pc, #200]	; (8005474 <USB_SetTurnaroundTime+0x12c>)
 80053aa:	4293      	cmp	r3, r2
 80053ac:	d802      	bhi.n	80053b4 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80053ae:	230c      	movs	r3, #12
 80053b0:	617b      	str	r3, [r7, #20]
 80053b2:	e041      	b.n	8005438 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80053b4:	68bb      	ldr	r3, [r7, #8]
 80053b6:	4a2f      	ldr	r2, [pc, #188]	; (8005474 <USB_SetTurnaroundTime+0x12c>)
 80053b8:	4293      	cmp	r3, r2
 80053ba:	d906      	bls.n	80053ca <USB_SetTurnaroundTime+0x82>
 80053bc:	68bb      	ldr	r3, [r7, #8]
 80053be:	4a2e      	ldr	r2, [pc, #184]	; (8005478 <USB_SetTurnaroundTime+0x130>)
 80053c0:	4293      	cmp	r3, r2
 80053c2:	d802      	bhi.n	80053ca <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80053c4:	230b      	movs	r3, #11
 80053c6:	617b      	str	r3, [r7, #20]
 80053c8:	e036      	b.n	8005438 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80053ca:	68bb      	ldr	r3, [r7, #8]
 80053cc:	4a2a      	ldr	r2, [pc, #168]	; (8005478 <USB_SetTurnaroundTime+0x130>)
 80053ce:	4293      	cmp	r3, r2
 80053d0:	d906      	bls.n	80053e0 <USB_SetTurnaroundTime+0x98>
 80053d2:	68bb      	ldr	r3, [r7, #8]
 80053d4:	4a29      	ldr	r2, [pc, #164]	; (800547c <USB_SetTurnaroundTime+0x134>)
 80053d6:	4293      	cmp	r3, r2
 80053d8:	d802      	bhi.n	80053e0 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80053da:	230a      	movs	r3, #10
 80053dc:	617b      	str	r3, [r7, #20]
 80053de:	e02b      	b.n	8005438 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80053e0:	68bb      	ldr	r3, [r7, #8]
 80053e2:	4a26      	ldr	r2, [pc, #152]	; (800547c <USB_SetTurnaroundTime+0x134>)
 80053e4:	4293      	cmp	r3, r2
 80053e6:	d906      	bls.n	80053f6 <USB_SetTurnaroundTime+0xae>
 80053e8:	68bb      	ldr	r3, [r7, #8]
 80053ea:	4a25      	ldr	r2, [pc, #148]	; (8005480 <USB_SetTurnaroundTime+0x138>)
 80053ec:	4293      	cmp	r3, r2
 80053ee:	d202      	bcs.n	80053f6 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80053f0:	2309      	movs	r3, #9
 80053f2:	617b      	str	r3, [r7, #20]
 80053f4:	e020      	b.n	8005438 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80053f6:	68bb      	ldr	r3, [r7, #8]
 80053f8:	4a21      	ldr	r2, [pc, #132]	; (8005480 <USB_SetTurnaroundTime+0x138>)
 80053fa:	4293      	cmp	r3, r2
 80053fc:	d306      	bcc.n	800540c <USB_SetTurnaroundTime+0xc4>
 80053fe:	68bb      	ldr	r3, [r7, #8]
 8005400:	4a20      	ldr	r2, [pc, #128]	; (8005484 <USB_SetTurnaroundTime+0x13c>)
 8005402:	4293      	cmp	r3, r2
 8005404:	d802      	bhi.n	800540c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8005406:	2308      	movs	r3, #8
 8005408:	617b      	str	r3, [r7, #20]
 800540a:	e015      	b.n	8005438 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800540c:	68bb      	ldr	r3, [r7, #8]
 800540e:	4a1d      	ldr	r2, [pc, #116]	; (8005484 <USB_SetTurnaroundTime+0x13c>)
 8005410:	4293      	cmp	r3, r2
 8005412:	d906      	bls.n	8005422 <USB_SetTurnaroundTime+0xda>
 8005414:	68bb      	ldr	r3, [r7, #8]
 8005416:	4a1c      	ldr	r2, [pc, #112]	; (8005488 <USB_SetTurnaroundTime+0x140>)
 8005418:	4293      	cmp	r3, r2
 800541a:	d202      	bcs.n	8005422 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800541c:	2307      	movs	r3, #7
 800541e:	617b      	str	r3, [r7, #20]
 8005420:	e00a      	b.n	8005438 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8005422:	2306      	movs	r3, #6
 8005424:	617b      	str	r3, [r7, #20]
 8005426:	e007      	b.n	8005438 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8005428:	79fb      	ldrb	r3, [r7, #7]
 800542a:	2b00      	cmp	r3, #0
 800542c:	d102      	bne.n	8005434 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800542e:	2309      	movs	r3, #9
 8005430:	617b      	str	r3, [r7, #20]
 8005432:	e001      	b.n	8005438 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8005434:	2309      	movs	r3, #9
 8005436:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	68db      	ldr	r3, [r3, #12]
 800543c:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	68da      	ldr	r2, [r3, #12]
 8005448:	697b      	ldr	r3, [r7, #20]
 800544a:	029b      	lsls	r3, r3, #10
 800544c:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8005450:	431a      	orrs	r2, r3
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005456:	2300      	movs	r3, #0
}
 8005458:	4618      	mov	r0, r3
 800545a:	371c      	adds	r7, #28
 800545c:	46bd      	mov	sp, r7
 800545e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005462:	4770      	bx	lr
 8005464:	00d8acbf 	.word	0x00d8acbf
 8005468:	00e4e1c0 	.word	0x00e4e1c0
 800546c:	00f42400 	.word	0x00f42400
 8005470:	01067380 	.word	0x01067380
 8005474:	011a499f 	.word	0x011a499f
 8005478:	01312cff 	.word	0x01312cff
 800547c:	014ca43f 	.word	0x014ca43f
 8005480:	016e3600 	.word	0x016e3600
 8005484:	01a6ab1f 	.word	0x01a6ab1f
 8005488:	01e84800 	.word	0x01e84800

0800548c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800548c:	b480      	push	{r7}
 800548e:	b083      	sub	sp, #12
 8005490:	af00      	add	r7, sp, #0
 8005492:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	689b      	ldr	r3, [r3, #8]
 8005498:	f043 0201 	orr.w	r2, r3, #1
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80054a0:	2300      	movs	r3, #0
}
 80054a2:	4618      	mov	r0, r3
 80054a4:	370c      	adds	r7, #12
 80054a6:	46bd      	mov	sp, r7
 80054a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ac:	4770      	bx	lr

080054ae <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80054ae:	b480      	push	{r7}
 80054b0:	b083      	sub	sp, #12
 80054b2:	af00      	add	r7, sp, #0
 80054b4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	689b      	ldr	r3, [r3, #8]
 80054ba:	f023 0201 	bic.w	r2, r3, #1
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80054c2:	2300      	movs	r3, #0
}
 80054c4:	4618      	mov	r0, r3
 80054c6:	370c      	adds	r7, #12
 80054c8:	46bd      	mov	sp, r7
 80054ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ce:	4770      	bx	lr

080054d0 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80054d0:	b580      	push	{r7, lr}
 80054d2:	b084      	sub	sp, #16
 80054d4:	af00      	add	r7, sp, #0
 80054d6:	6078      	str	r0, [r7, #4]
 80054d8:	460b      	mov	r3, r1
 80054da:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80054dc:	2300      	movs	r3, #0
 80054de:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	68db      	ldr	r3, [r3, #12]
 80054e4:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80054ec:	78fb      	ldrb	r3, [r7, #3]
 80054ee:	2b01      	cmp	r3, #1
 80054f0:	d115      	bne.n	800551e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	68db      	ldr	r3, [r3, #12]
 80054f6:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80054fe:	2001      	movs	r0, #1
 8005500:	f7fc f800 	bl	8001504 <HAL_Delay>
      ms++;
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	3301      	adds	r3, #1
 8005508:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800550a:	6878      	ldr	r0, [r7, #4]
 800550c:	f001 f9a5 	bl	800685a <USB_GetMode>
 8005510:	4603      	mov	r3, r0
 8005512:	2b01      	cmp	r3, #1
 8005514:	d01e      	beq.n	8005554 <USB_SetCurrentMode+0x84>
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	2b31      	cmp	r3, #49	; 0x31
 800551a:	d9f0      	bls.n	80054fe <USB_SetCurrentMode+0x2e>
 800551c:	e01a      	b.n	8005554 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800551e:	78fb      	ldrb	r3, [r7, #3]
 8005520:	2b00      	cmp	r3, #0
 8005522:	d115      	bne.n	8005550 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	68db      	ldr	r3, [r3, #12]
 8005528:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005530:	2001      	movs	r0, #1
 8005532:	f7fb ffe7 	bl	8001504 <HAL_Delay>
      ms++;
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	3301      	adds	r3, #1
 800553a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800553c:	6878      	ldr	r0, [r7, #4]
 800553e:	f001 f98c 	bl	800685a <USB_GetMode>
 8005542:	4603      	mov	r3, r0
 8005544:	2b00      	cmp	r3, #0
 8005546:	d005      	beq.n	8005554 <USB_SetCurrentMode+0x84>
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	2b31      	cmp	r3, #49	; 0x31
 800554c:	d9f0      	bls.n	8005530 <USB_SetCurrentMode+0x60>
 800554e:	e001      	b.n	8005554 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005550:	2301      	movs	r3, #1
 8005552:	e005      	b.n	8005560 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	2b32      	cmp	r3, #50	; 0x32
 8005558:	d101      	bne.n	800555e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800555a:	2301      	movs	r3, #1
 800555c:	e000      	b.n	8005560 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800555e:	2300      	movs	r3, #0
}
 8005560:	4618      	mov	r0, r3
 8005562:	3710      	adds	r7, #16
 8005564:	46bd      	mov	sp, r7
 8005566:	bd80      	pop	{r7, pc}

08005568 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005568:	b084      	sub	sp, #16
 800556a:	b580      	push	{r7, lr}
 800556c:	b086      	sub	sp, #24
 800556e:	af00      	add	r7, sp, #0
 8005570:	6078      	str	r0, [r7, #4]
 8005572:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8005576:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800557a:	2300      	movs	r3, #0
 800557c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8005582:	2300      	movs	r3, #0
 8005584:	613b      	str	r3, [r7, #16]
 8005586:	e009      	b.n	800559c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005588:	687a      	ldr	r2, [r7, #4]
 800558a:	693b      	ldr	r3, [r7, #16]
 800558c:	3340      	adds	r3, #64	; 0x40
 800558e:	009b      	lsls	r3, r3, #2
 8005590:	4413      	add	r3, r2
 8005592:	2200      	movs	r2, #0
 8005594:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8005596:	693b      	ldr	r3, [r7, #16]
 8005598:	3301      	adds	r3, #1
 800559a:	613b      	str	r3, [r7, #16]
 800559c:	693b      	ldr	r3, [r7, #16]
 800559e:	2b0e      	cmp	r3, #14
 80055a0:	d9f2      	bls.n	8005588 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80055a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d11c      	bne.n	80055e2 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80055ae:	685b      	ldr	r3, [r3, #4]
 80055b0:	68fa      	ldr	r2, [r7, #12]
 80055b2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80055b6:	f043 0302 	orr.w	r3, r3, #2
 80055ba:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055c0:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	601a      	str	r2, [r3, #0]
 80055e0:	e005      	b.n	80055ee <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055e6:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80055f4:	461a      	mov	r2, r3
 80055f6:	2300      	movs	r3, #0
 80055f8:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005600:	4619      	mov	r1, r3
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005608:	461a      	mov	r2, r3
 800560a:	680b      	ldr	r3, [r1, #0]
 800560c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800560e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005610:	2b01      	cmp	r3, #1
 8005612:	d10c      	bne.n	800562e <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005614:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005616:	2b00      	cmp	r3, #0
 8005618:	d104      	bne.n	8005624 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800561a:	2100      	movs	r1, #0
 800561c:	6878      	ldr	r0, [r7, #4]
 800561e:	f000 f971 	bl	8005904 <USB_SetDevSpeed>
 8005622:	e018      	b.n	8005656 <USB_DevInit+0xee>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005624:	2101      	movs	r1, #1
 8005626:	6878      	ldr	r0, [r7, #4]
 8005628:	f000 f96c 	bl	8005904 <USB_SetDevSpeed>
 800562c:	e013      	b.n	8005656 <USB_DevInit+0xee>
    }
  }
#if defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx)
  else if (cfg.phy_itface == USB_OTG_HS_EMBEDDED_PHY)
 800562e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005630:	2b03      	cmp	r3, #3
 8005632:	d10c      	bne.n	800564e <USB_DevInit+0xe6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005634:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005636:	2b00      	cmp	r3, #0
 8005638:	d104      	bne.n	8005644 <USB_DevInit+0xdc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800563a:	2100      	movs	r1, #0
 800563c:	6878      	ldr	r0, [r7, #4]
 800563e:	f000 f961 	bl	8005904 <USB_SetDevSpeed>
 8005642:	e008      	b.n	8005656 <USB_DevInit+0xee>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005644:	2101      	movs	r1, #1
 8005646:	6878      	ldr	r0, [r7, #4]
 8005648:	f000 f95c 	bl	8005904 <USB_SetDevSpeed>
 800564c:	e003      	b.n	8005656 <USB_DevInit+0xee>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800564e:	2103      	movs	r1, #3
 8005650:	6878      	ldr	r0, [r7, #4]
 8005652:	f000 f957 	bl	8005904 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005656:	2110      	movs	r1, #16
 8005658:	6878      	ldr	r0, [r7, #4]
 800565a:	f000 f8f3 	bl	8005844 <USB_FlushTxFifo>
 800565e:	4603      	mov	r3, r0
 8005660:	2b00      	cmp	r3, #0
 8005662:	d001      	beq.n	8005668 <USB_DevInit+0x100>
  {
    ret = HAL_ERROR;
 8005664:	2301      	movs	r3, #1
 8005666:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005668:	6878      	ldr	r0, [r7, #4]
 800566a:	f000 f91d 	bl	80058a8 <USB_FlushRxFifo>
 800566e:	4603      	mov	r3, r0
 8005670:	2b00      	cmp	r3, #0
 8005672:	d001      	beq.n	8005678 <USB_DevInit+0x110>
  {
    ret = HAL_ERROR;
 8005674:	2301      	movs	r3, #1
 8005676:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800567e:	461a      	mov	r2, r3
 8005680:	2300      	movs	r3, #0
 8005682:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800568a:	461a      	mov	r2, r3
 800568c:	2300      	movs	r3, #0
 800568e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005696:	461a      	mov	r2, r3
 8005698:	2300      	movs	r3, #0
 800569a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800569c:	2300      	movs	r3, #0
 800569e:	613b      	str	r3, [r7, #16]
 80056a0:	e043      	b.n	800572a <USB_DevInit+0x1c2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80056a2:	693b      	ldr	r3, [r7, #16]
 80056a4:	015a      	lsls	r2, r3, #5
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	4413      	add	r3, r2
 80056aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80056b4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80056b8:	d118      	bne.n	80056ec <USB_DevInit+0x184>
    {
      if (i == 0U)
 80056ba:	693b      	ldr	r3, [r7, #16]
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d10a      	bne.n	80056d6 <USB_DevInit+0x16e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80056c0:	693b      	ldr	r3, [r7, #16]
 80056c2:	015a      	lsls	r2, r3, #5
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	4413      	add	r3, r2
 80056c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056cc:	461a      	mov	r2, r3
 80056ce:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80056d2:	6013      	str	r3, [r2, #0]
 80056d4:	e013      	b.n	80056fe <USB_DevInit+0x196>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80056d6:	693b      	ldr	r3, [r7, #16]
 80056d8:	015a      	lsls	r2, r3, #5
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	4413      	add	r3, r2
 80056de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056e2:	461a      	mov	r2, r3
 80056e4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80056e8:	6013      	str	r3, [r2, #0]
 80056ea:	e008      	b.n	80056fe <USB_DevInit+0x196>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80056ec:	693b      	ldr	r3, [r7, #16]
 80056ee:	015a      	lsls	r2, r3, #5
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	4413      	add	r3, r2
 80056f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056f8:	461a      	mov	r2, r3
 80056fa:	2300      	movs	r3, #0
 80056fc:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80056fe:	693b      	ldr	r3, [r7, #16]
 8005700:	015a      	lsls	r2, r3, #5
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	4413      	add	r3, r2
 8005706:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800570a:	461a      	mov	r2, r3
 800570c:	2300      	movs	r3, #0
 800570e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005710:	693b      	ldr	r3, [r7, #16]
 8005712:	015a      	lsls	r2, r3, #5
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	4413      	add	r3, r2
 8005718:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800571c:	461a      	mov	r2, r3
 800571e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005722:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005724:	693b      	ldr	r3, [r7, #16]
 8005726:	3301      	adds	r3, #1
 8005728:	613b      	str	r3, [r7, #16]
 800572a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800572c:	693a      	ldr	r2, [r7, #16]
 800572e:	429a      	cmp	r2, r3
 8005730:	d3b7      	bcc.n	80056a2 <USB_DevInit+0x13a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005732:	2300      	movs	r3, #0
 8005734:	613b      	str	r3, [r7, #16]
 8005736:	e043      	b.n	80057c0 <USB_DevInit+0x258>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005738:	693b      	ldr	r3, [r7, #16]
 800573a:	015a      	lsls	r2, r3, #5
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	4413      	add	r3, r2
 8005740:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800574a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800574e:	d118      	bne.n	8005782 <USB_DevInit+0x21a>
    {
      if (i == 0U)
 8005750:	693b      	ldr	r3, [r7, #16]
 8005752:	2b00      	cmp	r3, #0
 8005754:	d10a      	bne.n	800576c <USB_DevInit+0x204>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005756:	693b      	ldr	r3, [r7, #16]
 8005758:	015a      	lsls	r2, r3, #5
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	4413      	add	r3, r2
 800575e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005762:	461a      	mov	r2, r3
 8005764:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005768:	6013      	str	r3, [r2, #0]
 800576a:	e013      	b.n	8005794 <USB_DevInit+0x22c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800576c:	693b      	ldr	r3, [r7, #16]
 800576e:	015a      	lsls	r2, r3, #5
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	4413      	add	r3, r2
 8005774:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005778:	461a      	mov	r2, r3
 800577a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800577e:	6013      	str	r3, [r2, #0]
 8005780:	e008      	b.n	8005794 <USB_DevInit+0x22c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005782:	693b      	ldr	r3, [r7, #16]
 8005784:	015a      	lsls	r2, r3, #5
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	4413      	add	r3, r2
 800578a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800578e:	461a      	mov	r2, r3
 8005790:	2300      	movs	r3, #0
 8005792:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005794:	693b      	ldr	r3, [r7, #16]
 8005796:	015a      	lsls	r2, r3, #5
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	4413      	add	r3, r2
 800579c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057a0:	461a      	mov	r2, r3
 80057a2:	2300      	movs	r3, #0
 80057a4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80057a6:	693b      	ldr	r3, [r7, #16]
 80057a8:	015a      	lsls	r2, r3, #5
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	4413      	add	r3, r2
 80057ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057b2:	461a      	mov	r2, r3
 80057b4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80057b8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80057ba:	693b      	ldr	r3, [r7, #16]
 80057bc:	3301      	adds	r3, #1
 80057be:	613b      	str	r3, [r7, #16]
 80057c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057c2:	693a      	ldr	r2, [r7, #16]
 80057c4:	429a      	cmp	r2, r3
 80057c6:	d3b7      	bcc.n	8005738 <USB_DevInit+0x1d0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80057ce:	691b      	ldr	r3, [r3, #16]
 80057d0:	68fa      	ldr	r2, [r7, #12]
 80057d2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80057d6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80057da:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	2200      	movs	r2, #0
 80057e0:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80057e8:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80057ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d105      	bne.n	80057fc <USB_DevInit+0x294>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	699b      	ldr	r3, [r3, #24]
 80057f4:	f043 0210 	orr.w	r2, r3, #16
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	699a      	ldr	r2, [r3, #24]
 8005800:	4b0e      	ldr	r3, [pc, #56]	; (800583c <USB_DevInit+0x2d4>)
 8005802:	4313      	orrs	r3, r2
 8005804:	687a      	ldr	r2, [r7, #4]
 8005806:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005808:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800580a:	2b00      	cmp	r3, #0
 800580c:	d005      	beq.n	800581a <USB_DevInit+0x2b2>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	699b      	ldr	r3, [r3, #24]
 8005812:	f043 0208 	orr.w	r2, r3, #8
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800581a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800581c:	2b01      	cmp	r3, #1
 800581e:	d105      	bne.n	800582c <USB_DevInit+0x2c4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	699a      	ldr	r2, [r3, #24]
 8005824:	4b06      	ldr	r3, [pc, #24]	; (8005840 <USB_DevInit+0x2d8>)
 8005826:	4313      	orrs	r3, r2
 8005828:	687a      	ldr	r2, [r7, #4]
 800582a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800582c:	7dfb      	ldrb	r3, [r7, #23]
}
 800582e:	4618      	mov	r0, r3
 8005830:	3718      	adds	r7, #24
 8005832:	46bd      	mov	sp, r7
 8005834:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005838:	b004      	add	sp, #16
 800583a:	4770      	bx	lr
 800583c:	803c3800 	.word	0x803c3800
 8005840:	40000004 	.word	0x40000004

08005844 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005844:	b480      	push	{r7}
 8005846:	b085      	sub	sp, #20
 8005848:	af00      	add	r7, sp, #0
 800584a:	6078      	str	r0, [r7, #4]
 800584c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800584e:	2300      	movs	r3, #0
 8005850:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	3301      	adds	r3, #1
 8005856:	60fb      	str	r3, [r7, #12]
 8005858:	4a12      	ldr	r2, [pc, #72]	; (80058a4 <USB_FlushTxFifo+0x60>)
 800585a:	4293      	cmp	r3, r2
 800585c:	d901      	bls.n	8005862 <USB_FlushTxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800585e:	2303      	movs	r3, #3
 8005860:	e01a      	b.n	8005898 <USB_FlushTxFifo+0x54>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	691b      	ldr	r3, [r3, #16]
 8005866:	2b00      	cmp	r3, #0
 8005868:	daf3      	bge.n	8005852 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800586a:	2300      	movs	r3, #0
 800586c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800586e:	683b      	ldr	r3, [r7, #0]
 8005870:	019b      	lsls	r3, r3, #6
 8005872:	f043 0220 	orr.w	r2, r3, #32
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	3301      	adds	r3, #1
 800587e:	60fb      	str	r3, [r7, #12]
 8005880:	4a08      	ldr	r2, [pc, #32]	; (80058a4 <USB_FlushTxFifo+0x60>)
 8005882:	4293      	cmp	r3, r2
 8005884:	d901      	bls.n	800588a <USB_FlushTxFifo+0x46>
    {
      return HAL_TIMEOUT;
 8005886:	2303      	movs	r3, #3
 8005888:	e006      	b.n	8005898 <USB_FlushTxFifo+0x54>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	691b      	ldr	r3, [r3, #16]
 800588e:	f003 0320 	and.w	r3, r3, #32
 8005892:	2b20      	cmp	r3, #32
 8005894:	d0f1      	beq.n	800587a <USB_FlushTxFifo+0x36>

  return HAL_OK;
 8005896:	2300      	movs	r3, #0
}
 8005898:	4618      	mov	r0, r3
 800589a:	3714      	adds	r7, #20
 800589c:	46bd      	mov	sp, r7
 800589e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a2:	4770      	bx	lr
 80058a4:	00030d40 	.word	0x00030d40

080058a8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80058a8:	b480      	push	{r7}
 80058aa:	b085      	sub	sp, #20
 80058ac:	af00      	add	r7, sp, #0
 80058ae:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80058b0:	2300      	movs	r3, #0
 80058b2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	3301      	adds	r3, #1
 80058b8:	60fb      	str	r3, [r7, #12]
 80058ba:	4a11      	ldr	r2, [pc, #68]	; (8005900 <USB_FlushRxFifo+0x58>)
 80058bc:	4293      	cmp	r3, r2
 80058be:	d901      	bls.n	80058c4 <USB_FlushRxFifo+0x1c>
    {
      return HAL_TIMEOUT;
 80058c0:	2303      	movs	r3, #3
 80058c2:	e017      	b.n	80058f4 <USB_FlushRxFifo+0x4c>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	691b      	ldr	r3, [r3, #16]
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	daf3      	bge.n	80058b4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80058cc:	2300      	movs	r3, #0
 80058ce:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	2210      	movs	r2, #16
 80058d4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	3301      	adds	r3, #1
 80058da:	60fb      	str	r3, [r7, #12]
 80058dc:	4a08      	ldr	r2, [pc, #32]	; (8005900 <USB_FlushRxFifo+0x58>)
 80058de:	4293      	cmp	r3, r2
 80058e0:	d901      	bls.n	80058e6 <USB_FlushRxFifo+0x3e>
    {
      return HAL_TIMEOUT;
 80058e2:	2303      	movs	r3, #3
 80058e4:	e006      	b.n	80058f4 <USB_FlushRxFifo+0x4c>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	691b      	ldr	r3, [r3, #16]
 80058ea:	f003 0310 	and.w	r3, r3, #16
 80058ee:	2b10      	cmp	r3, #16
 80058f0:	d0f1      	beq.n	80058d6 <USB_FlushRxFifo+0x2e>

  return HAL_OK;
 80058f2:	2300      	movs	r3, #0
}
 80058f4:	4618      	mov	r0, r3
 80058f6:	3714      	adds	r7, #20
 80058f8:	46bd      	mov	sp, r7
 80058fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058fe:	4770      	bx	lr
 8005900:	00030d40 	.word	0x00030d40

08005904 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005904:	b480      	push	{r7}
 8005906:	b085      	sub	sp, #20
 8005908:	af00      	add	r7, sp, #0
 800590a:	6078      	str	r0, [r7, #4]
 800590c:	460b      	mov	r3, r1
 800590e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800591a:	681a      	ldr	r2, [r3, #0]
 800591c:	78fb      	ldrb	r3, [r7, #3]
 800591e:	68f9      	ldr	r1, [r7, #12]
 8005920:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005924:	4313      	orrs	r3, r2
 8005926:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005928:	2300      	movs	r3, #0
}
 800592a:	4618      	mov	r0, r3
 800592c:	3714      	adds	r7, #20
 800592e:	46bd      	mov	sp, r7
 8005930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005934:	4770      	bx	lr

08005936 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8005936:	b480      	push	{r7}
 8005938:	b087      	sub	sp, #28
 800593a:	af00      	add	r7, sp, #0
 800593c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8005942:	693b      	ldr	r3, [r7, #16]
 8005944:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005948:	689b      	ldr	r3, [r3, #8]
 800594a:	f003 0306 	and.w	r3, r3, #6
 800594e:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	2b00      	cmp	r3, #0
 8005954:	d102      	bne.n	800595c <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8005956:	2300      	movs	r3, #0
 8005958:	75fb      	strb	r3, [r7, #23]
 800595a:	e00a      	b.n	8005972 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	2b02      	cmp	r3, #2
 8005960:	d002      	beq.n	8005968 <USB_GetDevSpeed+0x32>
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	2b06      	cmp	r3, #6
 8005966:	d102      	bne.n	800596e <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8005968:	2302      	movs	r3, #2
 800596a:	75fb      	strb	r3, [r7, #23]
 800596c:	e001      	b.n	8005972 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800596e:	230f      	movs	r3, #15
 8005970:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8005972:	7dfb      	ldrb	r3, [r7, #23]
}
 8005974:	4618      	mov	r0, r3
 8005976:	371c      	adds	r7, #28
 8005978:	46bd      	mov	sp, r7
 800597a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800597e:	4770      	bx	lr

08005980 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005980:	b480      	push	{r7}
 8005982:	b085      	sub	sp, #20
 8005984:	af00      	add	r7, sp, #0
 8005986:	6078      	str	r0, [r7, #4]
 8005988:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800598e:	683b      	ldr	r3, [r7, #0]
 8005990:	781b      	ldrb	r3, [r3, #0]
 8005992:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005994:	683b      	ldr	r3, [r7, #0]
 8005996:	785b      	ldrb	r3, [r3, #1]
 8005998:	2b01      	cmp	r3, #1
 800599a:	d139      	bne.n	8005a10 <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80059a2:	69da      	ldr	r2, [r3, #28]
 80059a4:	683b      	ldr	r3, [r7, #0]
 80059a6:	781b      	ldrb	r3, [r3, #0]
 80059a8:	f003 030f 	and.w	r3, r3, #15
 80059ac:	2101      	movs	r1, #1
 80059ae:	fa01 f303 	lsl.w	r3, r1, r3
 80059b2:	b29b      	uxth	r3, r3
 80059b4:	68f9      	ldr	r1, [r7, #12]
 80059b6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80059ba:	4313      	orrs	r3, r2
 80059bc:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80059be:	68bb      	ldr	r3, [r7, #8]
 80059c0:	015a      	lsls	r2, r3, #5
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	4413      	add	r3, r2
 80059c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d153      	bne.n	8005a7c <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80059d4:	68bb      	ldr	r3, [r7, #8]
 80059d6:	015a      	lsls	r2, r3, #5
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	4413      	add	r3, r2
 80059dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059e0:	681a      	ldr	r2, [r3, #0]
 80059e2:	683b      	ldr	r3, [r7, #0]
 80059e4:	689b      	ldr	r3, [r3, #8]
 80059e6:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80059ea:	683b      	ldr	r3, [r7, #0]
 80059ec:	78db      	ldrb	r3, [r3, #3]
 80059ee:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80059f0:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80059f2:	68bb      	ldr	r3, [r7, #8]
 80059f4:	059b      	lsls	r3, r3, #22
 80059f6:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80059f8:	431a      	orrs	r2, r3
 80059fa:	68bb      	ldr	r3, [r7, #8]
 80059fc:	0159      	lsls	r1, r3, #5
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	440b      	add	r3, r1
 8005a02:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a06:	4619      	mov	r1, r3
 8005a08:	4b20      	ldr	r3, [pc, #128]	; (8005a8c <USB_ActivateEndpoint+0x10c>)
 8005a0a:	4313      	orrs	r3, r2
 8005a0c:	600b      	str	r3, [r1, #0]
 8005a0e:	e035      	b.n	8005a7c <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a16:	69da      	ldr	r2, [r3, #28]
 8005a18:	683b      	ldr	r3, [r7, #0]
 8005a1a:	781b      	ldrb	r3, [r3, #0]
 8005a1c:	f003 030f 	and.w	r3, r3, #15
 8005a20:	2101      	movs	r1, #1
 8005a22:	fa01 f303 	lsl.w	r3, r1, r3
 8005a26:	041b      	lsls	r3, r3, #16
 8005a28:	68f9      	ldr	r1, [r7, #12]
 8005a2a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005a2e:	4313      	orrs	r3, r2
 8005a30:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8005a32:	68bb      	ldr	r3, [r7, #8]
 8005a34:	015a      	lsls	r2, r3, #5
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	4413      	add	r3, r2
 8005a3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d119      	bne.n	8005a7c <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005a48:	68bb      	ldr	r3, [r7, #8]
 8005a4a:	015a      	lsls	r2, r3, #5
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	4413      	add	r3, r2
 8005a50:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a54:	681a      	ldr	r2, [r3, #0]
 8005a56:	683b      	ldr	r3, [r7, #0]
 8005a58:	689b      	ldr	r3, [r3, #8]
 8005a5a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8005a5e:	683b      	ldr	r3, [r7, #0]
 8005a60:	78db      	ldrb	r3, [r3, #3]
 8005a62:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005a64:	430b      	orrs	r3, r1
 8005a66:	431a      	orrs	r2, r3
 8005a68:	68bb      	ldr	r3, [r7, #8]
 8005a6a:	0159      	lsls	r1, r3, #5
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	440b      	add	r3, r1
 8005a70:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a74:	4619      	mov	r1, r3
 8005a76:	4b05      	ldr	r3, [pc, #20]	; (8005a8c <USB_ActivateEndpoint+0x10c>)
 8005a78:	4313      	orrs	r3, r2
 8005a7a:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8005a7c:	2300      	movs	r3, #0
}
 8005a7e:	4618      	mov	r0, r3
 8005a80:	3714      	adds	r7, #20
 8005a82:	46bd      	mov	sp, r7
 8005a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a88:	4770      	bx	lr
 8005a8a:	bf00      	nop
 8005a8c:	10008000 	.word	0x10008000

08005a90 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005a90:	b480      	push	{r7}
 8005a92:	b085      	sub	sp, #20
 8005a94:	af00      	add	r7, sp, #0
 8005a96:	6078      	str	r0, [r7, #4]
 8005a98:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005a9e:	683b      	ldr	r3, [r7, #0]
 8005aa0:	781b      	ldrb	r3, [r3, #0]
 8005aa2:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8005aa4:	683b      	ldr	r3, [r7, #0]
 8005aa6:	785b      	ldrb	r3, [r3, #1]
 8005aa8:	2b01      	cmp	r3, #1
 8005aaa:	d161      	bne.n	8005b70 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005aac:	68bb      	ldr	r3, [r7, #8]
 8005aae:	015a      	lsls	r2, r3, #5
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	4413      	add	r3, r2
 8005ab4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005abe:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005ac2:	d11f      	bne.n	8005b04 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8005ac4:	68bb      	ldr	r3, [r7, #8]
 8005ac6:	015a      	lsls	r2, r3, #5
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	4413      	add	r3, r2
 8005acc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	68ba      	ldr	r2, [r7, #8]
 8005ad4:	0151      	lsls	r1, r2, #5
 8005ad6:	68fa      	ldr	r2, [r7, #12]
 8005ad8:	440a      	add	r2, r1
 8005ada:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005ade:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005ae2:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8005ae4:	68bb      	ldr	r3, [r7, #8]
 8005ae6:	015a      	lsls	r2, r3, #5
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	4413      	add	r3, r2
 8005aec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	68ba      	ldr	r2, [r7, #8]
 8005af4:	0151      	lsls	r1, r2, #5
 8005af6:	68fa      	ldr	r2, [r7, #12]
 8005af8:	440a      	add	r2, r1
 8005afa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005afe:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005b02:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b0a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005b0c:	683b      	ldr	r3, [r7, #0]
 8005b0e:	781b      	ldrb	r3, [r3, #0]
 8005b10:	f003 030f 	and.w	r3, r3, #15
 8005b14:	2101      	movs	r1, #1
 8005b16:	fa01 f303 	lsl.w	r3, r1, r3
 8005b1a:	b29b      	uxth	r3, r3
 8005b1c:	43db      	mvns	r3, r3
 8005b1e:	68f9      	ldr	r1, [r7, #12]
 8005b20:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005b24:	4013      	ands	r3, r2
 8005b26:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b2e:	69da      	ldr	r2, [r3, #28]
 8005b30:	683b      	ldr	r3, [r7, #0]
 8005b32:	781b      	ldrb	r3, [r3, #0]
 8005b34:	f003 030f 	and.w	r3, r3, #15
 8005b38:	2101      	movs	r1, #1
 8005b3a:	fa01 f303 	lsl.w	r3, r1, r3
 8005b3e:	b29b      	uxth	r3, r3
 8005b40:	43db      	mvns	r3, r3
 8005b42:	68f9      	ldr	r1, [r7, #12]
 8005b44:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005b48:	4013      	ands	r3, r2
 8005b4a:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8005b4c:	68bb      	ldr	r3, [r7, #8]
 8005b4e:	015a      	lsls	r2, r3, #5
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	4413      	add	r3, r2
 8005b54:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b58:	681a      	ldr	r2, [r3, #0]
 8005b5a:	68bb      	ldr	r3, [r7, #8]
 8005b5c:	0159      	lsls	r1, r3, #5
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	440b      	add	r3, r1
 8005b62:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b66:	4619      	mov	r1, r3
 8005b68:	4b35      	ldr	r3, [pc, #212]	; (8005c40 <USB_DeactivateEndpoint+0x1b0>)
 8005b6a:	4013      	ands	r3, r2
 8005b6c:	600b      	str	r3, [r1, #0]
 8005b6e:	e060      	b.n	8005c32 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005b70:	68bb      	ldr	r3, [r7, #8]
 8005b72:	015a      	lsls	r2, r3, #5
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	4413      	add	r3, r2
 8005b78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005b82:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005b86:	d11f      	bne.n	8005bc8 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005b88:	68bb      	ldr	r3, [r7, #8]
 8005b8a:	015a      	lsls	r2, r3, #5
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	4413      	add	r3, r2
 8005b90:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	68ba      	ldr	r2, [r7, #8]
 8005b98:	0151      	lsls	r1, r2, #5
 8005b9a:	68fa      	ldr	r2, [r7, #12]
 8005b9c:	440a      	add	r2, r1
 8005b9e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005ba2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005ba6:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8005ba8:	68bb      	ldr	r3, [r7, #8]
 8005baa:	015a      	lsls	r2, r3, #5
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	4413      	add	r3, r2
 8005bb0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	68ba      	ldr	r2, [r7, #8]
 8005bb8:	0151      	lsls	r1, r2, #5
 8005bba:	68fa      	ldr	r2, [r7, #12]
 8005bbc:	440a      	add	r2, r1
 8005bbe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005bc2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005bc6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005bce:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005bd0:	683b      	ldr	r3, [r7, #0]
 8005bd2:	781b      	ldrb	r3, [r3, #0]
 8005bd4:	f003 030f 	and.w	r3, r3, #15
 8005bd8:	2101      	movs	r1, #1
 8005bda:	fa01 f303 	lsl.w	r3, r1, r3
 8005bde:	041b      	lsls	r3, r3, #16
 8005be0:	43db      	mvns	r3, r3
 8005be2:	68f9      	ldr	r1, [r7, #12]
 8005be4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005be8:	4013      	ands	r3, r2
 8005bea:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005bf2:	69da      	ldr	r2, [r3, #28]
 8005bf4:	683b      	ldr	r3, [r7, #0]
 8005bf6:	781b      	ldrb	r3, [r3, #0]
 8005bf8:	f003 030f 	and.w	r3, r3, #15
 8005bfc:	2101      	movs	r1, #1
 8005bfe:	fa01 f303 	lsl.w	r3, r1, r3
 8005c02:	041b      	lsls	r3, r3, #16
 8005c04:	43db      	mvns	r3, r3
 8005c06:	68f9      	ldr	r1, [r7, #12]
 8005c08:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005c0c:	4013      	ands	r3, r2
 8005c0e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8005c10:	68bb      	ldr	r3, [r7, #8]
 8005c12:	015a      	lsls	r2, r3, #5
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	4413      	add	r3, r2
 8005c18:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c1c:	681a      	ldr	r2, [r3, #0]
 8005c1e:	68bb      	ldr	r3, [r7, #8]
 8005c20:	0159      	lsls	r1, r3, #5
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	440b      	add	r3, r1
 8005c26:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c2a:	4619      	mov	r1, r3
 8005c2c:	4b05      	ldr	r3, [pc, #20]	; (8005c44 <USB_DeactivateEndpoint+0x1b4>)
 8005c2e:	4013      	ands	r3, r2
 8005c30:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8005c32:	2300      	movs	r3, #0
}
 8005c34:	4618      	mov	r0, r3
 8005c36:	3714      	adds	r7, #20
 8005c38:	46bd      	mov	sp, r7
 8005c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c3e:	4770      	bx	lr
 8005c40:	ec337800 	.word	0xec337800
 8005c44:	eff37800 	.word	0xeff37800

08005c48 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005c48:	b580      	push	{r7, lr}
 8005c4a:	b08a      	sub	sp, #40	; 0x28
 8005c4c:	af02      	add	r7, sp, #8
 8005c4e:	60f8      	str	r0, [r7, #12]
 8005c50:	60b9      	str	r1, [r7, #8]
 8005c52:	4613      	mov	r3, r2
 8005c54:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8005c5a:	68bb      	ldr	r3, [r7, #8]
 8005c5c:	781b      	ldrb	r3, [r3, #0]
 8005c5e:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005c60:	68bb      	ldr	r3, [r7, #8]
 8005c62:	785b      	ldrb	r3, [r3, #1]
 8005c64:	2b01      	cmp	r3, #1
 8005c66:	f040 8163 	bne.w	8005f30 <USB_EPStartXfer+0x2e8>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005c6a:	68bb      	ldr	r3, [r7, #8]
 8005c6c:	695b      	ldr	r3, [r3, #20]
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d132      	bne.n	8005cd8 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005c72:	69bb      	ldr	r3, [r7, #24]
 8005c74:	015a      	lsls	r2, r3, #5
 8005c76:	69fb      	ldr	r3, [r7, #28]
 8005c78:	4413      	add	r3, r2
 8005c7a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c7e:	691a      	ldr	r2, [r3, #16]
 8005c80:	69bb      	ldr	r3, [r7, #24]
 8005c82:	0159      	lsls	r1, r3, #5
 8005c84:	69fb      	ldr	r3, [r7, #28]
 8005c86:	440b      	add	r3, r1
 8005c88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c8c:	4619      	mov	r1, r3
 8005c8e:	4ba5      	ldr	r3, [pc, #660]	; (8005f24 <USB_EPStartXfer+0x2dc>)
 8005c90:	4013      	ands	r3, r2
 8005c92:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005c94:	69bb      	ldr	r3, [r7, #24]
 8005c96:	015a      	lsls	r2, r3, #5
 8005c98:	69fb      	ldr	r3, [r7, #28]
 8005c9a:	4413      	add	r3, r2
 8005c9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ca0:	691b      	ldr	r3, [r3, #16]
 8005ca2:	69ba      	ldr	r2, [r7, #24]
 8005ca4:	0151      	lsls	r1, r2, #5
 8005ca6:	69fa      	ldr	r2, [r7, #28]
 8005ca8:	440a      	add	r2, r1
 8005caa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005cae:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005cb2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005cb4:	69bb      	ldr	r3, [r7, #24]
 8005cb6:	015a      	lsls	r2, r3, #5
 8005cb8:	69fb      	ldr	r3, [r7, #28]
 8005cba:	4413      	add	r3, r2
 8005cbc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005cc0:	691a      	ldr	r2, [r3, #16]
 8005cc2:	69bb      	ldr	r3, [r7, #24]
 8005cc4:	0159      	lsls	r1, r3, #5
 8005cc6:	69fb      	ldr	r3, [r7, #28]
 8005cc8:	440b      	add	r3, r1
 8005cca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005cce:	4619      	mov	r1, r3
 8005cd0:	4b95      	ldr	r3, [pc, #596]	; (8005f28 <USB_EPStartXfer+0x2e0>)
 8005cd2:	4013      	ands	r3, r2
 8005cd4:	610b      	str	r3, [r1, #16]
 8005cd6:	e074      	b.n	8005dc2 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005cd8:	69bb      	ldr	r3, [r7, #24]
 8005cda:	015a      	lsls	r2, r3, #5
 8005cdc:	69fb      	ldr	r3, [r7, #28]
 8005cde:	4413      	add	r3, r2
 8005ce0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ce4:	691a      	ldr	r2, [r3, #16]
 8005ce6:	69bb      	ldr	r3, [r7, #24]
 8005ce8:	0159      	lsls	r1, r3, #5
 8005cea:	69fb      	ldr	r3, [r7, #28]
 8005cec:	440b      	add	r3, r1
 8005cee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005cf2:	4619      	mov	r1, r3
 8005cf4:	4b8c      	ldr	r3, [pc, #560]	; (8005f28 <USB_EPStartXfer+0x2e0>)
 8005cf6:	4013      	ands	r3, r2
 8005cf8:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005cfa:	69bb      	ldr	r3, [r7, #24]
 8005cfc:	015a      	lsls	r2, r3, #5
 8005cfe:	69fb      	ldr	r3, [r7, #28]
 8005d00:	4413      	add	r3, r2
 8005d02:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d06:	691a      	ldr	r2, [r3, #16]
 8005d08:	69bb      	ldr	r3, [r7, #24]
 8005d0a:	0159      	lsls	r1, r3, #5
 8005d0c:	69fb      	ldr	r3, [r7, #28]
 8005d0e:	440b      	add	r3, r1
 8005d10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d14:	4619      	mov	r1, r3
 8005d16:	4b83      	ldr	r3, [pc, #524]	; (8005f24 <USB_EPStartXfer+0x2dc>)
 8005d18:	4013      	ands	r3, r2
 8005d1a:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8005d1c:	69bb      	ldr	r3, [r7, #24]
 8005d1e:	015a      	lsls	r2, r3, #5
 8005d20:	69fb      	ldr	r3, [r7, #28]
 8005d22:	4413      	add	r3, r2
 8005d24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d28:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8005d2a:	68bb      	ldr	r3, [r7, #8]
 8005d2c:	6959      	ldr	r1, [r3, #20]
 8005d2e:	68bb      	ldr	r3, [r7, #8]
 8005d30:	689b      	ldr	r3, [r3, #8]
 8005d32:	440b      	add	r3, r1
 8005d34:	1e59      	subs	r1, r3, #1
 8005d36:	68bb      	ldr	r3, [r7, #8]
 8005d38:	689b      	ldr	r3, [r3, #8]
 8005d3a:	fbb1 f3f3 	udiv	r3, r1, r3
 8005d3e:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8005d40:	4b7a      	ldr	r3, [pc, #488]	; (8005f2c <USB_EPStartXfer+0x2e4>)
 8005d42:	400b      	ands	r3, r1
 8005d44:	69b9      	ldr	r1, [r7, #24]
 8005d46:	0148      	lsls	r0, r1, #5
 8005d48:	69f9      	ldr	r1, [r7, #28]
 8005d4a:	4401      	add	r1, r0
 8005d4c:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005d50:	4313      	orrs	r3, r2
 8005d52:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005d54:	69bb      	ldr	r3, [r7, #24]
 8005d56:	015a      	lsls	r2, r3, #5
 8005d58:	69fb      	ldr	r3, [r7, #28]
 8005d5a:	4413      	add	r3, r2
 8005d5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d60:	691a      	ldr	r2, [r3, #16]
 8005d62:	68bb      	ldr	r3, [r7, #8]
 8005d64:	695b      	ldr	r3, [r3, #20]
 8005d66:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005d6a:	69b9      	ldr	r1, [r7, #24]
 8005d6c:	0148      	lsls	r0, r1, #5
 8005d6e:	69f9      	ldr	r1, [r7, #28]
 8005d70:	4401      	add	r1, r0
 8005d72:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005d76:	4313      	orrs	r3, r2
 8005d78:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8005d7a:	68bb      	ldr	r3, [r7, #8]
 8005d7c:	78db      	ldrb	r3, [r3, #3]
 8005d7e:	2b01      	cmp	r3, #1
 8005d80:	d11f      	bne.n	8005dc2 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8005d82:	69bb      	ldr	r3, [r7, #24]
 8005d84:	015a      	lsls	r2, r3, #5
 8005d86:	69fb      	ldr	r3, [r7, #28]
 8005d88:	4413      	add	r3, r2
 8005d8a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d8e:	691b      	ldr	r3, [r3, #16]
 8005d90:	69ba      	ldr	r2, [r7, #24]
 8005d92:	0151      	lsls	r1, r2, #5
 8005d94:	69fa      	ldr	r2, [r7, #28]
 8005d96:	440a      	add	r2, r1
 8005d98:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005d9c:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8005da0:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8005da2:	69bb      	ldr	r3, [r7, #24]
 8005da4:	015a      	lsls	r2, r3, #5
 8005da6:	69fb      	ldr	r3, [r7, #28]
 8005da8:	4413      	add	r3, r2
 8005daa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005dae:	691b      	ldr	r3, [r3, #16]
 8005db0:	69ba      	ldr	r2, [r7, #24]
 8005db2:	0151      	lsls	r1, r2, #5
 8005db4:	69fa      	ldr	r2, [r7, #28]
 8005db6:	440a      	add	r2, r1
 8005db8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005dbc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005dc0:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8005dc2:	79fb      	ldrb	r3, [r7, #7]
 8005dc4:	2b01      	cmp	r3, #1
 8005dc6:	d14b      	bne.n	8005e60 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005dc8:	68bb      	ldr	r3, [r7, #8]
 8005dca:	691b      	ldr	r3, [r3, #16]
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d009      	beq.n	8005de4 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005dd0:	69bb      	ldr	r3, [r7, #24]
 8005dd2:	015a      	lsls	r2, r3, #5
 8005dd4:	69fb      	ldr	r3, [r7, #28]
 8005dd6:	4413      	add	r3, r2
 8005dd8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ddc:	461a      	mov	r2, r3
 8005dde:	68bb      	ldr	r3, [r7, #8]
 8005de0:	691b      	ldr	r3, [r3, #16]
 8005de2:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8005de4:	68bb      	ldr	r3, [r7, #8]
 8005de6:	78db      	ldrb	r3, [r3, #3]
 8005de8:	2b01      	cmp	r3, #1
 8005dea:	d128      	bne.n	8005e3e <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005dec:	69fb      	ldr	r3, [r7, #28]
 8005dee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005df2:	689b      	ldr	r3, [r3, #8]
 8005df4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d110      	bne.n	8005e1e <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005dfc:	69bb      	ldr	r3, [r7, #24]
 8005dfe:	015a      	lsls	r2, r3, #5
 8005e00:	69fb      	ldr	r3, [r7, #28]
 8005e02:	4413      	add	r3, r2
 8005e04:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	69ba      	ldr	r2, [r7, #24]
 8005e0c:	0151      	lsls	r1, r2, #5
 8005e0e:	69fa      	ldr	r2, [r7, #28]
 8005e10:	440a      	add	r2, r1
 8005e12:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005e16:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005e1a:	6013      	str	r3, [r2, #0]
 8005e1c:	e00f      	b.n	8005e3e <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005e1e:	69bb      	ldr	r3, [r7, #24]
 8005e20:	015a      	lsls	r2, r3, #5
 8005e22:	69fb      	ldr	r3, [r7, #28]
 8005e24:	4413      	add	r3, r2
 8005e26:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	69ba      	ldr	r2, [r7, #24]
 8005e2e:	0151      	lsls	r1, r2, #5
 8005e30:	69fa      	ldr	r2, [r7, #28]
 8005e32:	440a      	add	r2, r1
 8005e34:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005e38:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005e3c:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005e3e:	69bb      	ldr	r3, [r7, #24]
 8005e40:	015a      	lsls	r2, r3, #5
 8005e42:	69fb      	ldr	r3, [r7, #28]
 8005e44:	4413      	add	r3, r2
 8005e46:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	69ba      	ldr	r2, [r7, #24]
 8005e4e:	0151      	lsls	r1, r2, #5
 8005e50:	69fa      	ldr	r2, [r7, #28]
 8005e52:	440a      	add	r2, r1
 8005e54:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005e58:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005e5c:	6013      	str	r3, [r2, #0]
 8005e5e:	e133      	b.n	80060c8 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005e60:	69bb      	ldr	r3, [r7, #24]
 8005e62:	015a      	lsls	r2, r3, #5
 8005e64:	69fb      	ldr	r3, [r7, #28]
 8005e66:	4413      	add	r3, r2
 8005e68:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	69ba      	ldr	r2, [r7, #24]
 8005e70:	0151      	lsls	r1, r2, #5
 8005e72:	69fa      	ldr	r2, [r7, #28]
 8005e74:	440a      	add	r2, r1
 8005e76:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005e7a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005e7e:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005e80:	68bb      	ldr	r3, [r7, #8]
 8005e82:	78db      	ldrb	r3, [r3, #3]
 8005e84:	2b01      	cmp	r3, #1
 8005e86:	d015      	beq.n	8005eb4 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8005e88:	68bb      	ldr	r3, [r7, #8]
 8005e8a:	695b      	ldr	r3, [r3, #20]
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	f000 811b 	beq.w	80060c8 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005e92:	69fb      	ldr	r3, [r7, #28]
 8005e94:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e98:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005e9a:	68bb      	ldr	r3, [r7, #8]
 8005e9c:	781b      	ldrb	r3, [r3, #0]
 8005e9e:	f003 030f 	and.w	r3, r3, #15
 8005ea2:	2101      	movs	r1, #1
 8005ea4:	fa01 f303 	lsl.w	r3, r1, r3
 8005ea8:	69f9      	ldr	r1, [r7, #28]
 8005eaa:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005eae:	4313      	orrs	r3, r2
 8005eb0:	634b      	str	r3, [r1, #52]	; 0x34
 8005eb2:	e109      	b.n	80060c8 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005eb4:	69fb      	ldr	r3, [r7, #28]
 8005eb6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005eba:	689b      	ldr	r3, [r3, #8]
 8005ebc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d110      	bne.n	8005ee6 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005ec4:	69bb      	ldr	r3, [r7, #24]
 8005ec6:	015a      	lsls	r2, r3, #5
 8005ec8:	69fb      	ldr	r3, [r7, #28]
 8005eca:	4413      	add	r3, r2
 8005ecc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	69ba      	ldr	r2, [r7, #24]
 8005ed4:	0151      	lsls	r1, r2, #5
 8005ed6:	69fa      	ldr	r2, [r7, #28]
 8005ed8:	440a      	add	r2, r1
 8005eda:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005ede:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005ee2:	6013      	str	r3, [r2, #0]
 8005ee4:	e00f      	b.n	8005f06 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005ee6:	69bb      	ldr	r3, [r7, #24]
 8005ee8:	015a      	lsls	r2, r3, #5
 8005eea:	69fb      	ldr	r3, [r7, #28]
 8005eec:	4413      	add	r3, r2
 8005eee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	69ba      	ldr	r2, [r7, #24]
 8005ef6:	0151      	lsls	r1, r2, #5
 8005ef8:	69fa      	ldr	r2, [r7, #28]
 8005efa:	440a      	add	r2, r1
 8005efc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005f00:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005f04:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8005f06:	68bb      	ldr	r3, [r7, #8]
 8005f08:	68d9      	ldr	r1, [r3, #12]
 8005f0a:	68bb      	ldr	r3, [r7, #8]
 8005f0c:	781a      	ldrb	r2, [r3, #0]
 8005f0e:	68bb      	ldr	r3, [r7, #8]
 8005f10:	695b      	ldr	r3, [r3, #20]
 8005f12:	b298      	uxth	r0, r3
 8005f14:	79fb      	ldrb	r3, [r7, #7]
 8005f16:	9300      	str	r3, [sp, #0]
 8005f18:	4603      	mov	r3, r0
 8005f1a:	68f8      	ldr	r0, [r7, #12]
 8005f1c:	f000 fa38 	bl	8006390 <USB_WritePacket>
 8005f20:	e0d2      	b.n	80060c8 <USB_EPStartXfer+0x480>
 8005f22:	bf00      	nop
 8005f24:	e007ffff 	.word	0xe007ffff
 8005f28:	fff80000 	.word	0xfff80000
 8005f2c:	1ff80000 	.word	0x1ff80000
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005f30:	69bb      	ldr	r3, [r7, #24]
 8005f32:	015a      	lsls	r2, r3, #5
 8005f34:	69fb      	ldr	r3, [r7, #28]
 8005f36:	4413      	add	r3, r2
 8005f38:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f3c:	691a      	ldr	r2, [r3, #16]
 8005f3e:	69bb      	ldr	r3, [r7, #24]
 8005f40:	0159      	lsls	r1, r3, #5
 8005f42:	69fb      	ldr	r3, [r7, #28]
 8005f44:	440b      	add	r3, r1
 8005f46:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f4a:	4619      	mov	r1, r3
 8005f4c:	4b61      	ldr	r3, [pc, #388]	; (80060d4 <USB_EPStartXfer+0x48c>)
 8005f4e:	4013      	ands	r3, r2
 8005f50:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005f52:	69bb      	ldr	r3, [r7, #24]
 8005f54:	015a      	lsls	r2, r3, #5
 8005f56:	69fb      	ldr	r3, [r7, #28]
 8005f58:	4413      	add	r3, r2
 8005f5a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f5e:	691a      	ldr	r2, [r3, #16]
 8005f60:	69bb      	ldr	r3, [r7, #24]
 8005f62:	0159      	lsls	r1, r3, #5
 8005f64:	69fb      	ldr	r3, [r7, #28]
 8005f66:	440b      	add	r3, r1
 8005f68:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f6c:	4619      	mov	r1, r3
 8005f6e:	4b5a      	ldr	r3, [pc, #360]	; (80060d8 <USB_EPStartXfer+0x490>)
 8005f70:	4013      	ands	r3, r2
 8005f72:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len == 0U)
 8005f74:	68bb      	ldr	r3, [r7, #8]
 8005f76:	695b      	ldr	r3, [r3, #20]
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d123      	bne.n	8005fc4 <USB_EPStartXfer+0x37c>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8005f7c:	69bb      	ldr	r3, [r7, #24]
 8005f7e:	015a      	lsls	r2, r3, #5
 8005f80:	69fb      	ldr	r3, [r7, #28]
 8005f82:	4413      	add	r3, r2
 8005f84:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f88:	691a      	ldr	r2, [r3, #16]
 8005f8a:	68bb      	ldr	r3, [r7, #8]
 8005f8c:	689b      	ldr	r3, [r3, #8]
 8005f8e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005f92:	69b9      	ldr	r1, [r7, #24]
 8005f94:	0148      	lsls	r0, r1, #5
 8005f96:	69f9      	ldr	r1, [r7, #28]
 8005f98:	4401      	add	r1, r0
 8005f9a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005f9e:	4313      	orrs	r3, r2
 8005fa0:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005fa2:	69bb      	ldr	r3, [r7, #24]
 8005fa4:	015a      	lsls	r2, r3, #5
 8005fa6:	69fb      	ldr	r3, [r7, #28]
 8005fa8:	4413      	add	r3, r2
 8005faa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005fae:	691b      	ldr	r3, [r3, #16]
 8005fb0:	69ba      	ldr	r2, [r7, #24]
 8005fb2:	0151      	lsls	r1, r2, #5
 8005fb4:	69fa      	ldr	r2, [r7, #28]
 8005fb6:	440a      	add	r2, r1
 8005fb8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005fbc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005fc0:	6113      	str	r3, [r2, #16]
 8005fc2:	e033      	b.n	800602c <USB_EPStartXfer+0x3e4>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8005fc4:	68bb      	ldr	r3, [r7, #8]
 8005fc6:	695a      	ldr	r2, [r3, #20]
 8005fc8:	68bb      	ldr	r3, [r7, #8]
 8005fca:	689b      	ldr	r3, [r3, #8]
 8005fcc:	4413      	add	r3, r2
 8005fce:	1e5a      	subs	r2, r3, #1
 8005fd0:	68bb      	ldr	r3, [r7, #8]
 8005fd2:	689b      	ldr	r3, [r3, #8]
 8005fd4:	fbb2 f3f3 	udiv	r3, r2, r3
 8005fd8:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8005fda:	69bb      	ldr	r3, [r7, #24]
 8005fdc:	015a      	lsls	r2, r3, #5
 8005fde:	69fb      	ldr	r3, [r7, #28]
 8005fe0:	4413      	add	r3, r2
 8005fe2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005fe6:	691a      	ldr	r2, [r3, #16]
 8005fe8:	8afb      	ldrh	r3, [r7, #22]
 8005fea:	04d9      	lsls	r1, r3, #19
 8005fec:	4b3b      	ldr	r3, [pc, #236]	; (80060dc <USB_EPStartXfer+0x494>)
 8005fee:	400b      	ands	r3, r1
 8005ff0:	69b9      	ldr	r1, [r7, #24]
 8005ff2:	0148      	lsls	r0, r1, #5
 8005ff4:	69f9      	ldr	r1, [r7, #28]
 8005ff6:	4401      	add	r1, r0
 8005ff8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005ffc:	4313      	orrs	r3, r2
 8005ffe:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8006000:	69bb      	ldr	r3, [r7, #24]
 8006002:	015a      	lsls	r2, r3, #5
 8006004:	69fb      	ldr	r3, [r7, #28]
 8006006:	4413      	add	r3, r2
 8006008:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800600c:	691a      	ldr	r2, [r3, #16]
 800600e:	68bb      	ldr	r3, [r7, #8]
 8006010:	689b      	ldr	r3, [r3, #8]
 8006012:	8af9      	ldrh	r1, [r7, #22]
 8006014:	fb01 f303 	mul.w	r3, r1, r3
 8006018:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800601c:	69b9      	ldr	r1, [r7, #24]
 800601e:	0148      	lsls	r0, r1, #5
 8006020:	69f9      	ldr	r1, [r7, #28]
 8006022:	4401      	add	r1, r0
 8006024:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006028:	4313      	orrs	r3, r2
 800602a:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800602c:	79fb      	ldrb	r3, [r7, #7]
 800602e:	2b01      	cmp	r3, #1
 8006030:	d10d      	bne.n	800604e <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8006032:	68bb      	ldr	r3, [r7, #8]
 8006034:	68db      	ldr	r3, [r3, #12]
 8006036:	2b00      	cmp	r3, #0
 8006038:	d009      	beq.n	800604e <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800603a:	68bb      	ldr	r3, [r7, #8]
 800603c:	68d9      	ldr	r1, [r3, #12]
 800603e:	69bb      	ldr	r3, [r7, #24]
 8006040:	015a      	lsls	r2, r3, #5
 8006042:	69fb      	ldr	r3, [r7, #28]
 8006044:	4413      	add	r3, r2
 8006046:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800604a:	460a      	mov	r2, r1
 800604c:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800604e:	68bb      	ldr	r3, [r7, #8]
 8006050:	78db      	ldrb	r3, [r3, #3]
 8006052:	2b01      	cmp	r3, #1
 8006054:	d128      	bne.n	80060a8 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006056:	69fb      	ldr	r3, [r7, #28]
 8006058:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800605c:	689b      	ldr	r3, [r3, #8]
 800605e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006062:	2b00      	cmp	r3, #0
 8006064:	d110      	bne.n	8006088 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8006066:	69bb      	ldr	r3, [r7, #24]
 8006068:	015a      	lsls	r2, r3, #5
 800606a:	69fb      	ldr	r3, [r7, #28]
 800606c:	4413      	add	r3, r2
 800606e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	69ba      	ldr	r2, [r7, #24]
 8006076:	0151      	lsls	r1, r2, #5
 8006078:	69fa      	ldr	r2, [r7, #28]
 800607a:	440a      	add	r2, r1
 800607c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006080:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006084:	6013      	str	r3, [r2, #0]
 8006086:	e00f      	b.n	80060a8 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8006088:	69bb      	ldr	r3, [r7, #24]
 800608a:	015a      	lsls	r2, r3, #5
 800608c:	69fb      	ldr	r3, [r7, #28]
 800608e:	4413      	add	r3, r2
 8006090:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	69ba      	ldr	r2, [r7, #24]
 8006098:	0151      	lsls	r1, r2, #5
 800609a:	69fa      	ldr	r2, [r7, #28]
 800609c:	440a      	add	r2, r1
 800609e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80060a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80060a6:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80060a8:	69bb      	ldr	r3, [r7, #24]
 80060aa:	015a      	lsls	r2, r3, #5
 80060ac:	69fb      	ldr	r3, [r7, #28]
 80060ae:	4413      	add	r3, r2
 80060b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	69ba      	ldr	r2, [r7, #24]
 80060b8:	0151      	lsls	r1, r2, #5
 80060ba:	69fa      	ldr	r2, [r7, #28]
 80060bc:	440a      	add	r2, r1
 80060be:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80060c2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80060c6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80060c8:	2300      	movs	r3, #0
}
 80060ca:	4618      	mov	r0, r3
 80060cc:	3720      	adds	r7, #32
 80060ce:	46bd      	mov	sp, r7
 80060d0:	bd80      	pop	{r7, pc}
 80060d2:	bf00      	nop
 80060d4:	fff80000 	.word	0xfff80000
 80060d8:	e007ffff 	.word	0xe007ffff
 80060dc:	1ff80000 	.word	0x1ff80000

080060e0 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80060e0:	b480      	push	{r7}
 80060e2:	b087      	sub	sp, #28
 80060e4:	af00      	add	r7, sp, #0
 80060e6:	60f8      	str	r0, [r7, #12]
 80060e8:	60b9      	str	r1, [r7, #8]
 80060ea:	4613      	mov	r3, r2
 80060ec:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 80060f2:	68bb      	ldr	r3, [r7, #8]
 80060f4:	781b      	ldrb	r3, [r3, #0]
 80060f6:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80060f8:	68bb      	ldr	r3, [r7, #8]
 80060fa:	785b      	ldrb	r3, [r3, #1]
 80060fc:	2b01      	cmp	r3, #1
 80060fe:	f040 80cd 	bne.w	800629c <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8006102:	68bb      	ldr	r3, [r7, #8]
 8006104:	695b      	ldr	r3, [r3, #20]
 8006106:	2b00      	cmp	r3, #0
 8006108:	d132      	bne.n	8006170 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800610a:	693b      	ldr	r3, [r7, #16]
 800610c:	015a      	lsls	r2, r3, #5
 800610e:	697b      	ldr	r3, [r7, #20]
 8006110:	4413      	add	r3, r2
 8006112:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006116:	691a      	ldr	r2, [r3, #16]
 8006118:	693b      	ldr	r3, [r7, #16]
 800611a:	0159      	lsls	r1, r3, #5
 800611c:	697b      	ldr	r3, [r7, #20]
 800611e:	440b      	add	r3, r1
 8006120:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006124:	4619      	mov	r1, r3
 8006126:	4b98      	ldr	r3, [pc, #608]	; (8006388 <USB_EP0StartXfer+0x2a8>)
 8006128:	4013      	ands	r3, r2
 800612a:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800612c:	693b      	ldr	r3, [r7, #16]
 800612e:	015a      	lsls	r2, r3, #5
 8006130:	697b      	ldr	r3, [r7, #20]
 8006132:	4413      	add	r3, r2
 8006134:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006138:	691b      	ldr	r3, [r3, #16]
 800613a:	693a      	ldr	r2, [r7, #16]
 800613c:	0151      	lsls	r1, r2, #5
 800613e:	697a      	ldr	r2, [r7, #20]
 8006140:	440a      	add	r2, r1
 8006142:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006146:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800614a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800614c:	693b      	ldr	r3, [r7, #16]
 800614e:	015a      	lsls	r2, r3, #5
 8006150:	697b      	ldr	r3, [r7, #20]
 8006152:	4413      	add	r3, r2
 8006154:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006158:	691a      	ldr	r2, [r3, #16]
 800615a:	693b      	ldr	r3, [r7, #16]
 800615c:	0159      	lsls	r1, r3, #5
 800615e:	697b      	ldr	r3, [r7, #20]
 8006160:	440b      	add	r3, r1
 8006162:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006166:	4619      	mov	r1, r3
 8006168:	4b88      	ldr	r3, [pc, #544]	; (800638c <USB_EP0StartXfer+0x2ac>)
 800616a:	4013      	ands	r3, r2
 800616c:	610b      	str	r3, [r1, #16]
 800616e:	e04e      	b.n	800620e <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006170:	693b      	ldr	r3, [r7, #16]
 8006172:	015a      	lsls	r2, r3, #5
 8006174:	697b      	ldr	r3, [r7, #20]
 8006176:	4413      	add	r3, r2
 8006178:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800617c:	691a      	ldr	r2, [r3, #16]
 800617e:	693b      	ldr	r3, [r7, #16]
 8006180:	0159      	lsls	r1, r3, #5
 8006182:	697b      	ldr	r3, [r7, #20]
 8006184:	440b      	add	r3, r1
 8006186:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800618a:	4619      	mov	r1, r3
 800618c:	4b7f      	ldr	r3, [pc, #508]	; (800638c <USB_EP0StartXfer+0x2ac>)
 800618e:	4013      	ands	r3, r2
 8006190:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006192:	693b      	ldr	r3, [r7, #16]
 8006194:	015a      	lsls	r2, r3, #5
 8006196:	697b      	ldr	r3, [r7, #20]
 8006198:	4413      	add	r3, r2
 800619a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800619e:	691a      	ldr	r2, [r3, #16]
 80061a0:	693b      	ldr	r3, [r7, #16]
 80061a2:	0159      	lsls	r1, r3, #5
 80061a4:	697b      	ldr	r3, [r7, #20]
 80061a6:	440b      	add	r3, r1
 80061a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80061ac:	4619      	mov	r1, r3
 80061ae:	4b76      	ldr	r3, [pc, #472]	; (8006388 <USB_EP0StartXfer+0x2a8>)
 80061b0:	4013      	ands	r3, r2
 80061b2:	610b      	str	r3, [r1, #16]

      if (ep->xfer_len > ep->maxpacket)
 80061b4:	68bb      	ldr	r3, [r7, #8]
 80061b6:	695a      	ldr	r2, [r3, #20]
 80061b8:	68bb      	ldr	r3, [r7, #8]
 80061ba:	689b      	ldr	r3, [r3, #8]
 80061bc:	429a      	cmp	r2, r3
 80061be:	d903      	bls.n	80061c8 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 80061c0:	68bb      	ldr	r3, [r7, #8]
 80061c2:	689a      	ldr	r2, [r3, #8]
 80061c4:	68bb      	ldr	r3, [r7, #8]
 80061c6:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80061c8:	693b      	ldr	r3, [r7, #16]
 80061ca:	015a      	lsls	r2, r3, #5
 80061cc:	697b      	ldr	r3, [r7, #20]
 80061ce:	4413      	add	r3, r2
 80061d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80061d4:	691b      	ldr	r3, [r3, #16]
 80061d6:	693a      	ldr	r2, [r7, #16]
 80061d8:	0151      	lsls	r1, r2, #5
 80061da:	697a      	ldr	r2, [r7, #20]
 80061dc:	440a      	add	r2, r1
 80061de:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80061e2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80061e6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80061e8:	693b      	ldr	r3, [r7, #16]
 80061ea:	015a      	lsls	r2, r3, #5
 80061ec:	697b      	ldr	r3, [r7, #20]
 80061ee:	4413      	add	r3, r2
 80061f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80061f4:	691a      	ldr	r2, [r3, #16]
 80061f6:	68bb      	ldr	r3, [r7, #8]
 80061f8:	695b      	ldr	r3, [r3, #20]
 80061fa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80061fe:	6939      	ldr	r1, [r7, #16]
 8006200:	0148      	lsls	r0, r1, #5
 8006202:	6979      	ldr	r1, [r7, #20]
 8006204:	4401      	add	r1, r0
 8006206:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800620a:	4313      	orrs	r3, r2
 800620c:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800620e:	79fb      	ldrb	r3, [r7, #7]
 8006210:	2b01      	cmp	r3, #1
 8006212:	d11e      	bne.n	8006252 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8006214:	68bb      	ldr	r3, [r7, #8]
 8006216:	691b      	ldr	r3, [r3, #16]
 8006218:	2b00      	cmp	r3, #0
 800621a:	d009      	beq.n	8006230 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800621c:	693b      	ldr	r3, [r7, #16]
 800621e:	015a      	lsls	r2, r3, #5
 8006220:	697b      	ldr	r3, [r7, #20]
 8006222:	4413      	add	r3, r2
 8006224:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006228:	461a      	mov	r2, r3
 800622a:	68bb      	ldr	r3, [r7, #8]
 800622c:	691b      	ldr	r3, [r3, #16]
 800622e:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006230:	693b      	ldr	r3, [r7, #16]
 8006232:	015a      	lsls	r2, r3, #5
 8006234:	697b      	ldr	r3, [r7, #20]
 8006236:	4413      	add	r3, r2
 8006238:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	693a      	ldr	r2, [r7, #16]
 8006240:	0151      	lsls	r1, r2, #5
 8006242:	697a      	ldr	r2, [r7, #20]
 8006244:	440a      	add	r2, r1
 8006246:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800624a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800624e:	6013      	str	r3, [r2, #0]
 8006250:	e092      	b.n	8006378 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006252:	693b      	ldr	r3, [r7, #16]
 8006254:	015a      	lsls	r2, r3, #5
 8006256:	697b      	ldr	r3, [r7, #20]
 8006258:	4413      	add	r3, r2
 800625a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	693a      	ldr	r2, [r7, #16]
 8006262:	0151      	lsls	r1, r2, #5
 8006264:	697a      	ldr	r2, [r7, #20]
 8006266:	440a      	add	r2, r1
 8006268:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800626c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006270:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8006272:	68bb      	ldr	r3, [r7, #8]
 8006274:	695b      	ldr	r3, [r3, #20]
 8006276:	2b00      	cmp	r3, #0
 8006278:	d07e      	beq.n	8006378 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800627a:	697b      	ldr	r3, [r7, #20]
 800627c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006280:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006282:	68bb      	ldr	r3, [r7, #8]
 8006284:	781b      	ldrb	r3, [r3, #0]
 8006286:	f003 030f 	and.w	r3, r3, #15
 800628a:	2101      	movs	r1, #1
 800628c:	fa01 f303 	lsl.w	r3, r1, r3
 8006290:	6979      	ldr	r1, [r7, #20]
 8006292:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006296:	4313      	orrs	r3, r2
 8006298:	634b      	str	r3, [r1, #52]	; 0x34
 800629a:	e06d      	b.n	8006378 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800629c:	693b      	ldr	r3, [r7, #16]
 800629e:	015a      	lsls	r2, r3, #5
 80062a0:	697b      	ldr	r3, [r7, #20]
 80062a2:	4413      	add	r3, r2
 80062a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80062a8:	691a      	ldr	r2, [r3, #16]
 80062aa:	693b      	ldr	r3, [r7, #16]
 80062ac:	0159      	lsls	r1, r3, #5
 80062ae:	697b      	ldr	r3, [r7, #20]
 80062b0:	440b      	add	r3, r1
 80062b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80062b6:	4619      	mov	r1, r3
 80062b8:	4b34      	ldr	r3, [pc, #208]	; (800638c <USB_EP0StartXfer+0x2ac>)
 80062ba:	4013      	ands	r3, r2
 80062bc:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80062be:	693b      	ldr	r3, [r7, #16]
 80062c0:	015a      	lsls	r2, r3, #5
 80062c2:	697b      	ldr	r3, [r7, #20]
 80062c4:	4413      	add	r3, r2
 80062c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80062ca:	691a      	ldr	r2, [r3, #16]
 80062cc:	693b      	ldr	r3, [r7, #16]
 80062ce:	0159      	lsls	r1, r3, #5
 80062d0:	697b      	ldr	r3, [r7, #20]
 80062d2:	440b      	add	r3, r1
 80062d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80062d8:	4619      	mov	r1, r3
 80062da:	4b2b      	ldr	r3, [pc, #172]	; (8006388 <USB_EP0StartXfer+0x2a8>)
 80062dc:	4013      	ands	r3, r2
 80062de:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len > 0U)
 80062e0:	68bb      	ldr	r3, [r7, #8]
 80062e2:	695b      	ldr	r3, [r3, #20]
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d003      	beq.n	80062f0 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 80062e8:	68bb      	ldr	r3, [r7, #8]
 80062ea:	689a      	ldr	r2, [r3, #8]
 80062ec:	68bb      	ldr	r3, [r7, #8]
 80062ee:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80062f0:	693b      	ldr	r3, [r7, #16]
 80062f2:	015a      	lsls	r2, r3, #5
 80062f4:	697b      	ldr	r3, [r7, #20]
 80062f6:	4413      	add	r3, r2
 80062f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80062fc:	691b      	ldr	r3, [r3, #16]
 80062fe:	693a      	ldr	r2, [r7, #16]
 8006300:	0151      	lsls	r1, r2, #5
 8006302:	697a      	ldr	r2, [r7, #20]
 8006304:	440a      	add	r2, r1
 8006306:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800630a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800630e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8006310:	693b      	ldr	r3, [r7, #16]
 8006312:	015a      	lsls	r2, r3, #5
 8006314:	697b      	ldr	r3, [r7, #20]
 8006316:	4413      	add	r3, r2
 8006318:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800631c:	691a      	ldr	r2, [r3, #16]
 800631e:	68bb      	ldr	r3, [r7, #8]
 8006320:	689b      	ldr	r3, [r3, #8]
 8006322:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006326:	6939      	ldr	r1, [r7, #16]
 8006328:	0148      	lsls	r0, r1, #5
 800632a:	6979      	ldr	r1, [r7, #20]
 800632c:	4401      	add	r1, r0
 800632e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006332:	4313      	orrs	r3, r2
 8006334:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8006336:	79fb      	ldrb	r3, [r7, #7]
 8006338:	2b01      	cmp	r3, #1
 800633a:	d10d      	bne.n	8006358 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800633c:	68bb      	ldr	r3, [r7, #8]
 800633e:	68db      	ldr	r3, [r3, #12]
 8006340:	2b00      	cmp	r3, #0
 8006342:	d009      	beq.n	8006358 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8006344:	68bb      	ldr	r3, [r7, #8]
 8006346:	68d9      	ldr	r1, [r3, #12]
 8006348:	693b      	ldr	r3, [r7, #16]
 800634a:	015a      	lsls	r2, r3, #5
 800634c:	697b      	ldr	r3, [r7, #20]
 800634e:	4413      	add	r3, r2
 8006350:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006354:	460a      	mov	r2, r1
 8006356:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8006358:	693b      	ldr	r3, [r7, #16]
 800635a:	015a      	lsls	r2, r3, #5
 800635c:	697b      	ldr	r3, [r7, #20]
 800635e:	4413      	add	r3, r2
 8006360:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	693a      	ldr	r2, [r7, #16]
 8006368:	0151      	lsls	r1, r2, #5
 800636a:	697a      	ldr	r2, [r7, #20]
 800636c:	440a      	add	r2, r1
 800636e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006372:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006376:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006378:	2300      	movs	r3, #0
}
 800637a:	4618      	mov	r0, r3
 800637c:	371c      	adds	r7, #28
 800637e:	46bd      	mov	sp, r7
 8006380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006384:	4770      	bx	lr
 8006386:	bf00      	nop
 8006388:	e007ffff 	.word	0xe007ffff
 800638c:	fff80000 	.word	0xfff80000

08006390 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8006390:	b480      	push	{r7}
 8006392:	b089      	sub	sp, #36	; 0x24
 8006394:	af00      	add	r7, sp, #0
 8006396:	60f8      	str	r0, [r7, #12]
 8006398:	60b9      	str	r1, [r7, #8]
 800639a:	4611      	mov	r1, r2
 800639c:	461a      	mov	r2, r3
 800639e:	460b      	mov	r3, r1
 80063a0:	71fb      	strb	r3, [r7, #7]
 80063a2:	4613      	mov	r3, r2
 80063a4:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80063aa:	68bb      	ldr	r3, [r7, #8]
 80063ac:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80063ae:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d123      	bne.n	80063fe <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80063b6:	88bb      	ldrh	r3, [r7, #4]
 80063b8:	3303      	adds	r3, #3
 80063ba:	089b      	lsrs	r3, r3, #2
 80063bc:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80063be:	2300      	movs	r3, #0
 80063c0:	61bb      	str	r3, [r7, #24]
 80063c2:	e018      	b.n	80063f6 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80063c4:	79fb      	ldrb	r3, [r7, #7]
 80063c6:	031a      	lsls	r2, r3, #12
 80063c8:	697b      	ldr	r3, [r7, #20]
 80063ca:	4413      	add	r3, r2
 80063cc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80063d0:	461a      	mov	r2, r3
 80063d2:	69fb      	ldr	r3, [r7, #28]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	6013      	str	r3, [r2, #0]
      pSrc++;
 80063d8:	69fb      	ldr	r3, [r7, #28]
 80063da:	3301      	adds	r3, #1
 80063dc:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80063de:	69fb      	ldr	r3, [r7, #28]
 80063e0:	3301      	adds	r3, #1
 80063e2:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80063e4:	69fb      	ldr	r3, [r7, #28]
 80063e6:	3301      	adds	r3, #1
 80063e8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80063ea:	69fb      	ldr	r3, [r7, #28]
 80063ec:	3301      	adds	r3, #1
 80063ee:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80063f0:	69bb      	ldr	r3, [r7, #24]
 80063f2:	3301      	adds	r3, #1
 80063f4:	61bb      	str	r3, [r7, #24]
 80063f6:	69ba      	ldr	r2, [r7, #24]
 80063f8:	693b      	ldr	r3, [r7, #16]
 80063fa:	429a      	cmp	r2, r3
 80063fc:	d3e2      	bcc.n	80063c4 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80063fe:	2300      	movs	r3, #0
}
 8006400:	4618      	mov	r0, r3
 8006402:	3724      	adds	r7, #36	; 0x24
 8006404:	46bd      	mov	sp, r7
 8006406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800640a:	4770      	bx	lr

0800640c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800640c:	b480      	push	{r7}
 800640e:	b08b      	sub	sp, #44	; 0x2c
 8006410:	af00      	add	r7, sp, #0
 8006412:	60f8      	str	r0, [r7, #12]
 8006414:	60b9      	str	r1, [r7, #8]
 8006416:	4613      	mov	r3, r2
 8006418:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800641e:	68bb      	ldr	r3, [r7, #8]
 8006420:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8006422:	88fb      	ldrh	r3, [r7, #6]
 8006424:	089b      	lsrs	r3, r3, #2
 8006426:	b29b      	uxth	r3, r3
 8006428:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800642a:	88fb      	ldrh	r3, [r7, #6]
 800642c:	f003 0303 	and.w	r3, r3, #3
 8006430:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8006432:	2300      	movs	r3, #0
 8006434:	623b      	str	r3, [r7, #32]
 8006436:	e014      	b.n	8006462 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8006438:	69bb      	ldr	r3, [r7, #24]
 800643a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800643e:	681a      	ldr	r2, [r3, #0]
 8006440:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006442:	601a      	str	r2, [r3, #0]
    pDest++;
 8006444:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006446:	3301      	adds	r3, #1
 8006448:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800644a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800644c:	3301      	adds	r3, #1
 800644e:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006450:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006452:	3301      	adds	r3, #1
 8006454:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006456:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006458:	3301      	adds	r3, #1
 800645a:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800645c:	6a3b      	ldr	r3, [r7, #32]
 800645e:	3301      	adds	r3, #1
 8006460:	623b      	str	r3, [r7, #32]
 8006462:	6a3a      	ldr	r2, [r7, #32]
 8006464:	697b      	ldr	r3, [r7, #20]
 8006466:	429a      	cmp	r2, r3
 8006468:	d3e6      	bcc.n	8006438 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800646a:	8bfb      	ldrh	r3, [r7, #30]
 800646c:	2b00      	cmp	r3, #0
 800646e:	d01e      	beq.n	80064ae <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8006470:	2300      	movs	r3, #0
 8006472:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8006474:	69bb      	ldr	r3, [r7, #24]
 8006476:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800647a:	461a      	mov	r2, r3
 800647c:	f107 0310 	add.w	r3, r7, #16
 8006480:	6812      	ldr	r2, [r2, #0]
 8006482:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8006484:	693a      	ldr	r2, [r7, #16]
 8006486:	6a3b      	ldr	r3, [r7, #32]
 8006488:	b2db      	uxtb	r3, r3
 800648a:	00db      	lsls	r3, r3, #3
 800648c:	fa22 f303 	lsr.w	r3, r2, r3
 8006490:	b2da      	uxtb	r2, r3
 8006492:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006494:	701a      	strb	r2, [r3, #0]
      i++;
 8006496:	6a3b      	ldr	r3, [r7, #32]
 8006498:	3301      	adds	r3, #1
 800649a:	623b      	str	r3, [r7, #32]
      pDest++;
 800649c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800649e:	3301      	adds	r3, #1
 80064a0:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 80064a2:	8bfb      	ldrh	r3, [r7, #30]
 80064a4:	3b01      	subs	r3, #1
 80064a6:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80064a8:	8bfb      	ldrh	r3, [r7, #30]
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d1ea      	bne.n	8006484 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80064ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80064b0:	4618      	mov	r0, r3
 80064b2:	372c      	adds	r7, #44	; 0x2c
 80064b4:	46bd      	mov	sp, r7
 80064b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ba:	4770      	bx	lr

080064bc <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80064bc:	b480      	push	{r7}
 80064be:	b085      	sub	sp, #20
 80064c0:	af00      	add	r7, sp, #0
 80064c2:	6078      	str	r0, [r7, #4]
 80064c4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80064ca:	683b      	ldr	r3, [r7, #0]
 80064cc:	781b      	ldrb	r3, [r3, #0]
 80064ce:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80064d0:	683b      	ldr	r3, [r7, #0]
 80064d2:	785b      	ldrb	r3, [r3, #1]
 80064d4:	2b01      	cmp	r3, #1
 80064d6:	d12c      	bne.n	8006532 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80064d8:	68bb      	ldr	r3, [r7, #8]
 80064da:	015a      	lsls	r2, r3, #5
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	4413      	add	r3, r2
 80064e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	db12      	blt.n	8006510 <USB_EPSetStall+0x54>
 80064ea:	68bb      	ldr	r3, [r7, #8]
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d00f      	beq.n	8006510 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80064f0:	68bb      	ldr	r3, [r7, #8]
 80064f2:	015a      	lsls	r2, r3, #5
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	4413      	add	r3, r2
 80064f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	68ba      	ldr	r2, [r7, #8]
 8006500:	0151      	lsls	r1, r2, #5
 8006502:	68fa      	ldr	r2, [r7, #12]
 8006504:	440a      	add	r2, r1
 8006506:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800650a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800650e:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8006510:	68bb      	ldr	r3, [r7, #8]
 8006512:	015a      	lsls	r2, r3, #5
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	4413      	add	r3, r2
 8006518:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	68ba      	ldr	r2, [r7, #8]
 8006520:	0151      	lsls	r1, r2, #5
 8006522:	68fa      	ldr	r2, [r7, #12]
 8006524:	440a      	add	r2, r1
 8006526:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800652a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800652e:	6013      	str	r3, [r2, #0]
 8006530:	e02b      	b.n	800658a <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006532:	68bb      	ldr	r3, [r7, #8]
 8006534:	015a      	lsls	r2, r3, #5
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	4413      	add	r3, r2
 800653a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	2b00      	cmp	r3, #0
 8006542:	db12      	blt.n	800656a <USB_EPSetStall+0xae>
 8006544:	68bb      	ldr	r3, [r7, #8]
 8006546:	2b00      	cmp	r3, #0
 8006548:	d00f      	beq.n	800656a <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800654a:	68bb      	ldr	r3, [r7, #8]
 800654c:	015a      	lsls	r2, r3, #5
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	4413      	add	r3, r2
 8006552:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	68ba      	ldr	r2, [r7, #8]
 800655a:	0151      	lsls	r1, r2, #5
 800655c:	68fa      	ldr	r2, [r7, #12]
 800655e:	440a      	add	r2, r1
 8006560:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006564:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006568:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800656a:	68bb      	ldr	r3, [r7, #8]
 800656c:	015a      	lsls	r2, r3, #5
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	4413      	add	r3, r2
 8006572:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	68ba      	ldr	r2, [r7, #8]
 800657a:	0151      	lsls	r1, r2, #5
 800657c:	68fa      	ldr	r2, [r7, #12]
 800657e:	440a      	add	r2, r1
 8006580:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006584:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006588:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800658a:	2300      	movs	r3, #0
}
 800658c:	4618      	mov	r0, r3
 800658e:	3714      	adds	r7, #20
 8006590:	46bd      	mov	sp, r7
 8006592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006596:	4770      	bx	lr

08006598 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006598:	b480      	push	{r7}
 800659a:	b085      	sub	sp, #20
 800659c:	af00      	add	r7, sp, #0
 800659e:	6078      	str	r0, [r7, #4]
 80065a0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80065a6:	683b      	ldr	r3, [r7, #0]
 80065a8:	781b      	ldrb	r3, [r3, #0]
 80065aa:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80065ac:	683b      	ldr	r3, [r7, #0]
 80065ae:	785b      	ldrb	r3, [r3, #1]
 80065b0:	2b01      	cmp	r3, #1
 80065b2:	d128      	bne.n	8006606 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80065b4:	68bb      	ldr	r3, [r7, #8]
 80065b6:	015a      	lsls	r2, r3, #5
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	4413      	add	r3, r2
 80065bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	68ba      	ldr	r2, [r7, #8]
 80065c4:	0151      	lsls	r1, r2, #5
 80065c6:	68fa      	ldr	r2, [r7, #12]
 80065c8:	440a      	add	r2, r1
 80065ca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80065ce:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80065d2:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80065d4:	683b      	ldr	r3, [r7, #0]
 80065d6:	78db      	ldrb	r3, [r3, #3]
 80065d8:	2b03      	cmp	r3, #3
 80065da:	d003      	beq.n	80065e4 <USB_EPClearStall+0x4c>
 80065dc:	683b      	ldr	r3, [r7, #0]
 80065de:	78db      	ldrb	r3, [r3, #3]
 80065e0:	2b02      	cmp	r3, #2
 80065e2:	d138      	bne.n	8006656 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80065e4:	68bb      	ldr	r3, [r7, #8]
 80065e6:	015a      	lsls	r2, r3, #5
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	4413      	add	r3, r2
 80065ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	68ba      	ldr	r2, [r7, #8]
 80065f4:	0151      	lsls	r1, r2, #5
 80065f6:	68fa      	ldr	r2, [r7, #12]
 80065f8:	440a      	add	r2, r1
 80065fa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80065fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006602:	6013      	str	r3, [r2, #0]
 8006604:	e027      	b.n	8006656 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8006606:	68bb      	ldr	r3, [r7, #8]
 8006608:	015a      	lsls	r2, r3, #5
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	4413      	add	r3, r2
 800660e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	68ba      	ldr	r2, [r7, #8]
 8006616:	0151      	lsls	r1, r2, #5
 8006618:	68fa      	ldr	r2, [r7, #12]
 800661a:	440a      	add	r2, r1
 800661c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006620:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006624:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006626:	683b      	ldr	r3, [r7, #0]
 8006628:	78db      	ldrb	r3, [r3, #3]
 800662a:	2b03      	cmp	r3, #3
 800662c:	d003      	beq.n	8006636 <USB_EPClearStall+0x9e>
 800662e:	683b      	ldr	r3, [r7, #0]
 8006630:	78db      	ldrb	r3, [r3, #3]
 8006632:	2b02      	cmp	r3, #2
 8006634:	d10f      	bne.n	8006656 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006636:	68bb      	ldr	r3, [r7, #8]
 8006638:	015a      	lsls	r2, r3, #5
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	4413      	add	r3, r2
 800663e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	68ba      	ldr	r2, [r7, #8]
 8006646:	0151      	lsls	r1, r2, #5
 8006648:	68fa      	ldr	r2, [r7, #12]
 800664a:	440a      	add	r2, r1
 800664c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006650:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006654:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8006656:	2300      	movs	r3, #0
}
 8006658:	4618      	mov	r0, r3
 800665a:	3714      	adds	r7, #20
 800665c:	46bd      	mov	sp, r7
 800665e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006662:	4770      	bx	lr

08006664 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8006664:	b480      	push	{r7}
 8006666:	b085      	sub	sp, #20
 8006668:	af00      	add	r7, sp, #0
 800666a:	6078      	str	r0, [r7, #4]
 800666c:	460b      	mov	r3, r1
 800666e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	68fa      	ldr	r2, [r7, #12]
 800667e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006682:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8006686:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800668e:	681a      	ldr	r2, [r3, #0]
 8006690:	78fb      	ldrb	r3, [r7, #3]
 8006692:	011b      	lsls	r3, r3, #4
 8006694:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8006698:	68f9      	ldr	r1, [r7, #12]
 800669a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800669e:	4313      	orrs	r3, r2
 80066a0:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80066a2:	2300      	movs	r3, #0
}
 80066a4:	4618      	mov	r0, r3
 80066a6:	3714      	adds	r7, #20
 80066a8:	46bd      	mov	sp, r7
 80066aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ae:	4770      	bx	lr

080066b0 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 80066b0:	b480      	push	{r7}
 80066b2:	b085      	sub	sp, #20
 80066b4:	af00      	add	r7, sp, #0
 80066b6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	68fa      	ldr	r2, [r7, #12]
 80066c6:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80066ca:	f023 0303 	bic.w	r3, r3, #3
 80066ce:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80066d6:	685b      	ldr	r3, [r3, #4]
 80066d8:	68fa      	ldr	r2, [r7, #12]
 80066da:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80066de:	f023 0302 	bic.w	r3, r3, #2
 80066e2:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80066e4:	2300      	movs	r3, #0
}
 80066e6:	4618      	mov	r0, r3
 80066e8:	3714      	adds	r7, #20
 80066ea:	46bd      	mov	sp, r7
 80066ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066f0:	4770      	bx	lr

080066f2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80066f2:	b480      	push	{r7}
 80066f4:	b085      	sub	sp, #20
 80066f6:	af00      	add	r7, sp, #0
 80066f8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	68fa      	ldr	r2, [r7, #12]
 8006708:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800670c:	f023 0303 	bic.w	r3, r3, #3
 8006710:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006718:	685b      	ldr	r3, [r3, #4]
 800671a:	68fa      	ldr	r2, [r7, #12]
 800671c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006720:	f043 0302 	orr.w	r3, r3, #2
 8006724:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006726:	2300      	movs	r3, #0
}
 8006728:	4618      	mov	r0, r3
 800672a:	3714      	adds	r7, #20
 800672c:	46bd      	mov	sp, r7
 800672e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006732:	4770      	bx	lr

08006734 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8006734:	b480      	push	{r7}
 8006736:	b085      	sub	sp, #20
 8006738:	af00      	add	r7, sp, #0
 800673a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	695b      	ldr	r3, [r3, #20]
 8006740:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	699b      	ldr	r3, [r3, #24]
 8006746:	68fa      	ldr	r2, [r7, #12]
 8006748:	4013      	ands	r3, r2
 800674a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800674c:	68fb      	ldr	r3, [r7, #12]
}
 800674e:	4618      	mov	r0, r3
 8006750:	3714      	adds	r7, #20
 8006752:	46bd      	mov	sp, r7
 8006754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006758:	4770      	bx	lr

0800675a <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800675a:	b480      	push	{r7}
 800675c:	b085      	sub	sp, #20
 800675e:	af00      	add	r7, sp, #0
 8006760:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800676c:	699b      	ldr	r3, [r3, #24]
 800676e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006776:	69db      	ldr	r3, [r3, #28]
 8006778:	68ba      	ldr	r2, [r7, #8]
 800677a:	4013      	ands	r3, r2
 800677c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800677e:	68bb      	ldr	r3, [r7, #8]
 8006780:	0c1b      	lsrs	r3, r3, #16
}
 8006782:	4618      	mov	r0, r3
 8006784:	3714      	adds	r7, #20
 8006786:	46bd      	mov	sp, r7
 8006788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800678c:	4770      	bx	lr

0800678e <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800678e:	b480      	push	{r7}
 8006790:	b085      	sub	sp, #20
 8006792:	af00      	add	r7, sp, #0
 8006794:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80067a0:	699b      	ldr	r3, [r3, #24]
 80067a2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80067aa:	69db      	ldr	r3, [r3, #28]
 80067ac:	68ba      	ldr	r2, [r7, #8]
 80067ae:	4013      	ands	r3, r2
 80067b0:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80067b2:	68bb      	ldr	r3, [r7, #8]
 80067b4:	b29b      	uxth	r3, r3
}
 80067b6:	4618      	mov	r0, r3
 80067b8:	3714      	adds	r7, #20
 80067ba:	46bd      	mov	sp, r7
 80067bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067c0:	4770      	bx	lr

080067c2 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80067c2:	b480      	push	{r7}
 80067c4:	b085      	sub	sp, #20
 80067c6:	af00      	add	r7, sp, #0
 80067c8:	6078      	str	r0, [r7, #4]
 80067ca:	460b      	mov	r3, r1
 80067cc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80067d2:	78fb      	ldrb	r3, [r7, #3]
 80067d4:	015a      	lsls	r2, r3, #5
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	4413      	add	r3, r2
 80067da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80067de:	689b      	ldr	r3, [r3, #8]
 80067e0:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80067e8:	695b      	ldr	r3, [r3, #20]
 80067ea:	68ba      	ldr	r2, [r7, #8]
 80067ec:	4013      	ands	r3, r2
 80067ee:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80067f0:	68bb      	ldr	r3, [r7, #8]
}
 80067f2:	4618      	mov	r0, r3
 80067f4:	3714      	adds	r7, #20
 80067f6:	46bd      	mov	sp, r7
 80067f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067fc:	4770      	bx	lr

080067fe <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80067fe:	b480      	push	{r7}
 8006800:	b087      	sub	sp, #28
 8006802:	af00      	add	r7, sp, #0
 8006804:	6078      	str	r0, [r7, #4]
 8006806:	460b      	mov	r3, r1
 8006808:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800680e:	697b      	ldr	r3, [r7, #20]
 8006810:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006814:	691b      	ldr	r3, [r3, #16]
 8006816:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8006818:	697b      	ldr	r3, [r7, #20]
 800681a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800681e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006820:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8006822:	78fb      	ldrb	r3, [r7, #3]
 8006824:	f003 030f 	and.w	r3, r3, #15
 8006828:	68fa      	ldr	r2, [r7, #12]
 800682a:	fa22 f303 	lsr.w	r3, r2, r3
 800682e:	01db      	lsls	r3, r3, #7
 8006830:	b2db      	uxtb	r3, r3
 8006832:	693a      	ldr	r2, [r7, #16]
 8006834:	4313      	orrs	r3, r2
 8006836:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8006838:	78fb      	ldrb	r3, [r7, #3]
 800683a:	015a      	lsls	r2, r3, #5
 800683c:	697b      	ldr	r3, [r7, #20]
 800683e:	4413      	add	r3, r2
 8006840:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006844:	689b      	ldr	r3, [r3, #8]
 8006846:	693a      	ldr	r2, [r7, #16]
 8006848:	4013      	ands	r3, r2
 800684a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800684c:	68bb      	ldr	r3, [r7, #8]
}
 800684e:	4618      	mov	r0, r3
 8006850:	371c      	adds	r7, #28
 8006852:	46bd      	mov	sp, r7
 8006854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006858:	4770      	bx	lr

0800685a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800685a:	b480      	push	{r7}
 800685c:	b083      	sub	sp, #12
 800685e:	af00      	add	r7, sp, #0
 8006860:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	695b      	ldr	r3, [r3, #20]
 8006866:	f003 0301 	and.w	r3, r3, #1
}
 800686a:	4618      	mov	r0, r3
 800686c:	370c      	adds	r7, #12
 800686e:	46bd      	mov	sp, r7
 8006870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006874:	4770      	bx	lr
	...

08006878 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8006878:	b480      	push	{r7}
 800687a:	b085      	sub	sp, #20
 800687c:	af00      	add	r7, sp, #0
 800687e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800688a:	681a      	ldr	r2, [r3, #0]
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006892:	4619      	mov	r1, r3
 8006894:	4b09      	ldr	r3, [pc, #36]	; (80068bc <USB_ActivateSetup+0x44>)
 8006896:	4013      	ands	r3, r2
 8006898:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80068a0:	685b      	ldr	r3, [r3, #4]
 80068a2:	68fa      	ldr	r2, [r7, #12]
 80068a4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80068a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80068ac:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80068ae:	2300      	movs	r3, #0
}
 80068b0:	4618      	mov	r0, r3
 80068b2:	3714      	adds	r7, #20
 80068b4:	46bd      	mov	sp, r7
 80068b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ba:	4770      	bx	lr
 80068bc:	fffff800 	.word	0xfffff800

080068c0 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 80068c0:	b480      	push	{r7}
 80068c2:	b087      	sub	sp, #28
 80068c4:	af00      	add	r7, sp, #0
 80068c6:	60f8      	str	r0, [r7, #12]
 80068c8:	460b      	mov	r3, r1
 80068ca:	607a      	str	r2, [r7, #4]
 80068cc:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	333c      	adds	r3, #60	; 0x3c
 80068d6:	3304      	adds	r3, #4
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80068dc:	693b      	ldr	r3, [r7, #16]
 80068de:	4a26      	ldr	r2, [pc, #152]	; (8006978 <USB_EP0_OutStart+0xb8>)
 80068e0:	4293      	cmp	r3, r2
 80068e2:	d90a      	bls.n	80068fa <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80068e4:	697b      	ldr	r3, [r7, #20]
 80068e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80068f0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80068f4:	d101      	bne.n	80068fa <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80068f6:	2300      	movs	r3, #0
 80068f8:	e037      	b.n	800696a <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80068fa:	697b      	ldr	r3, [r7, #20]
 80068fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006900:	461a      	mov	r2, r3
 8006902:	2300      	movs	r3, #0
 8006904:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006906:	697b      	ldr	r3, [r7, #20]
 8006908:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800690c:	691b      	ldr	r3, [r3, #16]
 800690e:	697a      	ldr	r2, [r7, #20]
 8006910:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006914:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006918:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800691a:	697b      	ldr	r3, [r7, #20]
 800691c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006920:	691b      	ldr	r3, [r3, #16]
 8006922:	697a      	ldr	r2, [r7, #20]
 8006924:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006928:	f043 0318 	orr.w	r3, r3, #24
 800692c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800692e:	697b      	ldr	r3, [r7, #20]
 8006930:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006934:	691b      	ldr	r3, [r3, #16]
 8006936:	697a      	ldr	r2, [r7, #20]
 8006938:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800693c:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8006940:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8006942:	7afb      	ldrb	r3, [r7, #11]
 8006944:	2b01      	cmp	r3, #1
 8006946:	d10f      	bne.n	8006968 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8006948:	697b      	ldr	r3, [r7, #20]
 800694a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800694e:	461a      	mov	r2, r3
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8006954:	697b      	ldr	r3, [r7, #20]
 8006956:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	697a      	ldr	r2, [r7, #20]
 800695e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006962:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8006966:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006968:	2300      	movs	r3, #0
}
 800696a:	4618      	mov	r0, r3
 800696c:	371c      	adds	r7, #28
 800696e:	46bd      	mov	sp, r7
 8006970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006974:	4770      	bx	lr
 8006976:	bf00      	nop
 8006978:	4f54300a 	.word	0x4f54300a

0800697c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800697c:	b480      	push	{r7}
 800697e:	b085      	sub	sp, #20
 8006980:	af00      	add	r7, sp, #0
 8006982:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006984:	2300      	movs	r3, #0
 8006986:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	3301      	adds	r3, #1
 800698c:	60fb      	str	r3, [r7, #12]
 800698e:	4a13      	ldr	r2, [pc, #76]	; (80069dc <USB_CoreReset+0x60>)
 8006990:	4293      	cmp	r3, r2
 8006992:	d901      	bls.n	8006998 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 8006994:	2303      	movs	r3, #3
 8006996:	e01a      	b.n	80069ce <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	691b      	ldr	r3, [r3, #16]
 800699c:	2b00      	cmp	r3, #0
 800699e:	daf3      	bge.n	8006988 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80069a0:	2300      	movs	r3, #0
 80069a2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	691b      	ldr	r3, [r3, #16]
 80069a8:	f043 0201 	orr.w	r2, r3, #1
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	3301      	adds	r3, #1
 80069b4:	60fb      	str	r3, [r7, #12]
 80069b6:	4a09      	ldr	r2, [pc, #36]	; (80069dc <USB_CoreReset+0x60>)
 80069b8:	4293      	cmp	r3, r2
 80069ba:	d901      	bls.n	80069c0 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 80069bc:	2303      	movs	r3, #3
 80069be:	e006      	b.n	80069ce <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	691b      	ldr	r3, [r3, #16]
 80069c4:	f003 0301 	and.w	r3, r3, #1
 80069c8:	2b01      	cmp	r3, #1
 80069ca:	d0f1      	beq.n	80069b0 <USB_CoreReset+0x34>

  return HAL_OK;
 80069cc:	2300      	movs	r3, #0
}
 80069ce:	4618      	mov	r0, r3
 80069d0:	3714      	adds	r7, #20
 80069d2:	46bd      	mov	sp, r7
 80069d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069d8:	4770      	bx	lr
 80069da:	bf00      	nop
 80069dc:	00030d40 	.word	0x00030d40

080069e0 <USB_HS_PHYCInit>:
  *         Init the low level hardware : GPIO, CLOCK, NVIC...
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_HS_PHYCInit(USB_OTG_GlobalTypeDef *USBx)
{
 80069e0:	b580      	push	{r7, lr}
 80069e2:	b084      	sub	sp, #16
 80069e4:	af00      	add	r7, sp, #0
 80069e6:	6078      	str	r0, [r7, #4]
  UNUSED(USBx);
  __IO uint32_t count = 0U;
 80069e8:	2300      	movs	r3, #0
 80069ea:	60fb      	str	r3, [r7, #12]

  /* Enable LDO */
  USB_HS_PHYC->USB_HS_PHYC_LDO |= USB_HS_PHYC_LDO_ENABLE;
 80069ec:	4b16      	ldr	r3, [pc, #88]	; (8006a48 <USB_HS_PHYCInit+0x68>)
 80069ee:	699b      	ldr	r3, [r3, #24]
 80069f0:	4a15      	ldr	r2, [pc, #84]	; (8006a48 <USB_HS_PHYCInit+0x68>)
 80069f2:	f043 0304 	orr.w	r3, r3, #4
 80069f6:	6193      	str	r3, [r2, #24]

  /* wait for LDO Ready */
  while ((USB_HS_PHYC->USB_HS_PHYC_LDO & USB_HS_PHYC_LDO_STATUS) == 0U)
 80069f8:	e007      	b.n	8006a0a <USB_HS_PHYCInit+0x2a>
  {
    if (++count > 200000U)
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	3301      	adds	r3, #1
 80069fe:	60fb      	str	r3, [r7, #12]
 8006a00:	4a12      	ldr	r2, [pc, #72]	; (8006a4c <USB_HS_PHYCInit+0x6c>)
 8006a02:	4293      	cmp	r3, r2
 8006a04:	d901      	bls.n	8006a0a <USB_HS_PHYCInit+0x2a>
    {
      return HAL_TIMEOUT;
 8006a06:	2303      	movs	r3, #3
 8006a08:	e019      	b.n	8006a3e <USB_HS_PHYCInit+0x5e>
  while ((USB_HS_PHYC->USB_HS_PHYC_LDO & USB_HS_PHYC_LDO_STATUS) == 0U)
 8006a0a:	4b0f      	ldr	r3, [pc, #60]	; (8006a48 <USB_HS_PHYCInit+0x68>)
 8006a0c:	699b      	ldr	r3, [r3, #24]
 8006a0e:	f003 0302 	and.w	r3, r3, #2
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d0f1      	beq.n	80069fa <USB_HS_PHYCInit+0x1a>
  {
    USB_HS_PHYC->USB_HS_PHYC_PLL = (0x4U << 1);
  }
  else if (HSE_VALUE == 25000000U) /* HSE = 25MHz */
  {
    USB_HS_PHYC->USB_HS_PHYC_PLL = (0x5U << 1);
 8006a16:	4b0c      	ldr	r3, [pc, #48]	; (8006a48 <USB_HS_PHYCInit+0x68>)
 8006a18:	220a      	movs	r2, #10
 8006a1a:	601a      	str	r2, [r3, #0]
  {
    /* ... */
  }

  /* Control the tuning interface of the High Speed PHY */
  USB_HS_PHYC->USB_HS_PHYC_TUNE |= USB_HS_PHYC_TUNE_VALUE;
 8006a1c:	4b0a      	ldr	r3, [pc, #40]	; (8006a48 <USB_HS_PHYCInit+0x68>)
 8006a1e:	68da      	ldr	r2, [r3, #12]
 8006a20:	4909      	ldr	r1, [pc, #36]	; (8006a48 <USB_HS_PHYCInit+0x68>)
 8006a22:	f640 7313 	movw	r3, #3859	; 0xf13
 8006a26:	4313      	orrs	r3, r2
 8006a28:	60cb      	str	r3, [r1, #12]

  /* Enable PLL internal PHY */
  USB_HS_PHYC->USB_HS_PHYC_PLL |= USB_HS_PHYC_PLL_PLLEN;
 8006a2a:	4b07      	ldr	r3, [pc, #28]	; (8006a48 <USB_HS_PHYCInit+0x68>)
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	4a06      	ldr	r2, [pc, #24]	; (8006a48 <USB_HS_PHYCInit+0x68>)
 8006a30:	f043 0301 	orr.w	r3, r3, #1
 8006a34:	6013      	str	r3, [r2, #0]


  /* 2ms Delay required to get internal phy clock stable */
  HAL_Delay(2U);
 8006a36:	2002      	movs	r0, #2
 8006a38:	f7fa fd64 	bl	8001504 <HAL_Delay>

  return HAL_OK;
 8006a3c:	2300      	movs	r3, #0
}
 8006a3e:	4618      	mov	r0, r3
 8006a40:	3710      	adds	r7, #16
 8006a42:	46bd      	mov	sp, r7
 8006a44:	bd80      	pop	{r7, pc}
 8006a46:	bf00      	nop
 8006a48:	40017c00 	.word	0x40017c00
 8006a4c:	00030d40 	.word	0x00030d40

08006a50 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006a50:	b580      	push	{r7, lr}
 8006a52:	b084      	sub	sp, #16
 8006a54:	af00      	add	r7, sp, #0
 8006a56:	6078      	str	r0, [r7, #4]
 8006a58:	460b      	mov	r3, r1
 8006a5a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8006a5c:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8006a60:	f002 f9e2 	bl	8008e28 <malloc>
 8006a64:	4603      	mov	r3, r0
 8006a66:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d105      	bne.n	8006a7a <USBD_CDC_Init+0x2a>
  {
    pdev->pClassData = NULL;
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	2200      	movs	r2, #0
 8006a72:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8006a76:	2302      	movs	r3, #2
 8006a78:	e066      	b.n	8006b48 <USBD_CDC_Init+0xf8>
  }

  pdev->pClassData = (void *)hcdc;
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	68fa      	ldr	r2, [r7, #12]
 8006a7e:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	7c1b      	ldrb	r3, [r3, #16]
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d119      	bne.n	8006abe <USBD_CDC_Init+0x6e>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8006a8a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006a8e:	2202      	movs	r2, #2
 8006a90:	2181      	movs	r1, #129	; 0x81
 8006a92:	6878      	ldr	r0, [r7, #4]
 8006a94:	f001 fffb 	bl	8008a8e <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	2201      	movs	r2, #1
 8006a9c:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8006a9e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006aa2:	2202      	movs	r2, #2
 8006aa4:	2101      	movs	r1, #1
 8006aa6:	6878      	ldr	r0, [r7, #4]
 8006aa8:	f001 fff1 	bl	8008a8e <USBD_LL_OpenEP>
                          CDC_DATA_HS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	2201      	movs	r2, #1
 8006ab0:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CDC CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	2210      	movs	r2, #16
 8006ab8:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 8006abc:	e016      	b.n	8006aec <USBD_CDC_Init+0x9c>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8006abe:	2340      	movs	r3, #64	; 0x40
 8006ac0:	2202      	movs	r2, #2
 8006ac2:	2181      	movs	r1, #129	; 0x81
 8006ac4:	6878      	ldr	r0, [r7, #4]
 8006ac6:	f001 ffe2 	bl	8008a8e <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	2201      	movs	r2, #1
 8006ace:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8006ad0:	2340      	movs	r3, #64	; 0x40
 8006ad2:	2202      	movs	r2, #2
 8006ad4:	2101      	movs	r1, #1
 8006ad6:	6878      	ldr	r0, [r7, #4]
 8006ad8:	f001 ffd9 	bl	8008a8e <USBD_LL_OpenEP>
                          CDC_DATA_FS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	2201      	movs	r2, #1
 8006ae0:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	2210      	movs	r2, #16
 8006ae8:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8006aec:	2308      	movs	r3, #8
 8006aee:	2203      	movs	r2, #3
 8006af0:	2182      	movs	r1, #130	; 0x82
 8006af2:	6878      	ldr	r0, [r7, #4]
 8006af4:	f001 ffcb 	bl	8008a8e <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	2201      	movs	r2, #1
 8006afc:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	2200      	movs	r2, #0
 8006b0e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	2200      	movs	r2, #0
 8006b16:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	7c1b      	ldrb	r3, [r3, #16]
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d109      	bne.n	8006b36 <USBD_CDC_Init+0xe6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006b28:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006b2c:	2101      	movs	r1, #1
 8006b2e:	6878      	ldr	r0, [r7, #4]
 8006b30:	f002 f89c 	bl	8008c6c <USBD_LL_PrepareReceive>
 8006b34:	e007      	b.n	8006b46 <USBD_CDC_Init+0xf6>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006b3c:	2340      	movs	r3, #64	; 0x40
 8006b3e:	2101      	movs	r1, #1
 8006b40:	6878      	ldr	r0, [r7, #4]
 8006b42:	f002 f893 	bl	8008c6c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006b46:	2300      	movs	r3, #0
}
 8006b48:	4618      	mov	r0, r3
 8006b4a:	3710      	adds	r7, #16
 8006b4c:	46bd      	mov	sp, r7
 8006b4e:	bd80      	pop	{r7, pc}

08006b50 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006b50:	b580      	push	{r7, lr}
 8006b52:	b084      	sub	sp, #16
 8006b54:	af00      	add	r7, sp, #0
 8006b56:	6078      	str	r0, [r7, #4]
 8006b58:	460b      	mov	r3, r1
 8006b5a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  uint8_t ret = 0U;
 8006b5c:	2300      	movs	r3, #0
 8006b5e:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8006b60:	2181      	movs	r1, #129	; 0x81
 8006b62:	6878      	ldr	r0, [r7, #4]
 8006b64:	f001 ffb9 	bl	8008ada <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	2200      	movs	r2, #0
 8006b6c:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8006b6e:	2101      	movs	r1, #1
 8006b70:	6878      	ldr	r0, [r7, #4]
 8006b72:	f001 ffb2 	bl	8008ada <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	2200      	movs	r2, #0
 8006b7a:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8006b7e:	2182      	movs	r1, #130	; 0x82
 8006b80:	6878      	ldr	r0, [r7, #4]
 8006b82:	f001 ffaa 	bl	8008ada <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	2200      	movs	r2, #0
 8006b8a:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	2200      	movs	r2, #0
 8006b92:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d00e      	beq.n	8006bbe <USBD_CDC_DeInit+0x6e>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006ba6:	685b      	ldr	r3, [r3, #4]
 8006ba8:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006bb0:	4618      	mov	r0, r3
 8006bb2:	f002 f941 	bl	8008e38 <free>
    pdev->pClassData = NULL;
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	2200      	movs	r2, #0
 8006bba:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return ret;
 8006bbe:	7bfb      	ldrb	r3, [r7, #15]
}
 8006bc0:	4618      	mov	r0, r3
 8006bc2:	3710      	adds	r7, #16
 8006bc4:	46bd      	mov	sp, r7
 8006bc6:	bd80      	pop	{r7, pc}

08006bc8 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8006bc8:	b580      	push	{r7, lr}
 8006bca:	b086      	sub	sp, #24
 8006bcc:	af00      	add	r7, sp, #0
 8006bce:	6078      	str	r0, [r7, #4]
 8006bd0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006bd8:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8006bda:	2300      	movs	r3, #0
 8006bdc:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8006bde:	2300      	movs	r3, #0
 8006be0:	81bb      	strh	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 8006be2:	2300      	movs	r3, #0
 8006be4:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006be6:	683b      	ldr	r3, [r7, #0]
 8006be8:	781b      	ldrb	r3, [r3, #0]
 8006bea:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d03a      	beq.n	8006c68 <USBD_CDC_Setup+0xa0>
 8006bf2:	2b20      	cmp	r3, #32
 8006bf4:	f040 8097 	bne.w	8006d26 <USBD_CDC_Setup+0x15e>
  {
  case USB_REQ_TYPE_CLASS:
    if (req->wLength != 0U)
 8006bf8:	683b      	ldr	r3, [r7, #0]
 8006bfa:	88db      	ldrh	r3, [r3, #6]
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d029      	beq.n	8006c54 <USBD_CDC_Setup+0x8c>
    {
      if ((req->bmRequest & 0x80U) != 0U)
 8006c00:	683b      	ldr	r3, [r7, #0]
 8006c02:	781b      	ldrb	r3, [r3, #0]
 8006c04:	b25b      	sxtb	r3, r3
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	da11      	bge.n	8006c2e <USBD_CDC_Setup+0x66>
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006c10:	689b      	ldr	r3, [r3, #8]
 8006c12:	683a      	ldr	r2, [r7, #0]
 8006c14:	7850      	ldrb	r0, [r2, #1]
                                                          (uint8_t *)hcdc->data,
 8006c16:	6939      	ldr	r1, [r7, #16]
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006c18:	683a      	ldr	r2, [r7, #0]
 8006c1a:	88d2      	ldrh	r2, [r2, #6]
 8006c1c:	4798      	blx	r3
                                                          req->wLength);

          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, req->wLength);
 8006c1e:	6939      	ldr	r1, [r7, #16]
 8006c20:	683b      	ldr	r3, [r7, #0]
 8006c22:	88db      	ldrh	r3, [r3, #6]
 8006c24:	461a      	mov	r2, r3
 8006c26:	6878      	ldr	r0, [r7, #4]
 8006c28:	f001 fad6 	bl	80081d8 <USBD_CtlSendData>
    else
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                        (uint8_t *)req, 0U);
    }
    break;
 8006c2c:	e082      	b.n	8006d34 <USBD_CDC_Setup+0x16c>
        hcdc->CmdOpCode = req->bRequest;
 8006c2e:	683b      	ldr	r3, [r7, #0]
 8006c30:	785a      	ldrb	r2, [r3, #1]
 8006c32:	693b      	ldr	r3, [r7, #16]
 8006c34:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
        hcdc->CmdLength = (uint8_t)req->wLength;
 8006c38:	683b      	ldr	r3, [r7, #0]
 8006c3a:	88db      	ldrh	r3, [r3, #6]
 8006c3c:	b2da      	uxtb	r2, r3
 8006c3e:	693b      	ldr	r3, [r7, #16]
 8006c40:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
        (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8006c44:	6939      	ldr	r1, [r7, #16]
 8006c46:	683b      	ldr	r3, [r7, #0]
 8006c48:	88db      	ldrh	r3, [r3, #6]
 8006c4a:	461a      	mov	r2, r3
 8006c4c:	6878      	ldr	r0, [r7, #4]
 8006c4e:	f001 faef 	bl	8008230 <USBD_CtlPrepareRx>
    break;
 8006c52:	e06f      	b.n	8006d34 <USBD_CDC_Setup+0x16c>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006c5a:	689b      	ldr	r3, [r3, #8]
 8006c5c:	683a      	ldr	r2, [r7, #0]
 8006c5e:	7850      	ldrb	r0, [r2, #1]
 8006c60:	2200      	movs	r2, #0
 8006c62:	6839      	ldr	r1, [r7, #0]
 8006c64:	4798      	blx	r3
    break;
 8006c66:	e065      	b.n	8006d34 <USBD_CDC_Setup+0x16c>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8006c68:	683b      	ldr	r3, [r7, #0]
 8006c6a:	785b      	ldrb	r3, [r3, #1]
 8006c6c:	2b0b      	cmp	r3, #11
 8006c6e:	d84f      	bhi.n	8006d10 <USBD_CDC_Setup+0x148>
 8006c70:	a201      	add	r2, pc, #4	; (adr r2, 8006c78 <USBD_CDC_Setup+0xb0>)
 8006c72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c76:	bf00      	nop
 8006c78:	08006ca9 	.word	0x08006ca9
 8006c7c:	08006d1f 	.word	0x08006d1f
 8006c80:	08006d11 	.word	0x08006d11
 8006c84:	08006d11 	.word	0x08006d11
 8006c88:	08006d11 	.word	0x08006d11
 8006c8c:	08006d11 	.word	0x08006d11
 8006c90:	08006d11 	.word	0x08006d11
 8006c94:	08006d11 	.word	0x08006d11
 8006c98:	08006d11 	.word	0x08006d11
 8006c9c:	08006d11 	.word	0x08006d11
 8006ca0:	08006cd1 	.word	0x08006cd1
 8006ca4:	08006cf9 	.word	0x08006cf9
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006cae:	2b03      	cmp	r3, #3
 8006cb0:	d107      	bne.n	8006cc2 <USBD_CDC_Setup+0xfa>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8006cb2:	f107 030c 	add.w	r3, r7, #12
 8006cb6:	2202      	movs	r2, #2
 8006cb8:	4619      	mov	r1, r3
 8006cba:	6878      	ldr	r0, [r7, #4]
 8006cbc:	f001 fa8c 	bl	80081d8 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8006cc0:	e030      	b.n	8006d24 <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 8006cc2:	6839      	ldr	r1, [r7, #0]
 8006cc4:	6878      	ldr	r0, [r7, #4]
 8006cc6:	f001 fa16 	bl	80080f6 <USBD_CtlError>
        ret = USBD_FAIL;
 8006cca:	2303      	movs	r3, #3
 8006ccc:	75fb      	strb	r3, [r7, #23]
      break;
 8006cce:	e029      	b.n	8006d24 <USBD_CDC_Setup+0x15c>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006cd6:	2b03      	cmp	r3, #3
 8006cd8:	d107      	bne.n	8006cea <USBD_CDC_Setup+0x122>
      {
        (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8006cda:	f107 030f 	add.w	r3, r7, #15
 8006cde:	2201      	movs	r2, #1
 8006ce0:	4619      	mov	r1, r3
 8006ce2:	6878      	ldr	r0, [r7, #4]
 8006ce4:	f001 fa78 	bl	80081d8 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8006ce8:	e01c      	b.n	8006d24 <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 8006cea:	6839      	ldr	r1, [r7, #0]
 8006cec:	6878      	ldr	r0, [r7, #4]
 8006cee:	f001 fa02 	bl	80080f6 <USBD_CtlError>
        ret = USBD_FAIL;
 8006cf2:	2303      	movs	r3, #3
 8006cf4:	75fb      	strb	r3, [r7, #23]
      break;
 8006cf6:	e015      	b.n	8006d24 <USBD_CDC_Setup+0x15c>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006cfe:	2b03      	cmp	r3, #3
 8006d00:	d00f      	beq.n	8006d22 <USBD_CDC_Setup+0x15a>
      {
        USBD_CtlError(pdev, req);
 8006d02:	6839      	ldr	r1, [r7, #0]
 8006d04:	6878      	ldr	r0, [r7, #4]
 8006d06:	f001 f9f6 	bl	80080f6 <USBD_CtlError>
        ret = USBD_FAIL;
 8006d0a:	2303      	movs	r3, #3
 8006d0c:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8006d0e:	e008      	b.n	8006d22 <USBD_CDC_Setup+0x15a>

    case USB_REQ_CLEAR_FEATURE:
      break;

    default:
      USBD_CtlError(pdev, req);
 8006d10:	6839      	ldr	r1, [r7, #0]
 8006d12:	6878      	ldr	r0, [r7, #4]
 8006d14:	f001 f9ef 	bl	80080f6 <USBD_CtlError>
      ret = USBD_FAIL;
 8006d18:	2303      	movs	r3, #3
 8006d1a:	75fb      	strb	r3, [r7, #23]
      break;
 8006d1c:	e002      	b.n	8006d24 <USBD_CDC_Setup+0x15c>
      break;
 8006d1e:	bf00      	nop
 8006d20:	e008      	b.n	8006d34 <USBD_CDC_Setup+0x16c>
      break;
 8006d22:	bf00      	nop
    }
    break;
 8006d24:	e006      	b.n	8006d34 <USBD_CDC_Setup+0x16c>

  default:
    USBD_CtlError(pdev, req);
 8006d26:	6839      	ldr	r1, [r7, #0]
 8006d28:	6878      	ldr	r0, [r7, #4]
 8006d2a:	f001 f9e4 	bl	80080f6 <USBD_CtlError>
    ret = USBD_FAIL;
 8006d2e:	2303      	movs	r3, #3
 8006d30:	75fb      	strb	r3, [r7, #23]
    break;
 8006d32:	bf00      	nop
  }

  return (uint8_t)ret;
 8006d34:	7dfb      	ldrb	r3, [r7, #23]
}
 8006d36:	4618      	mov	r0, r3
 8006d38:	3718      	adds	r7, #24
 8006d3a:	46bd      	mov	sp, r7
 8006d3c:	bd80      	pop	{r7, pc}
 8006d3e:	bf00      	nop

08006d40 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006d40:	b580      	push	{r7, lr}
 8006d42:	b084      	sub	sp, #16
 8006d44:	af00      	add	r7, sp, #0
 8006d46:	6078      	str	r0, [r7, #4]
 8006d48:	460b      	mov	r3, r1
 8006d4a:	70fb      	strb	r3, [r7, #3]
	/*uint8_t buff[10] = {0};
  USBD_LL_Transmit(pdev, epnum, buff, sizeof(buff));
  return (uint8_t)USBD_OK; */
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8006d52:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d101      	bne.n	8006d62 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8006d5e:	2303      	movs	r3, #3
 8006d60:	e049      	b.n	8006df6 <USBD_CDC_DataIn+0xb6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006d68:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8006d6a:	78fa      	ldrb	r2, [r7, #3]
 8006d6c:	6879      	ldr	r1, [r7, #4]
 8006d6e:	4613      	mov	r3, r2
 8006d70:	009b      	lsls	r3, r3, #2
 8006d72:	4413      	add	r3, r2
 8006d74:	009b      	lsls	r3, r3, #2
 8006d76:	440b      	add	r3, r1
 8006d78:	3318      	adds	r3, #24
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	d029      	beq.n	8006dd4 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8006d80:	78fa      	ldrb	r2, [r7, #3]
 8006d82:	6879      	ldr	r1, [r7, #4]
 8006d84:	4613      	mov	r3, r2
 8006d86:	009b      	lsls	r3, r3, #2
 8006d88:	4413      	add	r3, r2
 8006d8a:	009b      	lsls	r3, r3, #2
 8006d8c:	440b      	add	r3, r1
 8006d8e:	3318      	adds	r3, #24
 8006d90:	681a      	ldr	r2, [r3, #0]
 8006d92:	78f9      	ldrb	r1, [r7, #3]
 8006d94:	68f8      	ldr	r0, [r7, #12]
 8006d96:	460b      	mov	r3, r1
 8006d98:	00db      	lsls	r3, r3, #3
 8006d9a:	1a5b      	subs	r3, r3, r1
 8006d9c:	009b      	lsls	r3, r3, #2
 8006d9e:	4403      	add	r3, r0
 8006da0:	3344      	adds	r3, #68	; 0x44
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	fbb2 f1f3 	udiv	r1, r2, r3
 8006da8:	fb03 f301 	mul.w	r3, r3, r1
 8006dac:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d110      	bne.n	8006dd4 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 8006db2:	78fa      	ldrb	r2, [r7, #3]
 8006db4:	6879      	ldr	r1, [r7, #4]
 8006db6:	4613      	mov	r3, r2
 8006db8:	009b      	lsls	r3, r3, #2
 8006dba:	4413      	add	r3, r2
 8006dbc:	009b      	lsls	r3, r3, #2
 8006dbe:	440b      	add	r3, r1
 8006dc0:	3318      	adds	r3, #24
 8006dc2:	2200      	movs	r2, #0
 8006dc4:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8006dc6:	78f9      	ldrb	r1, [r7, #3]
 8006dc8:	2300      	movs	r3, #0
 8006dca:	2200      	movs	r2, #0
 8006dcc:	6878      	ldr	r0, [r7, #4]
 8006dce:	f001 ff2c 	bl	8008c2a <USBD_LL_Transmit>
 8006dd2:	e00f      	b.n	8006df4 <USBD_CDC_DataIn+0xb4>
  }
  else
  {
    hcdc->TxState = 0U;
 8006dd4:	68bb      	ldr	r3, [r7, #8]
 8006dd6:	2200      	movs	r2, #0
 8006dd8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006de2:	691b      	ldr	r3, [r3, #16]
 8006de4:	68ba      	ldr	r2, [r7, #8]
 8006de6:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8006dea:	68ba      	ldr	r2, [r7, #8]
 8006dec:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8006df0:	78fa      	ldrb	r2, [r7, #3]
 8006df2:	4798      	blx	r3
  }

  return (uint8_t)USBD_OK;
 8006df4:	2300      	movs	r3, #0
}
 8006df6:	4618      	mov	r0, r3
 8006df8:	3710      	adds	r7, #16
 8006dfa:	46bd      	mov	sp, r7
 8006dfc:	bd80      	pop	{r7, pc}

08006dfe <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006dfe:	b580      	push	{r7, lr}
 8006e00:	b084      	sub	sp, #16
 8006e02:	af00      	add	r7, sp, #0
 8006e04:	6078      	str	r0, [r7, #4]
 8006e06:	460b      	mov	r3, r1
 8006e08:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006e10:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d101      	bne.n	8006e20 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8006e1c:	2303      	movs	r3, #3
 8006e1e:	e015      	b.n	8006e4c <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8006e20:	78fb      	ldrb	r3, [r7, #3]
 8006e22:	4619      	mov	r1, r3
 8006e24:	6878      	ldr	r0, [r7, #4]
 8006e26:	f001 ff42 	bl	8008cae <USBD_LL_GetRxDataSize>
 8006e2a:	4602      	mov	r2, r0
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006e38:	68db      	ldr	r3, [r3, #12]
 8006e3a:	68fa      	ldr	r2, [r7, #12]
 8006e3c:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8006e40:	68fa      	ldr	r2, [r7, #12]
 8006e42:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8006e46:	4611      	mov	r1, r2
 8006e48:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8006e4a:	2300      	movs	r3, #0
}
 8006e4c:	4618      	mov	r0, r3
 8006e4e:	3710      	adds	r7, #16
 8006e50:	46bd      	mov	sp, r7
 8006e52:	bd80      	pop	{r7, pc}

08006e54 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8006e54:	b580      	push	{r7, lr}
 8006e56:	b084      	sub	sp, #16
 8006e58:	af00      	add	r7, sp, #0
 8006e5a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006e62:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d015      	beq.n	8006e9a <USBD_CDC_EP0_RxReady+0x46>
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8006e74:	2bff      	cmp	r3, #255	; 0xff
 8006e76:	d010      	beq.n	8006e9a <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006e7e:	689b      	ldr	r3, [r3, #8]
 8006e80:	68fa      	ldr	r2, [r7, #12]
 8006e82:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 8006e86:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8006e88:	68fa      	ldr	r2, [r7, #12]
 8006e8a:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8006e8e:	b292      	uxth	r2, r2
 8006e90:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	22ff      	movs	r2, #255	; 0xff
 8006e96:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }

  return (uint8_t)USBD_OK;
 8006e9a:	2300      	movs	r3, #0
}
 8006e9c:	4618      	mov	r0, r3
 8006e9e:	3710      	adds	r7, #16
 8006ea0:	46bd      	mov	sp, r7
 8006ea2:	bd80      	pop	{r7, pc}

08006ea4 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8006ea4:	b480      	push	{r7}
 8006ea6:	b083      	sub	sp, #12
 8006ea8:	af00      	add	r7, sp, #0
 8006eaa:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	2219      	movs	r2, #25
 8006eb0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 8006eb2:	4b03      	ldr	r3, [pc, #12]	; (8006ec0 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8006eb4:	4618      	mov	r0, r3
 8006eb6:	370c      	adds	r7, #12
 8006eb8:	46bd      	mov	sp, r7
 8006eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ebe:	4770      	bx	lr
 8006ec0:	20000078 	.word	0x20000078

08006ec4 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8006ec4:	b480      	push	{r7}
 8006ec6:	b083      	sub	sp, #12
 8006ec8:	af00      	add	r7, sp, #0
 8006eca:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	2219      	movs	r2, #25
 8006ed0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 8006ed2:	4b03      	ldr	r3, [pc, #12]	; (8006ee0 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8006ed4:	4618      	mov	r0, r3
 8006ed6:	370c      	adds	r7, #12
 8006ed8:	46bd      	mov	sp, r7
 8006eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ede:	4770      	bx	lr
 8006ee0:	2000005c 	.word	0x2000005c

08006ee4 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8006ee4:	b480      	push	{r7}
 8006ee6:	b083      	sub	sp, #12
 8006ee8:	af00      	add	r7, sp, #0
 8006eea:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	2219      	movs	r2, #25
 8006ef0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 8006ef2:	4b03      	ldr	r3, [pc, #12]	; (8006f00 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8006ef4:	4618      	mov	r0, r3
 8006ef6:	370c      	adds	r7, #12
 8006ef8:	46bd      	mov	sp, r7
 8006efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006efe:	4770      	bx	lr
 8006f00:	20000094 	.word	0x20000094

08006f04 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8006f04:	b480      	push	{r7}
 8006f06:	b083      	sub	sp, #12
 8006f08:	af00      	add	r7, sp, #0
 8006f0a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	220a      	movs	r2, #10
 8006f10:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8006f12:	4b03      	ldr	r3, [pc, #12]	; (8006f20 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8006f14:	4618      	mov	r0, r3
 8006f16:	370c      	adds	r7, #12
 8006f18:	46bd      	mov	sp, r7
 8006f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f1e:	4770      	bx	lr
 8006f20:	20000018 	.word	0x20000018

08006f24 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8006f24:	b480      	push	{r7}
 8006f26:	b083      	sub	sp, #12
 8006f28:	af00      	add	r7, sp, #0
 8006f2a:	6078      	str	r0, [r7, #4]
 8006f2c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8006f2e:	683b      	ldr	r3, [r7, #0]
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d101      	bne.n	8006f38 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8006f34:	2303      	movs	r3, #3
 8006f36:	e004      	b.n	8006f42 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	683a      	ldr	r2, [r7, #0]
 8006f3c:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8006f40:	2300      	movs	r3, #0
}
 8006f42:	4618      	mov	r0, r3
 8006f44:	370c      	adds	r7, #12
 8006f46:	46bd      	mov	sp, r7
 8006f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f4c:	4770      	bx	lr

08006f4e <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8006f4e:	b480      	push	{r7}
 8006f50:	b087      	sub	sp, #28
 8006f52:	af00      	add	r7, sp, #0
 8006f54:	60f8      	str	r0, [r7, #12]
 8006f56:	60b9      	str	r1, [r7, #8]
 8006f58:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006f60:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8006f62:	697b      	ldr	r3, [r7, #20]
 8006f64:	68ba      	ldr	r2, [r7, #8]
 8006f66:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8006f6a:	697b      	ldr	r3, [r7, #20]
 8006f6c:	687a      	ldr	r2, [r7, #4]
 8006f6e:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8006f72:	2300      	movs	r3, #0
}
 8006f74:	4618      	mov	r0, r3
 8006f76:	371c      	adds	r7, #28
 8006f78:	46bd      	mov	sp, r7
 8006f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f7e:	4770      	bx	lr

08006f80 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8006f80:	b480      	push	{r7}
 8006f82:	b085      	sub	sp, #20
 8006f84:	af00      	add	r7, sp, #0
 8006f86:	6078      	str	r0, [r7, #4]
 8006f88:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006f90:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	683a      	ldr	r2, [r7, #0]
 8006f96:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8006f9a:	2300      	movs	r3, #0
}
 8006f9c:	4618      	mov	r0, r3
 8006f9e:	3714      	adds	r7, #20
 8006fa0:	46bd      	mov	sp, r7
 8006fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fa6:	4770      	bx	lr

08006fa8 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8006fa8:	b580      	push	{r7, lr}
 8006faa:	b084      	sub	sp, #16
 8006fac:	af00      	add	r7, sp, #0
 8006fae:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006fb6:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8006fb8:	2301      	movs	r3, #1
 8006fba:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d101      	bne.n	8006fca <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8006fc6:	2303      	movs	r3, #3
 8006fc8:	e01a      	b.n	8007000 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 8006fca:	68bb      	ldr	r3, [r7, #8]
 8006fcc:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d114      	bne.n	8006ffe <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8006fd4:	68bb      	ldr	r3, [r7, #8]
 8006fd6:	2201      	movs	r2, #1
 8006fd8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8006fdc:	68bb      	ldr	r3, [r7, #8]
 8006fde:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 8006fe6:	68bb      	ldr	r3, [r7, #8]
 8006fe8:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8006fec:	68bb      	ldr	r3, [r7, #8]
 8006fee:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8006ff2:	2181      	movs	r1, #129	; 0x81
 8006ff4:	6878      	ldr	r0, [r7, #4]
 8006ff6:	f001 fe18 	bl	8008c2a <USBD_LL_Transmit>

    ret = USBD_OK;
 8006ffa:	2300      	movs	r3, #0
 8006ffc:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8006ffe:	7bfb      	ldrb	r3, [r7, #15]
}
 8007000:	4618      	mov	r0, r3
 8007002:	3710      	adds	r7, #16
 8007004:	46bd      	mov	sp, r7
 8007006:	bd80      	pop	{r7, pc}

08007008 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8007008:	b580      	push	{r7, lr}
 800700a:	b084      	sub	sp, #16
 800700c:	af00      	add	r7, sp, #0
 800700e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007016:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800701e:	2b00      	cmp	r3, #0
 8007020:	d101      	bne.n	8007026 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8007022:	2303      	movs	r3, #3
 8007024:	e016      	b.n	8007054 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	7c1b      	ldrb	r3, [r3, #16]
 800702a:	2b00      	cmp	r3, #0
 800702c:	d109      	bne.n	8007042 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007034:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007038:	2101      	movs	r1, #1
 800703a:	6878      	ldr	r0, [r7, #4]
 800703c:	f001 fe16 	bl	8008c6c <USBD_LL_PrepareReceive>
 8007040:	e007      	b.n	8007052 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007048:	2340      	movs	r3, #64	; 0x40
 800704a:	2101      	movs	r1, #1
 800704c:	6878      	ldr	r0, [r7, #4]
 800704e:	f001 fe0d 	bl	8008c6c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8007052:	2300      	movs	r3, #0
}
 8007054:	4618      	mov	r0, r3
 8007056:	3710      	adds	r7, #16
 8007058:	46bd      	mov	sp, r7
 800705a:	bd80      	pop	{r7, pc}

0800705c <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800705c:	b580      	push	{r7, lr}
 800705e:	b086      	sub	sp, #24
 8007060:	af00      	add	r7, sp, #0
 8007062:	60f8      	str	r0, [r7, #12]
 8007064:	60b9      	str	r1, [r7, #8]
 8007066:	4613      	mov	r3, r2
 8007068:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	2b00      	cmp	r3, #0
 800706e:	d101      	bne.n	8007074 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8007070:	2303      	movs	r3, #3
 8007072:	e025      	b.n	80070c0 <USBD_Init+0x64>
  }

  /* Unlink previous class */
  if (pdev->pClass != NULL)
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800707a:	2b00      	cmp	r3, #0
 800707c:	d003      	beq.n	8007086 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	2200      	movs	r2, #0
 8007082:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  if (pdev->pConfDesc != NULL)
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 800708c:	2b00      	cmp	r3, #0
 800708e:	d003      	beq.n	8007098 <USBD_Init+0x3c>
  {
    pdev->pConfDesc = NULL;
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	2200      	movs	r2, #0
 8007094:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8007098:	68bb      	ldr	r3, [r7, #8]
 800709a:	2b00      	cmp	r3, #0
 800709c:	d003      	beq.n	80070a6 <USBD_Init+0x4a>
  {
    pdev->pDesc = pdesc;
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	68ba      	ldr	r2, [r7, #8]
 80070a2:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	2201      	movs	r2, #1
 80070aa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	79fa      	ldrb	r2, [r7, #7]
 80070b2:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80070b4:	68f8      	ldr	r0, [r7, #12]
 80070b6:	f001 fc81 	bl	80089bc <USBD_LL_Init>
 80070ba:	4603      	mov	r3, r0
 80070bc:	75fb      	strb	r3, [r7, #23]

  return ret;
 80070be:	7dfb      	ldrb	r3, [r7, #23]
}
 80070c0:	4618      	mov	r0, r3
 80070c2:	3718      	adds	r7, #24
 80070c4:	46bd      	mov	sp, r7
 80070c6:	bd80      	pop	{r7, pc}

080070c8 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80070c8:	b580      	push	{r7, lr}
 80070ca:	b084      	sub	sp, #16
 80070cc:	af00      	add	r7, sp, #0
 80070ce:	6078      	str	r0, [r7, #4]
 80070d0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80070d2:	2300      	movs	r3, #0
 80070d4:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80070d6:	683b      	ldr	r3, [r7, #0]
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d101      	bne.n	80070e0 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 80070dc:	2303      	movs	r3, #3
 80070de:	e010      	b.n	8007102 <USBD_RegisterClass+0x3a>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	683a      	ldr	r2, [r7, #0]
 80070e4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  /* Get Device Configuration Descriptor */
#ifdef USE_USB_FS
  pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
#else /* USE_USB_HS */
  pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80070ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070f0:	f107 020e 	add.w	r2, r7, #14
 80070f4:	4610      	mov	r0, r2
 80070f6:	4798      	blx	r3
 80070f8:	4602      	mov	r2, r0
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
#endif /* USE_USB_FS */


  return USBD_OK;
 8007100:	2300      	movs	r3, #0
}
 8007102:	4618      	mov	r0, r3
 8007104:	3710      	adds	r7, #16
 8007106:	46bd      	mov	sp, r7
 8007108:	bd80      	pop	{r7, pc}

0800710a <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800710a:	b580      	push	{r7, lr}
 800710c:	b082      	sub	sp, #8
 800710e:	af00      	add	r7, sp, #0
 8007110:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8007112:	6878      	ldr	r0, [r7, #4]
 8007114:	f001 fca0 	bl	8008a58 <USBD_LL_Start>
 8007118:	4603      	mov	r3, r0
}
 800711a:	4618      	mov	r0, r3
 800711c:	3708      	adds	r7, #8
 800711e:	46bd      	mov	sp, r7
 8007120:	bd80      	pop	{r7, pc}

08007122 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8007122:	b480      	push	{r7}
 8007124:	b083      	sub	sp, #12
 8007126:	af00      	add	r7, sp, #0
 8007128:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800712a:	2300      	movs	r3, #0
}
 800712c:	4618      	mov	r0, r3
 800712e:	370c      	adds	r7, #12
 8007130:	46bd      	mov	sp, r7
 8007132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007136:	4770      	bx	lr

08007138 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007138:	b580      	push	{r7, lr}
 800713a:	b084      	sub	sp, #16
 800713c:	af00      	add	r7, sp, #0
 800713e:	6078      	str	r0, [r7, #4]
 8007140:	460b      	mov	r3, r1
 8007142:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8007144:	2303      	movs	r3, #3
 8007146:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800714e:	2b00      	cmp	r3, #0
 8007150:	d009      	beq.n	8007166 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	78fa      	ldrb	r2, [r7, #3]
 800715c:	4611      	mov	r1, r2
 800715e:	6878      	ldr	r0, [r7, #4]
 8007160:	4798      	blx	r3
 8007162:	4603      	mov	r3, r0
 8007164:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8007166:	7bfb      	ldrb	r3, [r7, #15]
}
 8007168:	4618      	mov	r0, r3
 800716a:	3710      	adds	r7, #16
 800716c:	46bd      	mov	sp, r7
 800716e:	bd80      	pop	{r7, pc}

08007170 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007170:	b580      	push	{r7, lr}
 8007172:	b082      	sub	sp, #8
 8007174:	af00      	add	r7, sp, #0
 8007176:	6078      	str	r0, [r7, #4]
 8007178:	460b      	mov	r3, r1
 800717a:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007182:	2b00      	cmp	r3, #0
 8007184:	d007      	beq.n	8007196 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800718c:	685b      	ldr	r3, [r3, #4]
 800718e:	78fa      	ldrb	r2, [r7, #3]
 8007190:	4611      	mov	r1, r2
 8007192:	6878      	ldr	r0, [r7, #4]
 8007194:	4798      	blx	r3
  }

  return USBD_OK;
 8007196:	2300      	movs	r3, #0
}
 8007198:	4618      	mov	r0, r3
 800719a:	3708      	adds	r7, #8
 800719c:	46bd      	mov	sp, r7
 800719e:	bd80      	pop	{r7, pc}

080071a0 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80071a0:	b580      	push	{r7, lr}
 80071a2:	b084      	sub	sp, #16
 80071a4:	af00      	add	r7, sp, #0
 80071a6:	6078      	str	r0, [r7, #4]
 80071a8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80071b0:	6839      	ldr	r1, [r7, #0]
 80071b2:	4618      	mov	r0, r3
 80071b4:	f000 ff65 	bl	8008082 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	2201      	movs	r2, #1
 80071bc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 80071c6:	461a      	mov	r2, r3
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80071d4:	f003 031f 	and.w	r3, r3, #31
 80071d8:	2b02      	cmp	r3, #2
 80071da:	d01a      	beq.n	8007212 <USBD_LL_SetupStage+0x72>
 80071dc:	2b02      	cmp	r3, #2
 80071de:	d822      	bhi.n	8007226 <USBD_LL_SetupStage+0x86>
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	d002      	beq.n	80071ea <USBD_LL_SetupStage+0x4a>
 80071e4:	2b01      	cmp	r3, #1
 80071e6:	d00a      	beq.n	80071fe <USBD_LL_SetupStage+0x5e>
 80071e8:	e01d      	b.n	8007226 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80071f0:	4619      	mov	r1, r3
 80071f2:	6878      	ldr	r0, [r7, #4]
 80071f4:	f000 fa18 	bl	8007628 <USBD_StdDevReq>
 80071f8:	4603      	mov	r3, r0
 80071fa:	73fb      	strb	r3, [r7, #15]
      break;
 80071fc:	e020      	b.n	8007240 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007204:	4619      	mov	r1, r3
 8007206:	6878      	ldr	r0, [r7, #4]
 8007208:	f000 fa7c 	bl	8007704 <USBD_StdItfReq>
 800720c:	4603      	mov	r3, r0
 800720e:	73fb      	strb	r3, [r7, #15]
      break;
 8007210:	e016      	b.n	8007240 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007218:	4619      	mov	r1, r3
 800721a:	6878      	ldr	r0, [r7, #4]
 800721c:	f000 faba 	bl	8007794 <USBD_StdEPReq>
 8007220:	4603      	mov	r3, r0
 8007222:	73fb      	strb	r3, [r7, #15]
      break;
 8007224:	e00c      	b.n	8007240 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800722c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007230:	b2db      	uxtb	r3, r3
 8007232:	4619      	mov	r1, r3
 8007234:	6878      	ldr	r0, [r7, #4]
 8007236:	f001 fc6f 	bl	8008b18 <USBD_LL_StallEP>
 800723a:	4603      	mov	r3, r0
 800723c:	73fb      	strb	r3, [r7, #15]
      break;
 800723e:	bf00      	nop
  }

  return ret;
 8007240:	7bfb      	ldrb	r3, [r7, #15]
}
 8007242:	4618      	mov	r0, r3
 8007244:	3710      	adds	r7, #16
 8007246:	46bd      	mov	sp, r7
 8007248:	bd80      	pop	{r7, pc}

0800724a <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800724a:	b580      	push	{r7, lr}
 800724c:	b086      	sub	sp, #24
 800724e:	af00      	add	r7, sp, #0
 8007250:	60f8      	str	r0, [r7, #12]
 8007252:	460b      	mov	r3, r1
 8007254:	607a      	str	r2, [r7, #4]
 8007256:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8007258:	7afb      	ldrb	r3, [r7, #11]
 800725a:	2b00      	cmp	r3, #0
 800725c:	d137      	bne.n	80072ce <USBD_LL_DataOutStage+0x84>
  {
    pep = &pdev->ep_out[0];
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8007264:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800726c:	2b03      	cmp	r3, #3
 800726e:	d14a      	bne.n	8007306 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8007270:	693b      	ldr	r3, [r7, #16]
 8007272:	689a      	ldr	r2, [r3, #8]
 8007274:	693b      	ldr	r3, [r7, #16]
 8007276:	68db      	ldr	r3, [r3, #12]
 8007278:	429a      	cmp	r2, r3
 800727a:	d913      	bls.n	80072a4 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800727c:	693b      	ldr	r3, [r7, #16]
 800727e:	689a      	ldr	r2, [r3, #8]
 8007280:	693b      	ldr	r3, [r7, #16]
 8007282:	68db      	ldr	r3, [r3, #12]
 8007284:	1ad2      	subs	r2, r2, r3
 8007286:	693b      	ldr	r3, [r7, #16]
 8007288:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800728a:	693b      	ldr	r3, [r7, #16]
 800728c:	68da      	ldr	r2, [r3, #12]
 800728e:	693b      	ldr	r3, [r7, #16]
 8007290:	689b      	ldr	r3, [r3, #8]
 8007292:	4293      	cmp	r3, r2
 8007294:	bf28      	it	cs
 8007296:	4613      	movcs	r3, r2
 8007298:	461a      	mov	r2, r3
 800729a:	6879      	ldr	r1, [r7, #4]
 800729c:	68f8      	ldr	r0, [r7, #12]
 800729e:	f000 ffe4 	bl	800826a <USBD_CtlContinueRx>
 80072a2:	e030      	b.n	8007306 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80072aa:	691b      	ldr	r3, [r3, #16]
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	d00a      	beq.n	80072c6 <USBD_LL_DataOutStage+0x7c>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80072b6:	2b03      	cmp	r3, #3
 80072b8:	d105      	bne.n	80072c6 <USBD_LL_DataOutStage+0x7c>
        {
          pdev->pClass->EP0_RxReady(pdev);
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80072c0:	691b      	ldr	r3, [r3, #16]
 80072c2:	68f8      	ldr	r0, [r7, #12]
 80072c4:	4798      	blx	r3
        }
        (void)USBD_CtlSendStatus(pdev);
 80072c6:	68f8      	ldr	r0, [r7, #12]
 80072c8:	f000 ffe0 	bl	800828c <USBD_CtlSendStatus>
 80072cc:	e01b      	b.n	8007306 <USBD_LL_DataOutStage+0xbc>
        (void)USBD_LL_StallEP(pdev, 0U);
      }
#endif
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80072d4:	699b      	ldr	r3, [r3, #24]
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d013      	beq.n	8007302 <USBD_LL_DataOutStage+0xb8>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 80072e0:	2b03      	cmp	r3, #3
 80072e2:	d10e      	bne.n	8007302 <USBD_LL_DataOutStage+0xb8>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80072ea:	699b      	ldr	r3, [r3, #24]
 80072ec:	7afa      	ldrb	r2, [r7, #11]
 80072ee:	4611      	mov	r1, r2
 80072f0:	68f8      	ldr	r0, [r7, #12]
 80072f2:	4798      	blx	r3
 80072f4:	4603      	mov	r3, r0
 80072f6:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 80072f8:	7dfb      	ldrb	r3, [r7, #23]
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d003      	beq.n	8007306 <USBD_LL_DataOutStage+0xbc>
    {
      return ret;
 80072fe:	7dfb      	ldrb	r3, [r7, #23]
 8007300:	e002      	b.n	8007308 <USBD_LL_DataOutStage+0xbe>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8007302:	2303      	movs	r3, #3
 8007304:	e000      	b.n	8007308 <USBD_LL_DataOutStage+0xbe>
  }

  return USBD_OK;
 8007306:	2300      	movs	r3, #0
}
 8007308:	4618      	mov	r0, r3
 800730a:	3718      	adds	r7, #24
 800730c:	46bd      	mov	sp, r7
 800730e:	bd80      	pop	{r7, pc}

08007310 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8007310:	b580      	push	{r7, lr}
 8007312:	b086      	sub	sp, #24
 8007314:	af00      	add	r7, sp, #0
 8007316:	60f8      	str	r0, [r7, #12]
 8007318:	460b      	mov	r3, r1
 800731a:	607a      	str	r2, [r7, #4]
 800731c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800731e:	7afb      	ldrb	r3, [r7, #11]
 8007320:	2b00      	cmp	r3, #0
 8007322:	d16a      	bne.n	80073fa <USBD_LL_DataInStage+0xea>
  {
    pep = &pdev->ep_in[0];
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	3314      	adds	r3, #20
 8007328:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007330:	2b02      	cmp	r3, #2
 8007332:	d155      	bne.n	80073e0 <USBD_LL_DataInStage+0xd0>
    {
      if (pep->rem_length > pep->maxpacket)
 8007334:	693b      	ldr	r3, [r7, #16]
 8007336:	689a      	ldr	r2, [r3, #8]
 8007338:	693b      	ldr	r3, [r7, #16]
 800733a:	68db      	ldr	r3, [r3, #12]
 800733c:	429a      	cmp	r2, r3
 800733e:	d914      	bls.n	800736a <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8007340:	693b      	ldr	r3, [r7, #16]
 8007342:	689a      	ldr	r2, [r3, #8]
 8007344:	693b      	ldr	r3, [r7, #16]
 8007346:	68db      	ldr	r3, [r3, #12]
 8007348:	1ad2      	subs	r2, r2, r3
 800734a:	693b      	ldr	r3, [r7, #16]
 800734c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800734e:	693b      	ldr	r3, [r7, #16]
 8007350:	689b      	ldr	r3, [r3, #8]
 8007352:	461a      	mov	r2, r3
 8007354:	6879      	ldr	r1, [r7, #4]
 8007356:	68f8      	ldr	r0, [r7, #12]
 8007358:	f000 ff59 	bl	800820e <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800735c:	2300      	movs	r3, #0
 800735e:	2200      	movs	r2, #0
 8007360:	2100      	movs	r1, #0
 8007362:	68f8      	ldr	r0, [r7, #12]
 8007364:	f001 fc82 	bl	8008c6c <USBD_LL_PrepareReceive>
 8007368:	e03a      	b.n	80073e0 <USBD_LL_DataInStage+0xd0>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800736a:	693b      	ldr	r3, [r7, #16]
 800736c:	68da      	ldr	r2, [r3, #12]
 800736e:	693b      	ldr	r3, [r7, #16]
 8007370:	689b      	ldr	r3, [r3, #8]
 8007372:	429a      	cmp	r2, r3
 8007374:	d11c      	bne.n	80073b0 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8007376:	693b      	ldr	r3, [r7, #16]
 8007378:	685a      	ldr	r2, [r3, #4]
 800737a:	693b      	ldr	r3, [r7, #16]
 800737c:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800737e:	429a      	cmp	r2, r3
 8007380:	d316      	bcc.n	80073b0 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8007382:	693b      	ldr	r3, [r7, #16]
 8007384:	685a      	ldr	r2, [r3, #4]
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800738c:	429a      	cmp	r2, r3
 800738e:	d20f      	bcs.n	80073b0 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8007390:	2200      	movs	r2, #0
 8007392:	2100      	movs	r1, #0
 8007394:	68f8      	ldr	r0, [r7, #12]
 8007396:	f000 ff3a 	bl	800820e <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	2200      	movs	r2, #0
 800739e:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80073a2:	2300      	movs	r3, #0
 80073a4:	2200      	movs	r2, #0
 80073a6:	2100      	movs	r1, #0
 80073a8:	68f8      	ldr	r0, [r7, #12]
 80073aa:	f001 fc5f 	bl	8008c6c <USBD_LL_PrepareReceive>
 80073ae:	e017      	b.n	80073e0 <USBD_LL_DataInStage+0xd0>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80073b6:	68db      	ldr	r3, [r3, #12]
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	d00a      	beq.n	80073d2 <USBD_LL_DataInStage+0xc2>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80073c2:	2b03      	cmp	r3, #3
 80073c4:	d105      	bne.n	80073d2 <USBD_LL_DataInStage+0xc2>
          {
            pdev->pClass->EP0_TxSent(pdev);
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80073cc:	68db      	ldr	r3, [r3, #12]
 80073ce:	68f8      	ldr	r0, [r7, #12]
 80073d0:	4798      	blx	r3
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80073d2:	2180      	movs	r1, #128	; 0x80
 80073d4:	68f8      	ldr	r0, [r7, #12]
 80073d6:	f001 fb9f 	bl	8008b18 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80073da:	68f8      	ldr	r0, [r7, #12]
 80073dc:	f000 ff69 	bl	80082b2 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80073e6:	2b01      	cmp	r3, #1
 80073e8:	d123      	bne.n	8007432 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 80073ea:	68f8      	ldr	r0, [r7, #12]
 80073ec:	f7ff fe99 	bl	8007122 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	2200      	movs	r2, #0
 80073f4:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80073f8:	e01b      	b.n	8007432 <USBD_LL_DataInStage+0x122>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007400:	695b      	ldr	r3, [r3, #20]
 8007402:	2b00      	cmp	r3, #0
 8007404:	d013      	beq.n	800742e <USBD_LL_DataInStage+0x11e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 800740c:	2b03      	cmp	r3, #3
 800740e:	d10e      	bne.n	800742e <USBD_LL_DataInStage+0x11e>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007416:	695b      	ldr	r3, [r3, #20]
 8007418:	7afa      	ldrb	r2, [r7, #11]
 800741a:	4611      	mov	r1, r2
 800741c:	68f8      	ldr	r0, [r7, #12]
 800741e:	4798      	blx	r3
 8007420:	4603      	mov	r3, r0
 8007422:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 8007424:	7dfb      	ldrb	r3, [r7, #23]
 8007426:	2b00      	cmp	r3, #0
 8007428:	d003      	beq.n	8007432 <USBD_LL_DataInStage+0x122>
    {
      return ret;
 800742a:	7dfb      	ldrb	r3, [r7, #23]
 800742c:	e002      	b.n	8007434 <USBD_LL_DataInStage+0x124>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800742e:	2303      	movs	r3, #3
 8007430:	e000      	b.n	8007434 <USBD_LL_DataInStage+0x124>
  }

  return USBD_OK;
 8007432:	2300      	movs	r3, #0
}
 8007434:	4618      	mov	r0, r3
 8007436:	3718      	adds	r7, #24
 8007438:	46bd      	mov	sp, r7
 800743a:	bd80      	pop	{r7, pc}

0800743c <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800743c:	b580      	push	{r7, lr}
 800743e:	b082      	sub	sp, #8
 8007440:	af00      	add	r7, sp, #0
 8007442:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	2201      	movs	r2, #1
 8007448:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	2200      	movs	r2, #0
 8007450:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	2200      	movs	r2, #0
 8007458:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	2200      	movs	r2, #0
 800745e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData != NULL)
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007468:	2b00      	cmp	r3, #0
 800746a:	d009      	beq.n	8007480 <USBD_LL_Reset+0x44>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007472:	685b      	ldr	r3, [r3, #4]
 8007474:	687a      	ldr	r2, [r7, #4]
 8007476:	6852      	ldr	r2, [r2, #4]
 8007478:	b2d2      	uxtb	r2, r2
 800747a:	4611      	mov	r1, r2
 800747c:	6878      	ldr	r0, [r7, #4]
 800747e:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007480:	2340      	movs	r3, #64	; 0x40
 8007482:	2200      	movs	r2, #0
 8007484:	2100      	movs	r1, #0
 8007486:	6878      	ldr	r0, [r7, #4]
 8007488:	f001 fb01 	bl	8008a8e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	2201      	movs	r2, #1
 8007490:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	2240      	movs	r2, #64	; 0x40
 8007498:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800749c:	2340      	movs	r3, #64	; 0x40
 800749e:	2200      	movs	r2, #0
 80074a0:	2180      	movs	r1, #128	; 0x80
 80074a2:	6878      	ldr	r0, [r7, #4]
 80074a4:	f001 faf3 	bl	8008a8e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	2201      	movs	r2, #1
 80074ac:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	2240      	movs	r2, #64	; 0x40
 80074b2:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 80074b4:	2300      	movs	r3, #0
}
 80074b6:	4618      	mov	r0, r3
 80074b8:	3708      	adds	r7, #8
 80074ba:	46bd      	mov	sp, r7
 80074bc:	bd80      	pop	{r7, pc}

080074be <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80074be:	b480      	push	{r7}
 80074c0:	b083      	sub	sp, #12
 80074c2:	af00      	add	r7, sp, #0
 80074c4:	6078      	str	r0, [r7, #4]
 80074c6:	460b      	mov	r3, r1
 80074c8:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	78fa      	ldrb	r2, [r7, #3]
 80074ce:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80074d0:	2300      	movs	r3, #0
}
 80074d2:	4618      	mov	r0, r3
 80074d4:	370c      	adds	r7, #12
 80074d6:	46bd      	mov	sp, r7
 80074d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074dc:	4770      	bx	lr

080074de <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80074de:	b480      	push	{r7}
 80074e0:	b083      	sub	sp, #12
 80074e2:	af00      	add	r7, sp, #0
 80074e4:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	2204      	movs	r2, #4
 80074f6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80074fa:	2300      	movs	r3, #0
}
 80074fc:	4618      	mov	r0, r3
 80074fe:	370c      	adds	r7, #12
 8007500:	46bd      	mov	sp, r7
 8007502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007506:	4770      	bx	lr

08007508 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8007508:	b480      	push	{r7}
 800750a:	b083      	sub	sp, #12
 800750c:	af00      	add	r7, sp, #0
 800750e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007516:	2b04      	cmp	r3, #4
 8007518:	d105      	bne.n	8007526 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8007526:	2300      	movs	r3, #0
}
 8007528:	4618      	mov	r0, r3
 800752a:	370c      	adds	r7, #12
 800752c:	46bd      	mov	sp, r7
 800752e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007532:	4770      	bx	lr

08007534 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8007534:	b580      	push	{r7, lr}
 8007536:	b082      	sub	sp, #8
 8007538:	af00      	add	r7, sp, #0
 800753a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007542:	2b03      	cmp	r3, #3
 8007544:	d10b      	bne.n	800755e <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800754c:	69db      	ldr	r3, [r3, #28]
 800754e:	2b00      	cmp	r3, #0
 8007550:	d005      	beq.n	800755e <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007558:	69db      	ldr	r3, [r3, #28]
 800755a:	6878      	ldr	r0, [r7, #4]
 800755c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800755e:	2300      	movs	r3, #0
}
 8007560:	4618      	mov	r0, r3
 8007562:	3708      	adds	r7, #8
 8007564:	46bd      	mov	sp, r7
 8007566:	bd80      	pop	{r7, pc}

08007568 <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8007568:	b480      	push	{r7}
 800756a:	b083      	sub	sp, #12
 800756c:	af00      	add	r7, sp, #0
 800756e:	6078      	str	r0, [r7, #4]
 8007570:	460b      	mov	r3, r1
 8007572:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8007574:	2300      	movs	r3, #0
}
 8007576:	4618      	mov	r0, r3
 8007578:	370c      	adds	r7, #12
 800757a:	46bd      	mov	sp, r7
 800757c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007580:	4770      	bx	lr

08007582 <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8007582:	b480      	push	{r7}
 8007584:	b083      	sub	sp, #12
 8007586:	af00      	add	r7, sp, #0
 8007588:	6078      	str	r0, [r7, #4]
 800758a:	460b      	mov	r3, r1
 800758c:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 800758e:	2300      	movs	r3, #0
}
 8007590:	4618      	mov	r0, r3
 8007592:	370c      	adds	r7, #12
 8007594:	46bd      	mov	sp, r7
 8007596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800759a:	4770      	bx	lr

0800759c <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800759c:	b480      	push	{r7}
 800759e:	b083      	sub	sp, #12
 80075a0:	af00      	add	r7, sp, #0
 80075a2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80075a4:	2300      	movs	r3, #0
}
 80075a6:	4618      	mov	r0, r3
 80075a8:	370c      	adds	r7, #12
 80075aa:	46bd      	mov	sp, r7
 80075ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075b0:	4770      	bx	lr

080075b2 <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80075b2:	b580      	push	{r7, lr}
 80075b4:	b082      	sub	sp, #8
 80075b6:	af00      	add	r7, sp, #0
 80075b8:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	2201      	movs	r2, #1
 80075be:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	d009      	beq.n	80075e0 <USBD_LL_DevDisconnected+0x2e>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80075d2:	685b      	ldr	r3, [r3, #4]
 80075d4:	687a      	ldr	r2, [r7, #4]
 80075d6:	6852      	ldr	r2, [r2, #4]
 80075d8:	b2d2      	uxtb	r2, r2
 80075da:	4611      	mov	r1, r2
 80075dc:	6878      	ldr	r0, [r7, #4]
 80075de:	4798      	blx	r3
  }

  return USBD_OK;
 80075e0:	2300      	movs	r3, #0
}
 80075e2:	4618      	mov	r0, r3
 80075e4:	3708      	adds	r7, #8
 80075e6:	46bd      	mov	sp, r7
 80075e8:	bd80      	pop	{r7, pc}

080075ea <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80075ea:	b480      	push	{r7}
 80075ec:	b087      	sub	sp, #28
 80075ee:	af00      	add	r7, sp, #0
 80075f0:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80075f6:	697b      	ldr	r3, [r7, #20]
 80075f8:	781b      	ldrb	r3, [r3, #0]
 80075fa:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80075fc:	697b      	ldr	r3, [r7, #20]
 80075fe:	3301      	adds	r3, #1
 8007600:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8007602:	697b      	ldr	r3, [r7, #20]
 8007604:	781b      	ldrb	r3, [r3, #0]
 8007606:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8007608:	8a3b      	ldrh	r3, [r7, #16]
 800760a:	021b      	lsls	r3, r3, #8
 800760c:	b21a      	sxth	r2, r3
 800760e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8007612:	4313      	orrs	r3, r2
 8007614:	b21b      	sxth	r3, r3
 8007616:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8007618:	89fb      	ldrh	r3, [r7, #14]
}
 800761a:	4618      	mov	r0, r3
 800761c:	371c      	adds	r7, #28
 800761e:	46bd      	mov	sp, r7
 8007620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007624:	4770      	bx	lr
	...

08007628 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007628:	b580      	push	{r7, lr}
 800762a:	b084      	sub	sp, #16
 800762c:	af00      	add	r7, sp, #0
 800762e:	6078      	str	r0, [r7, #4]
 8007630:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007632:	2300      	movs	r3, #0
 8007634:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007636:	683b      	ldr	r3, [r7, #0]
 8007638:	781b      	ldrb	r3, [r3, #0]
 800763a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800763e:	2b40      	cmp	r3, #64	; 0x40
 8007640:	d005      	beq.n	800764e <USBD_StdDevReq+0x26>
 8007642:	2b40      	cmp	r3, #64	; 0x40
 8007644:	d853      	bhi.n	80076ee <USBD_StdDevReq+0xc6>
 8007646:	2b00      	cmp	r3, #0
 8007648:	d00b      	beq.n	8007662 <USBD_StdDevReq+0x3a>
 800764a:	2b20      	cmp	r3, #32
 800764c:	d14f      	bne.n	80076ee <USBD_StdDevReq+0xc6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007654:	689b      	ldr	r3, [r3, #8]
 8007656:	6839      	ldr	r1, [r7, #0]
 8007658:	6878      	ldr	r0, [r7, #4]
 800765a:	4798      	blx	r3
 800765c:	4603      	mov	r3, r0
 800765e:	73fb      	strb	r3, [r7, #15]
    break;
 8007660:	e04a      	b.n	80076f8 <USBD_StdDevReq+0xd0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8007662:	683b      	ldr	r3, [r7, #0]
 8007664:	785b      	ldrb	r3, [r3, #1]
 8007666:	2b09      	cmp	r3, #9
 8007668:	d83b      	bhi.n	80076e2 <USBD_StdDevReq+0xba>
 800766a:	a201      	add	r2, pc, #4	; (adr r2, 8007670 <USBD_StdDevReq+0x48>)
 800766c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007670:	080076c5 	.word	0x080076c5
 8007674:	080076d9 	.word	0x080076d9
 8007678:	080076e3 	.word	0x080076e3
 800767c:	080076cf 	.word	0x080076cf
 8007680:	080076e3 	.word	0x080076e3
 8007684:	080076a3 	.word	0x080076a3
 8007688:	08007699 	.word	0x08007699
 800768c:	080076e3 	.word	0x080076e3
 8007690:	080076bb 	.word	0x080076bb
 8007694:	080076ad 	.word	0x080076ad
    {
    case USB_REQ_GET_DESCRIPTOR:
      USBD_GetDescriptor(pdev, req);
 8007698:	6839      	ldr	r1, [r7, #0]
 800769a:	6878      	ldr	r0, [r7, #4]
 800769c:	f000 f9d8 	bl	8007a50 <USBD_GetDescriptor>
      break;
 80076a0:	e024      	b.n	80076ec <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress(pdev, req);
 80076a2:	6839      	ldr	r1, [r7, #0]
 80076a4:	6878      	ldr	r0, [r7, #4]
 80076a6:	f000 fb67 	bl	8007d78 <USBD_SetAddress>
      break;
 80076aa:	e01f      	b.n	80076ec <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_CONFIGURATION:
      ret = USBD_SetConfig(pdev, req);
 80076ac:	6839      	ldr	r1, [r7, #0]
 80076ae:	6878      	ldr	r0, [r7, #4]
 80076b0:	f000 fba6 	bl	8007e00 <USBD_SetConfig>
 80076b4:	4603      	mov	r3, r0
 80076b6:	73fb      	strb	r3, [r7, #15]
      break;
 80076b8:	e018      	b.n	80076ec <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig(pdev, req);
 80076ba:	6839      	ldr	r1, [r7, #0]
 80076bc:	6878      	ldr	r0, [r7, #4]
 80076be:	f000 fc43 	bl	8007f48 <USBD_GetConfig>
      break;
 80076c2:	e013      	b.n	80076ec <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus(pdev, req);
 80076c4:	6839      	ldr	r1, [r7, #0]
 80076c6:	6878      	ldr	r0, [r7, #4]
 80076c8:	f000 fc73 	bl	8007fb2 <USBD_GetStatus>
      break;
 80076cc:	e00e      	b.n	80076ec <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_FEATURE:
      USBD_SetFeature(pdev, req);
 80076ce:	6839      	ldr	r1, [r7, #0]
 80076d0:	6878      	ldr	r0, [r7, #4]
 80076d2:	f000 fca1 	bl	8008018 <USBD_SetFeature>
      break;
 80076d6:	e009      	b.n	80076ec <USBD_StdDevReq+0xc4>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature(pdev, req);
 80076d8:	6839      	ldr	r1, [r7, #0]
 80076da:	6878      	ldr	r0, [r7, #4]
 80076dc:	f000 fcb0 	bl	8008040 <USBD_ClrFeature>
      break;
 80076e0:	e004      	b.n	80076ec <USBD_StdDevReq+0xc4>

    default:
      USBD_CtlError(pdev, req);
 80076e2:	6839      	ldr	r1, [r7, #0]
 80076e4:	6878      	ldr	r0, [r7, #4]
 80076e6:	f000 fd06 	bl	80080f6 <USBD_CtlError>
      break;
 80076ea:	bf00      	nop
    }
    break;
 80076ec:	e004      	b.n	80076f8 <USBD_StdDevReq+0xd0>

  default:
    USBD_CtlError(pdev, req);
 80076ee:	6839      	ldr	r1, [r7, #0]
 80076f0:	6878      	ldr	r0, [r7, #4]
 80076f2:	f000 fd00 	bl	80080f6 <USBD_CtlError>
    break;
 80076f6:	bf00      	nop
  }

  return ret;
 80076f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80076fa:	4618      	mov	r0, r3
 80076fc:	3710      	adds	r7, #16
 80076fe:	46bd      	mov	sp, r7
 8007700:	bd80      	pop	{r7, pc}
 8007702:	bf00      	nop

08007704 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007704:	b580      	push	{r7, lr}
 8007706:	b084      	sub	sp, #16
 8007708:	af00      	add	r7, sp, #0
 800770a:	6078      	str	r0, [r7, #4]
 800770c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800770e:	2300      	movs	r3, #0
 8007710:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007712:	683b      	ldr	r3, [r7, #0]
 8007714:	781b      	ldrb	r3, [r3, #0]
 8007716:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800771a:	2b40      	cmp	r3, #64	; 0x40
 800771c:	d005      	beq.n	800772a <USBD_StdItfReq+0x26>
 800771e:	2b40      	cmp	r3, #64	; 0x40
 8007720:	d82e      	bhi.n	8007780 <USBD_StdItfReq+0x7c>
 8007722:	2b00      	cmp	r3, #0
 8007724:	d001      	beq.n	800772a <USBD_StdItfReq+0x26>
 8007726:	2b20      	cmp	r3, #32
 8007728:	d12a      	bne.n	8007780 <USBD_StdItfReq+0x7c>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007730:	3b01      	subs	r3, #1
 8007732:	2b02      	cmp	r3, #2
 8007734:	d81d      	bhi.n	8007772 <USBD_StdItfReq+0x6e>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8007736:	683b      	ldr	r3, [r7, #0]
 8007738:	889b      	ldrh	r3, [r3, #4]
 800773a:	b2db      	uxtb	r3, r3
 800773c:	2b01      	cmp	r3, #1
 800773e:	d813      	bhi.n	8007768 <USBD_StdItfReq+0x64>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007746:	689b      	ldr	r3, [r3, #8]
 8007748:	6839      	ldr	r1, [r7, #0]
 800774a:	6878      	ldr	r0, [r7, #4]
 800774c:	4798      	blx	r3
 800774e:	4603      	mov	r3, r0
 8007750:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 8007752:	683b      	ldr	r3, [r7, #0]
 8007754:	88db      	ldrh	r3, [r3, #6]
 8007756:	2b00      	cmp	r3, #0
 8007758:	d110      	bne.n	800777c <USBD_StdItfReq+0x78>
 800775a:	7bfb      	ldrb	r3, [r7, #15]
 800775c:	2b00      	cmp	r3, #0
 800775e:	d10d      	bne.n	800777c <USBD_StdItfReq+0x78>
        {
          (void)USBD_CtlSendStatus(pdev);
 8007760:	6878      	ldr	r0, [r7, #4]
 8007762:	f000 fd93 	bl	800828c <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 8007766:	e009      	b.n	800777c <USBD_StdItfReq+0x78>
        USBD_CtlError(pdev, req);
 8007768:	6839      	ldr	r1, [r7, #0]
 800776a:	6878      	ldr	r0, [r7, #4]
 800776c:	f000 fcc3 	bl	80080f6 <USBD_CtlError>
      break;
 8007770:	e004      	b.n	800777c <USBD_StdItfReq+0x78>

    default:
      USBD_CtlError(pdev, req);
 8007772:	6839      	ldr	r1, [r7, #0]
 8007774:	6878      	ldr	r0, [r7, #4]
 8007776:	f000 fcbe 	bl	80080f6 <USBD_CtlError>
      break;
 800777a:	e000      	b.n	800777e <USBD_StdItfReq+0x7a>
      break;
 800777c:	bf00      	nop
    }
    break;
 800777e:	e004      	b.n	800778a <USBD_StdItfReq+0x86>

  default:
    USBD_CtlError(pdev, req);
 8007780:	6839      	ldr	r1, [r7, #0]
 8007782:	6878      	ldr	r0, [r7, #4]
 8007784:	f000 fcb7 	bl	80080f6 <USBD_CtlError>
    break;
 8007788:	bf00      	nop
  }

  return ret;
 800778a:	7bfb      	ldrb	r3, [r7, #15]
}
 800778c:	4618      	mov	r0, r3
 800778e:	3710      	adds	r7, #16
 8007790:	46bd      	mov	sp, r7
 8007792:	bd80      	pop	{r7, pc}

08007794 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007794:	b580      	push	{r7, lr}
 8007796:	b084      	sub	sp, #16
 8007798:	af00      	add	r7, sp, #0
 800779a:	6078      	str	r0, [r7, #4]
 800779c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800779e:	2300      	movs	r3, #0
 80077a0:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 80077a2:	683b      	ldr	r3, [r7, #0]
 80077a4:	889b      	ldrh	r3, [r3, #4]
 80077a6:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80077a8:	683b      	ldr	r3, [r7, #0]
 80077aa:	781b      	ldrb	r3, [r3, #0]
 80077ac:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80077b0:	2b40      	cmp	r3, #64	; 0x40
 80077b2:	d007      	beq.n	80077c4 <USBD_StdEPReq+0x30>
 80077b4:	2b40      	cmp	r3, #64	; 0x40
 80077b6:	f200 8140 	bhi.w	8007a3a <USBD_StdEPReq+0x2a6>
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d00c      	beq.n	80077d8 <USBD_StdEPReq+0x44>
 80077be:	2b20      	cmp	r3, #32
 80077c0:	f040 813b 	bne.w	8007a3a <USBD_StdEPReq+0x2a6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80077ca:	689b      	ldr	r3, [r3, #8]
 80077cc:	6839      	ldr	r1, [r7, #0]
 80077ce:	6878      	ldr	r0, [r7, #4]
 80077d0:	4798      	blx	r3
 80077d2:	4603      	mov	r3, r0
 80077d4:	73fb      	strb	r3, [r7, #15]
    break;
 80077d6:	e135      	b.n	8007a44 <USBD_StdEPReq+0x2b0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 80077d8:	683b      	ldr	r3, [r7, #0]
 80077da:	785b      	ldrb	r3, [r3, #1]
 80077dc:	2b03      	cmp	r3, #3
 80077de:	d007      	beq.n	80077f0 <USBD_StdEPReq+0x5c>
 80077e0:	2b03      	cmp	r3, #3
 80077e2:	f300 8124 	bgt.w	8007a2e <USBD_StdEPReq+0x29a>
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	d07b      	beq.n	80078e2 <USBD_StdEPReq+0x14e>
 80077ea:	2b01      	cmp	r3, #1
 80077ec:	d03b      	beq.n	8007866 <USBD_StdEPReq+0xd2>
 80077ee:	e11e      	b.n	8007a2e <USBD_StdEPReq+0x29a>
    {
    case USB_REQ_SET_FEATURE:
      switch (pdev->dev_state)
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80077f6:	2b02      	cmp	r3, #2
 80077f8:	d002      	beq.n	8007800 <USBD_StdEPReq+0x6c>
 80077fa:	2b03      	cmp	r3, #3
 80077fc:	d016      	beq.n	800782c <USBD_StdEPReq+0x98>
 80077fe:	e02c      	b.n	800785a <USBD_StdEPReq+0xc6>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007800:	7bbb      	ldrb	r3, [r7, #14]
 8007802:	2b00      	cmp	r3, #0
 8007804:	d00d      	beq.n	8007822 <USBD_StdEPReq+0x8e>
 8007806:	7bbb      	ldrb	r3, [r7, #14]
 8007808:	2b80      	cmp	r3, #128	; 0x80
 800780a:	d00a      	beq.n	8007822 <USBD_StdEPReq+0x8e>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 800780c:	7bbb      	ldrb	r3, [r7, #14]
 800780e:	4619      	mov	r1, r3
 8007810:	6878      	ldr	r0, [r7, #4]
 8007812:	f001 f981 	bl	8008b18 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8007816:	2180      	movs	r1, #128	; 0x80
 8007818:	6878      	ldr	r0, [r7, #4]
 800781a:	f001 f97d 	bl	8008b18 <USBD_LL_StallEP>
 800781e:	bf00      	nop
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8007820:	e020      	b.n	8007864 <USBD_StdEPReq+0xd0>
          USBD_CtlError(pdev, req);
 8007822:	6839      	ldr	r1, [r7, #0]
 8007824:	6878      	ldr	r0, [r7, #4]
 8007826:	f000 fc66 	bl	80080f6 <USBD_CtlError>
        break;
 800782a:	e01b      	b.n	8007864 <USBD_StdEPReq+0xd0>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800782c:	683b      	ldr	r3, [r7, #0]
 800782e:	885b      	ldrh	r3, [r3, #2]
 8007830:	2b00      	cmp	r3, #0
 8007832:	d10e      	bne.n	8007852 <USBD_StdEPReq+0xbe>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007834:	7bbb      	ldrb	r3, [r7, #14]
 8007836:	2b00      	cmp	r3, #0
 8007838:	d00b      	beq.n	8007852 <USBD_StdEPReq+0xbe>
 800783a:	7bbb      	ldrb	r3, [r7, #14]
 800783c:	2b80      	cmp	r3, #128	; 0x80
 800783e:	d008      	beq.n	8007852 <USBD_StdEPReq+0xbe>
 8007840:	683b      	ldr	r3, [r7, #0]
 8007842:	88db      	ldrh	r3, [r3, #6]
 8007844:	2b00      	cmp	r3, #0
 8007846:	d104      	bne.n	8007852 <USBD_StdEPReq+0xbe>
          {
            (void)USBD_LL_StallEP(pdev, ep_addr);
 8007848:	7bbb      	ldrb	r3, [r7, #14]
 800784a:	4619      	mov	r1, r3
 800784c:	6878      	ldr	r0, [r7, #4]
 800784e:	f001 f963 	bl	8008b18 <USBD_LL_StallEP>
          }
        }
        (void)USBD_CtlSendStatus(pdev);
 8007852:	6878      	ldr	r0, [r7, #4]
 8007854:	f000 fd1a 	bl	800828c <USBD_CtlSendStatus>

        break;
 8007858:	e004      	b.n	8007864 <USBD_StdEPReq+0xd0>

      default:
        USBD_CtlError(pdev, req);
 800785a:	6839      	ldr	r1, [r7, #0]
 800785c:	6878      	ldr	r0, [r7, #4]
 800785e:	f000 fc4a 	bl	80080f6 <USBD_CtlError>
        break;
 8007862:	bf00      	nop
      }
      break;
 8007864:	e0e8      	b.n	8007a38 <USBD_StdEPReq+0x2a4>

    case USB_REQ_CLEAR_FEATURE:

      switch (pdev->dev_state)
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800786c:	2b02      	cmp	r3, #2
 800786e:	d002      	beq.n	8007876 <USBD_StdEPReq+0xe2>
 8007870:	2b03      	cmp	r3, #3
 8007872:	d016      	beq.n	80078a2 <USBD_StdEPReq+0x10e>
 8007874:	e02e      	b.n	80078d4 <USBD_StdEPReq+0x140>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007876:	7bbb      	ldrb	r3, [r7, #14]
 8007878:	2b00      	cmp	r3, #0
 800787a:	d00d      	beq.n	8007898 <USBD_StdEPReq+0x104>
 800787c:	7bbb      	ldrb	r3, [r7, #14]
 800787e:	2b80      	cmp	r3, #128	; 0x80
 8007880:	d00a      	beq.n	8007898 <USBD_StdEPReq+0x104>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 8007882:	7bbb      	ldrb	r3, [r7, #14]
 8007884:	4619      	mov	r1, r3
 8007886:	6878      	ldr	r0, [r7, #4]
 8007888:	f001 f946 	bl	8008b18 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800788c:	2180      	movs	r1, #128	; 0x80
 800788e:	6878      	ldr	r0, [r7, #4]
 8007890:	f001 f942 	bl	8008b18 <USBD_LL_StallEP>
 8007894:	bf00      	nop
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8007896:	e023      	b.n	80078e0 <USBD_StdEPReq+0x14c>
          USBD_CtlError(pdev, req);
 8007898:	6839      	ldr	r1, [r7, #0]
 800789a:	6878      	ldr	r0, [r7, #4]
 800789c:	f000 fc2b 	bl	80080f6 <USBD_CtlError>
        break;
 80078a0:	e01e      	b.n	80078e0 <USBD_StdEPReq+0x14c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 80078a2:	683b      	ldr	r3, [r7, #0]
 80078a4:	885b      	ldrh	r3, [r3, #2]
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	d119      	bne.n	80078de <USBD_StdEPReq+0x14a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 80078aa:	7bbb      	ldrb	r3, [r7, #14]
 80078ac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	d004      	beq.n	80078be <USBD_StdEPReq+0x12a>
          {
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80078b4:	7bbb      	ldrb	r3, [r7, #14]
 80078b6:	4619      	mov	r1, r3
 80078b8:	6878      	ldr	r0, [r7, #4]
 80078ba:	f001 f94c 	bl	8008b56 <USBD_LL_ClearStallEP>
          }
          (void)USBD_CtlSendStatus(pdev);
 80078be:	6878      	ldr	r0, [r7, #4]
 80078c0:	f000 fce4 	bl	800828c <USBD_CtlSendStatus>
          (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80078ca:	689b      	ldr	r3, [r3, #8]
 80078cc:	6839      	ldr	r1, [r7, #0]
 80078ce:	6878      	ldr	r0, [r7, #4]
 80078d0:	4798      	blx	r3
        }
        break;
 80078d2:	e004      	b.n	80078de <USBD_StdEPReq+0x14a>

      default:
        USBD_CtlError(pdev, req);
 80078d4:	6839      	ldr	r1, [r7, #0]
 80078d6:	6878      	ldr	r0, [r7, #4]
 80078d8:	f000 fc0d 	bl	80080f6 <USBD_CtlError>
        break;
 80078dc:	e000      	b.n	80078e0 <USBD_StdEPReq+0x14c>
        break;
 80078de:	bf00      	nop
      }
      break;
 80078e0:	e0aa      	b.n	8007a38 <USBD_StdEPReq+0x2a4>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80078e8:	2b02      	cmp	r3, #2
 80078ea:	d002      	beq.n	80078f2 <USBD_StdEPReq+0x15e>
 80078ec:	2b03      	cmp	r3, #3
 80078ee:	d032      	beq.n	8007956 <USBD_StdEPReq+0x1c2>
 80078f0:	e097      	b.n	8007a22 <USBD_StdEPReq+0x28e>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80078f2:	7bbb      	ldrb	r3, [r7, #14]
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	d007      	beq.n	8007908 <USBD_StdEPReq+0x174>
 80078f8:	7bbb      	ldrb	r3, [r7, #14]
 80078fa:	2b80      	cmp	r3, #128	; 0x80
 80078fc:	d004      	beq.n	8007908 <USBD_StdEPReq+0x174>
        {
          USBD_CtlError(pdev, req);
 80078fe:	6839      	ldr	r1, [r7, #0]
 8007900:	6878      	ldr	r0, [r7, #4]
 8007902:	f000 fbf8 	bl	80080f6 <USBD_CtlError>
          break;
 8007906:	e091      	b.n	8007a2c <USBD_StdEPReq+0x298>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007908:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800790c:	2b00      	cmp	r3, #0
 800790e:	da0b      	bge.n	8007928 <USBD_StdEPReq+0x194>
 8007910:	7bbb      	ldrb	r3, [r7, #14]
 8007912:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007916:	4613      	mov	r3, r2
 8007918:	009b      	lsls	r3, r3, #2
 800791a:	4413      	add	r3, r2
 800791c:	009b      	lsls	r3, r3, #2
 800791e:	3310      	adds	r3, #16
 8007920:	687a      	ldr	r2, [r7, #4]
 8007922:	4413      	add	r3, r2
 8007924:	3304      	adds	r3, #4
 8007926:	e00b      	b.n	8007940 <USBD_StdEPReq+0x1ac>
              &pdev->ep_out[ep_addr & 0x7FU];
 8007928:	7bbb      	ldrb	r3, [r7, #14]
 800792a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800792e:	4613      	mov	r3, r2
 8007930:	009b      	lsls	r3, r3, #2
 8007932:	4413      	add	r3, r2
 8007934:	009b      	lsls	r3, r3, #2
 8007936:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800793a:	687a      	ldr	r2, [r7, #4]
 800793c:	4413      	add	r3, r2
 800793e:	3304      	adds	r3, #4
 8007940:	60bb      	str	r3, [r7, #8]

        pep->status = 0x0000U;
 8007942:	68bb      	ldr	r3, [r7, #8]
 8007944:	2200      	movs	r2, #0
 8007946:	601a      	str	r2, [r3, #0]

        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007948:	68bb      	ldr	r3, [r7, #8]
 800794a:	2202      	movs	r2, #2
 800794c:	4619      	mov	r1, r3
 800794e:	6878      	ldr	r0, [r7, #4]
 8007950:	f000 fc42 	bl	80081d8 <USBD_CtlSendData>
        break;
 8007954:	e06a      	b.n	8007a2c <USBD_StdEPReq+0x298>

      case USBD_STATE_CONFIGURED:
        if ((ep_addr & 0x80U) == 0x80U)
 8007956:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800795a:	2b00      	cmp	r3, #0
 800795c:	da11      	bge.n	8007982 <USBD_StdEPReq+0x1ee>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800795e:	7bbb      	ldrb	r3, [r7, #14]
 8007960:	f003 020f 	and.w	r2, r3, #15
 8007964:	6879      	ldr	r1, [r7, #4]
 8007966:	4613      	mov	r3, r2
 8007968:	009b      	lsls	r3, r3, #2
 800796a:	4413      	add	r3, r2
 800796c:	009b      	lsls	r3, r3, #2
 800796e:	440b      	add	r3, r1
 8007970:	3324      	adds	r3, #36	; 0x24
 8007972:	881b      	ldrh	r3, [r3, #0]
 8007974:	2b00      	cmp	r3, #0
 8007976:	d117      	bne.n	80079a8 <USBD_StdEPReq+0x214>
          {
            USBD_CtlError(pdev, req);
 8007978:	6839      	ldr	r1, [r7, #0]
 800797a:	6878      	ldr	r0, [r7, #4]
 800797c:	f000 fbbb 	bl	80080f6 <USBD_CtlError>
            break;
 8007980:	e054      	b.n	8007a2c <USBD_StdEPReq+0x298>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8007982:	7bbb      	ldrb	r3, [r7, #14]
 8007984:	f003 020f 	and.w	r2, r3, #15
 8007988:	6879      	ldr	r1, [r7, #4]
 800798a:	4613      	mov	r3, r2
 800798c:	009b      	lsls	r3, r3, #2
 800798e:	4413      	add	r3, r2
 8007990:	009b      	lsls	r3, r3, #2
 8007992:	440b      	add	r3, r1
 8007994:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8007998:	881b      	ldrh	r3, [r3, #0]
 800799a:	2b00      	cmp	r3, #0
 800799c:	d104      	bne.n	80079a8 <USBD_StdEPReq+0x214>
          {
            USBD_CtlError(pdev, req);
 800799e:	6839      	ldr	r1, [r7, #0]
 80079a0:	6878      	ldr	r0, [r7, #4]
 80079a2:	f000 fba8 	bl	80080f6 <USBD_CtlError>
            break;
 80079a6:	e041      	b.n	8007a2c <USBD_StdEPReq+0x298>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80079a8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	da0b      	bge.n	80079c8 <USBD_StdEPReq+0x234>
 80079b0:	7bbb      	ldrb	r3, [r7, #14]
 80079b2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80079b6:	4613      	mov	r3, r2
 80079b8:	009b      	lsls	r3, r3, #2
 80079ba:	4413      	add	r3, r2
 80079bc:	009b      	lsls	r3, r3, #2
 80079be:	3310      	adds	r3, #16
 80079c0:	687a      	ldr	r2, [r7, #4]
 80079c2:	4413      	add	r3, r2
 80079c4:	3304      	adds	r3, #4
 80079c6:	e00b      	b.n	80079e0 <USBD_StdEPReq+0x24c>
              &pdev->ep_out[ep_addr & 0x7FU];
 80079c8:	7bbb      	ldrb	r3, [r7, #14]
 80079ca:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80079ce:	4613      	mov	r3, r2
 80079d0:	009b      	lsls	r3, r3, #2
 80079d2:	4413      	add	r3, r2
 80079d4:	009b      	lsls	r3, r3, #2
 80079d6:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80079da:	687a      	ldr	r2, [r7, #4]
 80079dc:	4413      	add	r3, r2
 80079de:	3304      	adds	r3, #4
 80079e0:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80079e2:	7bbb      	ldrb	r3, [r7, #14]
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	d002      	beq.n	80079ee <USBD_StdEPReq+0x25a>
 80079e8:	7bbb      	ldrb	r3, [r7, #14]
 80079ea:	2b80      	cmp	r3, #128	; 0x80
 80079ec:	d103      	bne.n	80079f6 <USBD_StdEPReq+0x262>
          {
            pep->status = 0x0000U;
 80079ee:	68bb      	ldr	r3, [r7, #8]
 80079f0:	2200      	movs	r2, #0
 80079f2:	601a      	str	r2, [r3, #0]
 80079f4:	e00e      	b.n	8007a14 <USBD_StdEPReq+0x280>
          }
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80079f6:	7bbb      	ldrb	r3, [r7, #14]
 80079f8:	4619      	mov	r1, r3
 80079fa:	6878      	ldr	r0, [r7, #4]
 80079fc:	f001 f8ca 	bl	8008b94 <USBD_LL_IsStallEP>
 8007a00:	4603      	mov	r3, r0
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	d003      	beq.n	8007a0e <USBD_StdEPReq+0x27a>
          {
            pep->status = 0x0001U;
 8007a06:	68bb      	ldr	r3, [r7, #8]
 8007a08:	2201      	movs	r2, #1
 8007a0a:	601a      	str	r2, [r3, #0]
 8007a0c:	e002      	b.n	8007a14 <USBD_StdEPReq+0x280>
          }
          else
          {
            pep->status = 0x0000U;
 8007a0e:	68bb      	ldr	r3, [r7, #8]
 8007a10:	2200      	movs	r2, #0
 8007a12:	601a      	str	r2, [r3, #0]
          }

          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007a14:	68bb      	ldr	r3, [r7, #8]
 8007a16:	2202      	movs	r2, #2
 8007a18:	4619      	mov	r1, r3
 8007a1a:	6878      	ldr	r0, [r7, #4]
 8007a1c:	f000 fbdc 	bl	80081d8 <USBD_CtlSendData>
          break;
 8007a20:	e004      	b.n	8007a2c <USBD_StdEPReq+0x298>

      default:
        USBD_CtlError(pdev, req);
 8007a22:	6839      	ldr	r1, [r7, #0]
 8007a24:	6878      	ldr	r0, [r7, #4]
 8007a26:	f000 fb66 	bl	80080f6 <USBD_CtlError>
        break;
 8007a2a:	bf00      	nop
      }
      break;
 8007a2c:	e004      	b.n	8007a38 <USBD_StdEPReq+0x2a4>

    default:
      USBD_CtlError(pdev, req);
 8007a2e:	6839      	ldr	r1, [r7, #0]
 8007a30:	6878      	ldr	r0, [r7, #4]
 8007a32:	f000 fb60 	bl	80080f6 <USBD_CtlError>
      break;
 8007a36:	bf00      	nop
    }
    break;
 8007a38:	e004      	b.n	8007a44 <USBD_StdEPReq+0x2b0>

  default:
    USBD_CtlError(pdev, req);
 8007a3a:	6839      	ldr	r1, [r7, #0]
 8007a3c:	6878      	ldr	r0, [r7, #4]
 8007a3e:	f000 fb5a 	bl	80080f6 <USBD_CtlError>
    break;
 8007a42:	bf00      	nop
  }

  return ret;
 8007a44:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a46:	4618      	mov	r0, r3
 8007a48:	3710      	adds	r7, #16
 8007a4a:	46bd      	mov	sp, r7
 8007a4c:	bd80      	pop	{r7, pc}
	...

08007a50 <USBD_GetDescriptor>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007a50:	b580      	push	{r7, lr}
 8007a52:	b084      	sub	sp, #16
 8007a54:	af00      	add	r7, sp, #0
 8007a56:	6078      	str	r0, [r7, #4]
 8007a58:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007a5a:	2300      	movs	r3, #0
 8007a5c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8007a5e:	2300      	movs	r3, #0
 8007a60:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8007a62:	2300      	movs	r3, #0
 8007a64:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8007a66:	683b      	ldr	r3, [r7, #0]
 8007a68:	885b      	ldrh	r3, [r3, #2]
 8007a6a:	0a1b      	lsrs	r3, r3, #8
 8007a6c:	b29b      	uxth	r3, r3
 8007a6e:	3b01      	subs	r3, #1
 8007a70:	2b0e      	cmp	r3, #14
 8007a72:	f200 8152 	bhi.w	8007d1a <USBD_GetDescriptor+0x2ca>
 8007a76:	a201      	add	r2, pc, #4	; (adr r2, 8007a7c <USBD_GetDescriptor+0x2c>)
 8007a78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a7c:	08007aed 	.word	0x08007aed
 8007a80:	08007b05 	.word	0x08007b05
 8007a84:	08007b45 	.word	0x08007b45
 8007a88:	08007d1b 	.word	0x08007d1b
 8007a8c:	08007d1b 	.word	0x08007d1b
 8007a90:	08007cbb 	.word	0x08007cbb
 8007a94:	08007ce7 	.word	0x08007ce7
 8007a98:	08007d1b 	.word	0x08007d1b
 8007a9c:	08007d1b 	.word	0x08007d1b
 8007aa0:	08007d1b 	.word	0x08007d1b
 8007aa4:	08007d1b 	.word	0x08007d1b
 8007aa8:	08007d1b 	.word	0x08007d1b
 8007aac:	08007d1b 	.word	0x08007d1b
 8007ab0:	08007d1b 	.word	0x08007d1b
 8007ab4:	08007ab9 	.word	0x08007ab9
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
  case USB_DESC_TYPE_BOS:
    if (pdev->pDesc->GetBOSDescriptor != NULL)
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007abe:	69db      	ldr	r3, [r3, #28]
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	d00b      	beq.n	8007adc <USBD_GetDescriptor+0x8c>
    {
      pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007aca:	69db      	ldr	r3, [r3, #28]
 8007acc:	687a      	ldr	r2, [r7, #4]
 8007ace:	7c12      	ldrb	r2, [r2, #16]
 8007ad0:	f107 0108 	add.w	r1, r7, #8
 8007ad4:	4610      	mov	r0, r2
 8007ad6:	4798      	blx	r3
 8007ad8:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8007ada:	e126      	b.n	8007d2a <USBD_GetDescriptor+0x2da>
      USBD_CtlError(pdev, req);
 8007adc:	6839      	ldr	r1, [r7, #0]
 8007ade:	6878      	ldr	r0, [r7, #4]
 8007ae0:	f000 fb09 	bl	80080f6 <USBD_CtlError>
      err++;
 8007ae4:	7afb      	ldrb	r3, [r7, #11]
 8007ae6:	3301      	adds	r3, #1
 8007ae8:	72fb      	strb	r3, [r7, #11]
    break;
 8007aea:	e11e      	b.n	8007d2a <USBD_GetDescriptor+0x2da>
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	687a      	ldr	r2, [r7, #4]
 8007af6:	7c12      	ldrb	r2, [r2, #16]
 8007af8:	f107 0108 	add.w	r1, r7, #8
 8007afc:	4610      	mov	r0, r2
 8007afe:	4798      	blx	r3
 8007b00:	60f8      	str	r0, [r7, #12]
    break;
 8007b02:	e112      	b.n	8007d2a <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	7c1b      	ldrb	r3, [r3, #16]
 8007b08:	2b00      	cmp	r3, #0
 8007b0a:	d10d      	bne.n	8007b28 <USBD_GetDescriptor+0xd8>
    {
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007b12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b14:	f107 0208 	add.w	r2, r7, #8
 8007b18:	4610      	mov	r0, r2
 8007b1a:	4798      	blx	r3
 8007b1c:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007b1e:	68fb      	ldr	r3, [r7, #12]
 8007b20:	3301      	adds	r3, #1
 8007b22:	2202      	movs	r2, #2
 8007b24:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 8007b26:	e100      	b.n	8007d2a <USBD_GetDescriptor+0x2da>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007b2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b30:	f107 0208 	add.w	r2, r7, #8
 8007b34:	4610      	mov	r0, r2
 8007b36:	4798      	blx	r3
 8007b38:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007b3a:	68fb      	ldr	r3, [r7, #12]
 8007b3c:	3301      	adds	r3, #1
 8007b3e:	2202      	movs	r2, #2
 8007b40:	701a      	strb	r2, [r3, #0]
    break;
 8007b42:	e0f2      	b.n	8007d2a <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 8007b44:	683b      	ldr	r3, [r7, #0]
 8007b46:	885b      	ldrh	r3, [r3, #2]
 8007b48:	b2db      	uxtb	r3, r3
 8007b4a:	2b05      	cmp	r3, #5
 8007b4c:	f200 80ac 	bhi.w	8007ca8 <USBD_GetDescriptor+0x258>
 8007b50:	a201      	add	r2, pc, #4	; (adr r2, 8007b58 <USBD_GetDescriptor+0x108>)
 8007b52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b56:	bf00      	nop
 8007b58:	08007b71 	.word	0x08007b71
 8007b5c:	08007ba5 	.word	0x08007ba5
 8007b60:	08007bd9 	.word	0x08007bd9
 8007b64:	08007c0d 	.word	0x08007c0d
 8007b68:	08007c41 	.word	0x08007c41
 8007b6c:	08007c75 	.word	0x08007c75
    {
    case USBD_IDX_LANGID_STR:
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007b76:	685b      	ldr	r3, [r3, #4]
 8007b78:	2b00      	cmp	r3, #0
 8007b7a:	d00b      	beq.n	8007b94 <USBD_GetDescriptor+0x144>
      {
        pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007b82:	685b      	ldr	r3, [r3, #4]
 8007b84:	687a      	ldr	r2, [r7, #4]
 8007b86:	7c12      	ldrb	r2, [r2, #16]
 8007b88:	f107 0108 	add.w	r1, r7, #8
 8007b8c:	4610      	mov	r0, r2
 8007b8e:	4798      	blx	r3
 8007b90:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007b92:	e091      	b.n	8007cb8 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 8007b94:	6839      	ldr	r1, [r7, #0]
 8007b96:	6878      	ldr	r0, [r7, #4]
 8007b98:	f000 faad 	bl	80080f6 <USBD_CtlError>
        err++;
 8007b9c:	7afb      	ldrb	r3, [r7, #11]
 8007b9e:	3301      	adds	r3, #1
 8007ba0:	72fb      	strb	r3, [r7, #11]
      break;
 8007ba2:	e089      	b.n	8007cb8 <USBD_GetDescriptor+0x268>

    case USBD_IDX_MFC_STR:
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007baa:	689b      	ldr	r3, [r3, #8]
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	d00b      	beq.n	8007bc8 <USBD_GetDescriptor+0x178>
      {
        pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007bb6:	689b      	ldr	r3, [r3, #8]
 8007bb8:	687a      	ldr	r2, [r7, #4]
 8007bba:	7c12      	ldrb	r2, [r2, #16]
 8007bbc:	f107 0108 	add.w	r1, r7, #8
 8007bc0:	4610      	mov	r0, r2
 8007bc2:	4798      	blx	r3
 8007bc4:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007bc6:	e077      	b.n	8007cb8 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 8007bc8:	6839      	ldr	r1, [r7, #0]
 8007bca:	6878      	ldr	r0, [r7, #4]
 8007bcc:	f000 fa93 	bl	80080f6 <USBD_CtlError>
        err++;
 8007bd0:	7afb      	ldrb	r3, [r7, #11]
 8007bd2:	3301      	adds	r3, #1
 8007bd4:	72fb      	strb	r3, [r7, #11]
      break;
 8007bd6:	e06f      	b.n	8007cb8 <USBD_GetDescriptor+0x268>

    case USBD_IDX_PRODUCT_STR:
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007bde:	68db      	ldr	r3, [r3, #12]
 8007be0:	2b00      	cmp	r3, #0
 8007be2:	d00b      	beq.n	8007bfc <USBD_GetDescriptor+0x1ac>
      {
        pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007bea:	68db      	ldr	r3, [r3, #12]
 8007bec:	687a      	ldr	r2, [r7, #4]
 8007bee:	7c12      	ldrb	r2, [r2, #16]
 8007bf0:	f107 0108 	add.w	r1, r7, #8
 8007bf4:	4610      	mov	r0, r2
 8007bf6:	4798      	blx	r3
 8007bf8:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007bfa:	e05d      	b.n	8007cb8 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 8007bfc:	6839      	ldr	r1, [r7, #0]
 8007bfe:	6878      	ldr	r0, [r7, #4]
 8007c00:	f000 fa79 	bl	80080f6 <USBD_CtlError>
        err++;
 8007c04:	7afb      	ldrb	r3, [r7, #11]
 8007c06:	3301      	adds	r3, #1
 8007c08:	72fb      	strb	r3, [r7, #11]
      break;
 8007c0a:	e055      	b.n	8007cb8 <USBD_GetDescriptor+0x268>

    case USBD_IDX_SERIAL_STR:
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007c12:	691b      	ldr	r3, [r3, #16]
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	d00b      	beq.n	8007c30 <USBD_GetDescriptor+0x1e0>
      {
        pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007c1e:	691b      	ldr	r3, [r3, #16]
 8007c20:	687a      	ldr	r2, [r7, #4]
 8007c22:	7c12      	ldrb	r2, [r2, #16]
 8007c24:	f107 0108 	add.w	r1, r7, #8
 8007c28:	4610      	mov	r0, r2
 8007c2a:	4798      	blx	r3
 8007c2c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007c2e:	e043      	b.n	8007cb8 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 8007c30:	6839      	ldr	r1, [r7, #0]
 8007c32:	6878      	ldr	r0, [r7, #4]
 8007c34:	f000 fa5f 	bl	80080f6 <USBD_CtlError>
        err++;
 8007c38:	7afb      	ldrb	r3, [r7, #11]
 8007c3a:	3301      	adds	r3, #1
 8007c3c:	72fb      	strb	r3, [r7, #11]
      break;
 8007c3e:	e03b      	b.n	8007cb8 <USBD_GetDescriptor+0x268>

    case USBD_IDX_CONFIG_STR:
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007c46:	695b      	ldr	r3, [r3, #20]
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	d00b      	beq.n	8007c64 <USBD_GetDescriptor+0x214>
      {
        pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007c52:	695b      	ldr	r3, [r3, #20]
 8007c54:	687a      	ldr	r2, [r7, #4]
 8007c56:	7c12      	ldrb	r2, [r2, #16]
 8007c58:	f107 0108 	add.w	r1, r7, #8
 8007c5c:	4610      	mov	r0, r2
 8007c5e:	4798      	blx	r3
 8007c60:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007c62:	e029      	b.n	8007cb8 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 8007c64:	6839      	ldr	r1, [r7, #0]
 8007c66:	6878      	ldr	r0, [r7, #4]
 8007c68:	f000 fa45 	bl	80080f6 <USBD_CtlError>
        err++;
 8007c6c:	7afb      	ldrb	r3, [r7, #11]
 8007c6e:	3301      	adds	r3, #1
 8007c70:	72fb      	strb	r3, [r7, #11]
      break;
 8007c72:	e021      	b.n	8007cb8 <USBD_GetDescriptor+0x268>

    case USBD_IDX_INTERFACE_STR:
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007c7a:	699b      	ldr	r3, [r3, #24]
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	d00b      	beq.n	8007c98 <USBD_GetDescriptor+0x248>
      {
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007c86:	699b      	ldr	r3, [r3, #24]
 8007c88:	687a      	ldr	r2, [r7, #4]
 8007c8a:	7c12      	ldrb	r2, [r2, #16]
 8007c8c:	f107 0108 	add.w	r1, r7, #8
 8007c90:	4610      	mov	r0, r2
 8007c92:	4798      	blx	r3
 8007c94:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007c96:	e00f      	b.n	8007cb8 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 8007c98:	6839      	ldr	r1, [r7, #0]
 8007c9a:	6878      	ldr	r0, [r7, #4]
 8007c9c:	f000 fa2b 	bl	80080f6 <USBD_CtlError>
        err++;
 8007ca0:	7afb      	ldrb	r3, [r7, #11]
 8007ca2:	3301      	adds	r3, #1
 8007ca4:	72fb      	strb	r3, [r7, #11]
      break;
 8007ca6:	e007      	b.n	8007cb8 <USBD_GetDescriptor+0x268>
      {
        USBD_CtlError(pdev, req);
        err++;
      }
#else
      USBD_CtlError(pdev, req);
 8007ca8:	6839      	ldr	r1, [r7, #0]
 8007caa:	6878      	ldr	r0, [r7, #4]
 8007cac:	f000 fa23 	bl	80080f6 <USBD_CtlError>
      err++;
 8007cb0:	7afb      	ldrb	r3, [r7, #11]
 8007cb2:	3301      	adds	r3, #1
 8007cb4:	72fb      	strb	r3, [r7, #11]
#endif
      break;
 8007cb6:	bf00      	nop
    }
    break;
 8007cb8:	e037      	b.n	8007d2a <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_DEVICE_QUALIFIER:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	7c1b      	ldrb	r3, [r3, #16]
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	d109      	bne.n	8007cd6 <USBD_GetDescriptor+0x286>
    {
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007cc8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007cca:	f107 0208 	add.w	r2, r7, #8
 8007cce:	4610      	mov	r0, r2
 8007cd0:	4798      	blx	r3
 8007cd2:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8007cd4:	e029      	b.n	8007d2a <USBD_GetDescriptor+0x2da>
      USBD_CtlError(pdev, req);
 8007cd6:	6839      	ldr	r1, [r7, #0]
 8007cd8:	6878      	ldr	r0, [r7, #4]
 8007cda:	f000 fa0c 	bl	80080f6 <USBD_CtlError>
      err++;
 8007cde:	7afb      	ldrb	r3, [r7, #11]
 8007ce0:	3301      	adds	r3, #1
 8007ce2:	72fb      	strb	r3, [r7, #11]
    break;
 8007ce4:	e021      	b.n	8007d2a <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	7c1b      	ldrb	r3, [r3, #16]
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	d10d      	bne.n	8007d0a <USBD_GetDescriptor+0x2ba>
    {
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007cf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007cf6:	f107 0208 	add.w	r2, r7, #8
 8007cfa:	4610      	mov	r0, r2
 8007cfc:	4798      	blx	r3
 8007cfe:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	3301      	adds	r3, #1
 8007d04:	2207      	movs	r2, #7
 8007d06:	701a      	strb	r2, [r3, #0]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8007d08:	e00f      	b.n	8007d2a <USBD_GetDescriptor+0x2da>
      USBD_CtlError(pdev, req);
 8007d0a:	6839      	ldr	r1, [r7, #0]
 8007d0c:	6878      	ldr	r0, [r7, #4]
 8007d0e:	f000 f9f2 	bl	80080f6 <USBD_CtlError>
      err++;
 8007d12:	7afb      	ldrb	r3, [r7, #11]
 8007d14:	3301      	adds	r3, #1
 8007d16:	72fb      	strb	r3, [r7, #11]
    break;
 8007d18:	e007      	b.n	8007d2a <USBD_GetDescriptor+0x2da>

  default:
    USBD_CtlError(pdev, req);
 8007d1a:	6839      	ldr	r1, [r7, #0]
 8007d1c:	6878      	ldr	r0, [r7, #4]
 8007d1e:	f000 f9ea 	bl	80080f6 <USBD_CtlError>
    err++;
 8007d22:	7afb      	ldrb	r3, [r7, #11]
 8007d24:	3301      	adds	r3, #1
 8007d26:	72fb      	strb	r3, [r7, #11]
    break;
 8007d28:	bf00      	nop
  }

  if (err != 0U)
 8007d2a:	7afb      	ldrb	r3, [r7, #11]
 8007d2c:	2b00      	cmp	r3, #0
 8007d2e:	d11e      	bne.n	8007d6e <USBD_GetDescriptor+0x31e>
  {
    return;
  }
  else
  {
    if (req->wLength != 0U)
 8007d30:	683b      	ldr	r3, [r7, #0]
 8007d32:	88db      	ldrh	r3, [r3, #6]
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	d016      	beq.n	8007d66 <USBD_GetDescriptor+0x316>
    {
      if (len != 0U)
 8007d38:	893b      	ldrh	r3, [r7, #8]
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	d00e      	beq.n	8007d5c <USBD_GetDescriptor+0x30c>
      {
        len = MIN(len, req->wLength);
 8007d3e:	683b      	ldr	r3, [r7, #0]
 8007d40:	88da      	ldrh	r2, [r3, #6]
 8007d42:	893b      	ldrh	r3, [r7, #8]
 8007d44:	4293      	cmp	r3, r2
 8007d46:	bf28      	it	cs
 8007d48:	4613      	movcs	r3, r2
 8007d4a:	b29b      	uxth	r3, r3
 8007d4c:	813b      	strh	r3, [r7, #8]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 8007d4e:	893b      	ldrh	r3, [r7, #8]
 8007d50:	461a      	mov	r2, r3
 8007d52:	68f9      	ldr	r1, [r7, #12]
 8007d54:	6878      	ldr	r0, [r7, #4]
 8007d56:	f000 fa3f 	bl	80081d8 <USBD_CtlSendData>
 8007d5a:	e009      	b.n	8007d70 <USBD_GetDescriptor+0x320>
      }
      else
      {
        USBD_CtlError(pdev, req);
 8007d5c:	6839      	ldr	r1, [r7, #0]
 8007d5e:	6878      	ldr	r0, [r7, #4]
 8007d60:	f000 f9c9 	bl	80080f6 <USBD_CtlError>
 8007d64:	e004      	b.n	8007d70 <USBD_GetDescriptor+0x320>
      }
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
 8007d66:	6878      	ldr	r0, [r7, #4]
 8007d68:	f000 fa90 	bl	800828c <USBD_CtlSendStatus>
 8007d6c:	e000      	b.n	8007d70 <USBD_GetDescriptor+0x320>
    return;
 8007d6e:	bf00      	nop
    }
  }
}
 8007d70:	3710      	adds	r7, #16
 8007d72:	46bd      	mov	sp, r7
 8007d74:	bd80      	pop	{r7, pc}
 8007d76:	bf00      	nop

08007d78 <USBD_SetAddress>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007d78:	b580      	push	{r7, lr}
 8007d7a:	b084      	sub	sp, #16
 8007d7c:	af00      	add	r7, sp, #0
 8007d7e:	6078      	str	r0, [r7, #4]
 8007d80:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8007d82:	683b      	ldr	r3, [r7, #0]
 8007d84:	889b      	ldrh	r3, [r3, #4]
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	d130      	bne.n	8007dec <USBD_SetAddress+0x74>
 8007d8a:	683b      	ldr	r3, [r7, #0]
 8007d8c:	88db      	ldrh	r3, [r3, #6]
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	d12c      	bne.n	8007dec <USBD_SetAddress+0x74>
 8007d92:	683b      	ldr	r3, [r7, #0]
 8007d94:	885b      	ldrh	r3, [r3, #2]
 8007d96:	2b7f      	cmp	r3, #127	; 0x7f
 8007d98:	d828      	bhi.n	8007dec <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8007d9a:	683b      	ldr	r3, [r7, #0]
 8007d9c:	885b      	ldrh	r3, [r3, #2]
 8007d9e:	b2db      	uxtb	r3, r3
 8007da0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007da4:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007dac:	2b03      	cmp	r3, #3
 8007dae:	d104      	bne.n	8007dba <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8007db0:	6839      	ldr	r1, [r7, #0]
 8007db2:	6878      	ldr	r0, [r7, #4]
 8007db4:	f000 f99f 	bl	80080f6 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007db8:	e01d      	b.n	8007df6 <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	7bfa      	ldrb	r2, [r7, #15]
 8007dbe:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007dc2:	7bfb      	ldrb	r3, [r7, #15]
 8007dc4:	4619      	mov	r1, r3
 8007dc6:	6878      	ldr	r0, [r7, #4]
 8007dc8:	f000 ff10 	bl	8008bec <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8007dcc:	6878      	ldr	r0, [r7, #4]
 8007dce:	f000 fa5d 	bl	800828c <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007dd2:	7bfb      	ldrb	r3, [r7, #15]
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	d004      	beq.n	8007de2 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	2202      	movs	r2, #2
 8007ddc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007de0:	e009      	b.n	8007df6 <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	2201      	movs	r2, #1
 8007de6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007dea:	e004      	b.n	8007df6 <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007dec:	6839      	ldr	r1, [r7, #0]
 8007dee:	6878      	ldr	r0, [r7, #4]
 8007df0:	f000 f981 	bl	80080f6 <USBD_CtlError>
  }
}
 8007df4:	bf00      	nop
 8007df6:	bf00      	nop
 8007df8:	3710      	adds	r7, #16
 8007dfa:	46bd      	mov	sp, r7
 8007dfc:	bd80      	pop	{r7, pc}
	...

08007e00 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007e00:	b580      	push	{r7, lr}
 8007e02:	b084      	sub	sp, #16
 8007e04:	af00      	add	r7, sp, #0
 8007e06:	6078      	str	r0, [r7, #4]
 8007e08:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007e0a:	2300      	movs	r3, #0
 8007e0c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8007e0e:	683b      	ldr	r3, [r7, #0]
 8007e10:	885b      	ldrh	r3, [r3, #2]
 8007e12:	b2da      	uxtb	r2, r3
 8007e14:	4b4b      	ldr	r3, [pc, #300]	; (8007f44 <USBD_SetConfig+0x144>)
 8007e16:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007e18:	4b4a      	ldr	r3, [pc, #296]	; (8007f44 <USBD_SetConfig+0x144>)
 8007e1a:	781b      	ldrb	r3, [r3, #0]
 8007e1c:	2b01      	cmp	r3, #1
 8007e1e:	d905      	bls.n	8007e2c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8007e20:	6839      	ldr	r1, [r7, #0]
 8007e22:	6878      	ldr	r0, [r7, #4]
 8007e24:	f000 f967 	bl	80080f6 <USBD_CtlError>
    return USBD_FAIL;
 8007e28:	2303      	movs	r3, #3
 8007e2a:	e087      	b.n	8007f3c <USBD_SetConfig+0x13c>
  }

  switch (pdev->dev_state)
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007e32:	2b02      	cmp	r3, #2
 8007e34:	d002      	beq.n	8007e3c <USBD_SetConfig+0x3c>
 8007e36:	2b03      	cmp	r3, #3
 8007e38:	d025      	beq.n	8007e86 <USBD_SetConfig+0x86>
 8007e3a:	e071      	b.n	8007f20 <USBD_SetConfig+0x120>
  {
  case USBD_STATE_ADDRESSED:
    if (cfgidx != 0U)
 8007e3c:	4b41      	ldr	r3, [pc, #260]	; (8007f44 <USBD_SetConfig+0x144>)
 8007e3e:	781b      	ldrb	r3, [r3, #0]
 8007e40:	2b00      	cmp	r3, #0
 8007e42:	d01c      	beq.n	8007e7e <USBD_SetConfig+0x7e>
    {
      pdev->dev_config = cfgidx;
 8007e44:	4b3f      	ldr	r3, [pc, #252]	; (8007f44 <USBD_SetConfig+0x144>)
 8007e46:	781b      	ldrb	r3, [r3, #0]
 8007e48:	461a      	mov	r2, r3
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	605a      	str	r2, [r3, #4]

      ret = USBD_SetClassConfig(pdev, cfgidx);
 8007e4e:	4b3d      	ldr	r3, [pc, #244]	; (8007f44 <USBD_SetConfig+0x144>)
 8007e50:	781b      	ldrb	r3, [r3, #0]
 8007e52:	4619      	mov	r1, r3
 8007e54:	6878      	ldr	r0, [r7, #4]
 8007e56:	f7ff f96f 	bl	8007138 <USBD_SetClassConfig>
 8007e5a:	4603      	mov	r3, r0
 8007e5c:	73fb      	strb	r3, [r7, #15]

      if (ret != USBD_OK)
 8007e5e:	7bfb      	ldrb	r3, [r7, #15]
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	d004      	beq.n	8007e6e <USBD_SetConfig+0x6e>
      {
        USBD_CtlError(pdev, req);
 8007e64:	6839      	ldr	r1, [r7, #0]
 8007e66:	6878      	ldr	r0, [r7, #4]
 8007e68:	f000 f945 	bl	80080f6 <USBD_CtlError>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 8007e6c:	e065      	b.n	8007f3a <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 8007e6e:	6878      	ldr	r0, [r7, #4]
 8007e70:	f000 fa0c 	bl	800828c <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	2203      	movs	r2, #3
 8007e78:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 8007e7c:	e05d      	b.n	8007f3a <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 8007e7e:	6878      	ldr	r0, [r7, #4]
 8007e80:	f000 fa04 	bl	800828c <USBD_CtlSendStatus>
    break;
 8007e84:	e059      	b.n	8007f3a <USBD_SetConfig+0x13a>

  case USBD_STATE_CONFIGURED:
    if (cfgidx == 0U)
 8007e86:	4b2f      	ldr	r3, [pc, #188]	; (8007f44 <USBD_SetConfig+0x144>)
 8007e88:	781b      	ldrb	r3, [r3, #0]
 8007e8a:	2b00      	cmp	r3, #0
 8007e8c:	d112      	bne.n	8007eb4 <USBD_SetConfig+0xb4>
    {
      pdev->dev_state = USBD_STATE_ADDRESSED;
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	2202      	movs	r2, #2
 8007e92:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      pdev->dev_config = cfgidx;
 8007e96:	4b2b      	ldr	r3, [pc, #172]	; (8007f44 <USBD_SetConfig+0x144>)
 8007e98:	781b      	ldrb	r3, [r3, #0]
 8007e9a:	461a      	mov	r2, r3
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	605a      	str	r2, [r3, #4]
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007ea0:	4b28      	ldr	r3, [pc, #160]	; (8007f44 <USBD_SetConfig+0x144>)
 8007ea2:	781b      	ldrb	r3, [r3, #0]
 8007ea4:	4619      	mov	r1, r3
 8007ea6:	6878      	ldr	r0, [r7, #4]
 8007ea8:	f7ff f962 	bl	8007170 <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 8007eac:	6878      	ldr	r0, [r7, #4]
 8007eae:	f000 f9ed 	bl	800828c <USBD_CtlSendStatus>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 8007eb2:	e042      	b.n	8007f3a <USBD_SetConfig+0x13a>
    else if (cfgidx != pdev->dev_config)
 8007eb4:	4b23      	ldr	r3, [pc, #140]	; (8007f44 <USBD_SetConfig+0x144>)
 8007eb6:	781b      	ldrb	r3, [r3, #0]
 8007eb8:	461a      	mov	r2, r3
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	685b      	ldr	r3, [r3, #4]
 8007ebe:	429a      	cmp	r2, r3
 8007ec0:	d02a      	beq.n	8007f18 <USBD_SetConfig+0x118>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	685b      	ldr	r3, [r3, #4]
 8007ec6:	b2db      	uxtb	r3, r3
 8007ec8:	4619      	mov	r1, r3
 8007eca:	6878      	ldr	r0, [r7, #4]
 8007ecc:	f7ff f950 	bl	8007170 <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 8007ed0:	4b1c      	ldr	r3, [pc, #112]	; (8007f44 <USBD_SetConfig+0x144>)
 8007ed2:	781b      	ldrb	r3, [r3, #0]
 8007ed4:	461a      	mov	r2, r3
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	605a      	str	r2, [r3, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 8007eda:	4b1a      	ldr	r3, [pc, #104]	; (8007f44 <USBD_SetConfig+0x144>)
 8007edc:	781b      	ldrb	r3, [r3, #0]
 8007ede:	4619      	mov	r1, r3
 8007ee0:	6878      	ldr	r0, [r7, #4]
 8007ee2:	f7ff f929 	bl	8007138 <USBD_SetClassConfig>
 8007ee6:	4603      	mov	r3, r0
 8007ee8:	73fb      	strb	r3, [r7, #15]
      if (ret != USBD_OK)
 8007eea:	7bfb      	ldrb	r3, [r7, #15]
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	d00f      	beq.n	8007f10 <USBD_SetConfig+0x110>
        USBD_CtlError(pdev, req);
 8007ef0:	6839      	ldr	r1, [r7, #0]
 8007ef2:	6878      	ldr	r0, [r7, #4]
 8007ef4:	f000 f8ff 	bl	80080f6 <USBD_CtlError>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	685b      	ldr	r3, [r3, #4]
 8007efc:	b2db      	uxtb	r3, r3
 8007efe:	4619      	mov	r1, r3
 8007f00:	6878      	ldr	r0, [r7, #4]
 8007f02:	f7ff f935 	bl	8007170 <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	2202      	movs	r2, #2
 8007f0a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 8007f0e:	e014      	b.n	8007f3a <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 8007f10:	6878      	ldr	r0, [r7, #4]
 8007f12:	f000 f9bb 	bl	800828c <USBD_CtlSendStatus>
    break;
 8007f16:	e010      	b.n	8007f3a <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 8007f18:	6878      	ldr	r0, [r7, #4]
 8007f1a:	f000 f9b7 	bl	800828c <USBD_CtlSendStatus>
    break;
 8007f1e:	e00c      	b.n	8007f3a <USBD_SetConfig+0x13a>

  default:
    USBD_CtlError(pdev, req);
 8007f20:	6839      	ldr	r1, [r7, #0]
 8007f22:	6878      	ldr	r0, [r7, #4]
 8007f24:	f000 f8e7 	bl	80080f6 <USBD_CtlError>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007f28:	4b06      	ldr	r3, [pc, #24]	; (8007f44 <USBD_SetConfig+0x144>)
 8007f2a:	781b      	ldrb	r3, [r3, #0]
 8007f2c:	4619      	mov	r1, r3
 8007f2e:	6878      	ldr	r0, [r7, #4]
 8007f30:	f7ff f91e 	bl	8007170 <USBD_ClrClassConfig>
    ret = USBD_FAIL;
 8007f34:	2303      	movs	r3, #3
 8007f36:	73fb      	strb	r3, [r7, #15]
    break;
 8007f38:	bf00      	nop
  }

  return ret;
 8007f3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f3c:	4618      	mov	r0, r3
 8007f3e:	3710      	adds	r7, #16
 8007f40:	46bd      	mov	sp, r7
 8007f42:	bd80      	pop	{r7, pc}
 8007f44:	200121ac 	.word	0x200121ac

08007f48 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007f48:	b580      	push	{r7, lr}
 8007f4a:	b082      	sub	sp, #8
 8007f4c:	af00      	add	r7, sp, #0
 8007f4e:	6078      	str	r0, [r7, #4]
 8007f50:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8007f52:	683b      	ldr	r3, [r7, #0]
 8007f54:	88db      	ldrh	r3, [r3, #6]
 8007f56:	2b01      	cmp	r3, #1
 8007f58:	d004      	beq.n	8007f64 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8007f5a:	6839      	ldr	r1, [r7, #0]
 8007f5c:	6878      	ldr	r0, [r7, #4]
 8007f5e:	f000 f8ca 	bl	80080f6 <USBD_CtlError>
    default:
      USBD_CtlError(pdev, req);
      break;
    }
  }
}
 8007f62:	e022      	b.n	8007faa <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007f6a:	2b02      	cmp	r3, #2
 8007f6c:	dc02      	bgt.n	8007f74 <USBD_GetConfig+0x2c>
 8007f6e:	2b00      	cmp	r3, #0
 8007f70:	dc03      	bgt.n	8007f7a <USBD_GetConfig+0x32>
 8007f72:	e015      	b.n	8007fa0 <USBD_GetConfig+0x58>
 8007f74:	2b03      	cmp	r3, #3
 8007f76:	d00b      	beq.n	8007f90 <USBD_GetConfig+0x48>
 8007f78:	e012      	b.n	8007fa0 <USBD_GetConfig+0x58>
      pdev->dev_default_config = 0U;
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	2200      	movs	r2, #0
 8007f7e:	609a      	str	r2, [r3, #8]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	3308      	adds	r3, #8
 8007f84:	2201      	movs	r2, #1
 8007f86:	4619      	mov	r1, r3
 8007f88:	6878      	ldr	r0, [r7, #4]
 8007f8a:	f000 f925 	bl	80081d8 <USBD_CtlSendData>
      break;
 8007f8e:	e00c      	b.n	8007faa <USBD_GetConfig+0x62>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	3304      	adds	r3, #4
 8007f94:	2201      	movs	r2, #1
 8007f96:	4619      	mov	r1, r3
 8007f98:	6878      	ldr	r0, [r7, #4]
 8007f9a:	f000 f91d 	bl	80081d8 <USBD_CtlSendData>
      break;
 8007f9e:	e004      	b.n	8007faa <USBD_GetConfig+0x62>
      USBD_CtlError(pdev, req);
 8007fa0:	6839      	ldr	r1, [r7, #0]
 8007fa2:	6878      	ldr	r0, [r7, #4]
 8007fa4:	f000 f8a7 	bl	80080f6 <USBD_CtlError>
      break;
 8007fa8:	bf00      	nop
}
 8007faa:	bf00      	nop
 8007fac:	3708      	adds	r7, #8
 8007fae:	46bd      	mov	sp, r7
 8007fb0:	bd80      	pop	{r7, pc}

08007fb2 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007fb2:	b580      	push	{r7, lr}
 8007fb4:	b082      	sub	sp, #8
 8007fb6:	af00      	add	r7, sp, #0
 8007fb8:	6078      	str	r0, [r7, #4]
 8007fba:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007fc2:	3b01      	subs	r3, #1
 8007fc4:	2b02      	cmp	r3, #2
 8007fc6:	d81e      	bhi.n	8008006 <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wLength != 0x2U)
 8007fc8:	683b      	ldr	r3, [r7, #0]
 8007fca:	88db      	ldrh	r3, [r3, #6]
 8007fcc:	2b02      	cmp	r3, #2
 8007fce:	d004      	beq.n	8007fda <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 8007fd0:	6839      	ldr	r1, [r7, #0]
 8007fd2:	6878      	ldr	r0, [r7, #4]
 8007fd4:	f000 f88f 	bl	80080f6 <USBD_CtlError>
      break;
 8007fd8:	e01a      	b.n	8008010 <USBD_GetStatus+0x5e>
    }

#if (USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	2201      	movs	r2, #1
 8007fde:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup != 0U)
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	d005      	beq.n	8007ff6 <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	68db      	ldr	r3, [r3, #12]
 8007fee:	f043 0202 	orr.w	r2, r3, #2
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	60da      	str	r2, [r3, #12]
    }

    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	330c      	adds	r3, #12
 8007ffa:	2202      	movs	r2, #2
 8007ffc:	4619      	mov	r1, r3
 8007ffe:	6878      	ldr	r0, [r7, #4]
 8008000:	f000 f8ea 	bl	80081d8 <USBD_CtlSendData>
    break;
 8008004:	e004      	b.n	8008010 <USBD_GetStatus+0x5e>

  default:
    USBD_CtlError(pdev, req);
 8008006:	6839      	ldr	r1, [r7, #0]
 8008008:	6878      	ldr	r0, [r7, #4]
 800800a:	f000 f874 	bl	80080f6 <USBD_CtlError>
    break;
 800800e:	bf00      	nop
  }
}
 8008010:	bf00      	nop
 8008012:	3708      	adds	r7, #8
 8008014:	46bd      	mov	sp, r7
 8008016:	bd80      	pop	{r7, pc}

08008018 <USBD_SetFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008018:	b580      	push	{r7, lr}
 800801a:	b082      	sub	sp, #8
 800801c:	af00      	add	r7, sp, #0
 800801e:	6078      	str	r0, [r7, #4]
 8008020:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008022:	683b      	ldr	r3, [r7, #0]
 8008024:	885b      	ldrh	r3, [r3, #2]
 8008026:	2b01      	cmp	r3, #1
 8008028:	d106      	bne.n	8008038 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	2201      	movs	r2, #1
 800802e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8008032:	6878      	ldr	r0, [r7, #4]
 8008034:	f000 f92a 	bl	800828c <USBD_CtlSendStatus>
  }
}
 8008038:	bf00      	nop
 800803a:	3708      	adds	r7, #8
 800803c:	46bd      	mov	sp, r7
 800803e:	bd80      	pop	{r7, pc}

08008040 <USBD_ClrFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008040:	b580      	push	{r7, lr}
 8008042:	b082      	sub	sp, #8
 8008044:	af00      	add	r7, sp, #0
 8008046:	6078      	str	r0, [r7, #4]
 8008048:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008050:	3b01      	subs	r3, #1
 8008052:	2b02      	cmp	r3, #2
 8008054:	d80b      	bhi.n	800806e <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008056:	683b      	ldr	r3, [r7, #0]
 8008058:	885b      	ldrh	r3, [r3, #2]
 800805a:	2b01      	cmp	r3, #1
 800805c:	d10c      	bne.n	8008078 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	2200      	movs	r2, #0
 8008062:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8008066:	6878      	ldr	r0, [r7, #4]
 8008068:	f000 f910 	bl	800828c <USBD_CtlSendStatus>
      }
      break;
 800806c:	e004      	b.n	8008078 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800806e:	6839      	ldr	r1, [r7, #0]
 8008070:	6878      	ldr	r0, [r7, #4]
 8008072:	f000 f840 	bl	80080f6 <USBD_CtlError>
      break;
 8008076:	e000      	b.n	800807a <USBD_ClrFeature+0x3a>
      break;
 8008078:	bf00      	nop
  }
}
 800807a:	bf00      	nop
 800807c:	3708      	adds	r7, #8
 800807e:	46bd      	mov	sp, r7
 8008080:	bd80      	pop	{r7, pc}

08008082 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8008082:	b580      	push	{r7, lr}
 8008084:	b084      	sub	sp, #16
 8008086:	af00      	add	r7, sp, #0
 8008088:	6078      	str	r0, [r7, #4]
 800808a:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800808c:	683b      	ldr	r3, [r7, #0]
 800808e:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8008090:	68fb      	ldr	r3, [r7, #12]
 8008092:	781a      	ldrb	r2, [r3, #0]
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8008098:	68fb      	ldr	r3, [r7, #12]
 800809a:	3301      	adds	r3, #1
 800809c:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800809e:	68fb      	ldr	r3, [r7, #12]
 80080a0:	781a      	ldrb	r2, [r3, #0]
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80080a6:	68fb      	ldr	r3, [r7, #12]
 80080a8:	3301      	adds	r3, #1
 80080aa:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80080ac:	68f8      	ldr	r0, [r7, #12]
 80080ae:	f7ff fa9c 	bl	80075ea <SWAPBYTE>
 80080b2:	4603      	mov	r3, r0
 80080b4:	461a      	mov	r2, r3
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80080ba:	68fb      	ldr	r3, [r7, #12]
 80080bc:	3301      	adds	r3, #1
 80080be:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80080c0:	68fb      	ldr	r3, [r7, #12]
 80080c2:	3301      	adds	r3, #1
 80080c4:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80080c6:	68f8      	ldr	r0, [r7, #12]
 80080c8:	f7ff fa8f 	bl	80075ea <SWAPBYTE>
 80080cc:	4603      	mov	r3, r0
 80080ce:	461a      	mov	r2, r3
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80080d4:	68fb      	ldr	r3, [r7, #12]
 80080d6:	3301      	adds	r3, #1
 80080d8:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80080da:	68fb      	ldr	r3, [r7, #12]
 80080dc:	3301      	adds	r3, #1
 80080de:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80080e0:	68f8      	ldr	r0, [r7, #12]
 80080e2:	f7ff fa82 	bl	80075ea <SWAPBYTE>
 80080e6:	4603      	mov	r3, r0
 80080e8:	461a      	mov	r2, r3
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	80da      	strh	r2, [r3, #6]
}
 80080ee:	bf00      	nop
 80080f0:	3710      	adds	r7, #16
 80080f2:	46bd      	mov	sp, r7
 80080f4:	bd80      	pop	{r7, pc}

080080f6 <USBD_CtlError>:
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80080f6:	b580      	push	{r7, lr}
 80080f8:	b082      	sub	sp, #8
 80080fa:	af00      	add	r7, sp, #0
 80080fc:	6078      	str	r0, [r7, #4]
 80080fe:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8008100:	2180      	movs	r1, #128	; 0x80
 8008102:	6878      	ldr	r0, [r7, #4]
 8008104:	f000 fd08 	bl	8008b18 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8008108:	2100      	movs	r1, #0
 800810a:	6878      	ldr	r0, [r7, #4]
 800810c:	f000 fd04 	bl	8008b18 <USBD_LL_StallEP>
}
 8008110:	bf00      	nop
 8008112:	3708      	adds	r7, #8
 8008114:	46bd      	mov	sp, r7
 8008116:	bd80      	pop	{r7, pc}

08008118 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008118:	b580      	push	{r7, lr}
 800811a:	b086      	sub	sp, #24
 800811c:	af00      	add	r7, sp, #0
 800811e:	60f8      	str	r0, [r7, #12]
 8008120:	60b9      	str	r1, [r7, #8]
 8008122:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8008124:	2300      	movs	r3, #0
 8008126:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8008128:	68fb      	ldr	r3, [r7, #12]
 800812a:	2b00      	cmp	r3, #0
 800812c:	d036      	beq.n	800819c <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800812e:	68fb      	ldr	r3, [r7, #12]
 8008130:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8008132:	6938      	ldr	r0, [r7, #16]
 8008134:	f000 f836 	bl	80081a4 <USBD_GetLen>
 8008138:	4603      	mov	r3, r0
 800813a:	3301      	adds	r3, #1
 800813c:	b29b      	uxth	r3, r3
 800813e:	005b      	lsls	r3, r3, #1
 8008140:	b29a      	uxth	r2, r3
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8008146:	7dfb      	ldrb	r3, [r7, #23]
 8008148:	68ba      	ldr	r2, [r7, #8]
 800814a:	4413      	add	r3, r2
 800814c:	687a      	ldr	r2, [r7, #4]
 800814e:	7812      	ldrb	r2, [r2, #0]
 8008150:	701a      	strb	r2, [r3, #0]
  idx++;
 8008152:	7dfb      	ldrb	r3, [r7, #23]
 8008154:	3301      	adds	r3, #1
 8008156:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8008158:	7dfb      	ldrb	r3, [r7, #23]
 800815a:	68ba      	ldr	r2, [r7, #8]
 800815c:	4413      	add	r3, r2
 800815e:	2203      	movs	r2, #3
 8008160:	701a      	strb	r2, [r3, #0]
  idx++;
 8008162:	7dfb      	ldrb	r3, [r7, #23]
 8008164:	3301      	adds	r3, #1
 8008166:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8008168:	e013      	b.n	8008192 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800816a:	7dfb      	ldrb	r3, [r7, #23]
 800816c:	68ba      	ldr	r2, [r7, #8]
 800816e:	4413      	add	r3, r2
 8008170:	693a      	ldr	r2, [r7, #16]
 8008172:	7812      	ldrb	r2, [r2, #0]
 8008174:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8008176:	693b      	ldr	r3, [r7, #16]
 8008178:	3301      	adds	r3, #1
 800817a:	613b      	str	r3, [r7, #16]
    idx++;
 800817c:	7dfb      	ldrb	r3, [r7, #23]
 800817e:	3301      	adds	r3, #1
 8008180:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8008182:	7dfb      	ldrb	r3, [r7, #23]
 8008184:	68ba      	ldr	r2, [r7, #8]
 8008186:	4413      	add	r3, r2
 8008188:	2200      	movs	r2, #0
 800818a:	701a      	strb	r2, [r3, #0]
    idx++;
 800818c:	7dfb      	ldrb	r3, [r7, #23]
 800818e:	3301      	adds	r3, #1
 8008190:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8008192:	693b      	ldr	r3, [r7, #16]
 8008194:	781b      	ldrb	r3, [r3, #0]
 8008196:	2b00      	cmp	r3, #0
 8008198:	d1e7      	bne.n	800816a <USBD_GetString+0x52>
 800819a:	e000      	b.n	800819e <USBD_GetString+0x86>
    return;
 800819c:	bf00      	nop
  }
}
 800819e:	3718      	adds	r7, #24
 80081a0:	46bd      	mov	sp, r7
 80081a2:	bd80      	pop	{r7, pc}

080081a4 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80081a4:	b480      	push	{r7}
 80081a6:	b085      	sub	sp, #20
 80081a8:	af00      	add	r7, sp, #0
 80081aa:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80081ac:	2300      	movs	r3, #0
 80081ae:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80081b4:	e005      	b.n	80081c2 <USBD_GetLen+0x1e>
  {
    len++;
 80081b6:	7bfb      	ldrb	r3, [r7, #15]
 80081b8:	3301      	adds	r3, #1
 80081ba:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80081bc:	68bb      	ldr	r3, [r7, #8]
 80081be:	3301      	adds	r3, #1
 80081c0:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80081c2:	68bb      	ldr	r3, [r7, #8]
 80081c4:	781b      	ldrb	r3, [r3, #0]
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	d1f5      	bne.n	80081b6 <USBD_GetLen+0x12>
  }

  return len;
 80081ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80081cc:	4618      	mov	r0, r3
 80081ce:	3714      	adds	r7, #20
 80081d0:	46bd      	mov	sp, r7
 80081d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081d6:	4770      	bx	lr

080081d8 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80081d8:	b580      	push	{r7, lr}
 80081da:	b084      	sub	sp, #16
 80081dc:	af00      	add	r7, sp, #0
 80081de:	60f8      	str	r0, [r7, #12]
 80081e0:	60b9      	str	r1, [r7, #8]
 80081e2:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80081e4:	68fb      	ldr	r3, [r7, #12]
 80081e6:	2202      	movs	r2, #2
 80081e8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80081ec:	68fb      	ldr	r3, [r7, #12]
 80081ee:	687a      	ldr	r2, [r7, #4]
 80081f0:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length = len;
 80081f2:	68fb      	ldr	r3, [r7, #12]
 80081f4:	687a      	ldr	r2, [r7, #4]
 80081f6:	61da      	str	r2, [r3, #28]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	68ba      	ldr	r2, [r7, #8]
 80081fc:	2100      	movs	r1, #0
 80081fe:	68f8      	ldr	r0, [r7, #12]
 8008200:	f000 fd13 	bl	8008c2a <USBD_LL_Transmit>

  return USBD_OK;
 8008204:	2300      	movs	r3, #0
}
 8008206:	4618      	mov	r0, r3
 8008208:	3710      	adds	r7, #16
 800820a:	46bd      	mov	sp, r7
 800820c:	bd80      	pop	{r7, pc}

0800820e <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800820e:	b580      	push	{r7, lr}
 8008210:	b084      	sub	sp, #16
 8008212:	af00      	add	r7, sp, #0
 8008214:	60f8      	str	r0, [r7, #12]
 8008216:	60b9      	str	r1, [r7, #8]
 8008218:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	68ba      	ldr	r2, [r7, #8]
 800821e:	2100      	movs	r1, #0
 8008220:	68f8      	ldr	r0, [r7, #12]
 8008222:	f000 fd02 	bl	8008c2a <USBD_LL_Transmit>

  return USBD_OK;
 8008226:	2300      	movs	r3, #0
}
 8008228:	4618      	mov	r0, r3
 800822a:	3710      	adds	r7, #16
 800822c:	46bd      	mov	sp, r7
 800822e:	bd80      	pop	{r7, pc}

08008230 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8008230:	b580      	push	{r7, lr}
 8008232:	b084      	sub	sp, #16
 8008234:	af00      	add	r7, sp, #0
 8008236:	60f8      	str	r0, [r7, #12]
 8008238:	60b9      	str	r1, [r7, #8]
 800823a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800823c:	68fb      	ldr	r3, [r7, #12]
 800823e:	2203      	movs	r2, #3
 8008240:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8008244:	68fb      	ldr	r3, [r7, #12]
 8008246:	687a      	ldr	r2, [r7, #4]
 8008248:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  pdev->ep_out[0].rem_length = len;
 800824c:	68fb      	ldr	r3, [r7, #12]
 800824e:	687a      	ldr	r2, [r7, #4]
 8008250:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	68ba      	ldr	r2, [r7, #8]
 8008258:	2100      	movs	r1, #0
 800825a:	68f8      	ldr	r0, [r7, #12]
 800825c:	f000 fd06 	bl	8008c6c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008260:	2300      	movs	r3, #0
}
 8008262:	4618      	mov	r0, r3
 8008264:	3710      	adds	r7, #16
 8008266:	46bd      	mov	sp, r7
 8008268:	bd80      	pop	{r7, pc}

0800826a <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800826a:	b580      	push	{r7, lr}
 800826c:	b084      	sub	sp, #16
 800826e:	af00      	add	r7, sp, #0
 8008270:	60f8      	str	r0, [r7, #12]
 8008272:	60b9      	str	r1, [r7, #8]
 8008274:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	68ba      	ldr	r2, [r7, #8]
 800827a:	2100      	movs	r1, #0
 800827c:	68f8      	ldr	r0, [r7, #12]
 800827e:	f000 fcf5 	bl	8008c6c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008282:	2300      	movs	r3, #0
}
 8008284:	4618      	mov	r0, r3
 8008286:	3710      	adds	r7, #16
 8008288:	46bd      	mov	sp, r7
 800828a:	bd80      	pop	{r7, pc}

0800828c <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800828c:	b580      	push	{r7, lr}
 800828e:	b082      	sub	sp, #8
 8008290:	af00      	add	r7, sp, #0
 8008292:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	2204      	movs	r2, #4
 8008298:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800829c:	2300      	movs	r3, #0
 800829e:	2200      	movs	r2, #0
 80082a0:	2100      	movs	r1, #0
 80082a2:	6878      	ldr	r0, [r7, #4]
 80082a4:	f000 fcc1 	bl	8008c2a <USBD_LL_Transmit>

  return USBD_OK;
 80082a8:	2300      	movs	r3, #0
}
 80082aa:	4618      	mov	r0, r3
 80082ac:	3708      	adds	r7, #8
 80082ae:	46bd      	mov	sp, r7
 80082b0:	bd80      	pop	{r7, pc}

080082b2 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80082b2:	b580      	push	{r7, lr}
 80082b4:	b082      	sub	sp, #8
 80082b6:	af00      	add	r7, sp, #0
 80082b8:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	2205      	movs	r2, #5
 80082be:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80082c2:	2300      	movs	r3, #0
 80082c4:	2200      	movs	r2, #0
 80082c6:	2100      	movs	r1, #0
 80082c8:	6878      	ldr	r0, [r7, #4]
 80082ca:	f000 fccf 	bl	8008c6c <USBD_LL_PrepareReceive>

  return USBD_OK;
 80082ce:	2300      	movs	r3, #0
}
 80082d0:	4618      	mov	r0, r3
 80082d2:	3708      	adds	r7, #8
 80082d4:	46bd      	mov	sp, r7
 80082d6:	bd80      	pop	{r7, pc}

080082d8 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80082d8:	b580      	push	{r7, lr}
 80082da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceHS, &HS_Desc, DEVICE_HS) != USBD_OK)
 80082dc:	2201      	movs	r2, #1
 80082de:	4912      	ldr	r1, [pc, #72]	; (8008328 <MX_USB_DEVICE_Init+0x50>)
 80082e0:	4812      	ldr	r0, [pc, #72]	; (800832c <MX_USB_DEVICE_Init+0x54>)
 80082e2:	f7fe febb 	bl	800705c <USBD_Init>
 80082e6:	4603      	mov	r3, r0
 80082e8:	2b00      	cmp	r3, #0
 80082ea:	d001      	beq.n	80082f0 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80082ec:	f7f8 fec6 	bl	800107c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceHS, &USBD_CDC) != USBD_OK)
 80082f0:	490f      	ldr	r1, [pc, #60]	; (8008330 <MX_USB_DEVICE_Init+0x58>)
 80082f2:	480e      	ldr	r0, [pc, #56]	; (800832c <MX_USB_DEVICE_Init+0x54>)
 80082f4:	f7fe fee8 	bl	80070c8 <USBD_RegisterClass>
 80082f8:	4603      	mov	r3, r0
 80082fa:	2b00      	cmp	r3, #0
 80082fc:	d001      	beq.n	8008302 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80082fe:	f7f8 febd 	bl	800107c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceHS, &USBD_Interface_fops_HS) != USBD_OK)
 8008302:	490c      	ldr	r1, [pc, #48]	; (8008334 <MX_USB_DEVICE_Init+0x5c>)
 8008304:	4809      	ldr	r0, [pc, #36]	; (800832c <MX_USB_DEVICE_Init+0x54>)
 8008306:	f7fe fe0d 	bl	8006f24 <USBD_CDC_RegisterInterface>
 800830a:	4603      	mov	r3, r0
 800830c:	2b00      	cmp	r3, #0
 800830e:	d001      	beq.n	8008314 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8008310:	f7f8 feb4 	bl	800107c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceHS) != USBD_OK)
 8008314:	4805      	ldr	r0, [pc, #20]	; (800832c <MX_USB_DEVICE_Init+0x54>)
 8008316:	f7fe fef8 	bl	800710a <USBD_Start>
 800831a:	4603      	mov	r3, r0
 800831c:	2b00      	cmp	r3, #0
 800831e:	d001      	beq.n	8008324 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8008320:	f7f8 feac 	bl	800107c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8008324:	bf00      	nop
 8008326:	bd80      	pop	{r7, pc}
 8008328:	200000c4 	.word	0x200000c4
 800832c:	20012278 	.word	0x20012278
 8008330:	20000024 	.word	0x20000024
 8008334:	200000b0 	.word	0x200000b0

08008338 <CDC_Init_HS>:
/**
  * @brief  Initializes the CDC media low layer over the USB HS IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_HS(void)
{
 8008338:	b580      	push	{r7, lr}
 800833a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 8 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceHS, UserTxBufferHS, 0);
 800833c:	2200      	movs	r2, #0
 800833e:	4905      	ldr	r1, [pc, #20]	; (8008354 <CDC_Init_HS+0x1c>)
 8008340:	4805      	ldr	r0, [pc, #20]	; (8008358 <CDC_Init_HS+0x20>)
 8008342:	f7fe fe04 	bl	8006f4e <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceHS, UserRxBufferHS);
 8008346:	4905      	ldr	r1, [pc, #20]	; (800835c <CDC_Init_HS+0x24>)
 8008348:	4803      	ldr	r0, [pc, #12]	; (8008358 <CDC_Init_HS+0x20>)
 800834a:	f7fe fe19 	bl	8006f80 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800834e:	2300      	movs	r3, #0
  /* USER CODE END 8 */
}
 8008350:	4618      	mov	r0, r3
 8008352:	bd80      	pop	{r7, pc}
 8008354:	20012d48 	.word	0x20012d48
 8008358:	20012278 	.word	0x20012278
 800835c:	20012548 	.word	0x20012548

08008360 <CDC_DeInit_HS>:
  * @brief  DeInitializes the CDC media low layer
  * @param  None
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_HS(void)
{
 8008360:	b480      	push	{r7}
 8008362:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 9 */
  return (USBD_OK);
 8008364:	2300      	movs	r3, #0
  /* USER CODE END 9 */
}
 8008366:	4618      	mov	r0, r3
 8008368:	46bd      	mov	sp, r7
 800836a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800836e:	4770      	bx	lr

08008370 <CDC_Control_HS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_HS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8008370:	b480      	push	{r7}
 8008372:	b083      	sub	sp, #12
 8008374:	af00      	add	r7, sp, #0
 8008376:	4603      	mov	r3, r0
 8008378:	6039      	str	r1, [r7, #0]
 800837a:	71fb      	strb	r3, [r7, #7]
 800837c:	4613      	mov	r3, r2
 800837e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 10 */
  switch(cmd)
 8008380:	79fb      	ldrb	r3, [r7, #7]
 8008382:	2b23      	cmp	r3, #35	; 0x23
 8008384:	d84a      	bhi.n	800841c <CDC_Control_HS+0xac>
 8008386:	a201      	add	r2, pc, #4	; (adr r2, 800838c <CDC_Control_HS+0x1c>)
 8008388:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800838c:	0800841d 	.word	0x0800841d
 8008390:	0800841d 	.word	0x0800841d
 8008394:	0800841d 	.word	0x0800841d
 8008398:	0800841d 	.word	0x0800841d
 800839c:	0800841d 	.word	0x0800841d
 80083a0:	0800841d 	.word	0x0800841d
 80083a4:	0800841d 	.word	0x0800841d
 80083a8:	0800841d 	.word	0x0800841d
 80083ac:	0800841d 	.word	0x0800841d
 80083b0:	0800841d 	.word	0x0800841d
 80083b4:	0800841d 	.word	0x0800841d
 80083b8:	0800841d 	.word	0x0800841d
 80083bc:	0800841d 	.word	0x0800841d
 80083c0:	0800841d 	.word	0x0800841d
 80083c4:	0800841d 	.word	0x0800841d
 80083c8:	0800841d 	.word	0x0800841d
 80083cc:	0800841d 	.word	0x0800841d
 80083d0:	0800841d 	.word	0x0800841d
 80083d4:	0800841d 	.word	0x0800841d
 80083d8:	0800841d 	.word	0x0800841d
 80083dc:	0800841d 	.word	0x0800841d
 80083e0:	0800841d 	.word	0x0800841d
 80083e4:	0800841d 	.word	0x0800841d
 80083e8:	0800841d 	.word	0x0800841d
 80083ec:	0800841d 	.word	0x0800841d
 80083f0:	0800841d 	.word	0x0800841d
 80083f4:	0800841d 	.word	0x0800841d
 80083f8:	0800841d 	.word	0x0800841d
 80083fc:	0800841d 	.word	0x0800841d
 8008400:	0800841d 	.word	0x0800841d
 8008404:	0800841d 	.word	0x0800841d
 8008408:	0800841d 	.word	0x0800841d
 800840c:	0800841d 	.word	0x0800841d
 8008410:	0800841d 	.word	0x0800841d
 8008414:	0800841d 	.word	0x0800841d
 8008418:	0800841d 	.word	0x0800841d
  case CDC_SEND_BREAK:

    break;

  default:
    break;
 800841c:	bf00      	nop
  }

  return (USBD_OK);
 800841e:	2300      	movs	r3, #0
  /* USER CODE END 10 */
}
 8008420:	4618      	mov	r0, r3
 8008422:	370c      	adds	r7, #12
 8008424:	46bd      	mov	sp, r7
 8008426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800842a:	4770      	bx	lr

0800842c <CDC_Receive_HS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_HS(uint8_t* Buf, uint32_t *Len)
{
 800842c:	b580      	push	{r7, lr}
 800842e:	b082      	sub	sp, #8
 8008430:	af00      	add	r7, sp, #0
 8008432:	6078      	str	r0, [r7, #4]
 8008434:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 11 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceHS, &Buf[0]);
 8008436:	6879      	ldr	r1, [r7, #4]
 8008438:	4805      	ldr	r0, [pc, #20]	; (8008450 <CDC_Receive_HS+0x24>)
 800843a:	f7fe fda1 	bl	8006f80 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceHS);
 800843e:	4804      	ldr	r0, [pc, #16]	; (8008450 <CDC_Receive_HS+0x24>)
 8008440:	f7fe fde2 	bl	8007008 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8008444:	2300      	movs	r3, #0
  /* USER CODE END 11 */
}
 8008446:	4618      	mov	r0, r3
 8008448:	3708      	adds	r7, #8
 800844a:	46bd      	mov	sp, r7
 800844c:	bd80      	pop	{r7, pc}
 800844e:	bf00      	nop
 8008450:	20012278 	.word	0x20012278

08008454 <CDC_Transmit_HS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_HS(uint8_t* Buf, uint16_t Len)
{
 8008454:	b580      	push	{r7, lr}
 8008456:	b084      	sub	sp, #16
 8008458:	af00      	add	r7, sp, #0
 800845a:	6078      	str	r0, [r7, #4]
 800845c:	460b      	mov	r3, r1
 800845e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8008460:	2300      	movs	r3, #0
 8008462:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 12 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceHS.pClassData;
 8008464:	4b0d      	ldr	r3, [pc, #52]	; (800849c <CDC_Transmit_HS+0x48>)
 8008466:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800846a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800846c:	68bb      	ldr	r3, [r7, #8]
 800846e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8008472:	2b00      	cmp	r3, #0
 8008474:	d001      	beq.n	800847a <CDC_Transmit_HS+0x26>
    return USBD_BUSY;
 8008476:	2301      	movs	r3, #1
 8008478:	e00b      	b.n	8008492 <CDC_Transmit_HS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceHS, Buf, Len);
 800847a:	887b      	ldrh	r3, [r7, #2]
 800847c:	461a      	mov	r2, r3
 800847e:	6879      	ldr	r1, [r7, #4]
 8008480:	4806      	ldr	r0, [pc, #24]	; (800849c <CDC_Transmit_HS+0x48>)
 8008482:	f7fe fd64 	bl	8006f4e <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceHS);
 8008486:	4805      	ldr	r0, [pc, #20]	; (800849c <CDC_Transmit_HS+0x48>)
 8008488:	f7fe fd8e 	bl	8006fa8 <USBD_CDC_TransmitPacket>
 800848c:	4603      	mov	r3, r0
 800848e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 12 */
  return result;
 8008490:	7bfb      	ldrb	r3, [r7, #15]
}
 8008492:	4618      	mov	r0, r3
 8008494:	3710      	adds	r7, #16
 8008496:	46bd      	mov	sp, r7
 8008498:	bd80      	pop	{r7, pc}
 800849a:	bf00      	nop
 800849c:	20012278 	.word	0x20012278

080084a0 <CDC_TransmitCplt_HS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_HS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 80084a0:	b480      	push	{r7}
 80084a2:	b087      	sub	sp, #28
 80084a4:	af00      	add	r7, sp, #0
 80084a6:	60f8      	str	r0, [r7, #12]
 80084a8:	60b9      	str	r1, [r7, #8]
 80084aa:	4613      	mov	r3, r2
 80084ac:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 80084ae:	2300      	movs	r3, #0
 80084b0:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 14 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 14 */
  return result;
 80084b2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80084b6:	4618      	mov	r0, r3
 80084b8:	371c      	adds	r7, #28
 80084ba:	46bd      	mov	sp, r7
 80084bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084c0:	4770      	bx	lr
	...

080084c4 <USBD_HS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80084c4:	b480      	push	{r7}
 80084c6:	b083      	sub	sp, #12
 80084c8:	af00      	add	r7, sp, #0
 80084ca:	4603      	mov	r3, r0
 80084cc:	6039      	str	r1, [r7, #0]
 80084ce:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_HS_DeviceDesc);
 80084d0:	683b      	ldr	r3, [r7, #0]
 80084d2:	2212      	movs	r2, #18
 80084d4:	801a      	strh	r2, [r3, #0]
  return USBD_HS_DeviceDesc;
 80084d6:	4b03      	ldr	r3, [pc, #12]	; (80084e4 <USBD_HS_DeviceDescriptor+0x20>)
}
 80084d8:	4618      	mov	r0, r3
 80084da:	370c      	adds	r7, #12
 80084dc:	46bd      	mov	sp, r7
 80084de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084e2:	4770      	bx	lr
 80084e4:	200000e4 	.word	0x200000e4

080084e8 <USBD_HS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80084e8:	b480      	push	{r7}
 80084ea:	b083      	sub	sp, #12
 80084ec:	af00      	add	r7, sp, #0
 80084ee:	4603      	mov	r3, r0
 80084f0:	6039      	str	r1, [r7, #0]
 80084f2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80084f4:	683b      	ldr	r3, [r7, #0]
 80084f6:	2204      	movs	r2, #4
 80084f8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80084fa:	4b03      	ldr	r3, [pc, #12]	; (8008508 <USBD_HS_LangIDStrDescriptor+0x20>)
}
 80084fc:	4618      	mov	r0, r3
 80084fe:	370c      	adds	r7, #12
 8008500:	46bd      	mov	sp, r7
 8008502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008506:	4770      	bx	lr
 8008508:	20000104 	.word	0x20000104

0800850c <USBD_HS_ProductStrDescriptor>:
  * @param  speed : current device speed
  * @param  length : pointer to data length variable
  * @retval pointer to descriptor buffer
  */
uint8_t * USBD_HS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800850c:	b580      	push	{r7, lr}
 800850e:	b082      	sub	sp, #8
 8008510:	af00      	add	r7, sp, #0
 8008512:	4603      	mov	r3, r0
 8008514:	6039      	str	r1, [r7, #0]
 8008516:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008518:	79fb      	ldrb	r3, [r7, #7]
 800851a:	2b00      	cmp	r3, #0
 800851c:	d105      	bne.n	800852a <USBD_HS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 800851e:	683a      	ldr	r2, [r7, #0]
 8008520:	4907      	ldr	r1, [pc, #28]	; (8008540 <USBD_HS_ProductStrDescriptor+0x34>)
 8008522:	4808      	ldr	r0, [pc, #32]	; (8008544 <USBD_HS_ProductStrDescriptor+0x38>)
 8008524:	f7ff fdf8 	bl	8008118 <USBD_GetString>
 8008528:	e004      	b.n	8008534 <USBD_HS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 800852a:	683a      	ldr	r2, [r7, #0]
 800852c:	4904      	ldr	r1, [pc, #16]	; (8008540 <USBD_HS_ProductStrDescriptor+0x34>)
 800852e:	4805      	ldr	r0, [pc, #20]	; (8008544 <USBD_HS_ProductStrDescriptor+0x38>)
 8008530:	f7ff fdf2 	bl	8008118 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008534:	4b02      	ldr	r3, [pc, #8]	; (8008540 <USBD_HS_ProductStrDescriptor+0x34>)
}
 8008536:	4618      	mov	r0, r3
 8008538:	3708      	adds	r7, #8
 800853a:	46bd      	mov	sp, r7
 800853c:	bd80      	pop	{r7, pc}
 800853e:	bf00      	nop
 8008540:	20013548 	.word	0x20013548
 8008544:	08009000 	.word	0x08009000

08008548 <USBD_HS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008548:	b580      	push	{r7, lr}
 800854a:	b082      	sub	sp, #8
 800854c:	af00      	add	r7, sp, #0
 800854e:	4603      	mov	r3, r0
 8008550:	6039      	str	r1, [r7, #0]
 8008552:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8008554:	683a      	ldr	r2, [r7, #0]
 8008556:	4904      	ldr	r1, [pc, #16]	; (8008568 <USBD_HS_ManufacturerStrDescriptor+0x20>)
 8008558:	4804      	ldr	r0, [pc, #16]	; (800856c <USBD_HS_ManufacturerStrDescriptor+0x24>)
 800855a:	f7ff fddd 	bl	8008118 <USBD_GetString>
  return USBD_StrDesc;
 800855e:	4b02      	ldr	r3, [pc, #8]	; (8008568 <USBD_HS_ManufacturerStrDescriptor+0x20>)
}
 8008560:	4618      	mov	r0, r3
 8008562:	3708      	adds	r7, #8
 8008564:	46bd      	mov	sp, r7
 8008566:	bd80      	pop	{r7, pc}
 8008568:	20013548 	.word	0x20013548
 800856c:	08009018 	.word	0x08009018

08008570 <USBD_HS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008570:	b580      	push	{r7, lr}
 8008572:	b082      	sub	sp, #8
 8008574:	af00      	add	r7, sp, #0
 8008576:	4603      	mov	r3, r0
 8008578:	6039      	str	r1, [r7, #0]
 800857a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800857c:	683b      	ldr	r3, [r7, #0]
 800857e:	221a      	movs	r2, #26
 8008580:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8008582:	f000 f855 	bl	8008630 <Get_SerialNum>
  /* USER CODE BEGIN USBD_HS_SerialStrDescriptor */

  /* USER CODE END USBD_HS_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 8008586:	4b02      	ldr	r3, [pc, #8]	; (8008590 <USBD_HS_SerialStrDescriptor+0x20>)
}
 8008588:	4618      	mov	r0, r3
 800858a:	3708      	adds	r7, #8
 800858c:	46bd      	mov	sp, r7
 800858e:	bd80      	pop	{r7, pc}
 8008590:	20000108 	.word	0x20000108

08008594 <USBD_HS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008594:	b580      	push	{r7, lr}
 8008596:	b082      	sub	sp, #8
 8008598:	af00      	add	r7, sp, #0
 800859a:	4603      	mov	r3, r0
 800859c:	6039      	str	r1, [r7, #0]
 800859e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80085a0:	79fb      	ldrb	r3, [r7, #7]
 80085a2:	2b00      	cmp	r3, #0
 80085a4:	d105      	bne.n	80085b2 <USBD_HS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 80085a6:	683a      	ldr	r2, [r7, #0]
 80085a8:	4907      	ldr	r1, [pc, #28]	; (80085c8 <USBD_HS_ConfigStrDescriptor+0x34>)
 80085aa:	4808      	ldr	r0, [pc, #32]	; (80085cc <USBD_HS_ConfigStrDescriptor+0x38>)
 80085ac:	f7ff fdb4 	bl	8008118 <USBD_GetString>
 80085b0:	e004      	b.n	80085bc <USBD_HS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 80085b2:	683a      	ldr	r2, [r7, #0]
 80085b4:	4904      	ldr	r1, [pc, #16]	; (80085c8 <USBD_HS_ConfigStrDescriptor+0x34>)
 80085b6:	4805      	ldr	r0, [pc, #20]	; (80085cc <USBD_HS_ConfigStrDescriptor+0x38>)
 80085b8:	f7ff fdae 	bl	8008118 <USBD_GetString>
  }
  return USBD_StrDesc;
 80085bc:	4b02      	ldr	r3, [pc, #8]	; (80085c8 <USBD_HS_ConfigStrDescriptor+0x34>)
}
 80085be:	4618      	mov	r0, r3
 80085c0:	3708      	adds	r7, #8
 80085c2:	46bd      	mov	sp, r7
 80085c4:	bd80      	pop	{r7, pc}
 80085c6:	bf00      	nop
 80085c8:	20013548 	.word	0x20013548
 80085cc:	0800902c 	.word	0x0800902c

080085d0 <USBD_HS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80085d0:	b580      	push	{r7, lr}
 80085d2:	b082      	sub	sp, #8
 80085d4:	af00      	add	r7, sp, #0
 80085d6:	4603      	mov	r3, r0
 80085d8:	6039      	str	r1, [r7, #0]
 80085da:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80085dc:	79fb      	ldrb	r3, [r7, #7]
 80085de:	2b00      	cmp	r3, #0
 80085e0:	d105      	bne.n	80085ee <USBD_HS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 80085e2:	683a      	ldr	r2, [r7, #0]
 80085e4:	4907      	ldr	r1, [pc, #28]	; (8008604 <USBD_HS_InterfaceStrDescriptor+0x34>)
 80085e6:	4808      	ldr	r0, [pc, #32]	; (8008608 <USBD_HS_InterfaceStrDescriptor+0x38>)
 80085e8:	f7ff fd96 	bl	8008118 <USBD_GetString>
 80085ec:	e004      	b.n	80085f8 <USBD_HS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 80085ee:	683a      	ldr	r2, [r7, #0]
 80085f0:	4904      	ldr	r1, [pc, #16]	; (8008604 <USBD_HS_InterfaceStrDescriptor+0x34>)
 80085f2:	4805      	ldr	r0, [pc, #20]	; (8008608 <USBD_HS_InterfaceStrDescriptor+0x38>)
 80085f4:	f7ff fd90 	bl	8008118 <USBD_GetString>
  }
  return USBD_StrDesc;
 80085f8:	4b02      	ldr	r3, [pc, #8]	; (8008604 <USBD_HS_InterfaceStrDescriptor+0x34>)
}
 80085fa:	4618      	mov	r0, r3
 80085fc:	3708      	adds	r7, #8
 80085fe:	46bd      	mov	sp, r7
 8008600:	bd80      	pop	{r7, pc}
 8008602:	bf00      	nop
 8008604:	20013548 	.word	0x20013548
 8008608:	08009038 	.word	0x08009038

0800860c <USBD_HS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800860c:	b480      	push	{r7}
 800860e:	b083      	sub	sp, #12
 8008610:	af00      	add	r7, sp, #0
 8008612:	4603      	mov	r3, r0
 8008614:	6039      	str	r1, [r7, #0]
 8008616:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_HS_BOSDesc);
 8008618:	683b      	ldr	r3, [r7, #0]
 800861a:	220c      	movs	r2, #12
 800861c:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_HS_BOSDesc;
 800861e:	4b03      	ldr	r3, [pc, #12]	; (800862c <USBD_HS_USR_BOSDescriptor+0x20>)
}
 8008620:	4618      	mov	r0, r3
 8008622:	370c      	adds	r7, #12
 8008624:	46bd      	mov	sp, r7
 8008626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800862a:	4770      	bx	lr
 800862c:	200000f8 	.word	0x200000f8

08008630 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8008630:	b580      	push	{r7, lr}
 8008632:	b084      	sub	sp, #16
 8008634:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8008636:	4b0f      	ldr	r3, [pc, #60]	; (8008674 <Get_SerialNum+0x44>)
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800863c:	4b0e      	ldr	r3, [pc, #56]	; (8008678 <Get_SerialNum+0x48>)
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8008642:	4b0e      	ldr	r3, [pc, #56]	; (800867c <Get_SerialNum+0x4c>)
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8008648:	68fa      	ldr	r2, [r7, #12]
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	4413      	add	r3, r2
 800864e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8008650:	68fb      	ldr	r3, [r7, #12]
 8008652:	2b00      	cmp	r3, #0
 8008654:	d009      	beq.n	800866a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8008656:	2208      	movs	r2, #8
 8008658:	4909      	ldr	r1, [pc, #36]	; (8008680 <Get_SerialNum+0x50>)
 800865a:	68f8      	ldr	r0, [r7, #12]
 800865c:	f000 f814 	bl	8008688 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8008660:	2204      	movs	r2, #4
 8008662:	4908      	ldr	r1, [pc, #32]	; (8008684 <Get_SerialNum+0x54>)
 8008664:	68b8      	ldr	r0, [r7, #8]
 8008666:	f000 f80f 	bl	8008688 <IntToUnicode>
  }
}
 800866a:	bf00      	nop
 800866c:	3710      	adds	r7, #16
 800866e:	46bd      	mov	sp, r7
 8008670:	bd80      	pop	{r7, pc}
 8008672:	bf00      	nop
 8008674:	1ff07a10 	.word	0x1ff07a10
 8008678:	1ff07a14 	.word	0x1ff07a14
 800867c:	1ff07a18 	.word	0x1ff07a18
 8008680:	2000010a 	.word	0x2000010a
 8008684:	2000011a 	.word	0x2000011a

08008688 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8008688:	b480      	push	{r7}
 800868a:	b087      	sub	sp, #28
 800868c:	af00      	add	r7, sp, #0
 800868e:	60f8      	str	r0, [r7, #12]
 8008690:	60b9      	str	r1, [r7, #8]
 8008692:	4613      	mov	r3, r2
 8008694:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8008696:	2300      	movs	r3, #0
 8008698:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800869a:	2300      	movs	r3, #0
 800869c:	75fb      	strb	r3, [r7, #23]
 800869e:	e027      	b.n	80086f0 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80086a0:	68fb      	ldr	r3, [r7, #12]
 80086a2:	0f1b      	lsrs	r3, r3, #28
 80086a4:	2b09      	cmp	r3, #9
 80086a6:	d80b      	bhi.n	80086c0 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80086a8:	68fb      	ldr	r3, [r7, #12]
 80086aa:	0f1b      	lsrs	r3, r3, #28
 80086ac:	b2da      	uxtb	r2, r3
 80086ae:	7dfb      	ldrb	r3, [r7, #23]
 80086b0:	005b      	lsls	r3, r3, #1
 80086b2:	4619      	mov	r1, r3
 80086b4:	68bb      	ldr	r3, [r7, #8]
 80086b6:	440b      	add	r3, r1
 80086b8:	3230      	adds	r2, #48	; 0x30
 80086ba:	b2d2      	uxtb	r2, r2
 80086bc:	701a      	strb	r2, [r3, #0]
 80086be:	e00a      	b.n	80086d6 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80086c0:	68fb      	ldr	r3, [r7, #12]
 80086c2:	0f1b      	lsrs	r3, r3, #28
 80086c4:	b2da      	uxtb	r2, r3
 80086c6:	7dfb      	ldrb	r3, [r7, #23]
 80086c8:	005b      	lsls	r3, r3, #1
 80086ca:	4619      	mov	r1, r3
 80086cc:	68bb      	ldr	r3, [r7, #8]
 80086ce:	440b      	add	r3, r1
 80086d0:	3237      	adds	r2, #55	; 0x37
 80086d2:	b2d2      	uxtb	r2, r2
 80086d4:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80086d6:	68fb      	ldr	r3, [r7, #12]
 80086d8:	011b      	lsls	r3, r3, #4
 80086da:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80086dc:	7dfb      	ldrb	r3, [r7, #23]
 80086de:	005b      	lsls	r3, r3, #1
 80086e0:	3301      	adds	r3, #1
 80086e2:	68ba      	ldr	r2, [r7, #8]
 80086e4:	4413      	add	r3, r2
 80086e6:	2200      	movs	r2, #0
 80086e8:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80086ea:	7dfb      	ldrb	r3, [r7, #23]
 80086ec:	3301      	adds	r3, #1
 80086ee:	75fb      	strb	r3, [r7, #23]
 80086f0:	7dfa      	ldrb	r2, [r7, #23]
 80086f2:	79fb      	ldrb	r3, [r7, #7]
 80086f4:	429a      	cmp	r2, r3
 80086f6:	d3d3      	bcc.n	80086a0 <IntToUnicode+0x18>
  }
}
 80086f8:	bf00      	nop
 80086fa:	bf00      	nop
 80086fc:	371c      	adds	r7, #28
 80086fe:	46bd      	mov	sp, r7
 8008700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008704:	4770      	bx	lr
	...

08008708 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8008708:	b580      	push	{r7, lr}
 800870a:	b0aa      	sub	sp, #168	; 0xa8
 800870c:	af00      	add	r7, sp, #0
 800870e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008710:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8008714:	2200      	movs	r2, #0
 8008716:	601a      	str	r2, [r3, #0]
 8008718:	605a      	str	r2, [r3, #4]
 800871a:	609a      	str	r2, [r3, #8]
 800871c:	60da      	str	r2, [r3, #12]
 800871e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8008720:	f107 0314 	add.w	r3, r7, #20
 8008724:	2280      	movs	r2, #128	; 0x80
 8008726:	2100      	movs	r1, #0
 8008728:	4618      	mov	r0, r3
 800872a:	f000 fb8d 	bl	8008e48 <memset>
  if(pcdHandle->Instance==USB_OTG_HS)
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	4a26      	ldr	r2, [pc, #152]	; (80087cc <HAL_PCD_MspInit+0xc4>)
 8008734:	4293      	cmp	r3, r2
 8008736:	d145      	bne.n	80087c4 <HAL_PCD_MspInit+0xbc>
  /* USER CODE BEGIN USB_OTG_HS_MspInit 0 */

  /* USER CODE END USB_OTG_HS_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8008738:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800873c:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 800873e:	2300      	movs	r3, #0
 8008740:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8008744:	f107 0314 	add.w	r3, r7, #20
 8008748:	4618      	mov	r0, r3
 800874a:	f7fb fa15 	bl	8003b78 <HAL_RCCEx_PeriphCLKConfig>
 800874e:	4603      	mov	r3, r0
 8008750:	2b00      	cmp	r3, #0
 8008752:	d001      	beq.n	8008758 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8008754:	f7f8 fc92 	bl	800107c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8008758:	4b1d      	ldr	r3, [pc, #116]	; (80087d0 <HAL_PCD_MspInit+0xc8>)
 800875a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800875c:	4a1c      	ldr	r2, [pc, #112]	; (80087d0 <HAL_PCD_MspInit+0xc8>)
 800875e:	f043 0302 	orr.w	r3, r3, #2
 8008762:	6313      	str	r3, [r2, #48]	; 0x30
 8008764:	4b1a      	ldr	r3, [pc, #104]	; (80087d0 <HAL_PCD_MspInit+0xc8>)
 8008766:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008768:	f003 0302 	and.w	r3, r3, #2
 800876c:	613b      	str	r3, [r7, #16]
 800876e:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_HS GPIO Configuration
    PB14     ------> USB_OTG_HS_DM
    PB15     ------> USB_OTG_HS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8008770:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8008774:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008778:	2302      	movs	r3, #2
 800877a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800877e:	2300      	movs	r3, #0
 8008780:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008784:	2303      	movs	r3, #3
 8008786:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 800878a:	230c      	movs	r3, #12
 800878c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008790:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8008794:	4619      	mov	r1, r3
 8008796:	480f      	ldr	r0, [pc, #60]	; (80087d4 <HAL_PCD_MspInit+0xcc>)
 8008798:	f7f9 f9d8 	bl	8001b4c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_OTGPHYC_CLK_ENABLE();
 800879c:	4b0c      	ldr	r3, [pc, #48]	; (80087d0 <HAL_PCD_MspInit+0xc8>)
 800879e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80087a0:	4a0b      	ldr	r2, [pc, #44]	; (80087d0 <HAL_PCD_MspInit+0xc8>)
 80087a2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80087a6:	6453      	str	r3, [r2, #68]	; 0x44
 80087a8:	4b09      	ldr	r3, [pc, #36]	; (80087d0 <HAL_PCD_MspInit+0xc8>)
 80087aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80087ac:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80087b0:	60fb      	str	r3, [r7, #12]
 80087b2:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 0, 0);
 80087b4:	2200      	movs	r2, #0
 80087b6:	2100      	movs	r1, #0
 80087b8:	204d      	movs	r0, #77	; 0x4d
 80087ba:	f7f8 ffa2 	bl	8001702 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 80087be:	204d      	movs	r0, #77	; 0x4d
 80087c0:	f7f8 ffbb 	bl	800173a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }
}
 80087c4:	bf00      	nop
 80087c6:	37a8      	adds	r7, #168	; 0xa8
 80087c8:	46bd      	mov	sp, r7
 80087ca:	bd80      	pop	{r7, pc}
 80087cc:	40040000 	.word	0x40040000
 80087d0:	40023800 	.word	0x40023800
 80087d4:	40020400 	.word	0x40020400

080087d8 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80087d8:	b580      	push	{r7, lr}
 80087da:	b082      	sub	sp, #8
 80087dc:	af00      	add	r7, sp, #0
 80087de:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80087ec:	4619      	mov	r1, r3
 80087ee:	4610      	mov	r0, r2
 80087f0:	f7fe fcd6 	bl	80071a0 <USBD_LL_SetupStage>
}
 80087f4:	bf00      	nop
 80087f6:	3708      	adds	r7, #8
 80087f8:	46bd      	mov	sp, r7
 80087fa:	bd80      	pop	{r7, pc}

080087fc <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80087fc:	b580      	push	{r7, lr}
 80087fe:	b082      	sub	sp, #8
 8008800:	af00      	add	r7, sp, #0
 8008802:	6078      	str	r0, [r7, #4]
 8008804:	460b      	mov	r3, r1
 8008806:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	f8d3 0400 	ldr.w	r0, [r3, #1024]	; 0x400
 800880e:	78fa      	ldrb	r2, [r7, #3]
 8008810:	6879      	ldr	r1, [r7, #4]
 8008812:	4613      	mov	r3, r2
 8008814:	00db      	lsls	r3, r3, #3
 8008816:	1a9b      	subs	r3, r3, r2
 8008818:	009b      	lsls	r3, r3, #2
 800881a:	440b      	add	r3, r1
 800881c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8008820:	681a      	ldr	r2, [r3, #0]
 8008822:	78fb      	ldrb	r3, [r7, #3]
 8008824:	4619      	mov	r1, r3
 8008826:	f7fe fd10 	bl	800724a <USBD_LL_DataOutStage>
}
 800882a:	bf00      	nop
 800882c:	3708      	adds	r7, #8
 800882e:	46bd      	mov	sp, r7
 8008830:	bd80      	pop	{r7, pc}

08008832 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008832:	b580      	push	{r7, lr}
 8008834:	b082      	sub	sp, #8
 8008836:	af00      	add	r7, sp, #0
 8008838:	6078      	str	r0, [r7, #4]
 800883a:	460b      	mov	r3, r1
 800883c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	f8d3 0400 	ldr.w	r0, [r3, #1024]	; 0x400
 8008844:	78fa      	ldrb	r2, [r7, #3]
 8008846:	6879      	ldr	r1, [r7, #4]
 8008848:	4613      	mov	r3, r2
 800884a:	00db      	lsls	r3, r3, #3
 800884c:	1a9b      	subs	r3, r3, r2
 800884e:	009b      	lsls	r3, r3, #2
 8008850:	440b      	add	r3, r1
 8008852:	3348      	adds	r3, #72	; 0x48
 8008854:	681a      	ldr	r2, [r3, #0]
 8008856:	78fb      	ldrb	r3, [r7, #3]
 8008858:	4619      	mov	r1, r3
 800885a:	f7fe fd59 	bl	8007310 <USBD_LL_DataInStage>
}
 800885e:	bf00      	nop
 8008860:	3708      	adds	r7, #8
 8008862:	46bd      	mov	sp, r7
 8008864:	bd80      	pop	{r7, pc}

08008866 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008866:	b580      	push	{r7, lr}
 8008868:	b082      	sub	sp, #8
 800886a:	af00      	add	r7, sp, #0
 800886c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8008874:	4618      	mov	r0, r3
 8008876:	f7fe fe5d 	bl	8007534 <USBD_LL_SOF>
}
 800887a:	bf00      	nop
 800887c:	3708      	adds	r7, #8
 800887e:	46bd      	mov	sp, r7
 8008880:	bd80      	pop	{r7, pc}

08008882 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008882:	b580      	push	{r7, lr}
 8008884:	b084      	sub	sp, #16
 8008886:	af00      	add	r7, sp, #0
 8008888:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800888a:	2301      	movs	r3, #1
 800888c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	68db      	ldr	r3, [r3, #12]
 8008892:	2b00      	cmp	r3, #0
 8008894:	d102      	bne.n	800889c <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8008896:	2300      	movs	r3, #0
 8008898:	73fb      	strb	r3, [r7, #15]
 800889a:	e008      	b.n	80088ae <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	68db      	ldr	r3, [r3, #12]
 80088a0:	2b02      	cmp	r3, #2
 80088a2:	d102      	bne.n	80088aa <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 80088a4:	2301      	movs	r3, #1
 80088a6:	73fb      	strb	r3, [r7, #15]
 80088a8:	e001      	b.n	80088ae <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 80088aa:	f7f8 fbe7 	bl	800107c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 80088b4:	7bfa      	ldrb	r2, [r7, #15]
 80088b6:	4611      	mov	r1, r2
 80088b8:	4618      	mov	r0, r3
 80088ba:	f7fe fe00 	bl	80074be <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 80088c4:	4618      	mov	r0, r3
 80088c6:	f7fe fdb9 	bl	800743c <USBD_LL_Reset>
}
 80088ca:	bf00      	nop
 80088cc:	3710      	adds	r7, #16
 80088ce:	46bd      	mov	sp, r7
 80088d0:	bd80      	pop	{r7, pc}
	...

080088d4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80088d4:	b580      	push	{r7, lr}
 80088d6:	b082      	sub	sp, #8
 80088d8:	af00      	add	r7, sp, #0
 80088da:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 80088e2:	4618      	mov	r0, r3
 80088e4:	f7fe fdfb 	bl	80074de <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80088f0:	681b      	ldr	r3, [r3, #0]
 80088f2:	687a      	ldr	r2, [r7, #4]
 80088f4:	6812      	ldr	r2, [r2, #0]
 80088f6:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80088fa:	f043 0301 	orr.w	r3, r3, #1
 80088fe:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	6a1b      	ldr	r3, [r3, #32]
 8008904:	2b00      	cmp	r3, #0
 8008906:	d005      	beq.n	8008914 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008908:	4b04      	ldr	r3, [pc, #16]	; (800891c <HAL_PCD_SuspendCallback+0x48>)
 800890a:	691b      	ldr	r3, [r3, #16]
 800890c:	4a03      	ldr	r2, [pc, #12]	; (800891c <HAL_PCD_SuspendCallback+0x48>)
 800890e:	f043 0306 	orr.w	r3, r3, #6
 8008912:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8008914:	bf00      	nop
 8008916:	3708      	adds	r7, #8
 8008918:	46bd      	mov	sp, r7
 800891a:	bd80      	pop	{r7, pc}
 800891c:	e000ed00 	.word	0xe000ed00

08008920 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008920:	b580      	push	{r7, lr}
 8008922:	b082      	sub	sp, #8
 8008924:	af00      	add	r7, sp, #0
 8008926:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800892e:	4618      	mov	r0, r3
 8008930:	f7fe fdea 	bl	8007508 <USBD_LL_Resume>
}
 8008934:	bf00      	nop
 8008936:	3708      	adds	r7, #8
 8008938:	46bd      	mov	sp, r7
 800893a:	bd80      	pop	{r7, pc}

0800893c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800893c:	b580      	push	{r7, lr}
 800893e:	b082      	sub	sp, #8
 8008940:	af00      	add	r7, sp, #0
 8008942:	6078      	str	r0, [r7, #4]
 8008944:	460b      	mov	r3, r1
 8008946:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800894e:	78fa      	ldrb	r2, [r7, #3]
 8008950:	4611      	mov	r1, r2
 8008952:	4618      	mov	r0, r3
 8008954:	f7fe fe15 	bl	8007582 <USBD_LL_IsoOUTIncomplete>
}
 8008958:	bf00      	nop
 800895a:	3708      	adds	r7, #8
 800895c:	46bd      	mov	sp, r7
 800895e:	bd80      	pop	{r7, pc}

08008960 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008960:	b580      	push	{r7, lr}
 8008962:	b082      	sub	sp, #8
 8008964:	af00      	add	r7, sp, #0
 8008966:	6078      	str	r0, [r7, #4]
 8008968:	460b      	mov	r3, r1
 800896a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8008972:	78fa      	ldrb	r2, [r7, #3]
 8008974:	4611      	mov	r1, r2
 8008976:	4618      	mov	r0, r3
 8008978:	f7fe fdf6 	bl	8007568 <USBD_LL_IsoINIncomplete>
}
 800897c:	bf00      	nop
 800897e:	3708      	adds	r7, #8
 8008980:	46bd      	mov	sp, r7
 8008982:	bd80      	pop	{r7, pc}

08008984 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008984:	b580      	push	{r7, lr}
 8008986:	b082      	sub	sp, #8
 8008988:	af00      	add	r7, sp, #0
 800898a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8008992:	4618      	mov	r0, r3
 8008994:	f7fe fe02 	bl	800759c <USBD_LL_DevConnected>
}
 8008998:	bf00      	nop
 800899a:	3708      	adds	r7, #8
 800899c:	46bd      	mov	sp, r7
 800899e:	bd80      	pop	{r7, pc}

080089a0 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80089a0:	b580      	push	{r7, lr}
 80089a2:	b082      	sub	sp, #8
 80089a4:	af00      	add	r7, sp, #0
 80089a6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 80089ae:	4618      	mov	r0, r3
 80089b0:	f7fe fdff 	bl	80075b2 <USBD_LL_DevDisconnected>
}
 80089b4:	bf00      	nop
 80089b6:	3708      	adds	r7, #8
 80089b8:	46bd      	mov	sp, r7
 80089ba:	bd80      	pop	{r7, pc}

080089bc <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80089bc:	b580      	push	{r7, lr}
 80089be:	b082      	sub	sp, #8
 80089c0:	af00      	add	r7, sp, #0
 80089c2:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_HS) {
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	781b      	ldrb	r3, [r3, #0]
 80089c8:	2b01      	cmp	r3, #1
 80089ca:	d13c      	bne.n	8008a46 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_HS.pData = pdev;
 80089cc:	4a20      	ldr	r2, [pc, #128]	; (8008a50 <USBD_LL_Init+0x94>)
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	f8c2 3400 	str.w	r3, [r2, #1024]	; 0x400
  pdev->pData = &hpcd_USB_OTG_HS;
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	4a1e      	ldr	r2, [pc, #120]	; (8008a50 <USBD_LL_Init+0x94>)
 80089d8:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_HS.Instance = USB_OTG_HS;
 80089dc:	4b1c      	ldr	r3, [pc, #112]	; (8008a50 <USBD_LL_Init+0x94>)
 80089de:	4a1d      	ldr	r2, [pc, #116]	; (8008a54 <USBD_LL_Init+0x98>)
 80089e0:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_HS.Init.dev_endpoints = 9;
 80089e2:	4b1b      	ldr	r3, [pc, #108]	; (8008a50 <USBD_LL_Init+0x94>)
 80089e4:	2209      	movs	r2, #9
 80089e6:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 80089e8:	4b19      	ldr	r3, [pc, #100]	; (8008a50 <USBD_LL_Init+0x94>)
 80089ea:	2200      	movs	r2, #0
 80089ec:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_HS.Init.phy_itface = USB_OTG_HS_EMBEDDED_PHY;
 80089ee:	4b18      	ldr	r3, [pc, #96]	; (8008a50 <USBD_LL_Init+0x94>)
 80089f0:	2203      	movs	r2, #3
 80089f2:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 80089f4:	4b16      	ldr	r3, [pc, #88]	; (8008a50 <USBD_LL_Init+0x94>)
 80089f6:	2200      	movs	r2, #0
 80089f8:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 80089fa:	4b15      	ldr	r3, [pc, #84]	; (8008a50 <USBD_LL_Init+0x94>)
 80089fc:	2200      	movs	r2, #0
 80089fe:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_HS.Init.lpm_enable = DISABLE;
 8008a00:	4b13      	ldr	r3, [pc, #76]	; (8008a50 <USBD_LL_Init+0x94>)
 8008a02:	2200      	movs	r2, #0
 8008a04:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 8008a06:	4b12      	ldr	r3, [pc, #72]	; (8008a50 <USBD_LL_Init+0x94>)
 8008a08:	2200      	movs	r2, #0
 8008a0a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_HS.Init.use_dedicated_ep1 = DISABLE;
 8008a0c:	4b10      	ldr	r3, [pc, #64]	; (8008a50 <USBD_LL_Init+0x94>)
 8008a0e:	2200      	movs	r2, #0
 8008a10:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 8008a12:	4b0f      	ldr	r3, [pc, #60]	; (8008a50 <USBD_LL_Init+0x94>)
 8008a14:	2200      	movs	r2, #0
 8008a16:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_PCD_Init(&hpcd_USB_OTG_HS) != HAL_OK)
 8008a18:	480d      	ldr	r0, [pc, #52]	; (8008a50 <USBD_LL_Init+0x94>)
 8008a1a:	f7f9 fa4c 	bl	8001eb6 <HAL_PCD_Init>
 8008a1e:	4603      	mov	r3, r0
 8008a20:	2b00      	cmp	r3, #0
 8008a22:	d001      	beq.n	8008a28 <USBD_LL_Init+0x6c>
  {
    Error_Handler( );
 8008a24:	f7f8 fb2a 	bl	800107c <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_HS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_HS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_HS, 0x40); // original 0x200
 8008a28:	2140      	movs	r1, #64	; 0x40
 8008a2a:	4809      	ldr	r0, [pc, #36]	; (8008a50 <USBD_LL_Init+0x94>)
 8008a2c:	f7fa fbbd 	bl	80031aa <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 0, 0x40); // original 0x80
 8008a30:	2240      	movs	r2, #64	; 0x40
 8008a32:	2100      	movs	r1, #0
 8008a34:	4806      	ldr	r0, [pc, #24]	; (8008a50 <USBD_LL_Init+0x94>)
 8008a36:	f7fa fb71 	bl	800311c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 1, 0x380); // original x174
 8008a3a:	f44f 7260 	mov.w	r2, #896	; 0x380
 8008a3e:	2101      	movs	r1, #1
 8008a40:	4803      	ldr	r0, [pc, #12]	; (8008a50 <USBD_LL_Init+0x94>)
 8008a42:	f7fa fb6b 	bl	800311c <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8008a46:	2300      	movs	r3, #0
}
 8008a48:	4618      	mov	r0, r3
 8008a4a:	3708      	adds	r7, #8
 8008a4c:	46bd      	mov	sp, r7
 8008a4e:	bd80      	pop	{r7, pc}
 8008a50:	20013748 	.word	0x20013748
 8008a54:	40040000 	.word	0x40040000

08008a58 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8008a58:	b580      	push	{r7, lr}
 8008a5a:	b084      	sub	sp, #16
 8008a5c:	af00      	add	r7, sp, #0
 8008a5e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008a60:	2300      	movs	r3, #0
 8008a62:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008a64:	2300      	movs	r3, #0
 8008a66:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008a6e:	4618      	mov	r0, r3
 8008a70:	f7f9 fb45 	bl	80020fe <HAL_PCD_Start>
 8008a74:	4603      	mov	r3, r0
 8008a76:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008a78:	7bfb      	ldrb	r3, [r7, #15]
 8008a7a:	4618      	mov	r0, r3
 8008a7c:	f000 f97e 	bl	8008d7c <USBD_Get_USB_Status>
 8008a80:	4603      	mov	r3, r0
 8008a82:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008a84:	7bbb      	ldrb	r3, [r7, #14]
}
 8008a86:	4618      	mov	r0, r3
 8008a88:	3710      	adds	r7, #16
 8008a8a:	46bd      	mov	sp, r7
 8008a8c:	bd80      	pop	{r7, pc}

08008a8e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8008a8e:	b580      	push	{r7, lr}
 8008a90:	b084      	sub	sp, #16
 8008a92:	af00      	add	r7, sp, #0
 8008a94:	6078      	str	r0, [r7, #4]
 8008a96:	4608      	mov	r0, r1
 8008a98:	4611      	mov	r1, r2
 8008a9a:	461a      	mov	r2, r3
 8008a9c:	4603      	mov	r3, r0
 8008a9e:	70fb      	strb	r3, [r7, #3]
 8008aa0:	460b      	mov	r3, r1
 8008aa2:	70bb      	strb	r3, [r7, #2]
 8008aa4:	4613      	mov	r3, r2
 8008aa6:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008aa8:	2300      	movs	r3, #0
 8008aaa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008aac:	2300      	movs	r3, #0
 8008aae:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8008ab6:	78bb      	ldrb	r3, [r7, #2]
 8008ab8:	883a      	ldrh	r2, [r7, #0]
 8008aba:	78f9      	ldrb	r1, [r7, #3]
 8008abc:	f7f9 ff35 	bl	800292a <HAL_PCD_EP_Open>
 8008ac0:	4603      	mov	r3, r0
 8008ac2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008ac4:	7bfb      	ldrb	r3, [r7, #15]
 8008ac6:	4618      	mov	r0, r3
 8008ac8:	f000 f958 	bl	8008d7c <USBD_Get_USB_Status>
 8008acc:	4603      	mov	r3, r0
 8008ace:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008ad0:	7bbb      	ldrb	r3, [r7, #14]
}
 8008ad2:	4618      	mov	r0, r3
 8008ad4:	3710      	adds	r7, #16
 8008ad6:	46bd      	mov	sp, r7
 8008ad8:	bd80      	pop	{r7, pc}

08008ada <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008ada:	b580      	push	{r7, lr}
 8008adc:	b084      	sub	sp, #16
 8008ade:	af00      	add	r7, sp, #0
 8008ae0:	6078      	str	r0, [r7, #4]
 8008ae2:	460b      	mov	r3, r1
 8008ae4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008ae6:	2300      	movs	r3, #0
 8008ae8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008aea:	2300      	movs	r3, #0
 8008aec:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008af4:	78fa      	ldrb	r2, [r7, #3]
 8008af6:	4611      	mov	r1, r2
 8008af8:	4618      	mov	r0, r3
 8008afa:	f7f9 ff7e 	bl	80029fa <HAL_PCD_EP_Close>
 8008afe:	4603      	mov	r3, r0
 8008b00:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008b02:	7bfb      	ldrb	r3, [r7, #15]
 8008b04:	4618      	mov	r0, r3
 8008b06:	f000 f939 	bl	8008d7c <USBD_Get_USB_Status>
 8008b0a:	4603      	mov	r3, r0
 8008b0c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008b0e:	7bbb      	ldrb	r3, [r7, #14]
}
 8008b10:	4618      	mov	r0, r3
 8008b12:	3710      	adds	r7, #16
 8008b14:	46bd      	mov	sp, r7
 8008b16:	bd80      	pop	{r7, pc}

08008b18 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008b18:	b580      	push	{r7, lr}
 8008b1a:	b084      	sub	sp, #16
 8008b1c:	af00      	add	r7, sp, #0
 8008b1e:	6078      	str	r0, [r7, #4]
 8008b20:	460b      	mov	r3, r1
 8008b22:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008b24:	2300      	movs	r3, #0
 8008b26:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008b28:	2300      	movs	r3, #0
 8008b2a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008b32:	78fa      	ldrb	r2, [r7, #3]
 8008b34:	4611      	mov	r1, r2
 8008b36:	4618      	mov	r0, r3
 8008b38:	f7fa f856 	bl	8002be8 <HAL_PCD_EP_SetStall>
 8008b3c:	4603      	mov	r3, r0
 8008b3e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008b40:	7bfb      	ldrb	r3, [r7, #15]
 8008b42:	4618      	mov	r0, r3
 8008b44:	f000 f91a 	bl	8008d7c <USBD_Get_USB_Status>
 8008b48:	4603      	mov	r3, r0
 8008b4a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008b4c:	7bbb      	ldrb	r3, [r7, #14]
}
 8008b4e:	4618      	mov	r0, r3
 8008b50:	3710      	adds	r7, #16
 8008b52:	46bd      	mov	sp, r7
 8008b54:	bd80      	pop	{r7, pc}

08008b56 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008b56:	b580      	push	{r7, lr}
 8008b58:	b084      	sub	sp, #16
 8008b5a:	af00      	add	r7, sp, #0
 8008b5c:	6078      	str	r0, [r7, #4]
 8008b5e:	460b      	mov	r3, r1
 8008b60:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008b62:	2300      	movs	r3, #0
 8008b64:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008b66:	2300      	movs	r3, #0
 8008b68:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008b70:	78fa      	ldrb	r2, [r7, #3]
 8008b72:	4611      	mov	r1, r2
 8008b74:	4618      	mov	r0, r3
 8008b76:	f7fa f89b 	bl	8002cb0 <HAL_PCD_EP_ClrStall>
 8008b7a:	4603      	mov	r3, r0
 8008b7c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008b7e:	7bfb      	ldrb	r3, [r7, #15]
 8008b80:	4618      	mov	r0, r3
 8008b82:	f000 f8fb 	bl	8008d7c <USBD_Get_USB_Status>
 8008b86:	4603      	mov	r3, r0
 8008b88:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008b8a:	7bbb      	ldrb	r3, [r7, #14]
}
 8008b8c:	4618      	mov	r0, r3
 8008b8e:	3710      	adds	r7, #16
 8008b90:	46bd      	mov	sp, r7
 8008b92:	bd80      	pop	{r7, pc}

08008b94 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008b94:	b480      	push	{r7}
 8008b96:	b085      	sub	sp, #20
 8008b98:	af00      	add	r7, sp, #0
 8008b9a:	6078      	str	r0, [r7, #4]
 8008b9c:	460b      	mov	r3, r1
 8008b9e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008ba6:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8008ba8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008bac:	2b00      	cmp	r3, #0
 8008bae:	da0b      	bge.n	8008bc8 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8008bb0:	78fb      	ldrb	r3, [r7, #3]
 8008bb2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008bb6:	68f9      	ldr	r1, [r7, #12]
 8008bb8:	4613      	mov	r3, r2
 8008bba:	00db      	lsls	r3, r3, #3
 8008bbc:	1a9b      	subs	r3, r3, r2
 8008bbe:	009b      	lsls	r3, r3, #2
 8008bc0:	440b      	add	r3, r1
 8008bc2:	333e      	adds	r3, #62	; 0x3e
 8008bc4:	781b      	ldrb	r3, [r3, #0]
 8008bc6:	e00b      	b.n	8008be0 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8008bc8:	78fb      	ldrb	r3, [r7, #3]
 8008bca:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008bce:	68f9      	ldr	r1, [r7, #12]
 8008bd0:	4613      	mov	r3, r2
 8008bd2:	00db      	lsls	r3, r3, #3
 8008bd4:	1a9b      	subs	r3, r3, r2
 8008bd6:	009b      	lsls	r3, r3, #2
 8008bd8:	440b      	add	r3, r1
 8008bda:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8008bde:	781b      	ldrb	r3, [r3, #0]
  }
}
 8008be0:	4618      	mov	r0, r3
 8008be2:	3714      	adds	r7, #20
 8008be4:	46bd      	mov	sp, r7
 8008be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bea:	4770      	bx	lr

08008bec <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8008bec:	b580      	push	{r7, lr}
 8008bee:	b084      	sub	sp, #16
 8008bf0:	af00      	add	r7, sp, #0
 8008bf2:	6078      	str	r0, [r7, #4]
 8008bf4:	460b      	mov	r3, r1
 8008bf6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008bf8:	2300      	movs	r3, #0
 8008bfa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008bfc:	2300      	movs	r3, #0
 8008bfe:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008c06:	78fa      	ldrb	r2, [r7, #3]
 8008c08:	4611      	mov	r1, r2
 8008c0a:	4618      	mov	r0, r3
 8008c0c:	f7f9 fe68 	bl	80028e0 <HAL_PCD_SetAddress>
 8008c10:	4603      	mov	r3, r0
 8008c12:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008c14:	7bfb      	ldrb	r3, [r7, #15]
 8008c16:	4618      	mov	r0, r3
 8008c18:	f000 f8b0 	bl	8008d7c <USBD_Get_USB_Status>
 8008c1c:	4603      	mov	r3, r0
 8008c1e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008c20:	7bbb      	ldrb	r3, [r7, #14]
}
 8008c22:	4618      	mov	r0, r3
 8008c24:	3710      	adds	r7, #16
 8008c26:	46bd      	mov	sp, r7
 8008c28:	bd80      	pop	{r7, pc}

08008c2a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008c2a:	b580      	push	{r7, lr}
 8008c2c:	b086      	sub	sp, #24
 8008c2e:	af00      	add	r7, sp, #0
 8008c30:	60f8      	str	r0, [r7, #12]
 8008c32:	607a      	str	r2, [r7, #4]
 8008c34:	603b      	str	r3, [r7, #0]
 8008c36:	460b      	mov	r3, r1
 8008c38:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008c3a:	2300      	movs	r3, #0
 8008c3c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008c3e:	2300      	movs	r3, #0
 8008c40:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8008c42:	68fb      	ldr	r3, [r7, #12]
 8008c44:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8008c48:	7af9      	ldrb	r1, [r7, #11]
 8008c4a:	683b      	ldr	r3, [r7, #0]
 8008c4c:	687a      	ldr	r2, [r7, #4]
 8008c4e:	f7f9 ff81 	bl	8002b54 <HAL_PCD_EP_Transmit>
 8008c52:	4603      	mov	r3, r0
 8008c54:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008c56:	7dfb      	ldrb	r3, [r7, #23]
 8008c58:	4618      	mov	r0, r3
 8008c5a:	f000 f88f 	bl	8008d7c <USBD_Get_USB_Status>
 8008c5e:	4603      	mov	r3, r0
 8008c60:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008c62:	7dbb      	ldrb	r3, [r7, #22]
}
 8008c64:	4618      	mov	r0, r3
 8008c66:	3718      	adds	r7, #24
 8008c68:	46bd      	mov	sp, r7
 8008c6a:	bd80      	pop	{r7, pc}

08008c6c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008c6c:	b580      	push	{r7, lr}
 8008c6e:	b086      	sub	sp, #24
 8008c70:	af00      	add	r7, sp, #0
 8008c72:	60f8      	str	r0, [r7, #12]
 8008c74:	607a      	str	r2, [r7, #4]
 8008c76:	603b      	str	r3, [r7, #0]
 8008c78:	460b      	mov	r3, r1
 8008c7a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008c7c:	2300      	movs	r3, #0
 8008c7e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008c80:	2300      	movs	r3, #0
 8008c82:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8008c84:	68fb      	ldr	r3, [r7, #12]
 8008c86:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8008c8a:	7af9      	ldrb	r1, [r7, #11]
 8008c8c:	683b      	ldr	r3, [r7, #0]
 8008c8e:	687a      	ldr	r2, [r7, #4]
 8008c90:	f7f9 fefd 	bl	8002a8e <HAL_PCD_EP_Receive>
 8008c94:	4603      	mov	r3, r0
 8008c96:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008c98:	7dfb      	ldrb	r3, [r7, #23]
 8008c9a:	4618      	mov	r0, r3
 8008c9c:	f000 f86e 	bl	8008d7c <USBD_Get_USB_Status>
 8008ca0:	4603      	mov	r3, r0
 8008ca2:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008ca4:	7dbb      	ldrb	r3, [r7, #22]
}
 8008ca6:	4618      	mov	r0, r3
 8008ca8:	3718      	adds	r7, #24
 8008caa:	46bd      	mov	sp, r7
 8008cac:	bd80      	pop	{r7, pc}

08008cae <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008cae:	b580      	push	{r7, lr}
 8008cb0:	b082      	sub	sp, #8
 8008cb2:	af00      	add	r7, sp, #0
 8008cb4:	6078      	str	r0, [r7, #4]
 8008cb6:	460b      	mov	r3, r1
 8008cb8:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008cc0:	78fa      	ldrb	r2, [r7, #3]
 8008cc2:	4611      	mov	r1, r2
 8008cc4:	4618      	mov	r0, r3
 8008cc6:	f7f9 ff2d 	bl	8002b24 <HAL_PCD_EP_GetRxCount>
 8008cca:	4603      	mov	r3, r0
}
 8008ccc:	4618      	mov	r0, r3
 8008cce:	3708      	adds	r7, #8
 8008cd0:	46bd      	mov	sp, r7
 8008cd2:	bd80      	pop	{r7, pc}

08008cd4 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8008cd4:	b580      	push	{r7, lr}
 8008cd6:	b082      	sub	sp, #8
 8008cd8:	af00      	add	r7, sp, #0
 8008cda:	6078      	str	r0, [r7, #4]
 8008cdc:	460b      	mov	r3, r1
 8008cde:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 8008ce0:	78fb      	ldrb	r3, [r7, #3]
 8008ce2:	2b00      	cmp	r3, #0
 8008ce4:	d002      	beq.n	8008cec <HAL_PCDEx_LPM_Callback+0x18>
 8008ce6:	2b01      	cmp	r3, #1
 8008ce8:	d01f      	beq.n	8008d2a <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 8008cea:	e03b      	b.n	8008d64 <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	6a1b      	ldr	r3, [r3, #32]
 8008cf0:	2b00      	cmp	r3, #0
 8008cf2:	d007      	beq.n	8008d04 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 8008cf4:	f000 f83c 	bl	8008d70 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008cf8:	4b1c      	ldr	r3, [pc, #112]	; (8008d6c <HAL_PCDEx_LPM_Callback+0x98>)
 8008cfa:	691b      	ldr	r3, [r3, #16]
 8008cfc:	4a1b      	ldr	r2, [pc, #108]	; (8008d6c <HAL_PCDEx_LPM_Callback+0x98>)
 8008cfe:	f023 0306 	bic.w	r3, r3, #6
 8008d02:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	681b      	ldr	r3, [r3, #0]
 8008d08:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008d0c:	681b      	ldr	r3, [r3, #0]
 8008d0e:	687a      	ldr	r2, [r7, #4]
 8008d10:	6812      	ldr	r2, [r2, #0]
 8008d12:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008d16:	f023 0301 	bic.w	r3, r3, #1
 8008d1a:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8008d22:	4618      	mov	r0, r3
 8008d24:	f7fe fbf0 	bl	8007508 <USBD_LL_Resume>
    break;
 8008d28:	e01c      	b.n	8008d64 <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	681b      	ldr	r3, [r3, #0]
 8008d2e:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008d32:	681b      	ldr	r3, [r3, #0]
 8008d34:	687a      	ldr	r2, [r7, #4]
 8008d36:	6812      	ldr	r2, [r2, #0]
 8008d38:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008d3c:	f043 0301 	orr.w	r3, r3, #1
 8008d40:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8008d48:	4618      	mov	r0, r3
 8008d4a:	f7fe fbc8 	bl	80074de <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	6a1b      	ldr	r3, [r3, #32]
 8008d52:	2b00      	cmp	r3, #0
 8008d54:	d005      	beq.n	8008d62 <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008d56:	4b05      	ldr	r3, [pc, #20]	; (8008d6c <HAL_PCDEx_LPM_Callback+0x98>)
 8008d58:	691b      	ldr	r3, [r3, #16]
 8008d5a:	4a04      	ldr	r2, [pc, #16]	; (8008d6c <HAL_PCDEx_LPM_Callback+0x98>)
 8008d5c:	f043 0306 	orr.w	r3, r3, #6
 8008d60:	6113      	str	r3, [r2, #16]
    break;
 8008d62:	bf00      	nop
}
 8008d64:	bf00      	nop
 8008d66:	3708      	adds	r7, #8
 8008d68:	46bd      	mov	sp, r7
 8008d6a:	bd80      	pop	{r7, pc}
 8008d6c:	e000ed00 	.word	0xe000ed00

08008d70 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 8008d70:	b580      	push	{r7, lr}
 8008d72:	af00      	add	r7, sp, #0
  SystemClock_Config();
 8008d74:	f7f7 fc9e 	bl	80006b4 <SystemClock_Config>
}
 8008d78:	bf00      	nop
 8008d7a:	bd80      	pop	{r7, pc}

08008d7c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008d7c:	b480      	push	{r7}
 8008d7e:	b085      	sub	sp, #20
 8008d80:	af00      	add	r7, sp, #0
 8008d82:	4603      	mov	r3, r0
 8008d84:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008d86:	2300      	movs	r3, #0
 8008d88:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008d8a:	79fb      	ldrb	r3, [r7, #7]
 8008d8c:	2b03      	cmp	r3, #3
 8008d8e:	d817      	bhi.n	8008dc0 <USBD_Get_USB_Status+0x44>
 8008d90:	a201      	add	r2, pc, #4	; (adr r2, 8008d98 <USBD_Get_USB_Status+0x1c>)
 8008d92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d96:	bf00      	nop
 8008d98:	08008da9 	.word	0x08008da9
 8008d9c:	08008daf 	.word	0x08008daf
 8008da0:	08008db5 	.word	0x08008db5
 8008da4:	08008dbb 	.word	0x08008dbb
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8008da8:	2300      	movs	r3, #0
 8008daa:	73fb      	strb	r3, [r7, #15]
    break;
 8008dac:	e00b      	b.n	8008dc6 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008dae:	2303      	movs	r3, #3
 8008db0:	73fb      	strb	r3, [r7, #15]
    break;
 8008db2:	e008      	b.n	8008dc6 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008db4:	2301      	movs	r3, #1
 8008db6:	73fb      	strb	r3, [r7, #15]
    break;
 8008db8:	e005      	b.n	8008dc6 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008dba:	2303      	movs	r3, #3
 8008dbc:	73fb      	strb	r3, [r7, #15]
    break;
 8008dbe:	e002      	b.n	8008dc6 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8008dc0:	2303      	movs	r3, #3
 8008dc2:	73fb      	strb	r3, [r7, #15]
    break;
 8008dc4:	bf00      	nop
  }
  return usb_status;
 8008dc6:	7bfb      	ldrb	r3, [r7, #15]
}
 8008dc8:	4618      	mov	r0, r3
 8008dca:	3714      	adds	r7, #20
 8008dcc:	46bd      	mov	sp, r7
 8008dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dd2:	4770      	bx	lr

08008dd4 <__errno>:
 8008dd4:	4b01      	ldr	r3, [pc, #4]	; (8008ddc <__errno+0x8>)
 8008dd6:	6818      	ldr	r0, [r3, #0]
 8008dd8:	4770      	bx	lr
 8008dda:	bf00      	nop
 8008ddc:	20000124 	.word	0x20000124

08008de0 <__libc_init_array>:
 8008de0:	b570      	push	{r4, r5, r6, lr}
 8008de2:	4d0d      	ldr	r5, [pc, #52]	; (8008e18 <__libc_init_array+0x38>)
 8008de4:	4c0d      	ldr	r4, [pc, #52]	; (8008e1c <__libc_init_array+0x3c>)
 8008de6:	1b64      	subs	r4, r4, r5
 8008de8:	10a4      	asrs	r4, r4, #2
 8008dea:	2600      	movs	r6, #0
 8008dec:	42a6      	cmp	r6, r4
 8008dee:	d109      	bne.n	8008e04 <__libc_init_array+0x24>
 8008df0:	4d0b      	ldr	r5, [pc, #44]	; (8008e20 <__libc_init_array+0x40>)
 8008df2:	4c0c      	ldr	r4, [pc, #48]	; (8008e24 <__libc_init_array+0x44>)
 8008df4:	f000 f8f8 	bl	8008fe8 <_init>
 8008df8:	1b64      	subs	r4, r4, r5
 8008dfa:	10a4      	asrs	r4, r4, #2
 8008dfc:	2600      	movs	r6, #0
 8008dfe:	42a6      	cmp	r6, r4
 8008e00:	d105      	bne.n	8008e0e <__libc_init_array+0x2e>
 8008e02:	bd70      	pop	{r4, r5, r6, pc}
 8008e04:	f855 3b04 	ldr.w	r3, [r5], #4
 8008e08:	4798      	blx	r3
 8008e0a:	3601      	adds	r6, #1
 8008e0c:	e7ee      	b.n	8008dec <__libc_init_array+0xc>
 8008e0e:	f855 3b04 	ldr.w	r3, [r5], #4
 8008e12:	4798      	blx	r3
 8008e14:	3601      	adds	r6, #1
 8008e16:	e7f2      	b.n	8008dfe <__libc_init_array+0x1e>
 8008e18:	08009068 	.word	0x08009068
 8008e1c:	08009068 	.word	0x08009068
 8008e20:	08009068 	.word	0x08009068
 8008e24:	0800906c 	.word	0x0800906c

08008e28 <malloc>:
 8008e28:	4b02      	ldr	r3, [pc, #8]	; (8008e34 <malloc+0xc>)
 8008e2a:	4601      	mov	r1, r0
 8008e2c:	6818      	ldr	r0, [r3, #0]
 8008e2e:	f000 b863 	b.w	8008ef8 <_malloc_r>
 8008e32:	bf00      	nop
 8008e34:	20000124 	.word	0x20000124

08008e38 <free>:
 8008e38:	4b02      	ldr	r3, [pc, #8]	; (8008e44 <free+0xc>)
 8008e3a:	4601      	mov	r1, r0
 8008e3c:	6818      	ldr	r0, [r3, #0]
 8008e3e:	f000 b80b 	b.w	8008e58 <_free_r>
 8008e42:	bf00      	nop
 8008e44:	20000124 	.word	0x20000124

08008e48 <memset>:
 8008e48:	4402      	add	r2, r0
 8008e4a:	4603      	mov	r3, r0
 8008e4c:	4293      	cmp	r3, r2
 8008e4e:	d100      	bne.n	8008e52 <memset+0xa>
 8008e50:	4770      	bx	lr
 8008e52:	f803 1b01 	strb.w	r1, [r3], #1
 8008e56:	e7f9      	b.n	8008e4c <memset+0x4>

08008e58 <_free_r>:
 8008e58:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008e5a:	2900      	cmp	r1, #0
 8008e5c:	d048      	beq.n	8008ef0 <_free_r+0x98>
 8008e5e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008e62:	9001      	str	r0, [sp, #4]
 8008e64:	2b00      	cmp	r3, #0
 8008e66:	f1a1 0404 	sub.w	r4, r1, #4
 8008e6a:	bfb8      	it	lt
 8008e6c:	18e4      	addlt	r4, r4, r3
 8008e6e:	f000 f8ad 	bl	8008fcc <__malloc_lock>
 8008e72:	4a20      	ldr	r2, [pc, #128]	; (8008ef4 <_free_r+0x9c>)
 8008e74:	9801      	ldr	r0, [sp, #4]
 8008e76:	6813      	ldr	r3, [r2, #0]
 8008e78:	4615      	mov	r5, r2
 8008e7a:	b933      	cbnz	r3, 8008e8a <_free_r+0x32>
 8008e7c:	6063      	str	r3, [r4, #4]
 8008e7e:	6014      	str	r4, [r2, #0]
 8008e80:	b003      	add	sp, #12
 8008e82:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008e86:	f000 b8a7 	b.w	8008fd8 <__malloc_unlock>
 8008e8a:	42a3      	cmp	r3, r4
 8008e8c:	d90b      	bls.n	8008ea6 <_free_r+0x4e>
 8008e8e:	6821      	ldr	r1, [r4, #0]
 8008e90:	1862      	adds	r2, r4, r1
 8008e92:	4293      	cmp	r3, r2
 8008e94:	bf04      	itt	eq
 8008e96:	681a      	ldreq	r2, [r3, #0]
 8008e98:	685b      	ldreq	r3, [r3, #4]
 8008e9a:	6063      	str	r3, [r4, #4]
 8008e9c:	bf04      	itt	eq
 8008e9e:	1852      	addeq	r2, r2, r1
 8008ea0:	6022      	streq	r2, [r4, #0]
 8008ea2:	602c      	str	r4, [r5, #0]
 8008ea4:	e7ec      	b.n	8008e80 <_free_r+0x28>
 8008ea6:	461a      	mov	r2, r3
 8008ea8:	685b      	ldr	r3, [r3, #4]
 8008eaa:	b10b      	cbz	r3, 8008eb0 <_free_r+0x58>
 8008eac:	42a3      	cmp	r3, r4
 8008eae:	d9fa      	bls.n	8008ea6 <_free_r+0x4e>
 8008eb0:	6811      	ldr	r1, [r2, #0]
 8008eb2:	1855      	adds	r5, r2, r1
 8008eb4:	42a5      	cmp	r5, r4
 8008eb6:	d10b      	bne.n	8008ed0 <_free_r+0x78>
 8008eb8:	6824      	ldr	r4, [r4, #0]
 8008eba:	4421      	add	r1, r4
 8008ebc:	1854      	adds	r4, r2, r1
 8008ebe:	42a3      	cmp	r3, r4
 8008ec0:	6011      	str	r1, [r2, #0]
 8008ec2:	d1dd      	bne.n	8008e80 <_free_r+0x28>
 8008ec4:	681c      	ldr	r4, [r3, #0]
 8008ec6:	685b      	ldr	r3, [r3, #4]
 8008ec8:	6053      	str	r3, [r2, #4]
 8008eca:	4421      	add	r1, r4
 8008ecc:	6011      	str	r1, [r2, #0]
 8008ece:	e7d7      	b.n	8008e80 <_free_r+0x28>
 8008ed0:	d902      	bls.n	8008ed8 <_free_r+0x80>
 8008ed2:	230c      	movs	r3, #12
 8008ed4:	6003      	str	r3, [r0, #0]
 8008ed6:	e7d3      	b.n	8008e80 <_free_r+0x28>
 8008ed8:	6825      	ldr	r5, [r4, #0]
 8008eda:	1961      	adds	r1, r4, r5
 8008edc:	428b      	cmp	r3, r1
 8008ede:	bf04      	itt	eq
 8008ee0:	6819      	ldreq	r1, [r3, #0]
 8008ee2:	685b      	ldreq	r3, [r3, #4]
 8008ee4:	6063      	str	r3, [r4, #4]
 8008ee6:	bf04      	itt	eq
 8008ee8:	1949      	addeq	r1, r1, r5
 8008eea:	6021      	streq	r1, [r4, #0]
 8008eec:	6054      	str	r4, [r2, #4]
 8008eee:	e7c7      	b.n	8008e80 <_free_r+0x28>
 8008ef0:	b003      	add	sp, #12
 8008ef2:	bd30      	pop	{r4, r5, pc}
 8008ef4:	200121b0 	.word	0x200121b0

08008ef8 <_malloc_r>:
 8008ef8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008efa:	1ccd      	adds	r5, r1, #3
 8008efc:	f025 0503 	bic.w	r5, r5, #3
 8008f00:	3508      	adds	r5, #8
 8008f02:	2d0c      	cmp	r5, #12
 8008f04:	bf38      	it	cc
 8008f06:	250c      	movcc	r5, #12
 8008f08:	2d00      	cmp	r5, #0
 8008f0a:	4606      	mov	r6, r0
 8008f0c:	db01      	blt.n	8008f12 <_malloc_r+0x1a>
 8008f0e:	42a9      	cmp	r1, r5
 8008f10:	d903      	bls.n	8008f1a <_malloc_r+0x22>
 8008f12:	230c      	movs	r3, #12
 8008f14:	6033      	str	r3, [r6, #0]
 8008f16:	2000      	movs	r0, #0
 8008f18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008f1a:	f000 f857 	bl	8008fcc <__malloc_lock>
 8008f1e:	4921      	ldr	r1, [pc, #132]	; (8008fa4 <_malloc_r+0xac>)
 8008f20:	680a      	ldr	r2, [r1, #0]
 8008f22:	4614      	mov	r4, r2
 8008f24:	b99c      	cbnz	r4, 8008f4e <_malloc_r+0x56>
 8008f26:	4f20      	ldr	r7, [pc, #128]	; (8008fa8 <_malloc_r+0xb0>)
 8008f28:	683b      	ldr	r3, [r7, #0]
 8008f2a:	b923      	cbnz	r3, 8008f36 <_malloc_r+0x3e>
 8008f2c:	4621      	mov	r1, r4
 8008f2e:	4630      	mov	r0, r6
 8008f30:	f000 f83c 	bl	8008fac <_sbrk_r>
 8008f34:	6038      	str	r0, [r7, #0]
 8008f36:	4629      	mov	r1, r5
 8008f38:	4630      	mov	r0, r6
 8008f3a:	f000 f837 	bl	8008fac <_sbrk_r>
 8008f3e:	1c43      	adds	r3, r0, #1
 8008f40:	d123      	bne.n	8008f8a <_malloc_r+0x92>
 8008f42:	230c      	movs	r3, #12
 8008f44:	6033      	str	r3, [r6, #0]
 8008f46:	4630      	mov	r0, r6
 8008f48:	f000 f846 	bl	8008fd8 <__malloc_unlock>
 8008f4c:	e7e3      	b.n	8008f16 <_malloc_r+0x1e>
 8008f4e:	6823      	ldr	r3, [r4, #0]
 8008f50:	1b5b      	subs	r3, r3, r5
 8008f52:	d417      	bmi.n	8008f84 <_malloc_r+0x8c>
 8008f54:	2b0b      	cmp	r3, #11
 8008f56:	d903      	bls.n	8008f60 <_malloc_r+0x68>
 8008f58:	6023      	str	r3, [r4, #0]
 8008f5a:	441c      	add	r4, r3
 8008f5c:	6025      	str	r5, [r4, #0]
 8008f5e:	e004      	b.n	8008f6a <_malloc_r+0x72>
 8008f60:	6863      	ldr	r3, [r4, #4]
 8008f62:	42a2      	cmp	r2, r4
 8008f64:	bf0c      	ite	eq
 8008f66:	600b      	streq	r3, [r1, #0]
 8008f68:	6053      	strne	r3, [r2, #4]
 8008f6a:	4630      	mov	r0, r6
 8008f6c:	f000 f834 	bl	8008fd8 <__malloc_unlock>
 8008f70:	f104 000b 	add.w	r0, r4, #11
 8008f74:	1d23      	adds	r3, r4, #4
 8008f76:	f020 0007 	bic.w	r0, r0, #7
 8008f7a:	1ac2      	subs	r2, r0, r3
 8008f7c:	d0cc      	beq.n	8008f18 <_malloc_r+0x20>
 8008f7e:	1a1b      	subs	r3, r3, r0
 8008f80:	50a3      	str	r3, [r4, r2]
 8008f82:	e7c9      	b.n	8008f18 <_malloc_r+0x20>
 8008f84:	4622      	mov	r2, r4
 8008f86:	6864      	ldr	r4, [r4, #4]
 8008f88:	e7cc      	b.n	8008f24 <_malloc_r+0x2c>
 8008f8a:	1cc4      	adds	r4, r0, #3
 8008f8c:	f024 0403 	bic.w	r4, r4, #3
 8008f90:	42a0      	cmp	r0, r4
 8008f92:	d0e3      	beq.n	8008f5c <_malloc_r+0x64>
 8008f94:	1a21      	subs	r1, r4, r0
 8008f96:	4630      	mov	r0, r6
 8008f98:	f000 f808 	bl	8008fac <_sbrk_r>
 8008f9c:	3001      	adds	r0, #1
 8008f9e:	d1dd      	bne.n	8008f5c <_malloc_r+0x64>
 8008fa0:	e7cf      	b.n	8008f42 <_malloc_r+0x4a>
 8008fa2:	bf00      	nop
 8008fa4:	200121b0 	.word	0x200121b0
 8008fa8:	200121b4 	.word	0x200121b4

08008fac <_sbrk_r>:
 8008fac:	b538      	push	{r3, r4, r5, lr}
 8008fae:	4d06      	ldr	r5, [pc, #24]	; (8008fc8 <_sbrk_r+0x1c>)
 8008fb0:	2300      	movs	r3, #0
 8008fb2:	4604      	mov	r4, r0
 8008fb4:	4608      	mov	r0, r1
 8008fb6:	602b      	str	r3, [r5, #0]
 8008fb8:	f7f8 f9c6 	bl	8001348 <_sbrk>
 8008fbc:	1c43      	adds	r3, r0, #1
 8008fbe:	d102      	bne.n	8008fc6 <_sbrk_r+0x1a>
 8008fc0:	682b      	ldr	r3, [r5, #0]
 8008fc2:	b103      	cbz	r3, 8008fc6 <_sbrk_r+0x1a>
 8008fc4:	6023      	str	r3, [r4, #0]
 8008fc6:	bd38      	pop	{r3, r4, r5, pc}
 8008fc8:	20013b4c 	.word	0x20013b4c

08008fcc <__malloc_lock>:
 8008fcc:	4801      	ldr	r0, [pc, #4]	; (8008fd4 <__malloc_lock+0x8>)
 8008fce:	f000 b809 	b.w	8008fe4 <__retarget_lock_acquire_recursive>
 8008fd2:	bf00      	nop
 8008fd4:	20013b54 	.word	0x20013b54

08008fd8 <__malloc_unlock>:
 8008fd8:	4801      	ldr	r0, [pc, #4]	; (8008fe0 <__malloc_unlock+0x8>)
 8008fda:	f000 b804 	b.w	8008fe6 <__retarget_lock_release_recursive>
 8008fde:	bf00      	nop
 8008fe0:	20013b54 	.word	0x20013b54

08008fe4 <__retarget_lock_acquire_recursive>:
 8008fe4:	4770      	bx	lr

08008fe6 <__retarget_lock_release_recursive>:
 8008fe6:	4770      	bx	lr

08008fe8 <_init>:
 8008fe8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008fea:	bf00      	nop
 8008fec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008fee:	bc08      	pop	{r3}
 8008ff0:	469e      	mov	lr, r3
 8008ff2:	4770      	bx	lr

08008ff4 <_fini>:
 8008ff4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ff6:	bf00      	nop
 8008ff8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008ffa:	bc08      	pop	{r3}
 8008ffc:	469e      	mov	lr, r3
 8008ffe:	4770      	bx	lr
