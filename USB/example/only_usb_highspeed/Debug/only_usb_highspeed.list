
only_usb_highspeed.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000077a4  080001e0  080001e0  000101e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000004c  08007984  08007984  00017984  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080079d0  080079d0  0002017c  2**0
                  CONTENTS
  4 .ARM          00000008  080079d0  080079d0  000179d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080079d8  080079d8  0002017c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080079d8  080079d8  000179d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080079dc  080079dc  000179dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000017c  20000000  080079e0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0001990c  2000017c  08007b5c  0002017c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20019a88  08007b5c  00029a88  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002017c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001042f  00000000  00000000  000201ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002ee7  00000000  00000000  000305db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000cd8  00000000  00000000  000334c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b60  00000000  00000000  000341a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000252ff  00000000  00000000  00034d00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010a7f  00000000  00000000  00059fff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d36b4  00000000  00000000  0006aa7e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0013e132  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003458  00000000  00000000  0013e184  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	2000017c 	.word	0x2000017c
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800796c 	.word	0x0800796c

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000180 	.word	0x20000180
 800021c:	0800796c 	.word	0x0800796c

08000220 <__aeabi_uldivmod>:
 8000220:	b953      	cbnz	r3, 8000238 <__aeabi_uldivmod+0x18>
 8000222:	b94a      	cbnz	r2, 8000238 <__aeabi_uldivmod+0x18>
 8000224:	2900      	cmp	r1, #0
 8000226:	bf08      	it	eq
 8000228:	2800      	cmpeq	r0, #0
 800022a:	bf1c      	itt	ne
 800022c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000230:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000234:	f000 b974 	b.w	8000520 <__aeabi_idiv0>
 8000238:	f1ad 0c08 	sub.w	ip, sp, #8
 800023c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000240:	f000 f806 	bl	8000250 <__udivmoddi4>
 8000244:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000248:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800024c:	b004      	add	sp, #16
 800024e:	4770      	bx	lr

08000250 <__udivmoddi4>:
 8000250:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000254:	9d08      	ldr	r5, [sp, #32]
 8000256:	4604      	mov	r4, r0
 8000258:	468e      	mov	lr, r1
 800025a:	2b00      	cmp	r3, #0
 800025c:	d14d      	bne.n	80002fa <__udivmoddi4+0xaa>
 800025e:	428a      	cmp	r2, r1
 8000260:	4694      	mov	ip, r2
 8000262:	d969      	bls.n	8000338 <__udivmoddi4+0xe8>
 8000264:	fab2 f282 	clz	r2, r2
 8000268:	b152      	cbz	r2, 8000280 <__udivmoddi4+0x30>
 800026a:	fa01 f302 	lsl.w	r3, r1, r2
 800026e:	f1c2 0120 	rsb	r1, r2, #32
 8000272:	fa20 f101 	lsr.w	r1, r0, r1
 8000276:	fa0c fc02 	lsl.w	ip, ip, r2
 800027a:	ea41 0e03 	orr.w	lr, r1, r3
 800027e:	4094      	lsls	r4, r2
 8000280:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000284:	0c21      	lsrs	r1, r4, #16
 8000286:	fbbe f6f8 	udiv	r6, lr, r8
 800028a:	fa1f f78c 	uxth.w	r7, ip
 800028e:	fb08 e316 	mls	r3, r8, r6, lr
 8000292:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000296:	fb06 f107 	mul.w	r1, r6, r7
 800029a:	4299      	cmp	r1, r3
 800029c:	d90a      	bls.n	80002b4 <__udivmoddi4+0x64>
 800029e:	eb1c 0303 	adds.w	r3, ip, r3
 80002a2:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 80002a6:	f080 811f 	bcs.w	80004e8 <__udivmoddi4+0x298>
 80002aa:	4299      	cmp	r1, r3
 80002ac:	f240 811c 	bls.w	80004e8 <__udivmoddi4+0x298>
 80002b0:	3e02      	subs	r6, #2
 80002b2:	4463      	add	r3, ip
 80002b4:	1a5b      	subs	r3, r3, r1
 80002b6:	b2a4      	uxth	r4, r4
 80002b8:	fbb3 f0f8 	udiv	r0, r3, r8
 80002bc:	fb08 3310 	mls	r3, r8, r0, r3
 80002c0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002c4:	fb00 f707 	mul.w	r7, r0, r7
 80002c8:	42a7      	cmp	r7, r4
 80002ca:	d90a      	bls.n	80002e2 <__udivmoddi4+0x92>
 80002cc:	eb1c 0404 	adds.w	r4, ip, r4
 80002d0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002d4:	f080 810a 	bcs.w	80004ec <__udivmoddi4+0x29c>
 80002d8:	42a7      	cmp	r7, r4
 80002da:	f240 8107 	bls.w	80004ec <__udivmoddi4+0x29c>
 80002de:	4464      	add	r4, ip
 80002e0:	3802      	subs	r0, #2
 80002e2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002e6:	1be4      	subs	r4, r4, r7
 80002e8:	2600      	movs	r6, #0
 80002ea:	b11d      	cbz	r5, 80002f4 <__udivmoddi4+0xa4>
 80002ec:	40d4      	lsrs	r4, r2
 80002ee:	2300      	movs	r3, #0
 80002f0:	e9c5 4300 	strd	r4, r3, [r5]
 80002f4:	4631      	mov	r1, r6
 80002f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d909      	bls.n	8000312 <__udivmoddi4+0xc2>
 80002fe:	2d00      	cmp	r5, #0
 8000300:	f000 80ef 	beq.w	80004e2 <__udivmoddi4+0x292>
 8000304:	2600      	movs	r6, #0
 8000306:	e9c5 0100 	strd	r0, r1, [r5]
 800030a:	4630      	mov	r0, r6
 800030c:	4631      	mov	r1, r6
 800030e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000312:	fab3 f683 	clz	r6, r3
 8000316:	2e00      	cmp	r6, #0
 8000318:	d14a      	bne.n	80003b0 <__udivmoddi4+0x160>
 800031a:	428b      	cmp	r3, r1
 800031c:	d302      	bcc.n	8000324 <__udivmoddi4+0xd4>
 800031e:	4282      	cmp	r2, r0
 8000320:	f200 80f9 	bhi.w	8000516 <__udivmoddi4+0x2c6>
 8000324:	1a84      	subs	r4, r0, r2
 8000326:	eb61 0303 	sbc.w	r3, r1, r3
 800032a:	2001      	movs	r0, #1
 800032c:	469e      	mov	lr, r3
 800032e:	2d00      	cmp	r5, #0
 8000330:	d0e0      	beq.n	80002f4 <__udivmoddi4+0xa4>
 8000332:	e9c5 4e00 	strd	r4, lr, [r5]
 8000336:	e7dd      	b.n	80002f4 <__udivmoddi4+0xa4>
 8000338:	b902      	cbnz	r2, 800033c <__udivmoddi4+0xec>
 800033a:	deff      	udf	#255	; 0xff
 800033c:	fab2 f282 	clz	r2, r2
 8000340:	2a00      	cmp	r2, #0
 8000342:	f040 8092 	bne.w	800046a <__udivmoddi4+0x21a>
 8000346:	eba1 010c 	sub.w	r1, r1, ip
 800034a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800034e:	fa1f fe8c 	uxth.w	lr, ip
 8000352:	2601      	movs	r6, #1
 8000354:	0c20      	lsrs	r0, r4, #16
 8000356:	fbb1 f3f7 	udiv	r3, r1, r7
 800035a:	fb07 1113 	mls	r1, r7, r3, r1
 800035e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000362:	fb0e f003 	mul.w	r0, lr, r3
 8000366:	4288      	cmp	r0, r1
 8000368:	d908      	bls.n	800037c <__udivmoddi4+0x12c>
 800036a:	eb1c 0101 	adds.w	r1, ip, r1
 800036e:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000372:	d202      	bcs.n	800037a <__udivmoddi4+0x12a>
 8000374:	4288      	cmp	r0, r1
 8000376:	f200 80cb 	bhi.w	8000510 <__udivmoddi4+0x2c0>
 800037a:	4643      	mov	r3, r8
 800037c:	1a09      	subs	r1, r1, r0
 800037e:	b2a4      	uxth	r4, r4
 8000380:	fbb1 f0f7 	udiv	r0, r1, r7
 8000384:	fb07 1110 	mls	r1, r7, r0, r1
 8000388:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800038c:	fb0e fe00 	mul.w	lr, lr, r0
 8000390:	45a6      	cmp	lr, r4
 8000392:	d908      	bls.n	80003a6 <__udivmoddi4+0x156>
 8000394:	eb1c 0404 	adds.w	r4, ip, r4
 8000398:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800039c:	d202      	bcs.n	80003a4 <__udivmoddi4+0x154>
 800039e:	45a6      	cmp	lr, r4
 80003a0:	f200 80bb 	bhi.w	800051a <__udivmoddi4+0x2ca>
 80003a4:	4608      	mov	r0, r1
 80003a6:	eba4 040e 	sub.w	r4, r4, lr
 80003aa:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003ae:	e79c      	b.n	80002ea <__udivmoddi4+0x9a>
 80003b0:	f1c6 0720 	rsb	r7, r6, #32
 80003b4:	40b3      	lsls	r3, r6
 80003b6:	fa22 fc07 	lsr.w	ip, r2, r7
 80003ba:	ea4c 0c03 	orr.w	ip, ip, r3
 80003be:	fa20 f407 	lsr.w	r4, r0, r7
 80003c2:	fa01 f306 	lsl.w	r3, r1, r6
 80003c6:	431c      	orrs	r4, r3
 80003c8:	40f9      	lsrs	r1, r7
 80003ca:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003ce:	fa00 f306 	lsl.w	r3, r0, r6
 80003d2:	fbb1 f8f9 	udiv	r8, r1, r9
 80003d6:	0c20      	lsrs	r0, r4, #16
 80003d8:	fa1f fe8c 	uxth.w	lr, ip
 80003dc:	fb09 1118 	mls	r1, r9, r8, r1
 80003e0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003e4:	fb08 f00e 	mul.w	r0, r8, lr
 80003e8:	4288      	cmp	r0, r1
 80003ea:	fa02 f206 	lsl.w	r2, r2, r6
 80003ee:	d90b      	bls.n	8000408 <__udivmoddi4+0x1b8>
 80003f0:	eb1c 0101 	adds.w	r1, ip, r1
 80003f4:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003f8:	f080 8088 	bcs.w	800050c <__udivmoddi4+0x2bc>
 80003fc:	4288      	cmp	r0, r1
 80003fe:	f240 8085 	bls.w	800050c <__udivmoddi4+0x2bc>
 8000402:	f1a8 0802 	sub.w	r8, r8, #2
 8000406:	4461      	add	r1, ip
 8000408:	1a09      	subs	r1, r1, r0
 800040a:	b2a4      	uxth	r4, r4
 800040c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000410:	fb09 1110 	mls	r1, r9, r0, r1
 8000414:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000418:	fb00 fe0e 	mul.w	lr, r0, lr
 800041c:	458e      	cmp	lr, r1
 800041e:	d908      	bls.n	8000432 <__udivmoddi4+0x1e2>
 8000420:	eb1c 0101 	adds.w	r1, ip, r1
 8000424:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000428:	d26c      	bcs.n	8000504 <__udivmoddi4+0x2b4>
 800042a:	458e      	cmp	lr, r1
 800042c:	d96a      	bls.n	8000504 <__udivmoddi4+0x2b4>
 800042e:	3802      	subs	r0, #2
 8000430:	4461      	add	r1, ip
 8000432:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000436:	fba0 9402 	umull	r9, r4, r0, r2
 800043a:	eba1 010e 	sub.w	r1, r1, lr
 800043e:	42a1      	cmp	r1, r4
 8000440:	46c8      	mov	r8, r9
 8000442:	46a6      	mov	lr, r4
 8000444:	d356      	bcc.n	80004f4 <__udivmoddi4+0x2a4>
 8000446:	d053      	beq.n	80004f0 <__udivmoddi4+0x2a0>
 8000448:	b15d      	cbz	r5, 8000462 <__udivmoddi4+0x212>
 800044a:	ebb3 0208 	subs.w	r2, r3, r8
 800044e:	eb61 010e 	sbc.w	r1, r1, lr
 8000452:	fa01 f707 	lsl.w	r7, r1, r7
 8000456:	fa22 f306 	lsr.w	r3, r2, r6
 800045a:	40f1      	lsrs	r1, r6
 800045c:	431f      	orrs	r7, r3
 800045e:	e9c5 7100 	strd	r7, r1, [r5]
 8000462:	2600      	movs	r6, #0
 8000464:	4631      	mov	r1, r6
 8000466:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800046a:	f1c2 0320 	rsb	r3, r2, #32
 800046e:	40d8      	lsrs	r0, r3
 8000470:	fa0c fc02 	lsl.w	ip, ip, r2
 8000474:	fa21 f303 	lsr.w	r3, r1, r3
 8000478:	4091      	lsls	r1, r2
 800047a:	4301      	orrs	r1, r0
 800047c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000480:	fa1f fe8c 	uxth.w	lr, ip
 8000484:	fbb3 f0f7 	udiv	r0, r3, r7
 8000488:	fb07 3610 	mls	r6, r7, r0, r3
 800048c:	0c0b      	lsrs	r3, r1, #16
 800048e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000492:	fb00 f60e 	mul.w	r6, r0, lr
 8000496:	429e      	cmp	r6, r3
 8000498:	fa04 f402 	lsl.w	r4, r4, r2
 800049c:	d908      	bls.n	80004b0 <__udivmoddi4+0x260>
 800049e:	eb1c 0303 	adds.w	r3, ip, r3
 80004a2:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80004a6:	d22f      	bcs.n	8000508 <__udivmoddi4+0x2b8>
 80004a8:	429e      	cmp	r6, r3
 80004aa:	d92d      	bls.n	8000508 <__udivmoddi4+0x2b8>
 80004ac:	3802      	subs	r0, #2
 80004ae:	4463      	add	r3, ip
 80004b0:	1b9b      	subs	r3, r3, r6
 80004b2:	b289      	uxth	r1, r1
 80004b4:	fbb3 f6f7 	udiv	r6, r3, r7
 80004b8:	fb07 3316 	mls	r3, r7, r6, r3
 80004bc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004c0:	fb06 f30e 	mul.w	r3, r6, lr
 80004c4:	428b      	cmp	r3, r1
 80004c6:	d908      	bls.n	80004da <__udivmoddi4+0x28a>
 80004c8:	eb1c 0101 	adds.w	r1, ip, r1
 80004cc:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 80004d0:	d216      	bcs.n	8000500 <__udivmoddi4+0x2b0>
 80004d2:	428b      	cmp	r3, r1
 80004d4:	d914      	bls.n	8000500 <__udivmoddi4+0x2b0>
 80004d6:	3e02      	subs	r6, #2
 80004d8:	4461      	add	r1, ip
 80004da:	1ac9      	subs	r1, r1, r3
 80004dc:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004e0:	e738      	b.n	8000354 <__udivmoddi4+0x104>
 80004e2:	462e      	mov	r6, r5
 80004e4:	4628      	mov	r0, r5
 80004e6:	e705      	b.n	80002f4 <__udivmoddi4+0xa4>
 80004e8:	4606      	mov	r6, r0
 80004ea:	e6e3      	b.n	80002b4 <__udivmoddi4+0x64>
 80004ec:	4618      	mov	r0, r3
 80004ee:	e6f8      	b.n	80002e2 <__udivmoddi4+0x92>
 80004f0:	454b      	cmp	r3, r9
 80004f2:	d2a9      	bcs.n	8000448 <__udivmoddi4+0x1f8>
 80004f4:	ebb9 0802 	subs.w	r8, r9, r2
 80004f8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004fc:	3801      	subs	r0, #1
 80004fe:	e7a3      	b.n	8000448 <__udivmoddi4+0x1f8>
 8000500:	4646      	mov	r6, r8
 8000502:	e7ea      	b.n	80004da <__udivmoddi4+0x28a>
 8000504:	4620      	mov	r0, r4
 8000506:	e794      	b.n	8000432 <__udivmoddi4+0x1e2>
 8000508:	4640      	mov	r0, r8
 800050a:	e7d1      	b.n	80004b0 <__udivmoddi4+0x260>
 800050c:	46d0      	mov	r8, sl
 800050e:	e77b      	b.n	8000408 <__udivmoddi4+0x1b8>
 8000510:	3b02      	subs	r3, #2
 8000512:	4461      	add	r1, ip
 8000514:	e732      	b.n	800037c <__udivmoddi4+0x12c>
 8000516:	4630      	mov	r0, r6
 8000518:	e709      	b.n	800032e <__udivmoddi4+0xde>
 800051a:	4464      	add	r4, ip
 800051c:	3802      	subs	r0, #2
 800051e:	e742      	b.n	80003a6 <__udivmoddi4+0x156>

08000520 <__aeabi_idiv0>:
 8000520:	4770      	bx	lr
 8000522:	bf00      	nop

08000524 <SCB_EnableICache>:
/**
  \brief   Enable I-Cache
  \details Turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
 8000524:	b480      	push	{r7}
 8000526:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000528:	f3bf 8f4f 	dsb	sy
}
 800052c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800052e:	f3bf 8f6f 	isb	sy
}
 8000532:	bf00      	nop
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000534:	4b0d      	ldr	r3, [pc, #52]	; (800056c <SCB_EnableICache+0x48>)
 8000536:	2200      	movs	r2, #0
 8000538:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 800053c:	f3bf 8f4f 	dsb	sy
}
 8000540:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000542:	f3bf 8f6f 	isb	sy
}
 8000546:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000548:	4b08      	ldr	r3, [pc, #32]	; (800056c <SCB_EnableICache+0x48>)
 800054a:	695b      	ldr	r3, [r3, #20]
 800054c:	4a07      	ldr	r2, [pc, #28]	; (800056c <SCB_EnableICache+0x48>)
 800054e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000552:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000554:	f3bf 8f4f 	dsb	sy
}
 8000558:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800055a:	f3bf 8f6f 	isb	sy
}
 800055e:	bf00      	nop
    __DSB();
    __ISB();
  #endif
}
 8000560:	bf00      	nop
 8000562:	46bd      	mov	sp, r7
 8000564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000568:	4770      	bx	lr
 800056a:	bf00      	nop
 800056c:	e000ed00 	.word	0xe000ed00

08000570 <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
 8000570:	b480      	push	{r7}
 8000572:	b085      	sub	sp, #20
 8000574:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8000576:	4b1f      	ldr	r3, [pc, #124]	; (80005f4 <SCB_EnableDCache+0x84>)
 8000578:	2200      	movs	r2, #0
 800057a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 800057e:	f3bf 8f4f 	dsb	sy
}
 8000582:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8000584:	4b1b      	ldr	r3, [pc, #108]	; (80005f4 <SCB_EnableDCache+0x84>)
 8000586:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800058a:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 800058c:	687b      	ldr	r3, [r7, #4]
 800058e:	0b5b      	lsrs	r3, r3, #13
 8000590:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000594:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000596:	687b      	ldr	r3, [r7, #4]
 8000598:	08db      	lsrs	r3, r3, #3
 800059a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800059e:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80005a0:	68fb      	ldr	r3, [r7, #12]
 80005a2:	015a      	lsls	r2, r3, #5
 80005a4:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 80005a8:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 80005aa:	68ba      	ldr	r2, [r7, #8]
 80005ac:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80005ae:	4911      	ldr	r1, [pc, #68]	; (80005f4 <SCB_EnableDCache+0x84>)
 80005b0:	4313      	orrs	r3, r2
 80005b2:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 80005b6:	68bb      	ldr	r3, [r7, #8]
 80005b8:	1e5a      	subs	r2, r3, #1
 80005ba:	60ba      	str	r2, [r7, #8]
 80005bc:	2b00      	cmp	r3, #0
 80005be:	d1ef      	bne.n	80005a0 <SCB_EnableDCache+0x30>
    } while(sets-- != 0U);
 80005c0:	68fb      	ldr	r3, [r7, #12]
 80005c2:	1e5a      	subs	r2, r3, #1
 80005c4:	60fa      	str	r2, [r7, #12]
 80005c6:	2b00      	cmp	r3, #0
 80005c8:	d1e5      	bne.n	8000596 <SCB_EnableDCache+0x26>
  __ASM volatile ("dsb 0xF":::"memory");
 80005ca:	f3bf 8f4f 	dsb	sy
}
 80005ce:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 80005d0:	4b08      	ldr	r3, [pc, #32]	; (80005f4 <SCB_EnableDCache+0x84>)
 80005d2:	695b      	ldr	r3, [r3, #20]
 80005d4:	4a07      	ldr	r2, [pc, #28]	; (80005f4 <SCB_EnableDCache+0x84>)
 80005d6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80005da:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80005dc:	f3bf 8f4f 	dsb	sy
}
 80005e0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80005e2:	f3bf 8f6f 	isb	sy
}
 80005e6:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 80005e8:	bf00      	nop
 80005ea:	3714      	adds	r7, #20
 80005ec:	46bd      	mov	sp, r7
 80005ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f2:	4770      	bx	lr
 80005f4:	e000ed00 	.word	0xe000ed00

080005f8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	b084      	sub	sp, #16
 80005fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* Enable I-Cache---------------------------------------------------------*/
  SCB_EnableICache();
 80005fe:	f7ff ff91 	bl	8000524 <SCB_EnableICache>

  /* Enable D-Cache---------------------------------------------------------*/
  SCB_EnableDCache();
 8000602:	f7ff ffb5 	bl	8000570 <SCB_EnableDCache>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000606:	f000 fd83 	bl	8001110 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800060a:	f000 f839 	bl	8000680 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 800060e:	4b1a      	ldr	r3, [pc, #104]	; (8000678 <main+0x80>)
 8000610:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000612:	4a19      	ldr	r2, [pc, #100]	; (8000678 <main+0x80>)
 8000614:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000618:	6313      	str	r3, [r2, #48]	; 0x30
 800061a:	4b17      	ldr	r3, [pc, #92]	; (8000678 <main+0x80>)
 800061c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800061e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000622:	607b      	str	r3, [r7, #4]
 8000624:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_USB_OTG_HS_ULPI_CLK_ENABLE();
 8000626:	4b14      	ldr	r3, [pc, #80]	; (8000678 <main+0x80>)
 8000628:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800062a:	4a13      	ldr	r2, [pc, #76]	; (8000678 <main+0x80>)
 800062c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8000630:	6313      	str	r3, [r2, #48]	; 0x30
 8000632:	4b11      	ldr	r3, [pc, #68]	; (8000678 <main+0x80>)
 8000634:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000636:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800063a:	603b      	str	r3, [r7, #0]
 800063c:	683b      	ldr	r3, [r7, #0]

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800063e:	f000 f88f 	bl	8000760 <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 8000642:	f006 fad5 	bl	8006bf0 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */

  uint8_t counter = 0;
 8000646:	2300      	movs	r3, #0
 8000648:	73fb      	strb	r3, [r7, #15]
  for (int i = 0; i < sizeof(out_buf); i++) {
 800064a:	2300      	movs	r3, #0
 800064c:	60bb      	str	r3, [r7, #8]
 800064e:	e009      	b.n	8000664 <main+0x6c>
	  out_buf[i] = counter++;
 8000650:	7bfb      	ldrb	r3, [r7, #15]
 8000652:	1c5a      	adds	r2, r3, #1
 8000654:	73fa      	strb	r2, [r7, #15]
 8000656:	4909      	ldr	r1, [pc, #36]	; (800067c <main+0x84>)
 8000658:	68ba      	ldr	r2, [r7, #8]
 800065a:	440a      	add	r2, r1
 800065c:	7013      	strb	r3, [r2, #0]
  for (int i = 0; i < sizeof(out_buf); i++) {
 800065e:	68bb      	ldr	r3, [r7, #8]
 8000660:	3301      	adds	r3, #1
 8000662:	60bb      	str	r3, [r7, #8]
 8000664:	68bb      	ldr	r3, [r7, #8]
 8000666:	f5b3 3fc0 	cmp.w	r3, #98304	; 0x18000
 800066a:	d3f1      	bcc.n	8000650 <main+0x58>
      ////CDC_Transmit_HS(tempBuf, 42);

      //CDC_Transmit_HS(tempBuf, 42);
      //uint8_t poop;
      //poop = sprintf(tempBuf, "%u\n", (uint8_t) dma_buf[0]);
      CDC_Transmit_HS(out_buf, (uint16_t) sizeof(out_buf));
 800066c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000670:	4802      	ldr	r0, [pc, #8]	; (800067c <main+0x84>)
 8000672:	f006 fb7b 	bl	8006d6c <CDC_Transmit_HS>
 8000676:	e7f9      	b.n	800066c <main+0x74>
 8000678:	40023800 	.word	0x40023800
 800067c:	20000198 	.word	0x20000198

08000680 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	b094      	sub	sp, #80	; 0x50
 8000684:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000686:	f107 0320 	add.w	r3, r7, #32
 800068a:	2230      	movs	r2, #48	; 0x30
 800068c:	2100      	movs	r1, #0
 800068e:	4618      	mov	r0, r3
 8000690:	f007 f866 	bl	8007760 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000694:	f107 030c 	add.w	r3, r7, #12
 8000698:	2200      	movs	r2, #0
 800069a:	601a      	str	r2, [r3, #0]
 800069c:	605a      	str	r2, [r3, #4]
 800069e:	609a      	str	r2, [r3, #8]
 80006a0:	60da      	str	r2, [r3, #12]
 80006a2:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80006a4:	f002 fa3a 	bl	8002b1c <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006a8:	4b2b      	ldr	r3, [pc, #172]	; (8000758 <SystemClock_Config+0xd8>)
 80006aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006ac:	4a2a      	ldr	r2, [pc, #168]	; (8000758 <SystemClock_Config+0xd8>)
 80006ae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006b2:	6413      	str	r3, [r2, #64]	; 0x40
 80006b4:	4b28      	ldr	r3, [pc, #160]	; (8000758 <SystemClock_Config+0xd8>)
 80006b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006bc:	60bb      	str	r3, [r7, #8]
 80006be:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006c0:	4b26      	ldr	r3, [pc, #152]	; (800075c <SystemClock_Config+0xdc>)
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	4a25      	ldr	r2, [pc, #148]	; (800075c <SystemClock_Config+0xdc>)
 80006c6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80006ca:	6013      	str	r3, [r2, #0]
 80006cc:	4b23      	ldr	r3, [pc, #140]	; (800075c <SystemClock_Config+0xdc>)
 80006ce:	681b      	ldr	r3, [r3, #0]
 80006d0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80006d4:	607b      	str	r3, [r7, #4]
 80006d6:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80006d8:	2301      	movs	r3, #1
 80006da:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80006dc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80006e0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006e2:	2302      	movs	r3, #2
 80006e4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006e6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80006ea:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 80006ec:	2319      	movs	r3, #25
 80006ee:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 432;
 80006f0:	f44f 73d8 	mov.w	r3, #432	; 0x1b0
 80006f4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006f6:	2302      	movs	r3, #2
 80006f8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 9;
 80006fa:	2309      	movs	r3, #9
 80006fc:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006fe:	f107 0320 	add.w	r3, r7, #32
 8000702:	4618      	mov	r0, r3
 8000704:	f002 fa6a 	bl	8002bdc <HAL_RCC_OscConfig>
 8000708:	4603      	mov	r3, r0
 800070a:	2b00      	cmp	r3, #0
 800070c:	d001      	beq.n	8000712 <SystemClock_Config+0x92>
  {
    Error_Handler();
 800070e:	f000 fc2f 	bl	8000f70 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000712:	f002 fa13 	bl	8002b3c <HAL_PWREx_EnableOverDrive>
 8000716:	4603      	mov	r3, r0
 8000718:	2b00      	cmp	r3, #0
 800071a:	d001      	beq.n	8000720 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 800071c:	f000 fc28 	bl	8000f70 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000720:	230f      	movs	r3, #15
 8000722:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000724:	2302      	movs	r3, #2
 8000726:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000728:	2300      	movs	r3, #0
 800072a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800072c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000730:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000732:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000736:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8000738:	f107 030c 	add.w	r3, r7, #12
 800073c:	2107      	movs	r1, #7
 800073e:	4618      	mov	r0, r3
 8000740:	f002 fcf0 	bl	8003124 <HAL_RCC_ClockConfig>
 8000744:	4603      	mov	r3, r0
 8000746:	2b00      	cmp	r3, #0
 8000748:	d001      	beq.n	800074e <SystemClock_Config+0xce>
  {
    Error_Handler();
 800074a:	f000 fc11 	bl	8000f70 <Error_Handler>
  }
}
 800074e:	bf00      	nop
 8000750:	3750      	adds	r7, #80	; 0x50
 8000752:	46bd      	mov	sp, r7
 8000754:	bd80      	pop	{r7, pc}
 8000756:	bf00      	nop
 8000758:	40023800 	.word	0x40023800
 800075c:	40007000 	.word	0x40007000

08000760 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	b08e      	sub	sp, #56	; 0x38
 8000764:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000766:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800076a:	2200      	movs	r2, #0
 800076c:	601a      	str	r2, [r3, #0]
 800076e:	605a      	str	r2, [r3, #4]
 8000770:	609a      	str	r2, [r3, #8]
 8000772:	60da      	str	r2, [r3, #12]
 8000774:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000776:	4bb2      	ldr	r3, [pc, #712]	; (8000a40 <MX_GPIO_Init+0x2e0>)
 8000778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800077a:	4ab1      	ldr	r2, [pc, #708]	; (8000a40 <MX_GPIO_Init+0x2e0>)
 800077c:	f043 0310 	orr.w	r3, r3, #16
 8000780:	6313      	str	r3, [r2, #48]	; 0x30
 8000782:	4baf      	ldr	r3, [pc, #700]	; (8000a40 <MX_GPIO_Init+0x2e0>)
 8000784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000786:	f003 0310 	and.w	r3, r3, #16
 800078a:	623b      	str	r3, [r7, #32]
 800078c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800078e:	4bac      	ldr	r3, [pc, #688]	; (8000a40 <MX_GPIO_Init+0x2e0>)
 8000790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000792:	4aab      	ldr	r2, [pc, #684]	; (8000a40 <MX_GPIO_Init+0x2e0>)
 8000794:	f043 0302 	orr.w	r3, r3, #2
 8000798:	6313      	str	r3, [r2, #48]	; 0x30
 800079a:	4ba9      	ldr	r3, [pc, #676]	; (8000a40 <MX_GPIO_Init+0x2e0>)
 800079c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800079e:	f003 0302 	and.w	r3, r3, #2
 80007a2:	61fb      	str	r3, [r7, #28]
 80007a4:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80007a6:	4ba6      	ldr	r3, [pc, #664]	; (8000a40 <MX_GPIO_Init+0x2e0>)
 80007a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007aa:	4aa5      	ldr	r2, [pc, #660]	; (8000a40 <MX_GPIO_Init+0x2e0>)
 80007ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80007b0:	6313      	str	r3, [r2, #48]	; 0x30
 80007b2:	4ba3      	ldr	r3, [pc, #652]	; (8000a40 <MX_GPIO_Init+0x2e0>)
 80007b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80007ba:	61bb      	str	r3, [r7, #24]
 80007bc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007be:	4ba0      	ldr	r3, [pc, #640]	; (8000a40 <MX_GPIO_Init+0x2e0>)
 80007c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007c2:	4a9f      	ldr	r2, [pc, #636]	; (8000a40 <MX_GPIO_Init+0x2e0>)
 80007c4:	f043 0308 	orr.w	r3, r3, #8
 80007c8:	6313      	str	r3, [r2, #48]	; 0x30
 80007ca:	4b9d      	ldr	r3, [pc, #628]	; (8000a40 <MX_GPIO_Init+0x2e0>)
 80007cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ce:	f003 0308 	and.w	r3, r3, #8
 80007d2:	617b      	str	r3, [r7, #20]
 80007d4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007d6:	4b9a      	ldr	r3, [pc, #616]	; (8000a40 <MX_GPIO_Init+0x2e0>)
 80007d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007da:	4a99      	ldr	r2, [pc, #612]	; (8000a40 <MX_GPIO_Init+0x2e0>)
 80007dc:	f043 0304 	orr.w	r3, r3, #4
 80007e0:	6313      	str	r3, [r2, #48]	; 0x30
 80007e2:	4b97      	ldr	r3, [pc, #604]	; (8000a40 <MX_GPIO_Init+0x2e0>)
 80007e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e6:	f003 0304 	and.w	r3, r3, #4
 80007ea:	613b      	str	r3, [r7, #16]
 80007ec:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007ee:	4b94      	ldr	r3, [pc, #592]	; (8000a40 <MX_GPIO_Init+0x2e0>)
 80007f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007f2:	4a93      	ldr	r2, [pc, #588]	; (8000a40 <MX_GPIO_Init+0x2e0>)
 80007f4:	f043 0301 	orr.w	r3, r3, #1
 80007f8:	6313      	str	r3, [r2, #48]	; 0x30
 80007fa:	4b91      	ldr	r3, [pc, #580]	; (8000a40 <MX_GPIO_Init+0x2e0>)
 80007fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007fe:	f003 0301 	and.w	r3, r3, #1
 8000802:	60fb      	str	r3, [r7, #12]
 8000804:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000806:	4b8e      	ldr	r3, [pc, #568]	; (8000a40 <MX_GPIO_Init+0x2e0>)
 8000808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800080a:	4a8d      	ldr	r2, [pc, #564]	; (8000a40 <MX_GPIO_Init+0x2e0>)
 800080c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000810:	6313      	str	r3, [r2, #48]	; 0x30
 8000812:	4b8b      	ldr	r3, [pc, #556]	; (8000a40 <MX_GPIO_Init+0x2e0>)
 8000814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000816:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800081a:	60bb      	str	r3, [r7, #8]
 800081c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800081e:	4b88      	ldr	r3, [pc, #544]	; (8000a40 <MX_GPIO_Init+0x2e0>)
 8000820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000822:	4a87      	ldr	r2, [pc, #540]	; (8000a40 <MX_GPIO_Init+0x2e0>)
 8000824:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000828:	6313      	str	r3, [r2, #48]	; 0x30
 800082a:	4b85      	ldr	r3, [pc, #532]	; (8000a40 <MX_GPIO_Init+0x2e0>)
 800082c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800082e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000832:	607b      	str	r3, [r7, #4]
 8000834:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000836:	4b82      	ldr	r3, [pc, #520]	; (8000a40 <MX_GPIO_Init+0x2e0>)
 8000838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800083a:	4a81      	ldr	r2, [pc, #516]	; (8000a40 <MX_GPIO_Init+0x2e0>)
 800083c:	f043 0320 	orr.w	r3, r3, #32
 8000840:	6313      	str	r3, [r2, #48]	; 0x30
 8000842:	4b7f      	ldr	r3, [pc, #508]	; (8000a40 <MX_GPIO_Init+0x2e0>)
 8000844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000846:	f003 0320 	and.w	r3, r3, #32
 800084a:	603b      	str	r3, [r7, #0]
 800084c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, ARD_D7_GPIO_Pin|ARD_D8_GPIO_Pin, GPIO_PIN_RESET);
 800084e:	2200      	movs	r2, #0
 8000850:	2118      	movs	r1, #24
 8000852:	487c      	ldr	r0, [pc, #496]	; (8000a44 <MX_GPIO_Init+0x2e4>)
 8000854:	f000 ff9a 	bl	800178c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, WIFI_RST_Pin|WIFI_GPIO_0_Pin|PMOD_GPIO_0_Pin|USB_OTGFS_PPWR_EN_Pin, GPIO_PIN_RESET);
 8000858:	2200      	movs	r2, #0
 800085a:	f44f 41e2 	mov.w	r1, #28928	; 0x7100
 800085e:	487a      	ldr	r0, [pc, #488]	; (8000a48 <MX_GPIO_Init+0x2e8>)
 8000860:	f000 ff94 	bl	800178c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, WIFI_GPIO_2_Pin|WIFI_CH_PD_Pin, GPIO_PIN_RESET);
 8000864:	2200      	movs	r2, #0
 8000866:	2148      	movs	r1, #72	; 0x48
 8000868:	4878      	ldr	r0, [pc, #480]	; (8000a4c <MX_GPIO_Init+0x2ec>)
 800086a:	f000 ff8f 	bl	800178c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, STMOD_UART4_RXD_s_Pin|ARD_D2_GPIO_Pin, GPIO_PIN_RESET);
 800086e:	2200      	movs	r2, #0
 8000870:	f44f 6102 	mov.w	r1, #2080	; 0x820
 8000874:	4876      	ldr	r0, [pc, #472]	; (8000a50 <MX_GPIO_Init+0x2f0>)
 8000876:	f000 ff89 	bl	800178c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, PMOD_SPI2_MOSI_Pin|PMOD_SPI2_MISO_Pin|GPIO_PIN_10, GPIO_PIN_RESET);
 800087a:	2200      	movs	r2, #0
 800087c:	f240 410c 	movw	r1, #1036	; 0x40c
 8000880:	4874      	ldr	r0, [pc, #464]	; (8000a54 <MX_GPIO_Init+0x2f4>)
 8000882:	f000 ff83 	bl	800178c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(PMOD_SEL_0_GPIO_Port, PMOD_SEL_0_Pin, GPIO_PIN_SET);
 8000886:	2201      	movs	r2, #1
 8000888:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800088c:	4872      	ldr	r0, [pc, #456]	; (8000a58 <MX_GPIO_Init+0x2f8>)
 800088e:	f000 ff7d 	bl	800178c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, USB_OTG_FS_ID_Pin|SYS_LD_USER1_Pin, GPIO_PIN_RESET);
 8000892:	2200      	movs	r2, #0
 8000894:	f44f 6190 	mov.w	r1, #1152	; 0x480
 8000898:	4870      	ldr	r0, [pc, #448]	; (8000a5c <MX_GPIO_Init+0x2fc>)
 800089a:	f000 ff77 	bl	800178c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, USAGE_Pin|ARD_D4_GPIO_Pin|USB_OTGHS_PPWR_EN_Pin|CTP_RST_Pin
 800089e:	2200      	movs	r2, #0
 80008a0:	f241 218c 	movw	r1, #4748	; 0x128c
 80008a4:	486c      	ldr	r0, [pc, #432]	; (8000a58 <MX_GPIO_Init+0x2f8>)
 80008a6:	f000 ff71 	bl	800178c <HAL_GPIO_WritePin>
                          |LCD_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, USB_OTG_HS_ID_Pin|SYS_LD_USER2_Pin, GPIO_PIN_RESET);
 80008aa:	2200      	movs	r2, #0
 80008ac:	f241 0102 	movw	r1, #4098	; 0x1002
 80008b0:	486b      	ldr	r0, [pc, #428]	; (8000a60 <MX_GPIO_Init+0x300>)
 80008b2:	f000 ff6b 	bl	800178c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : ARD_D7_GPIO_Pin ARD_D8_GPIO_Pin */
  GPIO_InitStruct.Pin = ARD_D7_GPIO_Pin|ARD_D8_GPIO_Pin;
 80008b6:	2318      	movs	r3, #24
 80008b8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008ba:	2301      	movs	r3, #1
 80008bc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008be:	2300      	movs	r3, #0
 80008c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008c2:	2300      	movs	r3, #0
 80008c4:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80008c6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008ca:	4619      	mov	r1, r3
 80008cc:	485d      	ldr	r0, [pc, #372]	; (8000a44 <MX_GPIO_Init+0x2e4>)
 80008ce:	f000 fdc1 	bl	8001454 <HAL_GPIO_Init>

  /*Configure GPIO pin : QSPI_D2_Pin */
  GPIO_InitStruct.Pin = QSPI_D2_Pin;
 80008d2:	2304      	movs	r3, #4
 80008d4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008d6:	2302      	movs	r3, #2
 80008d8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008da:	2300      	movs	r3, #0
 80008dc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008de:	2303      	movs	r3, #3
 80008e0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80008e2:	2309      	movs	r3, #9
 80008e4:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(QSPI_D2_GPIO_Port, &GPIO_InitStruct);
 80008e6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008ea:	4619      	mov	r1, r3
 80008ec:	4855      	ldr	r0, [pc, #340]	; (8000a44 <MX_GPIO_Init+0x2e4>)
 80008ee:	f000 fdb1 	bl	8001454 <HAL_GPIO_Init>

  /*Configure GPIO pins : PSRAM_NBL1_Pin PSRAM_NBL0_Pin LCD_PSRAM_D10_Pin LCD_PSRAM_D5_Pin
                           LCD_PSRAM_D6_Pin LCD_PSRAM_D8_Pin LCD_PSRAM_D11_Pin LCD_PSRAM_D4_Pin
                           LCD_PSRAM_D7_Pin LCD_PSRAM_D9_Pin LCD_PSRAM_D12_Pin */
  GPIO_InitStruct.Pin = PSRAM_NBL1_Pin|PSRAM_NBL0_Pin|LCD_PSRAM_D10_Pin|LCD_PSRAM_D5_Pin
 80008f2:	f64f 7383 	movw	r3, #65411	; 0xff83
 80008f6:	627b      	str	r3, [r7, #36]	; 0x24
                          |LCD_PSRAM_D6_Pin|LCD_PSRAM_D8_Pin|LCD_PSRAM_D11_Pin|LCD_PSRAM_D4_Pin
                          |LCD_PSRAM_D7_Pin|LCD_PSRAM_D9_Pin|LCD_PSRAM_D12_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008f8:	2302      	movs	r3, #2
 80008fa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008fc:	2300      	movs	r3, #0
 80008fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000900:	2303      	movs	r3, #3
 8000902:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000904:	230c      	movs	r3, #12
 8000906:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000908:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800090c:	4619      	mov	r1, r3
 800090e:	484d      	ldr	r0, [pc, #308]	; (8000a44 <MX_GPIO_Init+0x2e4>)
 8000910:	f000 fda0 	bl	8001454 <HAL_GPIO_Init>

  /*Configure GPIO pins : SAI2_I2C1_SCL_Pin SAI2_I2C1_SDA_Pin */
  GPIO_InitStruct.Pin = SAI2_I2C1_SCL_Pin|SAI2_I2C1_SDA_Pin;
 8000914:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000918:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800091a:	2312      	movs	r3, #18
 800091c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800091e:	2300      	movs	r3, #0
 8000920:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000922:	2303      	movs	r3, #3
 8000924:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000926:	2304      	movs	r3, #4
 8000928:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800092a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800092e:	4619      	mov	r1, r3
 8000930:	484b      	ldr	r0, [pc, #300]	; (8000a60 <MX_GPIO_Init+0x300>)
 8000932:	f000 fd8f 	bl	8001454 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D11_TIM3_CH2_SPI1_MOSI_Pin ARD_D12_SPI1_MISO_Pin */
  GPIO_InitStruct.Pin = ARD_D11_TIM3_CH2_SPI1_MOSI_Pin|ARD_D12_SPI1_MISO_Pin;
 8000936:	2330      	movs	r3, #48	; 0x30
 8000938:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800093a:	2302      	movs	r3, #2
 800093c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800093e:	2300      	movs	r3, #0
 8000940:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000942:	2303      	movs	r3, #3
 8000944:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000946:	2305      	movs	r3, #5
 8000948:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800094a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800094e:	4619      	mov	r1, r3
 8000950:	4843      	ldr	r0, [pc, #268]	; (8000a60 <MX_GPIO_Init+0x300>)
 8000952:	f000 fd7f 	bl	8001454 <HAL_GPIO_Init>

  /*Configure GPIO pins : WIFI_RST_Pin WIFI_GPIO_0_Pin PMOD_GPIO_0_Pin USB_OTGFS_PPWR_EN_Pin */
  GPIO_InitStruct.Pin = WIFI_RST_Pin|WIFI_GPIO_0_Pin|PMOD_GPIO_0_Pin|USB_OTGFS_PPWR_EN_Pin;
 8000956:	f44f 43e2 	mov.w	r3, #28928	; 0x7100
 800095a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800095c:	2301      	movs	r3, #1
 800095e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000960:	2300      	movs	r3, #0
 8000962:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000964:	2300      	movs	r3, #0
 8000966:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000968:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800096c:	4619      	mov	r1, r3
 800096e:	4836      	ldr	r0, [pc, #216]	; (8000a48 <MX_GPIO_Init+0x2e8>)
 8000970:	f000 fd70 	bl	8001454 <HAL_GPIO_Init>

  /*Configure GPIO pins : PSRAM_NE1_Pin LCD_PSRAM_D2_Pin LCD_PSRAM_NWE_Pin LCD_PSRAM_D3_Pin
                           LCD_PSRAM_NWED4_Pin LCD_PSRAM_D1_Pin LCD_PSRAM_D0_Pin PSRAM_A17_Pin
                           PSRAM_A16_Pin LCD_PSRAM_D15_Pin LCD_PSRAM_D14_Pin LCD_PSRAM_D13_Pin */
  GPIO_InitStruct.Pin = PSRAM_NE1_Pin|LCD_PSRAM_D2_Pin|LCD_PSRAM_NWE_Pin|LCD_PSRAM_D3_Pin
 8000974:	f64d 73b3 	movw	r3, #57267	; 0xdfb3
 8000978:	627b      	str	r3, [r7, #36]	; 0x24
                          |LCD_PSRAM_NWED4_Pin|LCD_PSRAM_D1_Pin|LCD_PSRAM_D0_Pin|PSRAM_A17_Pin
                          |PSRAM_A16_Pin|LCD_PSRAM_D15_Pin|LCD_PSRAM_D14_Pin|LCD_PSRAM_D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800097a:	2302      	movs	r3, #2
 800097c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800097e:	2300      	movs	r3, #0
 8000980:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000982:	2303      	movs	r3, #3
 8000984:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000986:	230c      	movs	r3, #12
 8000988:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800098a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800098e:	4619      	mov	r1, r3
 8000990:	482e      	ldr	r0, [pc, #184]	; (8000a4c <MX_GPIO_Init+0x2ec>)
 8000992:	f000 fd5f 	bl	8001454 <HAL_GPIO_Init>

  /*Configure GPIO pin : UART_TXD_WIFI_RX_Pin */
  GPIO_InitStruct.Pin = UART_TXD_WIFI_RX_Pin;
 8000996:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800099a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800099c:	2302      	movs	r3, #2
 800099e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a0:	2300      	movs	r3, #0
 80009a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009a4:	2303      	movs	r3, #3
 80009a6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 80009a8:	2308      	movs	r3, #8
 80009aa:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(UART_TXD_WIFI_RX_GPIO_Port, &GPIO_InitStruct);
 80009ac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009b0:	4619      	mov	r1, r3
 80009b2:	4827      	ldr	r0, [pc, #156]	; (8000a50 <MX_GPIO_Init+0x2f0>)
 80009b4:	f000 fd4e 	bl	8001454 <HAL_GPIO_Init>

  /*Configure GPIO pins : STMOD_TIM2_CH1_2_ETR_Pin ARD_D10_TIM2_CH2_SPI1_NSS_Pin */
  GPIO_InitStruct.Pin = STMOD_TIM2_CH1_2_ETR_Pin|ARD_D10_TIM2_CH2_SPI1_NSS_Pin;
 80009b8:	f248 0302 	movw	r3, #32770	; 0x8002
 80009bc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009be:	2302      	movs	r3, #2
 80009c0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c2:	2300      	movs	r3, #0
 80009c4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009c6:	2300      	movs	r3, #0
 80009c8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80009ca:	2301      	movs	r3, #1
 80009cc:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009ce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009d2:	4619      	mov	r1, r3
 80009d4:	4821      	ldr	r0, [pc, #132]	; (8000a5c <MX_GPIO_Init+0x2fc>)
 80009d6:	f000 fd3d 	bl	8001454 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D3_TIM9_CH1_Pin ARD_D6_TIM9_CH2_Pin */
  GPIO_InitStruct.Pin = ARD_D3_TIM9_CH1_Pin|ARD_D6_TIM9_CH2_Pin;
 80009da:	2360      	movs	r3, #96	; 0x60
 80009dc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009de:	2302      	movs	r3, #2
 80009e0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e2:	2300      	movs	r3, #0
 80009e4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009e6:	2300      	movs	r3, #0
 80009e8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 80009ea:	2303      	movs	r3, #3
 80009ec:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80009ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009f2:	4619      	mov	r1, r3
 80009f4:	4813      	ldr	r0, [pc, #76]	; (8000a44 <MX_GPIO_Init+0x2e4>)
 80009f6:	f000 fd2d 	bl	8001454 <HAL_GPIO_Init>

  /*Configure GPIO pin : NC1_Pin */
  GPIO_InitStruct.Pin = NC1_Pin;
 80009fa:	2380      	movs	r3, #128	; 0x80
 80009fc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009fe:	2302      	movs	r3, #2
 8000a00:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a02:	2300      	movs	r3, #0
 8000a04:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a06:	2303      	movs	r3, #3
 8000a08:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000a0a:	230c      	movs	r3, #12
 8000a0c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(NC1_GPIO_Port, &GPIO_InitStruct);
 8000a0e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a12:	4619      	mov	r1, r3
 8000a14:	4812      	ldr	r0, [pc, #72]	; (8000a60 <MX_GPIO_Init+0x300>)
 8000a16:	f000 fd1d 	bl	8001454 <HAL_GPIO_Init>

  /*Configure GPIO pin : QSPI_NCS_Pin */
  GPIO_InitStruct.Pin = QSPI_NCS_Pin;
 8000a1a:	2340      	movs	r3, #64	; 0x40
 8000a1c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a1e:	2302      	movs	r3, #2
 8000a20:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a22:	2300      	movs	r3, #0
 8000a24:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a26:	2303      	movs	r3, #3
 8000a28:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8000a2a:	230a      	movs	r3, #10
 8000a2c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(QSPI_NCS_GPIO_Port, &GPIO_InitStruct);
 8000a2e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a32:	4619      	mov	r1, r3
 8000a34:	480a      	ldr	r0, [pc, #40]	; (8000a60 <MX_GPIO_Init+0x300>)
 8000a36:	f000 fd0d 	bl	8001454 <HAL_GPIO_Init>

  /*Configure GPIO pin : SAI2_INT_Pin */
  GPIO_InitStruct.Pin = SAI2_INT_Pin;
 8000a3a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000a3e:	e011      	b.n	8000a64 <MX_GPIO_Init+0x304>
 8000a40:	40023800 	.word	0x40023800
 8000a44:	40021000 	.word	0x40021000
 8000a48:	40021800 	.word	0x40021800
 8000a4c:	40020c00 	.word	0x40020c00
 8000a50:	40020800 	.word	0x40020800
 8000a54:	40022000 	.word	0x40022000
 8000a58:	40021c00 	.word	0x40021c00
 8000a5c:	40020000 	.word	0x40020000
 8000a60:	40020400 	.word	0x40020400
 8000a64:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000a66:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000a6a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(SAI2_INT_GPIO_Port, &GPIO_InitStruct);
 8000a70:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a74:	4619      	mov	r1, r3
 8000a76:	48bc      	ldr	r0, [pc, #752]	; (8000d68 <MX_GPIO_Init+0x608>)
 8000a78:	f000 fcec 	bl	8001454 <HAL_GPIO_Init>

  /*Configure GPIO pin : SAI2_SD_B_Pin */
  GPIO_InitStruct.Pin = SAI2_SD_B_Pin;
 8000a7c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000a80:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a82:	2302      	movs	r3, #2
 8000a84:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a86:	2300      	movs	r3, #0
 8000a88:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8000a8e:	230a      	movs	r3, #10
 8000a90:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(SAI2_SD_B_GPIO_Port, &GPIO_InitStruct);
 8000a92:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a96:	4619      	mov	r1, r3
 8000a98:	48b3      	ldr	r0, [pc, #716]	; (8000d68 <MX_GPIO_Init+0x608>)
 8000a9a:	f000 fcdb 	bl	8001454 <HAL_GPIO_Init>

  /*Configure GPIO pins : WIFI_GPIO_2_Pin WIFI_CH_PD_Pin */
  GPIO_InitStruct.Pin = WIFI_GPIO_2_Pin|WIFI_CH_PD_Pin;
 8000a9e:	2348      	movs	r3, #72	; 0x48
 8000aa0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000aa2:	2301      	movs	r3, #1
 8000aa4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aaa:	2300      	movs	r3, #0
 8000aac:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000aae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ab2:	4619      	mov	r1, r3
 8000ab4:	48ad      	ldr	r0, [pc, #692]	; (8000d6c <MX_GPIO_Init+0x60c>)
 8000ab6:	f000 fccd 	bl	8001454 <HAL_GPIO_Init>

  /*Configure GPIO pins : STMOD_UART4_RXD_s_Pin ARD_D2_GPIO_Pin */
  GPIO_InitStruct.Pin = STMOD_UART4_RXD_s_Pin|ARD_D2_GPIO_Pin;
 8000aba:	f44f 6302 	mov.w	r3, #2080	; 0x820
 8000abe:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ac0:	2301      	movs	r3, #1
 8000ac2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ac8:	2300      	movs	r3, #0
 8000aca:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000acc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	48a7      	ldr	r0, [pc, #668]	; (8000d70 <MX_GPIO_Init+0x610>)
 8000ad4:	f000 fcbe 	bl	8001454 <HAL_GPIO_Init>

  /*Configure GPIO pins : QSPI_D1_Pin QSPI_D0_Pin */
  GPIO_InitStruct.Pin = QSPI_D1_Pin|QSPI_D0_Pin;
 8000ad8:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000adc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ade:	2302      	movs	r3, #2
 8000ae0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ae6:	2303      	movs	r3, #3
 8000ae8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8000aea:	2309      	movs	r3, #9
 8000aec:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000aee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000af2:	4619      	mov	r1, r3
 8000af4:	489e      	ldr	r0, [pc, #632]	; (8000d70 <MX_GPIO_Init+0x610>)
 8000af6:	f000 fcad 	bl	8001454 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA12 PA11 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_11;
 8000afa:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000afe:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b00:	2302      	movs	r3, #2
 8000b02:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b04:	2300      	movs	r3, #0
 8000b06:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b08:	2303      	movs	r3, #3
 8000b0a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000b0c:	230a      	movs	r3, #10
 8000b0e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b10:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b14:	4619      	mov	r1, r3
 8000b16:	4897      	ldr	r0, [pc, #604]	; (8000d74 <MX_GPIO_Init+0x614>)
 8000b18:	f000 fc9c 	bl	8001454 <HAL_GPIO_Init>

  /*Configure GPIO pins : SAI2_FS_A_Pin SAI2_SD_A_Pin SAI2_SCK_A_Pin SAI2_MCLK_A_Pin */
  GPIO_InitStruct.Pin = SAI2_FS_A_Pin|SAI2_SD_A_Pin|SAI2_SCK_A_Pin|SAI2_MCLK_A_Pin;
 8000b1c:	23f0      	movs	r3, #240	; 0xf0
 8000b1e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b20:	2302      	movs	r3, #2
 8000b22:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b24:	2300      	movs	r3, #0
 8000b26:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b28:	2300      	movs	r3, #0
 8000b2a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8000b2c:	230a      	movs	r3, #10
 8000b2e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000b30:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b34:	4619      	mov	r1, r3
 8000b36:	4890      	ldr	r0, [pc, #576]	; (8000d78 <MX_GPIO_Init+0x618>)
 8000b38:	f000 fc8c 	bl	8001454 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_NE_Pin PSRAM_A15_Pin PSRAM_A14_Pin PSRAM_A13_Pin
                           PSRAM_A12_Pin PSRAM_A11_Pin PSRAM_A10_Pin */
  GPIO_InitStruct.Pin = LCD_NE_Pin|PSRAM_A15_Pin|PSRAM_A14_Pin|PSRAM_A13_Pin
 8000b3c:	f240 233f 	movw	r3, #575	; 0x23f
 8000b40:	627b      	str	r3, [r7, #36]	; 0x24
                          |PSRAM_A12_Pin|PSRAM_A11_Pin|PSRAM_A10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b42:	2302      	movs	r3, #2
 8000b44:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b46:	2300      	movs	r3, #0
 8000b48:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b4a:	2303      	movs	r3, #3
 8000b4c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000b4e:	230c      	movs	r3, #12
 8000b50:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000b52:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b56:	4619      	mov	r1, r3
 8000b58:	4883      	ldr	r0, [pc, #524]	; (8000d68 <MX_GPIO_Init+0x608>)
 8000b5a:	f000 fc7b 	bl	8001454 <HAL_GPIO_Init>

  /*Configure GPIO pins : PMOD_SPI2_MOSI_Pin PMOD_SPI2_MISO_Pin PI10 */
  GPIO_InitStruct.Pin = PMOD_SPI2_MOSI_Pin|PMOD_SPI2_MISO_Pin|GPIO_PIN_10;
 8000b5e:	f240 430c 	movw	r3, #1036	; 0x40c
 8000b62:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b64:	2301      	movs	r3, #1
 8000b66:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b68:	2300      	movs	r3, #0
 8000b6a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000b70:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b74:	4619      	mov	r1, r3
 8000b76:	4880      	ldr	r0, [pc, #512]	; (8000d78 <MX_GPIO_Init+0x618>)
 8000b78:	f000 fc6c 	bl	8001454 <HAL_GPIO_Init>

  /*Configure GPIO pin : CTP_INT_Pin */
  GPIO_InitStruct.Pin = CTP_INT_Pin;
 8000b7c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000b80:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000b82:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000b86:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b88:	2300      	movs	r3, #0
 8000b8a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CTP_INT_GPIO_Port, &GPIO_InitStruct);
 8000b8c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b90:	4619      	mov	r1, r3
 8000b92:	4879      	ldr	r0, [pc, #484]	; (8000d78 <MX_GPIO_Init+0x618>)
 8000b94:	f000 fc5e 	bl	8001454 <HAL_GPIO_Init>

  /*Configure GPIO pin : UART_RXD_WIFI_TX_Pin */
  GPIO_InitStruct.Pin = UART_RXD_WIFI_TX_Pin;
 8000b98:	2304      	movs	r3, #4
 8000b9a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b9c:	2302      	movs	r3, #2
 8000b9e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ba4:	2303      	movs	r3, #3
 8000ba6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8000ba8:	2308      	movs	r3, #8
 8000baa:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(UART_RXD_WIFI_TX_GPIO_Port, &GPIO_InitStruct);
 8000bac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bb0:	4619      	mov	r1, r3
 8000bb2:	486e      	ldr	r0, [pc, #440]	; (8000d6c <MX_GPIO_Init+0x60c>)
 8000bb4:	f000 fc4e 	bl	8001454 <HAL_GPIO_Init>

  /*Configure GPIO pins : PMOD_SEL_0_Pin ARD_D4_GPIO_Pin USB_OTGHS_PPWR_EN_Pin CTP_RST_Pin
                           LCD_RST_Pin */
  GPIO_InitStruct.Pin = PMOD_SEL_0_Pin|ARD_D4_GPIO_Pin|USB_OTGHS_PPWR_EN_Pin|CTP_RST_Pin
 8000bb8:	f249 2388 	movw	r3, #37512	; 0x9288
 8000bbc:	627b      	str	r3, [r7, #36]	; 0x24
                          |LCD_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bbe:	2301      	movs	r3, #1
 8000bc0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000bca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bce:	4619      	mov	r1, r3
 8000bd0:	486a      	ldr	r0, [pc, #424]	; (8000d7c <MX_GPIO_Init+0x61c>)
 8000bd2:	f000 fc3f 	bl	8001454 <HAL_GPIO_Init>

  /*Configure GPIO pins : PMOD_SPI2_SCK_Pin PMOD_SPI2_NSS_Pin */
  GPIO_InitStruct.Pin = PMOD_SPI2_SCK_Pin|PMOD_SPI2_NSS_Pin;
 8000bd6:	2303      	movs	r3, #3
 8000bd8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bda:	2302      	movs	r3, #2
 8000bdc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bde:	2300      	movs	r3, #0
 8000be0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000be2:	2303      	movs	r3, #3
 8000be4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000be6:	2305      	movs	r3, #5
 8000be8:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000bea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bee:	4619      	mov	r1, r3
 8000bf0:	4861      	ldr	r0, [pc, #388]	; (8000d78 <MX_GPIO_Init+0x618>)
 8000bf2:	f000 fc2f 	bl	8001454 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_ID_Pin SYS_LD_USER1_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_ID_Pin|SYS_LD_USER1_Pin;
 8000bf6:	f44f 6390 	mov.w	r3, #1152	; 0x480
 8000bfa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bfc:	2301      	movs	r3, #1
 8000bfe:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c00:	2300      	movs	r3, #0
 8000c02:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c04:	2300      	movs	r3, #0
 8000c06:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c08:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c0c:	4619      	mov	r1, r3
 8000c0e:	4859      	ldr	r0, [pc, #356]	; (8000d74 <MX_GPIO_Init+0x614>)
 8000c10:	f000 fc20 	bl	8001454 <HAL_GPIO_Init>

  /*Configure GPIO pins : PSRAM_A0_Pin PSRAM_A2_Pin PSRAM_A1_Pin PSRAM_A3_Pin
                           PSRAM_A4_Pin PSRAM_A5_Pin PSRAM_A7_Pin PSRAM_A6_Pin
                           PSRAM_A9_Pin PSRAM_A8_Pin */
  GPIO_InitStruct.Pin = PSRAM_A0_Pin|PSRAM_A2_Pin|PSRAM_A1_Pin|PSRAM_A3_Pin
 8000c14:	f24f 033f 	movw	r3, #61503	; 0xf03f
 8000c18:	627b      	str	r3, [r7, #36]	; 0x24
                          |PSRAM_A4_Pin|PSRAM_A5_Pin|PSRAM_A7_Pin|PSRAM_A6_Pin
                          |PSRAM_A9_Pin|PSRAM_A8_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c1a:	2302      	movs	r3, #2
 8000c1c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c1e:	2300      	movs	r3, #0
 8000c20:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c22:	2303      	movs	r3, #3
 8000c24:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000c26:	230c      	movs	r3, #12
 8000c28:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000c2a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c2e:	4619      	mov	r1, r3
 8000c30:	4853      	ldr	r0, [pc, #332]	; (8000d80 <MX_GPIO_Init+0x620>)
 8000c32:	f000 fc0f 	bl	8001454 <HAL_GPIO_Init>

  /*Configure GPIO pins : STMOD_UART4_TXD_Pin STMOD_UART4_RXD_Pin */
  GPIO_InitStruct.Pin = STMOD_UART4_TXD_Pin|STMOD_UART4_RXD_Pin;
 8000c36:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8000c3a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c3c:	2302      	movs	r3, #2
 8000c3e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c40:	2300      	movs	r3, #0
 8000c42:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c44:	2303      	movs	r3, #3
 8000c46:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8000c48:	2308      	movs	r3, #8
 8000c4a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000c4c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c50:	4619      	mov	r1, r3
 8000c52:	484a      	ldr	r0, [pc, #296]	; (8000d7c <MX_GPIO_Init+0x61c>)
 8000c54:	f000 fbfe 	bl	8001454 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000c58:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000c5c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c5e:	2300      	movs	r3, #0
 8000c60:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c62:	2300      	movs	r3, #0
 8000c64:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c66:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c6a:	4619      	mov	r1, r3
 8000c6c:	4841      	ldr	r0, [pc, #260]	; (8000d74 <MX_GPIO_Init+0x614>)
 8000c6e:	f000 fbf1 	bl	8001454 <HAL_GPIO_Init>

  /*Configure GPIO pin : USAGE_Pin */
  GPIO_InitStruct.Pin = USAGE_Pin;
 8000c72:	2304      	movs	r3, #4
 8000c74:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c76:	2301      	movs	r3, #1
 8000c78:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c7e:	2303      	movs	r3, #3
 8000c80:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USAGE_GPIO_Port, &GPIO_InitStruct);
 8000c82:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c86:	4619      	mov	r1, r3
 8000c88:	483c      	ldr	r0, [pc, #240]	; (8000d7c <MX_GPIO_Init+0x61c>)
 8000c8a:	f000 fbe3 	bl	8001454 <HAL_GPIO_Init>

  /*Configure GPIO pin : CTP_SCL_Pin */
  GPIO_InitStruct.Pin = CTP_SCL_Pin;
 8000c8e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000c92:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c94:	2312      	movs	r3, #18
 8000c96:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c98:	2300      	movs	r3, #0
 8000c9a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c9c:	2303      	movs	r3, #3
 8000c9e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000ca0:	2304      	movs	r3, #4
 8000ca2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(CTP_SCL_GPIO_Port, &GPIO_InitStruct);
 8000ca4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ca8:	4619      	mov	r1, r3
 8000caa:	4832      	ldr	r0, [pc, #200]	; (8000d74 <MX_GPIO_Init+0x614>)
 8000cac:	f000 fbd2 	bl	8001454 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_TE_INT_Pin */
  GPIO_InitStruct.Pin = LCD_TE_INT_Pin;
 8000cb0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000cb4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000cb6:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000cba:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(LCD_TE_INT_GPIO_Port, &GPIO_InitStruct);
 8000cc0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cc4:	4619      	mov	r1, r3
 8000cc6:	482a      	ldr	r0, [pc, #168]	; (8000d70 <MX_GPIO_Init+0x610>)
 8000cc8:	f000 fbc4 	bl	8001454 <HAL_GPIO_Init>

  /*Configure GPIO pins : VCP_RX_Pin VCP_TX_Pin */
  GPIO_InitStruct.Pin = VCP_RX_Pin|VCP_TX_Pin;
 8000ccc:	23c0      	movs	r3, #192	; 0xc0
 8000cce:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cd0:	2302      	movs	r3, #2
 8000cd2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cd8:	2303      	movs	r3, #3
 8000cda:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8000cdc:	2308      	movs	r3, #8
 8000cde:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ce0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ce4:	4619      	mov	r1, r3
 8000ce6:	4822      	ldr	r0, [pc, #136]	; (8000d70 <MX_GPIO_Init+0x610>)
 8000ce8:	f000 fbb4 	bl	8001454 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D15_STMOD_I2C2_SCL_Pin ARD_D14_STMOD_I2C2_SDA_Pin */
  GPIO_InitStruct.Pin = ARD_D15_STMOD_I2C2_SCL_Pin|ARD_D14_STMOD_I2C2_SDA_Pin;
 8000cec:	2330      	movs	r3, #48	; 0x30
 8000cee:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000cf0:	2312      	movs	r3, #18
 8000cf2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cf8:	2303      	movs	r3, #3
 8000cfa:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000cfc:	2304      	movs	r3, #4
 8000cfe:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000d00:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d04:	4619      	mov	r1, r3
 8000d06:	481d      	ldr	r0, [pc, #116]	; (8000d7c <MX_GPIO_Init+0x61c>)
 8000d08:	f000 fba4 	bl	8001454 <HAL_GPIO_Init>

  /*Configure GPIO pins : PMOD_UART7_TXD_Pin PMOD_UART7_RXD_Pin PMOD_UART7_CTS_Pin PMOD_UART7_RTS_Pin */
  GPIO_InitStruct.Pin = PMOD_UART7_TXD_Pin|PMOD_UART7_RXD_Pin|PMOD_UART7_CTS_Pin|PMOD_UART7_RTS_Pin;
 8000d0c:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8000d10:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d12:	2302      	movs	r3, #2
 8000d14:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d16:	2300      	movs	r3, #0
 8000d18:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d1a:	2303      	movs	r3, #3
 8000d1c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF8_UART7;
 8000d1e:	2308      	movs	r3, #8
 8000d20:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000d22:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d26:	4619      	mov	r1, r3
 8000d28:	4815      	ldr	r0, [pc, #84]	; (8000d80 <MX_GPIO_Init+0x620>)
 8000d2a:	f000 fb93 	bl	8001454 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_A3_ADC3_IN8_Pin */
  GPIO_InitStruct.Pin = ARD_A3_ADC3_IN8_Pin;
 8000d2e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d32:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d34:	2303      	movs	r3, #3
 8000d36:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d38:	2300      	movs	r3, #0
 8000d3a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(ARD_A3_ADC3_IN8_GPIO_Port, &GPIO_InitStruct);
 8000d3c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d40:	4619      	mov	r1, r3
 8000d42:	480f      	ldr	r0, [pc, #60]	; (8000d80 <MX_GPIO_Init+0x620>)
 8000d44:	f000 fb86 	bl	8001454 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_BL_Pin */
  GPIO_InitStruct.Pin = LCD_BL_Pin;
 8000d48:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000d4c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d4e:	2302      	movs	r3, #2
 8000d50:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d52:	2300      	movs	r3, #0
 8000d54:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d56:	2300      	movs	r3, #0
 8000d58:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8000d5a:	2302      	movs	r3, #2
 8000d5c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(LCD_BL_GPIO_Port, &GPIO_InitStruct);
 8000d5e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d62:	4619      	mov	r1, r3
 8000d64:	e00e      	b.n	8000d84 <MX_GPIO_Init+0x624>
 8000d66:	bf00      	nop
 8000d68:	40021800 	.word	0x40021800
 8000d6c:	40020c00 	.word	0x40020c00
 8000d70:	40020800 	.word	0x40020800
 8000d74:	40020000 	.word	0x40020000
 8000d78:	40022000 	.word	0x40022000
 8000d7c:	40021c00 	.word	0x40021c00
 8000d80:	40021400 	.word	0x40021400
 8000d84:	4874      	ldr	r0, [pc, #464]	; (8000f58 <MX_GPIO_Init+0x7f8>)
 8000d86:	f000 fb65 	bl	8001454 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTGHS_OVCR_INT_Pin */
  GPIO_InitStruct.Pin = USB_OTGHS_OVCR_INT_Pin;
 8000d8a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d8e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d90:	2300      	movs	r3, #0
 8000d92:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d94:	2300      	movs	r3, #0
 8000d96:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_OTGHS_OVCR_INT_GPIO_Port, &GPIO_InitStruct);
 8000d98:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d9c:	4619      	mov	r1, r3
 8000d9e:	486e      	ldr	r0, [pc, #440]	; (8000f58 <MX_GPIO_Init+0x7f8>)
 8000da0:	f000 fb58 	bl	8001454 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_A4_Pin ARD_A5_Pin ARD_A2_Pin */
  GPIO_InitStruct.Pin = ARD_A4_Pin|ARD_A5_Pin|ARD_A2_Pin;
 8000da4:	2313      	movs	r3, #19
 8000da6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000da8:	2303      	movs	r3, #3
 8000daa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dac:	2300      	movs	r3, #0
 8000dae:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000db0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000db4:	4619      	mov	r1, r3
 8000db6:	4869      	ldr	r0, [pc, #420]	; (8000f5c <MX_GPIO_Init+0x7fc>)
 8000db8:	f000 fb4c 	bl	8001454 <HAL_GPIO_Init>

  /*Configure GPIO pins : STMOD_SPI2_MISOs_Pin STMOD_SPI2_MOSIs_Pin */
  GPIO_InitStruct.Pin = STMOD_SPI2_MISOs_Pin|STMOD_SPI2_MOSIs_Pin;
 8000dbc:	230c      	movs	r3, #12
 8000dbe:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dc0:	2302      	movs	r3, #2
 8000dc2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dc8:	2303      	movs	r3, #3
 8000dca:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000dcc:	2305      	movs	r3, #5
 8000dce:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000dd0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000dd4:	4619      	mov	r1, r3
 8000dd6:	4861      	ldr	r0, [pc, #388]	; (8000f5c <MX_GPIO_Init+0x7fc>)
 8000dd8:	f000 fb3c 	bl	8001454 <HAL_GPIO_Init>

  /*Configure GPIO pin : QSPI_CLK_Pin */
  GPIO_InitStruct.Pin = QSPI_CLK_Pin;
 8000ddc:	2304      	movs	r3, #4
 8000dde:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000de0:	2302      	movs	r3, #2
 8000de2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000de4:	2300      	movs	r3, #0
 8000de6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000de8:	2303      	movs	r3, #3
 8000dea:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8000dec:	2309      	movs	r3, #9
 8000dee:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(QSPI_CLK_GPIO_Port, &GPIO_InitStruct);
 8000df0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000df4:	4619      	mov	r1, r3
 8000df6:	485a      	ldr	r0, [pc, #360]	; (8000f60 <MX_GPIO_Init+0x800>)
 8000df8:	f000 fb2c 	bl	8001454 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D9_TIM12_CH1_Pin */
  GPIO_InitStruct.Pin = ARD_D9_TIM12_CH1_Pin;
 8000dfc:	2340      	movs	r3, #64	; 0x40
 8000dfe:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e00:	2302      	movs	r3, #2
 8000e02:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e04:	2300      	movs	r3, #0
 8000e06:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e08:	2300      	movs	r3, #0
 8000e0a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8000e0c:	2309      	movs	r3, #9
 8000e0e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ARD_D9_TIM12_CH1_GPIO_Port, &GPIO_InitStruct);
 8000e10:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e14:	4619      	mov	r1, r3
 8000e16:	4850      	ldr	r0, [pc, #320]	; (8000f58 <MX_GPIO_Init+0x7f8>)
 8000e18:	f000 fb1c 	bl	8001454 <HAL_GPIO_Init>

  /*Configure GPIO pin : CTP_SDA_Pin */
  GPIO_InitStruct.Pin = CTP_SDA_Pin;
 8000e1c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000e20:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e22:	2312      	movs	r3, #18
 8000e24:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e26:	2300      	movs	r3, #0
 8000e28:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e2a:	2303      	movs	r3, #3
 8000e2c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000e2e:	2304      	movs	r3, #4
 8000e30:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(CTP_SDA_GPIO_Port, &GPIO_InitStruct);
 8000e32:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e36:	4619      	mov	r1, r3
 8000e38:	4847      	ldr	r0, [pc, #284]	; (8000f58 <MX_GPIO_Init+0x7f8>)
 8000e3a:	f000 fb0b 	bl	8001454 <HAL_GPIO_Init>

  /*Configure GPIO pin : QSPI_D3_Pin */
  GPIO_InitStruct.Pin = QSPI_D3_Pin;
 8000e3e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000e42:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e44:	2302      	movs	r3, #2
 8000e46:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e48:	2300      	movs	r3, #0
 8000e4a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e4c:	2303      	movs	r3, #3
 8000e4e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8000e50:	2309      	movs	r3, #9
 8000e52:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(QSPI_D3_GPIO_Port, &GPIO_InitStruct);
 8000e54:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e58:	4619      	mov	r1, r3
 8000e5a:	4842      	ldr	r0, [pc, #264]	; (8000f64 <MX_GPIO_Init+0x804>)
 8000e5c:	f000 fafa 	bl	8001454 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_A1_Pin ARD_A0_Pin */
  GPIO_InitStruct.Pin = ARD_A1_Pin|ARD_A0_Pin;
 8000e60:	2350      	movs	r3, #80	; 0x50
 8000e62:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e64:	2303      	movs	r3, #3
 8000e66:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e68:	2300      	movs	r3, #0
 8000e6a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e6c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e70:	4619      	mov	r1, r3
 8000e72:	483d      	ldr	r0, [pc, #244]	; (8000f68 <MX_GPIO_Init+0x808>)
 8000e74:	f000 faee 	bl	8001454 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D1_USART2_TX_Pin ARD_D0_USART2_RX_Pin */
  GPIO_InitStruct.Pin = ARD_D1_USART2_TX_Pin|ARD_D0_USART2_RX_Pin;
 8000e78:	230c      	movs	r3, #12
 8000e7a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e7c:	2302      	movs	r3, #2
 8000e7e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e80:	2300      	movs	r3, #0
 8000e82:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e84:	2303      	movs	r3, #3
 8000e86:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000e88:	2307      	movs	r3, #7
 8000e8a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e8c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e90:	4619      	mov	r1, r3
 8000e92:	4835      	ldr	r0, [pc, #212]	; (8000f68 <MX_GPIO_Init+0x808>)
 8000e94:	f000 fade 	bl	8001454 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D13_SPI1_SCK_Pin */
  GPIO_InitStruct.Pin = ARD_D13_SPI1_SCK_Pin;
 8000e98:	2320      	movs	r3, #32
 8000e9a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e9c:	2302      	movs	r3, #2
 8000e9e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ea4:	2303      	movs	r3, #3
 8000ea6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000ea8:	2305      	movs	r3, #5
 8000eaa:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ARD_D13_SPI1_SCK_GPIO_Port, &GPIO_InitStruct);
 8000eac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000eb0:	4619      	mov	r1, r3
 8000eb2:	482d      	ldr	r0, [pc, #180]	; (8000f68 <MX_GPIO_Init+0x808>)
 8000eb4:	f000 face 	bl	8001454 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_HS_ID_Pin SYS_LD_USER2_Pin */
  GPIO_InitStruct.Pin = USB_OTG_HS_ID_Pin|SYS_LD_USER2_Pin;
 8000eb8:	f241 0302 	movw	r3, #4098	; 0x1002
 8000ebc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ebe:	2301      	movs	r3, #1
 8000ec0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000eca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ece:	4619      	mov	r1, r3
 8000ed0:	4823      	ldr	r0, [pc, #140]	; (8000f60 <MX_GPIO_Init+0x800>)
 8000ed2:	f000 fabf 	bl	8001454 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_HS_VBUS_Pin USB_OTGFS_OVCR_INT_Pin */
  GPIO_InitStruct.Pin = USB_OTG_HS_VBUS_Pin|USB_OTGFS_OVCR_INT_Pin;
 8000ed6:	f44f 5310 	mov.w	r3, #9216	; 0x2400
 8000eda:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000edc:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000ee0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ee6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000eea:	4619      	mov	r1, r3
 8000eec:	481c      	ldr	r0, [pc, #112]	; (8000f60 <MX_GPIO_Init+0x800>)
 8000eee:	f000 fab1 	bl	8001454 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D5_STMOD_TIM3_CH3_Pin */
  GPIO_InitStruct.Pin = ARD_D5_STMOD_TIM3_CH3_Pin;
 8000ef2:	2301      	movs	r3, #1
 8000ef4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ef6:	2302      	movs	r3, #2
 8000ef8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000efa:	2300      	movs	r3, #0
 8000efc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000efe:	2300      	movs	r3, #0
 8000f00:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000f02:	2302      	movs	r3, #2
 8000f04:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ARD_D5_STMOD_TIM3_CH3_GPIO_Port, &GPIO_InitStruct);
 8000f06:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f0a:	4619      	mov	r1, r3
 8000f0c:	4814      	ldr	r0, [pc, #80]	; (8000f60 <MX_GPIO_Init+0x800>)
 8000f0e:	f000 faa1 	bl	8001454 <HAL_GPIO_Init>

  /*Configure GPIO pin : PMOD_RESET_Pin */
  GPIO_InitStruct.Pin = PMOD_RESET_Pin;
 8000f12:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000f16:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f18:	2300      	movs	r3, #0
 8000f1a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PMOD_RESET_GPIO_Port, &GPIO_InitStruct);
 8000f20:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f24:	4619      	mov	r1, r3
 8000f26:	4811      	ldr	r0, [pc, #68]	; (8000f6c <MX_GPIO_Init+0x80c>)
 8000f28:	f000 fa94 	bl	8001454 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000f2c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000f30:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f32:	2302      	movs	r3, #2
 8000f34:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f36:	2300      	movs	r3, #0
 8000f38:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000f3e:	2301      	movs	r3, #1
 8000f40:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f42:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f46:	4619      	mov	r1, r3
 8000f48:	4805      	ldr	r0, [pc, #20]	; (8000f60 <MX_GPIO_Init+0x800>)
 8000f4a:	f000 fa83 	bl	8001454 <HAL_GPIO_Init>

}
 8000f4e:	bf00      	nop
 8000f50:	3738      	adds	r7, #56	; 0x38
 8000f52:	46bd      	mov	sp, r7
 8000f54:	bd80      	pop	{r7, pc}
 8000f56:	bf00      	nop
 8000f58:	40021c00 	.word	0x40021c00
 8000f5c:	40020800 	.word	0x40020800
 8000f60:	40020400 	.word	0x40020400
 8000f64:	40020c00 	.word	0x40020c00
 8000f68:	40020000 	.word	0x40020000
 8000f6c:	40021400 	.word	0x40021400

08000f70 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f70:	b480      	push	{r7}
 8000f72:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000f74:	b672      	cpsid	i
}
 8000f76:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f78:	e7fe      	b.n	8000f78 <Error_Handler+0x8>
	...

08000f7c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f7c:	b480      	push	{r7}
 8000f7e:	b083      	sub	sp, #12
 8000f80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000f82:	4b0f      	ldr	r3, [pc, #60]	; (8000fc0 <HAL_MspInit+0x44>)
 8000f84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f86:	4a0e      	ldr	r2, [pc, #56]	; (8000fc0 <HAL_MspInit+0x44>)
 8000f88:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f8c:	6413      	str	r3, [r2, #64]	; 0x40
 8000f8e:	4b0c      	ldr	r3, [pc, #48]	; (8000fc0 <HAL_MspInit+0x44>)
 8000f90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f96:	607b      	str	r3, [r7, #4]
 8000f98:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f9a:	4b09      	ldr	r3, [pc, #36]	; (8000fc0 <HAL_MspInit+0x44>)
 8000f9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f9e:	4a08      	ldr	r2, [pc, #32]	; (8000fc0 <HAL_MspInit+0x44>)
 8000fa0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000fa4:	6453      	str	r3, [r2, #68]	; 0x44
 8000fa6:	4b06      	ldr	r3, [pc, #24]	; (8000fc0 <HAL_MspInit+0x44>)
 8000fa8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000faa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000fae:	603b      	str	r3, [r7, #0]
 8000fb0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000fb2:	bf00      	nop
 8000fb4:	370c      	adds	r7, #12
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fbc:	4770      	bx	lr
 8000fbe:	bf00      	nop
 8000fc0:	40023800 	.word	0x40023800

08000fc4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000fc4:	b480      	push	{r7}
 8000fc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000fc8:	e7fe      	b.n	8000fc8 <NMI_Handler+0x4>

08000fca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000fca:	b480      	push	{r7}
 8000fcc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000fce:	e7fe      	b.n	8000fce <HardFault_Handler+0x4>

08000fd0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000fd4:	e7fe      	b.n	8000fd4 <MemManage_Handler+0x4>

08000fd6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000fd6:	b480      	push	{r7}
 8000fd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000fda:	e7fe      	b.n	8000fda <BusFault_Handler+0x4>

08000fdc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000fdc:	b480      	push	{r7}
 8000fde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000fe0:	e7fe      	b.n	8000fe0 <UsageFault_Handler+0x4>

08000fe2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000fe2:	b480      	push	{r7}
 8000fe4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000fe6:	bf00      	nop
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fee:	4770      	bx	lr

08000ff0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ff4:	bf00      	nop
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffc:	4770      	bx	lr

08000ffe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ffe:	b480      	push	{r7}
 8001000:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001002:	bf00      	nop
 8001004:	46bd      	mov	sp, r7
 8001006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100a:	4770      	bx	lr

0800100c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001010:	f000 f8ca 	bl	80011a8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001014:	bf00      	nop
 8001016:	bd80      	pop	{r7, pc}

08001018 <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_HS);
 800101c:	4802      	ldr	r0, [pc, #8]	; (8001028 <OTG_HS_IRQHandler+0x10>)
 800101e:	f000 fd14 	bl	8001a4a <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 8001022:	bf00      	nop
 8001024:	bd80      	pop	{r7, pc}
 8001026:	bf00      	nop
 8001028:	20019674 	.word	0x20019674

0800102c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	b086      	sub	sp, #24
 8001030:	af00      	add	r7, sp, #0
 8001032:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001034:	4a14      	ldr	r2, [pc, #80]	; (8001088 <_sbrk+0x5c>)
 8001036:	4b15      	ldr	r3, [pc, #84]	; (800108c <_sbrk+0x60>)
 8001038:	1ad3      	subs	r3, r2, r3
 800103a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800103c:	697b      	ldr	r3, [r7, #20]
 800103e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001040:	4b13      	ldr	r3, [pc, #76]	; (8001090 <_sbrk+0x64>)
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	2b00      	cmp	r3, #0
 8001046:	d102      	bne.n	800104e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001048:	4b11      	ldr	r3, [pc, #68]	; (8001090 <_sbrk+0x64>)
 800104a:	4a12      	ldr	r2, [pc, #72]	; (8001094 <_sbrk+0x68>)
 800104c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800104e:	4b10      	ldr	r3, [pc, #64]	; (8001090 <_sbrk+0x64>)
 8001050:	681a      	ldr	r2, [r3, #0]
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	4413      	add	r3, r2
 8001056:	693a      	ldr	r2, [r7, #16]
 8001058:	429a      	cmp	r2, r3
 800105a:	d207      	bcs.n	800106c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800105c:	f006 fb46 	bl	80076ec <__errno>
 8001060:	4603      	mov	r3, r0
 8001062:	220c      	movs	r2, #12
 8001064:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001066:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800106a:	e009      	b.n	8001080 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800106c:	4b08      	ldr	r3, [pc, #32]	; (8001090 <_sbrk+0x64>)
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001072:	4b07      	ldr	r3, [pc, #28]	; (8001090 <_sbrk+0x64>)
 8001074:	681a      	ldr	r2, [r3, #0]
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	4413      	add	r3, r2
 800107a:	4a05      	ldr	r2, [pc, #20]	; (8001090 <_sbrk+0x64>)
 800107c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800107e:	68fb      	ldr	r3, [r7, #12]
}
 8001080:	4618      	mov	r0, r3
 8001082:	3718      	adds	r7, #24
 8001084:	46bd      	mov	sp, r7
 8001086:	bd80      	pop	{r7, pc}
 8001088:	20040000 	.word	0x20040000
 800108c:	00000400 	.word	0x00000400
 8001090:	20018198 	.word	0x20018198
 8001094:	20019a88 	.word	0x20019a88

08001098 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001098:	b480      	push	{r7}
 800109a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800109c:	4b06      	ldr	r3, [pc, #24]	; (80010b8 <SystemInit+0x20>)
 800109e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80010a2:	4a05      	ldr	r2, [pc, #20]	; (80010b8 <SystemInit+0x20>)
 80010a4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80010a8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80010ac:	bf00      	nop
 80010ae:	46bd      	mov	sp, r7
 80010b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b4:	4770      	bx	lr
 80010b6:	bf00      	nop
 80010b8:	e000ed00 	.word	0xe000ed00

080010bc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80010bc:	f8df d034 	ldr.w	sp, [pc, #52]	; 80010f4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80010c0:	480d      	ldr	r0, [pc, #52]	; (80010f8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80010c2:	490e      	ldr	r1, [pc, #56]	; (80010fc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80010c4:	4a0e      	ldr	r2, [pc, #56]	; (8001100 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80010c6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80010c8:	e002      	b.n	80010d0 <LoopCopyDataInit>

080010ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80010ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80010cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80010ce:	3304      	adds	r3, #4

080010d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80010d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80010d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80010d4:	d3f9      	bcc.n	80010ca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80010d6:	4a0b      	ldr	r2, [pc, #44]	; (8001104 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80010d8:	4c0b      	ldr	r4, [pc, #44]	; (8001108 <LoopFillZerobss+0x26>)
  movs r3, #0
 80010da:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010dc:	e001      	b.n	80010e2 <LoopFillZerobss>

080010de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010e0:	3204      	adds	r2, #4

080010e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010e4:	d3fb      	bcc.n	80010de <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80010e6:	f7ff ffd7 	bl	8001098 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80010ea:	f006 fb05 	bl	80076f8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80010ee:	f7ff fa83 	bl	80005f8 <main>
  bx  lr    
 80010f2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80010f4:	20040000 	.word	0x20040000
  ldr r0, =_sdata
 80010f8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80010fc:	2000017c 	.word	0x2000017c
  ldr r2, =_sidata
 8001100:	080079e0 	.word	0x080079e0
  ldr r2, =_sbss
 8001104:	2000017c 	.word	0x2000017c
  ldr r4, =_ebss
 8001108:	20019a88 	.word	0x20019a88

0800110c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800110c:	e7fe      	b.n	800110c <ADC_IRQHandler>
	...

08001110 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	af00      	add	r7, sp, #0
  /* Configure Instruction cache through ART accelerator */ 
#if (ART_ACCLERATOR_ENABLE != 0)
  __HAL_FLASH_ART_ENABLE();
 8001114:	4b0b      	ldr	r3, [pc, #44]	; (8001144 <HAL_Init+0x34>)
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	4a0a      	ldr	r2, [pc, #40]	; (8001144 <HAL_Init+0x34>)
 800111a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800111e:	6013      	str	r3, [r2, #0]
#endif /* ART_ACCLERATOR_ENABLE */

  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001120:	4b08      	ldr	r3, [pc, #32]	; (8001144 <HAL_Init+0x34>)
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	4a07      	ldr	r2, [pc, #28]	; (8001144 <HAL_Init+0x34>)
 8001126:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800112a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800112c:	2003      	movs	r0, #3
 800112e:	f000 f94f 	bl	80013d0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001132:	2000      	movs	r0, #0
 8001134:	f000 f808 	bl	8001148 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001138:	f7ff ff20 	bl	8000f7c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800113c:	2300      	movs	r3, #0
}
 800113e:	4618      	mov	r0, r3
 8001140:	bd80      	pop	{r7, pc}
 8001142:	bf00      	nop
 8001144:	40023c00 	.word	0x40023c00

08001148 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	b082      	sub	sp, #8
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001150:	4b12      	ldr	r3, [pc, #72]	; (800119c <HAL_InitTick+0x54>)
 8001152:	681a      	ldr	r2, [r3, #0]
 8001154:	4b12      	ldr	r3, [pc, #72]	; (80011a0 <HAL_InitTick+0x58>)
 8001156:	781b      	ldrb	r3, [r3, #0]
 8001158:	4619      	mov	r1, r3
 800115a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800115e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001162:	fbb2 f3f3 	udiv	r3, r2, r3
 8001166:	4618      	mov	r0, r3
 8001168:	f000 f967 	bl	800143a <HAL_SYSTICK_Config>
 800116c:	4603      	mov	r3, r0
 800116e:	2b00      	cmp	r3, #0
 8001170:	d001      	beq.n	8001176 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001172:	2301      	movs	r3, #1
 8001174:	e00e      	b.n	8001194 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	2b0f      	cmp	r3, #15
 800117a:	d80a      	bhi.n	8001192 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800117c:	2200      	movs	r2, #0
 800117e:	6879      	ldr	r1, [r7, #4]
 8001180:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001184:	f000 f92f 	bl	80013e6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001188:	4a06      	ldr	r2, [pc, #24]	; (80011a4 <HAL_InitTick+0x5c>)
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800118e:	2300      	movs	r3, #0
 8001190:	e000      	b.n	8001194 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001192:	2301      	movs	r3, #1
}
 8001194:	4618      	mov	r0, r3
 8001196:	3708      	adds	r7, #8
 8001198:	46bd      	mov	sp, r7
 800119a:	bd80      	pop	{r7, pc}
 800119c:	20000000 	.word	0x20000000
 80011a0:	20000008 	.word	0x20000008
 80011a4:	20000004 	.word	0x20000004

080011a8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011a8:	b480      	push	{r7}
 80011aa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80011ac:	4b06      	ldr	r3, [pc, #24]	; (80011c8 <HAL_IncTick+0x20>)
 80011ae:	781b      	ldrb	r3, [r3, #0]
 80011b0:	461a      	mov	r2, r3
 80011b2:	4b06      	ldr	r3, [pc, #24]	; (80011cc <HAL_IncTick+0x24>)
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	4413      	add	r3, r2
 80011b8:	4a04      	ldr	r2, [pc, #16]	; (80011cc <HAL_IncTick+0x24>)
 80011ba:	6013      	str	r3, [r2, #0]
}
 80011bc:	bf00      	nop
 80011be:	46bd      	mov	sp, r7
 80011c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c4:	4770      	bx	lr
 80011c6:	bf00      	nop
 80011c8:	20000008 	.word	0x20000008
 80011cc:	2001819c 	.word	0x2001819c

080011d0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011d0:	b480      	push	{r7}
 80011d2:	af00      	add	r7, sp, #0
  return uwTick;
 80011d4:	4b03      	ldr	r3, [pc, #12]	; (80011e4 <HAL_GetTick+0x14>)
 80011d6:	681b      	ldr	r3, [r3, #0]
}
 80011d8:	4618      	mov	r0, r3
 80011da:	46bd      	mov	sp, r7
 80011dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e0:	4770      	bx	lr
 80011e2:	bf00      	nop
 80011e4:	2001819c 	.word	0x2001819c

080011e8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b084      	sub	sp, #16
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80011f0:	f7ff ffee 	bl	80011d0 <HAL_GetTick>
 80011f4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80011fa:	68fb      	ldr	r3, [r7, #12]
 80011fc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001200:	d005      	beq.n	800120e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001202:	4b0a      	ldr	r3, [pc, #40]	; (800122c <HAL_Delay+0x44>)
 8001204:	781b      	ldrb	r3, [r3, #0]
 8001206:	461a      	mov	r2, r3
 8001208:	68fb      	ldr	r3, [r7, #12]
 800120a:	4413      	add	r3, r2
 800120c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800120e:	bf00      	nop
 8001210:	f7ff ffde 	bl	80011d0 <HAL_GetTick>
 8001214:	4602      	mov	r2, r0
 8001216:	68bb      	ldr	r3, [r7, #8]
 8001218:	1ad3      	subs	r3, r2, r3
 800121a:	68fa      	ldr	r2, [r7, #12]
 800121c:	429a      	cmp	r2, r3
 800121e:	d8f7      	bhi.n	8001210 <HAL_Delay+0x28>
  {
  }
}
 8001220:	bf00      	nop
 8001222:	bf00      	nop
 8001224:	3710      	adds	r7, #16
 8001226:	46bd      	mov	sp, r7
 8001228:	bd80      	pop	{r7, pc}
 800122a:	bf00      	nop
 800122c:	20000008 	.word	0x20000008

08001230 <__NVIC_SetPriorityGrouping>:
{
 8001230:	b480      	push	{r7}
 8001232:	b085      	sub	sp, #20
 8001234:	af00      	add	r7, sp, #0
 8001236:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	f003 0307 	and.w	r3, r3, #7
 800123e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001240:	4b0b      	ldr	r3, [pc, #44]	; (8001270 <__NVIC_SetPriorityGrouping+0x40>)
 8001242:	68db      	ldr	r3, [r3, #12]
 8001244:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001246:	68ba      	ldr	r2, [r7, #8]
 8001248:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800124c:	4013      	ands	r3, r2
 800124e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001250:	68fb      	ldr	r3, [r7, #12]
 8001252:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001254:	68bb      	ldr	r3, [r7, #8]
 8001256:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001258:	4b06      	ldr	r3, [pc, #24]	; (8001274 <__NVIC_SetPriorityGrouping+0x44>)
 800125a:	4313      	orrs	r3, r2
 800125c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800125e:	4a04      	ldr	r2, [pc, #16]	; (8001270 <__NVIC_SetPriorityGrouping+0x40>)
 8001260:	68bb      	ldr	r3, [r7, #8]
 8001262:	60d3      	str	r3, [r2, #12]
}
 8001264:	bf00      	nop
 8001266:	3714      	adds	r7, #20
 8001268:	46bd      	mov	sp, r7
 800126a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126e:	4770      	bx	lr
 8001270:	e000ed00 	.word	0xe000ed00
 8001274:	05fa0000 	.word	0x05fa0000

08001278 <__NVIC_GetPriorityGrouping>:
{
 8001278:	b480      	push	{r7}
 800127a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800127c:	4b04      	ldr	r3, [pc, #16]	; (8001290 <__NVIC_GetPriorityGrouping+0x18>)
 800127e:	68db      	ldr	r3, [r3, #12]
 8001280:	0a1b      	lsrs	r3, r3, #8
 8001282:	f003 0307 	and.w	r3, r3, #7
}
 8001286:	4618      	mov	r0, r3
 8001288:	46bd      	mov	sp, r7
 800128a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128e:	4770      	bx	lr
 8001290:	e000ed00 	.word	0xe000ed00

08001294 <__NVIC_EnableIRQ>:
{
 8001294:	b480      	push	{r7}
 8001296:	b083      	sub	sp, #12
 8001298:	af00      	add	r7, sp, #0
 800129a:	4603      	mov	r3, r0
 800129c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800129e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	db0b      	blt.n	80012be <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80012a6:	79fb      	ldrb	r3, [r7, #7]
 80012a8:	f003 021f 	and.w	r2, r3, #31
 80012ac:	4907      	ldr	r1, [pc, #28]	; (80012cc <__NVIC_EnableIRQ+0x38>)
 80012ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012b2:	095b      	lsrs	r3, r3, #5
 80012b4:	2001      	movs	r0, #1
 80012b6:	fa00 f202 	lsl.w	r2, r0, r2
 80012ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80012be:	bf00      	nop
 80012c0:	370c      	adds	r7, #12
 80012c2:	46bd      	mov	sp, r7
 80012c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c8:	4770      	bx	lr
 80012ca:	bf00      	nop
 80012cc:	e000e100 	.word	0xe000e100

080012d0 <__NVIC_SetPriority>:
{
 80012d0:	b480      	push	{r7}
 80012d2:	b083      	sub	sp, #12
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	4603      	mov	r3, r0
 80012d8:	6039      	str	r1, [r7, #0]
 80012da:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	db0a      	blt.n	80012fa <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012e4:	683b      	ldr	r3, [r7, #0]
 80012e6:	b2da      	uxtb	r2, r3
 80012e8:	490c      	ldr	r1, [pc, #48]	; (800131c <__NVIC_SetPriority+0x4c>)
 80012ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012ee:	0112      	lsls	r2, r2, #4
 80012f0:	b2d2      	uxtb	r2, r2
 80012f2:	440b      	add	r3, r1
 80012f4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80012f8:	e00a      	b.n	8001310 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012fa:	683b      	ldr	r3, [r7, #0]
 80012fc:	b2da      	uxtb	r2, r3
 80012fe:	4908      	ldr	r1, [pc, #32]	; (8001320 <__NVIC_SetPriority+0x50>)
 8001300:	79fb      	ldrb	r3, [r7, #7]
 8001302:	f003 030f 	and.w	r3, r3, #15
 8001306:	3b04      	subs	r3, #4
 8001308:	0112      	lsls	r2, r2, #4
 800130a:	b2d2      	uxtb	r2, r2
 800130c:	440b      	add	r3, r1
 800130e:	761a      	strb	r2, [r3, #24]
}
 8001310:	bf00      	nop
 8001312:	370c      	adds	r7, #12
 8001314:	46bd      	mov	sp, r7
 8001316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131a:	4770      	bx	lr
 800131c:	e000e100 	.word	0xe000e100
 8001320:	e000ed00 	.word	0xe000ed00

08001324 <NVIC_EncodePriority>:
{
 8001324:	b480      	push	{r7}
 8001326:	b089      	sub	sp, #36	; 0x24
 8001328:	af00      	add	r7, sp, #0
 800132a:	60f8      	str	r0, [r7, #12]
 800132c:	60b9      	str	r1, [r7, #8]
 800132e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001330:	68fb      	ldr	r3, [r7, #12]
 8001332:	f003 0307 	and.w	r3, r3, #7
 8001336:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001338:	69fb      	ldr	r3, [r7, #28]
 800133a:	f1c3 0307 	rsb	r3, r3, #7
 800133e:	2b04      	cmp	r3, #4
 8001340:	bf28      	it	cs
 8001342:	2304      	movcs	r3, #4
 8001344:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001346:	69fb      	ldr	r3, [r7, #28]
 8001348:	3304      	adds	r3, #4
 800134a:	2b06      	cmp	r3, #6
 800134c:	d902      	bls.n	8001354 <NVIC_EncodePriority+0x30>
 800134e:	69fb      	ldr	r3, [r7, #28]
 8001350:	3b03      	subs	r3, #3
 8001352:	e000      	b.n	8001356 <NVIC_EncodePriority+0x32>
 8001354:	2300      	movs	r3, #0
 8001356:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001358:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800135c:	69bb      	ldr	r3, [r7, #24]
 800135e:	fa02 f303 	lsl.w	r3, r2, r3
 8001362:	43da      	mvns	r2, r3
 8001364:	68bb      	ldr	r3, [r7, #8]
 8001366:	401a      	ands	r2, r3
 8001368:	697b      	ldr	r3, [r7, #20]
 800136a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800136c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001370:	697b      	ldr	r3, [r7, #20]
 8001372:	fa01 f303 	lsl.w	r3, r1, r3
 8001376:	43d9      	mvns	r1, r3
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800137c:	4313      	orrs	r3, r2
}
 800137e:	4618      	mov	r0, r3
 8001380:	3724      	adds	r7, #36	; 0x24
 8001382:	46bd      	mov	sp, r7
 8001384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001388:	4770      	bx	lr
	...

0800138c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	b082      	sub	sp, #8
 8001390:	af00      	add	r7, sp, #0
 8001392:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	3b01      	subs	r3, #1
 8001398:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800139c:	d301      	bcc.n	80013a2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800139e:	2301      	movs	r3, #1
 80013a0:	e00f      	b.n	80013c2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80013a2:	4a0a      	ldr	r2, [pc, #40]	; (80013cc <SysTick_Config+0x40>)
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	3b01      	subs	r3, #1
 80013a8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80013aa:	210f      	movs	r1, #15
 80013ac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80013b0:	f7ff ff8e 	bl	80012d0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80013b4:	4b05      	ldr	r3, [pc, #20]	; (80013cc <SysTick_Config+0x40>)
 80013b6:	2200      	movs	r2, #0
 80013b8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80013ba:	4b04      	ldr	r3, [pc, #16]	; (80013cc <SysTick_Config+0x40>)
 80013bc:	2207      	movs	r2, #7
 80013be:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80013c0:	2300      	movs	r3, #0
}
 80013c2:	4618      	mov	r0, r3
 80013c4:	3708      	adds	r7, #8
 80013c6:	46bd      	mov	sp, r7
 80013c8:	bd80      	pop	{r7, pc}
 80013ca:	bf00      	nop
 80013cc:	e000e010 	.word	0xe000e010

080013d0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b082      	sub	sp, #8
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80013d8:	6878      	ldr	r0, [r7, #4]
 80013da:	f7ff ff29 	bl	8001230 <__NVIC_SetPriorityGrouping>
}
 80013de:	bf00      	nop
 80013e0:	3708      	adds	r7, #8
 80013e2:	46bd      	mov	sp, r7
 80013e4:	bd80      	pop	{r7, pc}

080013e6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80013e6:	b580      	push	{r7, lr}
 80013e8:	b086      	sub	sp, #24
 80013ea:	af00      	add	r7, sp, #0
 80013ec:	4603      	mov	r3, r0
 80013ee:	60b9      	str	r1, [r7, #8]
 80013f0:	607a      	str	r2, [r7, #4]
 80013f2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80013f4:	2300      	movs	r3, #0
 80013f6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80013f8:	f7ff ff3e 	bl	8001278 <__NVIC_GetPriorityGrouping>
 80013fc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80013fe:	687a      	ldr	r2, [r7, #4]
 8001400:	68b9      	ldr	r1, [r7, #8]
 8001402:	6978      	ldr	r0, [r7, #20]
 8001404:	f7ff ff8e 	bl	8001324 <NVIC_EncodePriority>
 8001408:	4602      	mov	r2, r0
 800140a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800140e:	4611      	mov	r1, r2
 8001410:	4618      	mov	r0, r3
 8001412:	f7ff ff5d 	bl	80012d0 <__NVIC_SetPriority>
}
 8001416:	bf00      	nop
 8001418:	3718      	adds	r7, #24
 800141a:	46bd      	mov	sp, r7
 800141c:	bd80      	pop	{r7, pc}

0800141e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800141e:	b580      	push	{r7, lr}
 8001420:	b082      	sub	sp, #8
 8001422:	af00      	add	r7, sp, #0
 8001424:	4603      	mov	r3, r0
 8001426:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001428:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800142c:	4618      	mov	r0, r3
 800142e:	f7ff ff31 	bl	8001294 <__NVIC_EnableIRQ>
}
 8001432:	bf00      	nop
 8001434:	3708      	adds	r7, #8
 8001436:	46bd      	mov	sp, r7
 8001438:	bd80      	pop	{r7, pc}

0800143a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800143a:	b580      	push	{r7, lr}
 800143c:	b082      	sub	sp, #8
 800143e:	af00      	add	r7, sp, #0
 8001440:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001442:	6878      	ldr	r0, [r7, #4]
 8001444:	f7ff ffa2 	bl	800138c <SysTick_Config>
 8001448:	4603      	mov	r3, r0
}
 800144a:	4618      	mov	r0, r3
 800144c:	3708      	adds	r7, #8
 800144e:	46bd      	mov	sp, r7
 8001450:	bd80      	pop	{r7, pc}
	...

08001454 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001454:	b480      	push	{r7}
 8001456:	b089      	sub	sp, #36	; 0x24
 8001458:	af00      	add	r7, sp, #0
 800145a:	6078      	str	r0, [r7, #4]
 800145c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800145e:	2300      	movs	r3, #0
 8001460:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001462:	2300      	movs	r3, #0
 8001464:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001466:	2300      	movs	r3, #0
 8001468:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800146a:	2300      	movs	r3, #0
 800146c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800146e:	2300      	movs	r3, #0
 8001470:	61fb      	str	r3, [r7, #28]
 8001472:	e169      	b.n	8001748 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001474:	2201      	movs	r2, #1
 8001476:	69fb      	ldr	r3, [r7, #28]
 8001478:	fa02 f303 	lsl.w	r3, r2, r3
 800147c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800147e:	683b      	ldr	r3, [r7, #0]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	697a      	ldr	r2, [r7, #20]
 8001484:	4013      	ands	r3, r2
 8001486:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001488:	693a      	ldr	r2, [r7, #16]
 800148a:	697b      	ldr	r3, [r7, #20]
 800148c:	429a      	cmp	r2, r3
 800148e:	f040 8158 	bne.w	8001742 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001492:	683b      	ldr	r3, [r7, #0]
 8001494:	685b      	ldr	r3, [r3, #4]
 8001496:	f003 0303 	and.w	r3, r3, #3
 800149a:	2b01      	cmp	r3, #1
 800149c:	d005      	beq.n	80014aa <HAL_GPIO_Init+0x56>
 800149e:	683b      	ldr	r3, [r7, #0]
 80014a0:	685b      	ldr	r3, [r3, #4]
 80014a2:	f003 0303 	and.w	r3, r3, #3
 80014a6:	2b02      	cmp	r3, #2
 80014a8:	d130      	bne.n	800150c <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	689b      	ldr	r3, [r3, #8]
 80014ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80014b0:	69fb      	ldr	r3, [r7, #28]
 80014b2:	005b      	lsls	r3, r3, #1
 80014b4:	2203      	movs	r2, #3
 80014b6:	fa02 f303 	lsl.w	r3, r2, r3
 80014ba:	43db      	mvns	r3, r3
 80014bc:	69ba      	ldr	r2, [r7, #24]
 80014be:	4013      	ands	r3, r2
 80014c0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80014c2:	683b      	ldr	r3, [r7, #0]
 80014c4:	68da      	ldr	r2, [r3, #12]
 80014c6:	69fb      	ldr	r3, [r7, #28]
 80014c8:	005b      	lsls	r3, r3, #1
 80014ca:	fa02 f303 	lsl.w	r3, r2, r3
 80014ce:	69ba      	ldr	r2, [r7, #24]
 80014d0:	4313      	orrs	r3, r2
 80014d2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	69ba      	ldr	r2, [r7, #24]
 80014d8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	685b      	ldr	r3, [r3, #4]
 80014de:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80014e0:	2201      	movs	r2, #1
 80014e2:	69fb      	ldr	r3, [r7, #28]
 80014e4:	fa02 f303 	lsl.w	r3, r2, r3
 80014e8:	43db      	mvns	r3, r3
 80014ea:	69ba      	ldr	r2, [r7, #24]
 80014ec:	4013      	ands	r3, r2
 80014ee:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80014f0:	683b      	ldr	r3, [r7, #0]
 80014f2:	685b      	ldr	r3, [r3, #4]
 80014f4:	091b      	lsrs	r3, r3, #4
 80014f6:	f003 0201 	and.w	r2, r3, #1
 80014fa:	69fb      	ldr	r3, [r7, #28]
 80014fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001500:	69ba      	ldr	r2, [r7, #24]
 8001502:	4313      	orrs	r3, r2
 8001504:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	69ba      	ldr	r2, [r7, #24]
 800150a:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800150c:	683b      	ldr	r3, [r7, #0]
 800150e:	685b      	ldr	r3, [r3, #4]
 8001510:	f003 0303 	and.w	r3, r3, #3
 8001514:	2b03      	cmp	r3, #3
 8001516:	d017      	beq.n	8001548 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	68db      	ldr	r3, [r3, #12]
 800151c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800151e:	69fb      	ldr	r3, [r7, #28]
 8001520:	005b      	lsls	r3, r3, #1
 8001522:	2203      	movs	r2, #3
 8001524:	fa02 f303 	lsl.w	r3, r2, r3
 8001528:	43db      	mvns	r3, r3
 800152a:	69ba      	ldr	r2, [r7, #24]
 800152c:	4013      	ands	r3, r2
 800152e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8001530:	683b      	ldr	r3, [r7, #0]
 8001532:	689a      	ldr	r2, [r3, #8]
 8001534:	69fb      	ldr	r3, [r7, #28]
 8001536:	005b      	lsls	r3, r3, #1
 8001538:	fa02 f303 	lsl.w	r3, r2, r3
 800153c:	69ba      	ldr	r2, [r7, #24]
 800153e:	4313      	orrs	r3, r2
 8001540:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	69ba      	ldr	r2, [r7, #24]
 8001546:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001548:	683b      	ldr	r3, [r7, #0]
 800154a:	685b      	ldr	r3, [r3, #4]
 800154c:	f003 0303 	and.w	r3, r3, #3
 8001550:	2b02      	cmp	r3, #2
 8001552:	d123      	bne.n	800159c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001554:	69fb      	ldr	r3, [r7, #28]
 8001556:	08da      	lsrs	r2, r3, #3
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	3208      	adds	r2, #8
 800155c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001560:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001562:	69fb      	ldr	r3, [r7, #28]
 8001564:	f003 0307 	and.w	r3, r3, #7
 8001568:	009b      	lsls	r3, r3, #2
 800156a:	220f      	movs	r2, #15
 800156c:	fa02 f303 	lsl.w	r3, r2, r3
 8001570:	43db      	mvns	r3, r3
 8001572:	69ba      	ldr	r2, [r7, #24]
 8001574:	4013      	ands	r3, r2
 8001576:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001578:	683b      	ldr	r3, [r7, #0]
 800157a:	691a      	ldr	r2, [r3, #16]
 800157c:	69fb      	ldr	r3, [r7, #28]
 800157e:	f003 0307 	and.w	r3, r3, #7
 8001582:	009b      	lsls	r3, r3, #2
 8001584:	fa02 f303 	lsl.w	r3, r2, r3
 8001588:	69ba      	ldr	r2, [r7, #24]
 800158a:	4313      	orrs	r3, r2
 800158c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800158e:	69fb      	ldr	r3, [r7, #28]
 8001590:	08da      	lsrs	r2, r3, #3
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	3208      	adds	r2, #8
 8001596:	69b9      	ldr	r1, [r7, #24]
 8001598:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80015a2:	69fb      	ldr	r3, [r7, #28]
 80015a4:	005b      	lsls	r3, r3, #1
 80015a6:	2203      	movs	r2, #3
 80015a8:	fa02 f303 	lsl.w	r3, r2, r3
 80015ac:	43db      	mvns	r3, r3
 80015ae:	69ba      	ldr	r2, [r7, #24]
 80015b0:	4013      	ands	r3, r2
 80015b2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80015b4:	683b      	ldr	r3, [r7, #0]
 80015b6:	685b      	ldr	r3, [r3, #4]
 80015b8:	f003 0203 	and.w	r2, r3, #3
 80015bc:	69fb      	ldr	r3, [r7, #28]
 80015be:	005b      	lsls	r3, r3, #1
 80015c0:	fa02 f303 	lsl.w	r3, r2, r3
 80015c4:	69ba      	ldr	r2, [r7, #24]
 80015c6:	4313      	orrs	r3, r2
 80015c8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	69ba      	ldr	r2, [r7, #24]
 80015ce:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80015d0:	683b      	ldr	r3, [r7, #0]
 80015d2:	685b      	ldr	r3, [r3, #4]
 80015d4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80015d8:	2b00      	cmp	r3, #0
 80015da:	f000 80b2 	beq.w	8001742 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015de:	4b60      	ldr	r3, [pc, #384]	; (8001760 <HAL_GPIO_Init+0x30c>)
 80015e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015e2:	4a5f      	ldr	r2, [pc, #380]	; (8001760 <HAL_GPIO_Init+0x30c>)
 80015e4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80015e8:	6453      	str	r3, [r2, #68]	; 0x44
 80015ea:	4b5d      	ldr	r3, [pc, #372]	; (8001760 <HAL_GPIO_Init+0x30c>)
 80015ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80015f2:	60fb      	str	r3, [r7, #12]
 80015f4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80015f6:	4a5b      	ldr	r2, [pc, #364]	; (8001764 <HAL_GPIO_Init+0x310>)
 80015f8:	69fb      	ldr	r3, [r7, #28]
 80015fa:	089b      	lsrs	r3, r3, #2
 80015fc:	3302      	adds	r3, #2
 80015fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001602:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001604:	69fb      	ldr	r3, [r7, #28]
 8001606:	f003 0303 	and.w	r3, r3, #3
 800160a:	009b      	lsls	r3, r3, #2
 800160c:	220f      	movs	r2, #15
 800160e:	fa02 f303 	lsl.w	r3, r2, r3
 8001612:	43db      	mvns	r3, r3
 8001614:	69ba      	ldr	r2, [r7, #24]
 8001616:	4013      	ands	r3, r2
 8001618:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	4a52      	ldr	r2, [pc, #328]	; (8001768 <HAL_GPIO_Init+0x314>)
 800161e:	4293      	cmp	r3, r2
 8001620:	d02b      	beq.n	800167a <HAL_GPIO_Init+0x226>
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	4a51      	ldr	r2, [pc, #324]	; (800176c <HAL_GPIO_Init+0x318>)
 8001626:	4293      	cmp	r3, r2
 8001628:	d025      	beq.n	8001676 <HAL_GPIO_Init+0x222>
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	4a50      	ldr	r2, [pc, #320]	; (8001770 <HAL_GPIO_Init+0x31c>)
 800162e:	4293      	cmp	r3, r2
 8001630:	d01f      	beq.n	8001672 <HAL_GPIO_Init+0x21e>
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	4a4f      	ldr	r2, [pc, #316]	; (8001774 <HAL_GPIO_Init+0x320>)
 8001636:	4293      	cmp	r3, r2
 8001638:	d019      	beq.n	800166e <HAL_GPIO_Init+0x21a>
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	4a4e      	ldr	r2, [pc, #312]	; (8001778 <HAL_GPIO_Init+0x324>)
 800163e:	4293      	cmp	r3, r2
 8001640:	d013      	beq.n	800166a <HAL_GPIO_Init+0x216>
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	4a4d      	ldr	r2, [pc, #308]	; (800177c <HAL_GPIO_Init+0x328>)
 8001646:	4293      	cmp	r3, r2
 8001648:	d00d      	beq.n	8001666 <HAL_GPIO_Init+0x212>
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	4a4c      	ldr	r2, [pc, #304]	; (8001780 <HAL_GPIO_Init+0x32c>)
 800164e:	4293      	cmp	r3, r2
 8001650:	d007      	beq.n	8001662 <HAL_GPIO_Init+0x20e>
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	4a4b      	ldr	r2, [pc, #300]	; (8001784 <HAL_GPIO_Init+0x330>)
 8001656:	4293      	cmp	r3, r2
 8001658:	d101      	bne.n	800165e <HAL_GPIO_Init+0x20a>
 800165a:	2307      	movs	r3, #7
 800165c:	e00e      	b.n	800167c <HAL_GPIO_Init+0x228>
 800165e:	2308      	movs	r3, #8
 8001660:	e00c      	b.n	800167c <HAL_GPIO_Init+0x228>
 8001662:	2306      	movs	r3, #6
 8001664:	e00a      	b.n	800167c <HAL_GPIO_Init+0x228>
 8001666:	2305      	movs	r3, #5
 8001668:	e008      	b.n	800167c <HAL_GPIO_Init+0x228>
 800166a:	2304      	movs	r3, #4
 800166c:	e006      	b.n	800167c <HAL_GPIO_Init+0x228>
 800166e:	2303      	movs	r3, #3
 8001670:	e004      	b.n	800167c <HAL_GPIO_Init+0x228>
 8001672:	2302      	movs	r3, #2
 8001674:	e002      	b.n	800167c <HAL_GPIO_Init+0x228>
 8001676:	2301      	movs	r3, #1
 8001678:	e000      	b.n	800167c <HAL_GPIO_Init+0x228>
 800167a:	2300      	movs	r3, #0
 800167c:	69fa      	ldr	r2, [r7, #28]
 800167e:	f002 0203 	and.w	r2, r2, #3
 8001682:	0092      	lsls	r2, r2, #2
 8001684:	4093      	lsls	r3, r2
 8001686:	69ba      	ldr	r2, [r7, #24]
 8001688:	4313      	orrs	r3, r2
 800168a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 800168c:	4935      	ldr	r1, [pc, #212]	; (8001764 <HAL_GPIO_Init+0x310>)
 800168e:	69fb      	ldr	r3, [r7, #28]
 8001690:	089b      	lsrs	r3, r3, #2
 8001692:	3302      	adds	r3, #2
 8001694:	69ba      	ldr	r2, [r7, #24]
 8001696:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800169a:	4b3b      	ldr	r3, [pc, #236]	; (8001788 <HAL_GPIO_Init+0x334>)
 800169c:	689b      	ldr	r3, [r3, #8]
 800169e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016a0:	693b      	ldr	r3, [r7, #16]
 80016a2:	43db      	mvns	r3, r3
 80016a4:	69ba      	ldr	r2, [r7, #24]
 80016a6:	4013      	ands	r3, r2
 80016a8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80016aa:	683b      	ldr	r3, [r7, #0]
 80016ac:	685b      	ldr	r3, [r3, #4]
 80016ae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d003      	beq.n	80016be <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80016b6:	69ba      	ldr	r2, [r7, #24]
 80016b8:	693b      	ldr	r3, [r7, #16]
 80016ba:	4313      	orrs	r3, r2
 80016bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80016be:	4a32      	ldr	r2, [pc, #200]	; (8001788 <HAL_GPIO_Init+0x334>)
 80016c0:	69bb      	ldr	r3, [r7, #24]
 80016c2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80016c4:	4b30      	ldr	r3, [pc, #192]	; (8001788 <HAL_GPIO_Init+0x334>)
 80016c6:	68db      	ldr	r3, [r3, #12]
 80016c8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016ca:	693b      	ldr	r3, [r7, #16]
 80016cc:	43db      	mvns	r3, r3
 80016ce:	69ba      	ldr	r2, [r7, #24]
 80016d0:	4013      	ands	r3, r2
 80016d2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80016d4:	683b      	ldr	r3, [r7, #0]
 80016d6:	685b      	ldr	r3, [r3, #4]
 80016d8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d003      	beq.n	80016e8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80016e0:	69ba      	ldr	r2, [r7, #24]
 80016e2:	693b      	ldr	r3, [r7, #16]
 80016e4:	4313      	orrs	r3, r2
 80016e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80016e8:	4a27      	ldr	r2, [pc, #156]	; (8001788 <HAL_GPIO_Init+0x334>)
 80016ea:	69bb      	ldr	r3, [r7, #24]
 80016ec:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80016ee:	4b26      	ldr	r3, [pc, #152]	; (8001788 <HAL_GPIO_Init+0x334>)
 80016f0:	685b      	ldr	r3, [r3, #4]
 80016f2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016f4:	693b      	ldr	r3, [r7, #16]
 80016f6:	43db      	mvns	r3, r3
 80016f8:	69ba      	ldr	r2, [r7, #24]
 80016fa:	4013      	ands	r3, r2
 80016fc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80016fe:	683b      	ldr	r3, [r7, #0]
 8001700:	685b      	ldr	r3, [r3, #4]
 8001702:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001706:	2b00      	cmp	r3, #0
 8001708:	d003      	beq.n	8001712 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800170a:	69ba      	ldr	r2, [r7, #24]
 800170c:	693b      	ldr	r3, [r7, #16]
 800170e:	4313      	orrs	r3, r2
 8001710:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001712:	4a1d      	ldr	r2, [pc, #116]	; (8001788 <HAL_GPIO_Init+0x334>)
 8001714:	69bb      	ldr	r3, [r7, #24]
 8001716:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001718:	4b1b      	ldr	r3, [pc, #108]	; (8001788 <HAL_GPIO_Init+0x334>)
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800171e:	693b      	ldr	r3, [r7, #16]
 8001720:	43db      	mvns	r3, r3
 8001722:	69ba      	ldr	r2, [r7, #24]
 8001724:	4013      	ands	r3, r2
 8001726:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001728:	683b      	ldr	r3, [r7, #0]
 800172a:	685b      	ldr	r3, [r3, #4]
 800172c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001730:	2b00      	cmp	r3, #0
 8001732:	d003      	beq.n	800173c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001734:	69ba      	ldr	r2, [r7, #24]
 8001736:	693b      	ldr	r3, [r7, #16]
 8001738:	4313      	orrs	r3, r2
 800173a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800173c:	4a12      	ldr	r2, [pc, #72]	; (8001788 <HAL_GPIO_Init+0x334>)
 800173e:	69bb      	ldr	r3, [r7, #24]
 8001740:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8001742:	69fb      	ldr	r3, [r7, #28]
 8001744:	3301      	adds	r3, #1
 8001746:	61fb      	str	r3, [r7, #28]
 8001748:	69fb      	ldr	r3, [r7, #28]
 800174a:	2b0f      	cmp	r3, #15
 800174c:	f67f ae92 	bls.w	8001474 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001750:	bf00      	nop
 8001752:	bf00      	nop
 8001754:	3724      	adds	r7, #36	; 0x24
 8001756:	46bd      	mov	sp, r7
 8001758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175c:	4770      	bx	lr
 800175e:	bf00      	nop
 8001760:	40023800 	.word	0x40023800
 8001764:	40013800 	.word	0x40013800
 8001768:	40020000 	.word	0x40020000
 800176c:	40020400 	.word	0x40020400
 8001770:	40020800 	.word	0x40020800
 8001774:	40020c00 	.word	0x40020c00
 8001778:	40021000 	.word	0x40021000
 800177c:	40021400 	.word	0x40021400
 8001780:	40021800 	.word	0x40021800
 8001784:	40021c00 	.word	0x40021c00
 8001788:	40013c00 	.word	0x40013c00

0800178c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800178c:	b480      	push	{r7}
 800178e:	b083      	sub	sp, #12
 8001790:	af00      	add	r7, sp, #0
 8001792:	6078      	str	r0, [r7, #4]
 8001794:	460b      	mov	r3, r1
 8001796:	807b      	strh	r3, [r7, #2]
 8001798:	4613      	mov	r3, r2
 800179a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800179c:	787b      	ldrb	r3, [r7, #1]
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d003      	beq.n	80017aa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80017a2:	887a      	ldrh	r2, [r7, #2]
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80017a8:	e003      	b.n	80017b2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80017aa:	887b      	ldrh	r3, [r7, #2]
 80017ac:	041a      	lsls	r2, r3, #16
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	619a      	str	r2, [r3, #24]
}
 80017b2:	bf00      	nop
 80017b4:	370c      	adds	r7, #12
 80017b6:	46bd      	mov	sp, r7
 80017b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017bc:	4770      	bx	lr

080017be <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80017be:	b5f0      	push	{r4, r5, r6, r7, lr}
 80017c0:	b08f      	sub	sp, #60	; 0x3c
 80017c2:	af0a      	add	r7, sp, #40	; 0x28
 80017c4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d101      	bne.n	80017d0 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80017cc:	2301      	movs	r3, #1
 80017ce:	e116      	b.n	80019fe <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 80017dc:	b2db      	uxtb	r3, r3
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d106      	bne.n	80017f0 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	2200      	movs	r2, #0
 80017e6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80017ea:	6878      	ldr	r0, [r7, #4]
 80017ec:	f005 fc18 	bl	8007020 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	2203      	movs	r2, #3
 80017f4:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80017f8:	68bb      	ldr	r3, [r7, #8]
 80017fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80017fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001800:	2b00      	cmp	r3, #0
 8001802:	d102      	bne.n	800180a <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	2200      	movs	r2, #0
 8001808:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	4618      	mov	r0, r3
 8001810:	f002 fad9 	bl	8003dc6 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	603b      	str	r3, [r7, #0]
 800181a:	687e      	ldr	r6, [r7, #4]
 800181c:	466d      	mov	r5, sp
 800181e:	f106 0410 	add.w	r4, r6, #16
 8001822:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001824:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001826:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001828:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800182a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800182e:	e885 0003 	stmia.w	r5, {r0, r1}
 8001832:	1d33      	adds	r3, r6, #4
 8001834:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001836:	6838      	ldr	r0, [r7, #0]
 8001838:	f002 f97c 	bl	8003b34 <USB_CoreInit>
 800183c:	4603      	mov	r3, r0
 800183e:	2b00      	cmp	r3, #0
 8001840:	d005      	beq.n	800184e <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	2202      	movs	r2, #2
 8001846:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800184a:	2301      	movs	r3, #1
 800184c:	e0d7      	b.n	80019fe <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	2100      	movs	r1, #0
 8001854:	4618      	mov	r0, r3
 8001856:	f002 fac7 	bl	8003de8 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800185a:	2300      	movs	r3, #0
 800185c:	73fb      	strb	r3, [r7, #15]
 800185e:	e04a      	b.n	80018f6 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001860:	7bfa      	ldrb	r2, [r7, #15]
 8001862:	6879      	ldr	r1, [r7, #4]
 8001864:	4613      	mov	r3, r2
 8001866:	00db      	lsls	r3, r3, #3
 8001868:	1a9b      	subs	r3, r3, r2
 800186a:	009b      	lsls	r3, r3, #2
 800186c:	440b      	add	r3, r1
 800186e:	333d      	adds	r3, #61	; 0x3d
 8001870:	2201      	movs	r2, #1
 8001872:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001874:	7bfa      	ldrb	r2, [r7, #15]
 8001876:	6879      	ldr	r1, [r7, #4]
 8001878:	4613      	mov	r3, r2
 800187a:	00db      	lsls	r3, r3, #3
 800187c:	1a9b      	subs	r3, r3, r2
 800187e:	009b      	lsls	r3, r3, #2
 8001880:	440b      	add	r3, r1
 8001882:	333c      	adds	r3, #60	; 0x3c
 8001884:	7bfa      	ldrb	r2, [r7, #15]
 8001886:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001888:	7bfa      	ldrb	r2, [r7, #15]
 800188a:	7bfb      	ldrb	r3, [r7, #15]
 800188c:	b298      	uxth	r0, r3
 800188e:	6879      	ldr	r1, [r7, #4]
 8001890:	4613      	mov	r3, r2
 8001892:	00db      	lsls	r3, r3, #3
 8001894:	1a9b      	subs	r3, r3, r2
 8001896:	009b      	lsls	r3, r3, #2
 8001898:	440b      	add	r3, r1
 800189a:	3342      	adds	r3, #66	; 0x42
 800189c:	4602      	mov	r2, r0
 800189e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80018a0:	7bfa      	ldrb	r2, [r7, #15]
 80018a2:	6879      	ldr	r1, [r7, #4]
 80018a4:	4613      	mov	r3, r2
 80018a6:	00db      	lsls	r3, r3, #3
 80018a8:	1a9b      	subs	r3, r3, r2
 80018aa:	009b      	lsls	r3, r3, #2
 80018ac:	440b      	add	r3, r1
 80018ae:	333f      	adds	r3, #63	; 0x3f
 80018b0:	2200      	movs	r2, #0
 80018b2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80018b4:	7bfa      	ldrb	r2, [r7, #15]
 80018b6:	6879      	ldr	r1, [r7, #4]
 80018b8:	4613      	mov	r3, r2
 80018ba:	00db      	lsls	r3, r3, #3
 80018bc:	1a9b      	subs	r3, r3, r2
 80018be:	009b      	lsls	r3, r3, #2
 80018c0:	440b      	add	r3, r1
 80018c2:	3344      	adds	r3, #68	; 0x44
 80018c4:	2200      	movs	r2, #0
 80018c6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80018c8:	7bfa      	ldrb	r2, [r7, #15]
 80018ca:	6879      	ldr	r1, [r7, #4]
 80018cc:	4613      	mov	r3, r2
 80018ce:	00db      	lsls	r3, r3, #3
 80018d0:	1a9b      	subs	r3, r3, r2
 80018d2:	009b      	lsls	r3, r3, #2
 80018d4:	440b      	add	r3, r1
 80018d6:	3348      	adds	r3, #72	; 0x48
 80018d8:	2200      	movs	r2, #0
 80018da:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80018dc:	7bfa      	ldrb	r2, [r7, #15]
 80018de:	6879      	ldr	r1, [r7, #4]
 80018e0:	4613      	mov	r3, r2
 80018e2:	00db      	lsls	r3, r3, #3
 80018e4:	1a9b      	subs	r3, r3, r2
 80018e6:	009b      	lsls	r3, r3, #2
 80018e8:	440b      	add	r3, r1
 80018ea:	3350      	adds	r3, #80	; 0x50
 80018ec:	2200      	movs	r2, #0
 80018ee:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80018f0:	7bfb      	ldrb	r3, [r7, #15]
 80018f2:	3301      	adds	r3, #1
 80018f4:	73fb      	strb	r3, [r7, #15]
 80018f6:	7bfa      	ldrb	r2, [r7, #15]
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	685b      	ldr	r3, [r3, #4]
 80018fc:	429a      	cmp	r2, r3
 80018fe:	d3af      	bcc.n	8001860 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001900:	2300      	movs	r3, #0
 8001902:	73fb      	strb	r3, [r7, #15]
 8001904:	e044      	b.n	8001990 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001906:	7bfa      	ldrb	r2, [r7, #15]
 8001908:	6879      	ldr	r1, [r7, #4]
 800190a:	4613      	mov	r3, r2
 800190c:	00db      	lsls	r3, r3, #3
 800190e:	1a9b      	subs	r3, r3, r2
 8001910:	009b      	lsls	r3, r3, #2
 8001912:	440b      	add	r3, r1
 8001914:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8001918:	2200      	movs	r2, #0
 800191a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800191c:	7bfa      	ldrb	r2, [r7, #15]
 800191e:	6879      	ldr	r1, [r7, #4]
 8001920:	4613      	mov	r3, r2
 8001922:	00db      	lsls	r3, r3, #3
 8001924:	1a9b      	subs	r3, r3, r2
 8001926:	009b      	lsls	r3, r3, #2
 8001928:	440b      	add	r3, r1
 800192a:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 800192e:	7bfa      	ldrb	r2, [r7, #15]
 8001930:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001932:	7bfa      	ldrb	r2, [r7, #15]
 8001934:	6879      	ldr	r1, [r7, #4]
 8001936:	4613      	mov	r3, r2
 8001938:	00db      	lsls	r3, r3, #3
 800193a:	1a9b      	subs	r3, r3, r2
 800193c:	009b      	lsls	r3, r3, #2
 800193e:	440b      	add	r3, r1
 8001940:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8001944:	2200      	movs	r2, #0
 8001946:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001948:	7bfa      	ldrb	r2, [r7, #15]
 800194a:	6879      	ldr	r1, [r7, #4]
 800194c:	4613      	mov	r3, r2
 800194e:	00db      	lsls	r3, r3, #3
 8001950:	1a9b      	subs	r3, r3, r2
 8001952:	009b      	lsls	r3, r3, #2
 8001954:	440b      	add	r3, r1
 8001956:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800195a:	2200      	movs	r2, #0
 800195c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800195e:	7bfa      	ldrb	r2, [r7, #15]
 8001960:	6879      	ldr	r1, [r7, #4]
 8001962:	4613      	mov	r3, r2
 8001964:	00db      	lsls	r3, r3, #3
 8001966:	1a9b      	subs	r3, r3, r2
 8001968:	009b      	lsls	r3, r3, #2
 800196a:	440b      	add	r3, r1
 800196c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001970:	2200      	movs	r2, #0
 8001972:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001974:	7bfa      	ldrb	r2, [r7, #15]
 8001976:	6879      	ldr	r1, [r7, #4]
 8001978:	4613      	mov	r3, r2
 800197a:	00db      	lsls	r3, r3, #3
 800197c:	1a9b      	subs	r3, r3, r2
 800197e:	009b      	lsls	r3, r3, #2
 8001980:	440b      	add	r3, r1
 8001982:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8001986:	2200      	movs	r2, #0
 8001988:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800198a:	7bfb      	ldrb	r3, [r7, #15]
 800198c:	3301      	adds	r3, #1
 800198e:	73fb      	strb	r3, [r7, #15]
 8001990:	7bfa      	ldrb	r2, [r7, #15]
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	685b      	ldr	r3, [r3, #4]
 8001996:	429a      	cmp	r2, r3
 8001998:	d3b5      	bcc.n	8001906 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	603b      	str	r3, [r7, #0]
 80019a0:	687e      	ldr	r6, [r7, #4]
 80019a2:	466d      	mov	r5, sp
 80019a4:	f106 0410 	add.w	r4, r6, #16
 80019a8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80019aa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80019ac:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80019ae:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80019b0:	e894 0003 	ldmia.w	r4, {r0, r1}
 80019b4:	e885 0003 	stmia.w	r5, {r0, r1}
 80019b8:	1d33      	adds	r3, r6, #4
 80019ba:	cb0e      	ldmia	r3, {r1, r2, r3}
 80019bc:	6838      	ldr	r0, [r7, #0]
 80019be:	f002 fa5f 	bl	8003e80 <USB_DevInit>
 80019c2:	4603      	mov	r3, r0
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d005      	beq.n	80019d4 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	2202      	movs	r2, #2
 80019cc:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80019d0:	2301      	movs	r3, #1
 80019d2:	e014      	b.n	80019fe <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	2200      	movs	r2, #0
 80019d8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	2201      	movs	r2, #1
 80019e0:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019e8:	2b01      	cmp	r3, #1
 80019ea:	d102      	bne.n	80019f2 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80019ec:	6878      	ldr	r0, [r7, #4]
 80019ee:	f001 f871 	bl	8002ad4 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	4618      	mov	r0, r3
 80019f8:	f003 fb07 	bl	800500a <USB_DevDisconnect>

  return HAL_OK;
 80019fc:	2300      	movs	r3, #0
}
 80019fe:	4618      	mov	r0, r3
 8001a00:	3714      	adds	r7, #20
 8001a02:	46bd      	mov	sp, r7
 8001a04:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001a06 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001a06:	b580      	push	{r7, lr}
 8001a08:	b082      	sub	sp, #8
 8001a0a:	af00      	add	r7, sp, #0
 8001a0c:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001a14:	2b01      	cmp	r3, #1
 8001a16:	d101      	bne.n	8001a1c <HAL_PCD_Start+0x16>
 8001a18:	2302      	movs	r3, #2
 8001a1a:	e012      	b.n	8001a42 <HAL_PCD_Start+0x3c>
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	2201      	movs	r2, #1
 8001a20:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  __HAL_PCD_ENABLE(hpcd);
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	4618      	mov	r0, r3
 8001a2a:	f002 f9bb 	bl	8003da4 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	4618      	mov	r0, r3
 8001a34:	f003 fac8 	bl	8004fc8 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8001a40:	2300      	movs	r3, #0
}
 8001a42:	4618      	mov	r0, r3
 8001a44:	3708      	adds	r7, #8
 8001a46:	46bd      	mov	sp, r7
 8001a48:	bd80      	pop	{r7, pc}

08001a4a <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001a4a:	b590      	push	{r4, r7, lr}
 8001a4c:	b08d      	sub	sp, #52	; 0x34
 8001a4e:	af00      	add	r7, sp, #0
 8001a50:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001a58:	6a3b      	ldr	r3, [r7, #32]
 8001a5a:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t temp;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	4618      	mov	r0, r3
 8001a62:	f003 fb86 	bl	8005172 <USB_GetMode>
 8001a66:	4603      	mov	r3, r0
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	f040 83ba 	bne.w	80021e2 <HAL_PCD_IRQHandler+0x798>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	4618      	mov	r0, r3
 8001a74:	f003 faea 	bl	800504c <USB_ReadInterrupts>
 8001a78:	4603      	mov	r3, r0
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	f000 83b0 	beq.w	80021e0 <HAL_PCD_IRQHandler+0x796>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	4618      	mov	r0, r3
 8001a86:	f003 fae1 	bl	800504c <USB_ReadInterrupts>
 8001a8a:	4603      	mov	r3, r0
 8001a8c:	f003 0302 	and.w	r3, r3, #2
 8001a90:	2b02      	cmp	r3, #2
 8001a92:	d107      	bne.n	8001aa4 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	695a      	ldr	r2, [r3, #20]
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	f002 0202 	and.w	r2, r2, #2
 8001aa2:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	f003 facf 	bl	800504c <USB_ReadInterrupts>
 8001aae:	4603      	mov	r3, r0
 8001ab0:	f003 0310 	and.w	r3, r3, #16
 8001ab4:	2b10      	cmp	r3, #16
 8001ab6:	d161      	bne.n	8001b7c <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	699a      	ldr	r2, [r3, #24]
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	f022 0210 	bic.w	r2, r2, #16
 8001ac6:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8001ac8:	6a3b      	ldr	r3, [r7, #32]
 8001aca:	6a1b      	ldr	r3, [r3, #32]
 8001acc:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8001ace:	69bb      	ldr	r3, [r7, #24]
 8001ad0:	f003 020f 	and.w	r2, r3, #15
 8001ad4:	4613      	mov	r3, r2
 8001ad6:	00db      	lsls	r3, r3, #3
 8001ad8:	1a9b      	subs	r3, r3, r2
 8001ada:	009b      	lsls	r3, r3, #2
 8001adc:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001ae0:	687a      	ldr	r2, [r7, #4]
 8001ae2:	4413      	add	r3, r2
 8001ae4:	3304      	adds	r3, #4
 8001ae6:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8001ae8:	69bb      	ldr	r3, [r7, #24]
 8001aea:	0c5b      	lsrs	r3, r3, #17
 8001aec:	f003 030f 	and.w	r3, r3, #15
 8001af0:	2b02      	cmp	r3, #2
 8001af2:	d124      	bne.n	8001b3e <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8001af4:	69ba      	ldr	r2, [r7, #24]
 8001af6:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8001afa:	4013      	ands	r3, r2
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d035      	beq.n	8001b6c <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001b00:	697b      	ldr	r3, [r7, #20]
 8001b02:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8001b04:	69bb      	ldr	r3, [r7, #24]
 8001b06:	091b      	lsrs	r3, r3, #4
 8001b08:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001b0a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001b0e:	b29b      	uxth	r3, r3
 8001b10:	461a      	mov	r2, r3
 8001b12:	6a38      	ldr	r0, [r7, #32]
 8001b14:	f003 f906 	bl	8004d24 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001b18:	697b      	ldr	r3, [r7, #20]
 8001b1a:	68da      	ldr	r2, [r3, #12]
 8001b1c:	69bb      	ldr	r3, [r7, #24]
 8001b1e:	091b      	lsrs	r3, r3, #4
 8001b20:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001b24:	441a      	add	r2, r3
 8001b26:	697b      	ldr	r3, [r7, #20]
 8001b28:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001b2a:	697b      	ldr	r3, [r7, #20]
 8001b2c:	699a      	ldr	r2, [r3, #24]
 8001b2e:	69bb      	ldr	r3, [r7, #24]
 8001b30:	091b      	lsrs	r3, r3, #4
 8001b32:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001b36:	441a      	add	r2, r3
 8001b38:	697b      	ldr	r3, [r7, #20]
 8001b3a:	619a      	str	r2, [r3, #24]
 8001b3c:	e016      	b.n	8001b6c <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8001b3e:	69bb      	ldr	r3, [r7, #24]
 8001b40:	0c5b      	lsrs	r3, r3, #17
 8001b42:	f003 030f 	and.w	r3, r3, #15
 8001b46:	2b06      	cmp	r3, #6
 8001b48:	d110      	bne.n	8001b6c <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8001b50:	2208      	movs	r2, #8
 8001b52:	4619      	mov	r1, r3
 8001b54:	6a38      	ldr	r0, [r7, #32]
 8001b56:	f003 f8e5 	bl	8004d24 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001b5a:	697b      	ldr	r3, [r7, #20]
 8001b5c:	699a      	ldr	r2, [r3, #24]
 8001b5e:	69bb      	ldr	r3, [r7, #24]
 8001b60:	091b      	lsrs	r3, r3, #4
 8001b62:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001b66:	441a      	add	r2, r3
 8001b68:	697b      	ldr	r3, [r7, #20]
 8001b6a:	619a      	str	r2, [r3, #24]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	699a      	ldr	r2, [r3, #24]
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	f042 0210 	orr.w	r2, r2, #16
 8001b7a:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	4618      	mov	r0, r3
 8001b82:	f003 fa63 	bl	800504c <USB_ReadInterrupts>
 8001b86:	4603      	mov	r3, r0
 8001b88:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001b8c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8001b90:	d16e      	bne.n	8001c70 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8001b92:	2300      	movs	r3, #0
 8001b94:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	4618      	mov	r0, r3
 8001b9c:	f003 fa69 	bl	8005072 <USB_ReadDevAllOutEpInterrupt>
 8001ba0:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8001ba2:	e062      	b.n	8001c6a <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8001ba4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ba6:	f003 0301 	and.w	r3, r3, #1
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d057      	beq.n	8001c5e <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001bb4:	b2d2      	uxtb	r2, r2
 8001bb6:	4611      	mov	r1, r2
 8001bb8:	4618      	mov	r0, r3
 8001bba:	f003 fa8e 	bl	80050da <USB_ReadDevOutEPInterrupt>
 8001bbe:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8001bc0:	693b      	ldr	r3, [r7, #16]
 8001bc2:	f003 0301 	and.w	r3, r3, #1
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d00c      	beq.n	8001be4 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8001bca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bcc:	015a      	lsls	r2, r3, #5
 8001bce:	69fb      	ldr	r3, [r7, #28]
 8001bd0:	4413      	add	r3, r2
 8001bd2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001bd6:	461a      	mov	r2, r3
 8001bd8:	2301      	movs	r3, #1
 8001bda:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8001bdc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001bde:	6878      	ldr	r0, [r7, #4]
 8001be0:	f000 fdce 	bl	8002780 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8001be4:	693b      	ldr	r3, [r7, #16]
 8001be6:	f003 0308 	and.w	r3, r3, #8
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d00c      	beq.n	8001c08 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8001bee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bf0:	015a      	lsls	r2, r3, #5
 8001bf2:	69fb      	ldr	r3, [r7, #28]
 8001bf4:	4413      	add	r3, r2
 8001bf6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001bfa:	461a      	mov	r2, r3
 8001bfc:	2308      	movs	r3, #8
 8001bfe:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8001c00:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001c02:	6878      	ldr	r0, [r7, #4]
 8001c04:	f000 fec8 	bl	8002998 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8001c08:	693b      	ldr	r3, [r7, #16]
 8001c0a:	f003 0310 	and.w	r3, r3, #16
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d008      	beq.n	8001c24 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8001c12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c14:	015a      	lsls	r2, r3, #5
 8001c16:	69fb      	ldr	r3, [r7, #28]
 8001c18:	4413      	add	r3, r2
 8001c1a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001c1e:	461a      	mov	r2, r3
 8001c20:	2310      	movs	r3, #16
 8001c22:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8001c24:	693b      	ldr	r3, [r7, #16]
 8001c26:	f003 0320 	and.w	r3, r3, #32
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d008      	beq.n	8001c40 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001c2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c30:	015a      	lsls	r2, r3, #5
 8001c32:	69fb      	ldr	r3, [r7, #28]
 8001c34:	4413      	add	r3, r2
 8001c36:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001c3a:	461a      	mov	r2, r3
 8001c3c:	2320      	movs	r3, #32
 8001c3e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8001c40:	693b      	ldr	r3, [r7, #16]
 8001c42:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d009      	beq.n	8001c5e <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8001c4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c4c:	015a      	lsls	r2, r3, #5
 8001c4e:	69fb      	ldr	r3, [r7, #28]
 8001c50:	4413      	add	r3, r2
 8001c52:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001c56:	461a      	mov	r2, r3
 8001c58:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001c5c:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8001c5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c60:	3301      	adds	r3, #1
 8001c62:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001c64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c66:	085b      	lsrs	r3, r3, #1
 8001c68:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001c6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d199      	bne.n	8001ba4 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	4618      	mov	r0, r3
 8001c76:	f003 f9e9 	bl	800504c <USB_ReadInterrupts>
 8001c7a:	4603      	mov	r3, r0
 8001c7c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001c80:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001c84:	f040 80c0 	bne.w	8001e08 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	4618      	mov	r0, r3
 8001c8e:	f003 fa0a 	bl	80050a6 <USB_ReadDevAllInEpInterrupt>
 8001c92:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8001c94:	2300      	movs	r3, #0
 8001c96:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8001c98:	e0b2      	b.n	8001e00 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8001c9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c9c:	f003 0301 	and.w	r3, r3, #1
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	f000 80a7 	beq.w	8001df4 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001cac:	b2d2      	uxtb	r2, r2
 8001cae:	4611      	mov	r1, r2
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	f003 fa30 	bl	8005116 <USB_ReadDevInEPInterrupt>
 8001cb6:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8001cb8:	693b      	ldr	r3, [r7, #16]
 8001cba:	f003 0301 	and.w	r3, r3, #1
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d057      	beq.n	8001d72 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001cc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cc4:	f003 030f 	and.w	r3, r3, #15
 8001cc8:	2201      	movs	r2, #1
 8001cca:	fa02 f303 	lsl.w	r3, r2, r3
 8001cce:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001cd0:	69fb      	ldr	r3, [r7, #28]
 8001cd2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001cd6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	43db      	mvns	r3, r3
 8001cdc:	69f9      	ldr	r1, [r7, #28]
 8001cde:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8001ce2:	4013      	ands	r3, r2
 8001ce4:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8001ce6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ce8:	015a      	lsls	r2, r3, #5
 8001cea:	69fb      	ldr	r3, [r7, #28]
 8001cec:	4413      	add	r3, r2
 8001cee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001cf2:	461a      	mov	r2, r3
 8001cf4:	2301      	movs	r3, #1
 8001cf6:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	691b      	ldr	r3, [r3, #16]
 8001cfc:	2b01      	cmp	r3, #1
 8001cfe:	d132      	bne.n	8001d66 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8001d00:	6879      	ldr	r1, [r7, #4]
 8001d02:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d04:	4613      	mov	r3, r2
 8001d06:	00db      	lsls	r3, r3, #3
 8001d08:	1a9b      	subs	r3, r3, r2
 8001d0a:	009b      	lsls	r3, r3, #2
 8001d0c:	440b      	add	r3, r1
 8001d0e:	3348      	adds	r3, #72	; 0x48
 8001d10:	6819      	ldr	r1, [r3, #0]
 8001d12:	6878      	ldr	r0, [r7, #4]
 8001d14:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d16:	4613      	mov	r3, r2
 8001d18:	00db      	lsls	r3, r3, #3
 8001d1a:	1a9b      	subs	r3, r3, r2
 8001d1c:	009b      	lsls	r3, r3, #2
 8001d1e:	4403      	add	r3, r0
 8001d20:	3344      	adds	r3, #68	; 0x44
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	4419      	add	r1, r3
 8001d26:	6878      	ldr	r0, [r7, #4]
 8001d28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d2a:	4613      	mov	r3, r2
 8001d2c:	00db      	lsls	r3, r3, #3
 8001d2e:	1a9b      	subs	r3, r3, r2
 8001d30:	009b      	lsls	r3, r3, #2
 8001d32:	4403      	add	r3, r0
 8001d34:	3348      	adds	r3, #72	; 0x48
 8001d36:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8001d38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d113      	bne.n	8001d66 <HAL_PCD_IRQHandler+0x31c>
 8001d3e:	6879      	ldr	r1, [r7, #4]
 8001d40:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d42:	4613      	mov	r3, r2
 8001d44:	00db      	lsls	r3, r3, #3
 8001d46:	1a9b      	subs	r3, r3, r2
 8001d48:	009b      	lsls	r3, r3, #2
 8001d4a:	440b      	add	r3, r1
 8001d4c:	3350      	adds	r3, #80	; 0x50
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d108      	bne.n	8001d66 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	6818      	ldr	r0, [r3, #0]
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8001d5e:	461a      	mov	r2, r3
 8001d60:	2101      	movs	r1, #1
 8001d62:	f003 fa39 	bl	80051d8 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8001d66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d68:	b2db      	uxtb	r3, r3
 8001d6a:	4619      	mov	r1, r3
 8001d6c:	6878      	ldr	r0, [r7, #4]
 8001d6e:	f005 f9ec 	bl	800714a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8001d72:	693b      	ldr	r3, [r7, #16]
 8001d74:	f003 0308 	and.w	r3, r3, #8
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d008      	beq.n	8001d8e <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8001d7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d7e:	015a      	lsls	r2, r3, #5
 8001d80:	69fb      	ldr	r3, [r7, #28]
 8001d82:	4413      	add	r3, r2
 8001d84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001d88:	461a      	mov	r2, r3
 8001d8a:	2308      	movs	r3, #8
 8001d8c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8001d8e:	693b      	ldr	r3, [r7, #16]
 8001d90:	f003 0310 	and.w	r3, r3, #16
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d008      	beq.n	8001daa <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8001d98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d9a:	015a      	lsls	r2, r3, #5
 8001d9c:	69fb      	ldr	r3, [r7, #28]
 8001d9e:	4413      	add	r3, r2
 8001da0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001da4:	461a      	mov	r2, r3
 8001da6:	2310      	movs	r3, #16
 8001da8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8001daa:	693b      	ldr	r3, [r7, #16]
 8001dac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d008      	beq.n	8001dc6 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8001db4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001db6:	015a      	lsls	r2, r3, #5
 8001db8:	69fb      	ldr	r3, [r7, #28]
 8001dba:	4413      	add	r3, r2
 8001dbc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001dc0:	461a      	mov	r2, r3
 8001dc2:	2340      	movs	r3, #64	; 0x40
 8001dc4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8001dc6:	693b      	ldr	r3, [r7, #16]
 8001dc8:	f003 0302 	and.w	r3, r3, #2
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d008      	beq.n	8001de2 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8001dd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dd2:	015a      	lsls	r2, r3, #5
 8001dd4:	69fb      	ldr	r3, [r7, #28]
 8001dd6:	4413      	add	r3, r2
 8001dd8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001ddc:	461a      	mov	r2, r3
 8001dde:	2302      	movs	r3, #2
 8001de0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8001de2:	693b      	ldr	r3, [r7, #16]
 8001de4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d003      	beq.n	8001df4 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8001dec:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001dee:	6878      	ldr	r0, [r7, #4]
 8001df0:	f000 fc38 	bl	8002664 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8001df4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001df6:	3301      	adds	r3, #1
 8001df8:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001dfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001dfc:	085b      	lsrs	r3, r3, #1
 8001dfe:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001e00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	f47f af49 	bne.w	8001c9a <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	4618      	mov	r0, r3
 8001e0e:	f003 f91d 	bl	800504c <USB_ReadInterrupts>
 8001e12:	4603      	mov	r3, r0
 8001e14:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001e18:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001e1c:	d122      	bne.n	8001e64 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001e1e:	69fb      	ldr	r3, [r7, #28]
 8001e20:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001e24:	685b      	ldr	r3, [r3, #4]
 8001e26:	69fa      	ldr	r2, [r7, #28]
 8001e28:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001e2c:	f023 0301 	bic.w	r3, r3, #1
 8001e30:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8001e38:	2b01      	cmp	r3, #1
 8001e3a:	d108      	bne.n	8001e4e <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	2200      	movs	r2, #0
 8001e40:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001e44:	2100      	movs	r1, #0
 8001e46:	6878      	ldr	r0, [r7, #4]
 8001e48:	f005 fbd0 	bl	80075ec <HAL_PCDEx_LPM_Callback>
 8001e4c:	e002      	b.n	8001e54 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8001e4e:	6878      	ldr	r0, [r7, #4]
 8001e50:	f005 f9f2 	bl	8007238 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	695a      	ldr	r2, [r3, #20]
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8001e62:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	4618      	mov	r0, r3
 8001e6a:	f003 f8ef 	bl	800504c <USB_ReadInterrupts>
 8001e6e:	4603      	mov	r3, r0
 8001e70:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001e74:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001e78:	d112      	bne.n	8001ea0 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8001e7a:	69fb      	ldr	r3, [r7, #28]
 8001e7c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001e80:	689b      	ldr	r3, [r3, #8]
 8001e82:	f003 0301 	and.w	r3, r3, #1
 8001e86:	2b01      	cmp	r3, #1
 8001e88:	d102      	bne.n	8001e90 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8001e8a:	6878      	ldr	r0, [r7, #4]
 8001e8c:	f005 f9ae 	bl	80071ec <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	695a      	ldr	r2, [r3, #20]
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8001e9e:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	4618      	mov	r0, r3
 8001ea6:	f003 f8d1 	bl	800504c <USB_ReadInterrupts>
 8001eaa:	4603      	mov	r3, r0
 8001eac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001eb0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001eb4:	d121      	bne.n	8001efa <HAL_PCD_IRQHandler+0x4b0>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	695a      	ldr	r2, [r3, #20]
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8001ec4:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d111      	bne.n	8001ef4 <HAL_PCD_IRQHandler+0x4aa>
      {
        hpcd->LPM_State = LPM_L1;
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	2201      	movs	r2, #1
 8001ed4:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ede:	089b      	lsrs	r3, r3, #2
 8001ee0:	f003 020f 	and.w	r2, r3, #15
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8001eea:	2101      	movs	r1, #1
 8001eec:	6878      	ldr	r0, [r7, #4]
 8001eee:	f005 fb7d 	bl	80075ec <HAL_PCDEx_LPM_Callback>
 8001ef2:	e002      	b.n	8001efa <HAL_PCD_IRQHandler+0x4b0>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8001ef4:	6878      	ldr	r0, [r7, #4]
 8001ef6:	f005 f979 	bl	80071ec <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	4618      	mov	r0, r3
 8001f00:	f003 f8a4 	bl	800504c <USB_ReadInterrupts>
 8001f04:	4603      	mov	r3, r0
 8001f06:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001f0a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001f0e:	f040 80b7 	bne.w	8002080 <HAL_PCD_IRQHandler+0x636>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001f12:	69fb      	ldr	r3, [r7, #28]
 8001f14:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001f18:	685b      	ldr	r3, [r3, #4]
 8001f1a:	69fa      	ldr	r2, [r7, #28]
 8001f1c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001f20:	f023 0301 	bic.w	r3, r3, #1
 8001f24:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	2110      	movs	r1, #16
 8001f2c:	4618      	mov	r0, r3
 8001f2e:	f002 f915 	bl	800415c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001f32:	2300      	movs	r3, #0
 8001f34:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001f36:	e046      	b.n	8001fc6 <HAL_PCD_IRQHandler+0x57c>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8001f38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f3a:	015a      	lsls	r2, r3, #5
 8001f3c:	69fb      	ldr	r3, [r7, #28]
 8001f3e:	4413      	add	r3, r2
 8001f40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001f44:	461a      	mov	r2, r3
 8001f46:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001f4a:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8001f4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f4e:	015a      	lsls	r2, r3, #5
 8001f50:	69fb      	ldr	r3, [r7, #28]
 8001f52:	4413      	add	r3, r2
 8001f54:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001f5c:	0151      	lsls	r1, r2, #5
 8001f5e:	69fa      	ldr	r2, [r7, #28]
 8001f60:	440a      	add	r2, r1
 8001f62:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8001f66:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001f6a:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8001f6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f6e:	015a      	lsls	r2, r3, #5
 8001f70:	69fb      	ldr	r3, [r7, #28]
 8001f72:	4413      	add	r3, r2
 8001f74:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001f78:	461a      	mov	r2, r3
 8001f7a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001f7e:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8001f80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f82:	015a      	lsls	r2, r3, #5
 8001f84:	69fb      	ldr	r3, [r7, #28]
 8001f86:	4413      	add	r3, r2
 8001f88:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001f90:	0151      	lsls	r1, r2, #5
 8001f92:	69fa      	ldr	r2, [r7, #28]
 8001f94:	440a      	add	r2, r1
 8001f96:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001f9a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001f9e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8001fa0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001fa2:	015a      	lsls	r2, r3, #5
 8001fa4:	69fb      	ldr	r3, [r7, #28]
 8001fa6:	4413      	add	r3, r2
 8001fa8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001fb0:	0151      	lsls	r1, r2, #5
 8001fb2:	69fa      	ldr	r2, [r7, #28]
 8001fb4:	440a      	add	r2, r1
 8001fb6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001fba:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001fbe:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001fc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001fc2:	3301      	adds	r3, #1
 8001fc4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	685b      	ldr	r3, [r3, #4]
 8001fca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001fcc:	429a      	cmp	r2, r3
 8001fce:	d3b3      	bcc.n	8001f38 <HAL_PCD_IRQHandler+0x4ee>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8001fd0:	69fb      	ldr	r3, [r7, #28]
 8001fd2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001fd6:	69db      	ldr	r3, [r3, #28]
 8001fd8:	69fa      	ldr	r2, [r7, #28]
 8001fda:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001fde:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8001fe2:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d016      	beq.n	800201a <HAL_PCD_IRQHandler+0x5d0>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8001fec:	69fb      	ldr	r3, [r7, #28]
 8001fee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001ff2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001ff6:	69fa      	ldr	r2, [r7, #28]
 8001ff8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001ffc:	f043 030b 	orr.w	r3, r3, #11
 8002000:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002004:	69fb      	ldr	r3, [r7, #28]
 8002006:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800200a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800200c:	69fa      	ldr	r2, [r7, #28]
 800200e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002012:	f043 030b 	orr.w	r3, r3, #11
 8002016:	6453      	str	r3, [r2, #68]	; 0x44
 8002018:	e015      	b.n	8002046 <HAL_PCD_IRQHandler+0x5fc>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800201a:	69fb      	ldr	r3, [r7, #28]
 800201c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002020:	695a      	ldr	r2, [r3, #20]
 8002022:	69fb      	ldr	r3, [r7, #28]
 8002024:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002028:	4619      	mov	r1, r3
 800202a:	f242 032b 	movw	r3, #8235	; 0x202b
 800202e:	4313      	orrs	r3, r2
 8002030:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002032:	69fb      	ldr	r3, [r7, #28]
 8002034:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002038:	691b      	ldr	r3, [r3, #16]
 800203a:	69fa      	ldr	r2, [r7, #28]
 800203c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002040:	f043 030b 	orr.w	r3, r3, #11
 8002044:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002046:	69fb      	ldr	r3, [r7, #28]
 8002048:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	69fa      	ldr	r2, [r7, #28]
 8002050:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002054:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8002058:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	6818      	ldr	r0, [r3, #0]
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	691b      	ldr	r3, [r3, #16]
 8002062:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800206a:	461a      	mov	r2, r3
 800206c:	f003 f8b4 	bl	80051d8 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	695a      	ldr	r2, [r3, #20]
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800207e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	4618      	mov	r0, r3
 8002086:	f002 ffe1 	bl	800504c <USB_ReadInterrupts>
 800208a:	4603      	mov	r3, r0
 800208c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002090:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002094:	d124      	bne.n	80020e0 <HAL_PCD_IRQHandler+0x696>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	4618      	mov	r0, r3
 800209c:	f003 f878 	bl	8005190 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	4618      	mov	r0, r3
 80020a6:	f002 f8d2 	bl	800424e <USB_GetDevSpeed>
 80020aa:	4603      	mov	r3, r0
 80020ac:	461a      	mov	r2, r3
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681c      	ldr	r4, [r3, #0]
 80020b6:	f001 f9e7 	bl	8003488 <HAL_RCC_GetHCLKFreq>
 80020ba:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80020c0:	b2db      	uxtb	r3, r3
 80020c2:	461a      	mov	r2, r3
 80020c4:	4620      	mov	r0, r4
 80020c6:	f001 fdcb 	bl	8003c60 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80020ca:	6878      	ldr	r0, [r7, #4]
 80020cc:	f005 f865 	bl	800719a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	695a      	ldr	r2, [r3, #20]
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80020de:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	4618      	mov	r0, r3
 80020e6:	f002 ffb1 	bl	800504c <USB_ReadInterrupts>
 80020ea:	4603      	mov	r3, r0
 80020ec:	f003 0308 	and.w	r3, r3, #8
 80020f0:	2b08      	cmp	r3, #8
 80020f2:	d10a      	bne.n	800210a <HAL_PCD_IRQHandler+0x6c0>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80020f4:	6878      	ldr	r0, [r7, #4]
 80020f6:	f005 f842 	bl	800717e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	695a      	ldr	r2, [r3, #20]
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	f002 0208 	and.w	r2, r2, #8
 8002108:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	4618      	mov	r0, r3
 8002110:	f002 ff9c 	bl	800504c <USB_ReadInterrupts>
 8002114:	4603      	mov	r3, r0
 8002116:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800211a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800211e:	d10f      	bne.n	8002140 <HAL_PCD_IRQHandler+0x6f6>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8002120:	2300      	movs	r3, #0
 8002122:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002124:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002126:	b2db      	uxtb	r3, r3
 8002128:	4619      	mov	r1, r3
 800212a:	6878      	ldr	r0, [r7, #4]
 800212c:	f005 f8a4 	bl	8007278 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	695a      	ldr	r2, [r3, #20]
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 800213e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	4618      	mov	r0, r3
 8002146:	f002 ff81 	bl	800504c <USB_ReadInterrupts>
 800214a:	4603      	mov	r3, r0
 800214c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002150:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002154:	d10f      	bne.n	8002176 <HAL_PCD_IRQHandler+0x72c>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8002156:	2300      	movs	r3, #0
 8002158:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800215a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800215c:	b2db      	uxtb	r3, r3
 800215e:	4619      	mov	r1, r3
 8002160:	6878      	ldr	r0, [r7, #4]
 8002162:	f005 f877 	bl	8007254 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	695a      	ldr	r2, [r3, #20]
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8002174:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	4618      	mov	r0, r3
 800217c:	f002 ff66 	bl	800504c <USB_ReadInterrupts>
 8002180:	4603      	mov	r3, r0
 8002182:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002186:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800218a:	d10a      	bne.n	80021a2 <HAL_PCD_IRQHandler+0x758>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800218c:	6878      	ldr	r0, [r7, #4]
 800218e:	f005 f885 	bl	800729c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	695a      	ldr	r2, [r3, #20]
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80021a0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	4618      	mov	r0, r3
 80021a8:	f002 ff50 	bl	800504c <USB_ReadInterrupts>
 80021ac:	4603      	mov	r3, r0
 80021ae:	f003 0304 	and.w	r3, r3, #4
 80021b2:	2b04      	cmp	r3, #4
 80021b4:	d115      	bne.n	80021e2 <HAL_PCD_IRQHandler+0x798>
    {
      temp = hpcd->Instance->GOTGINT;
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	685b      	ldr	r3, [r3, #4]
 80021bc:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80021be:	69bb      	ldr	r3, [r7, #24]
 80021c0:	f003 0304 	and.w	r3, r3, #4
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d002      	beq.n	80021ce <HAL_PCD_IRQHandler+0x784>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80021c8:	6878      	ldr	r0, [r7, #4]
 80021ca:	f005 f875 	bl	80072b8 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	6859      	ldr	r1, [r3, #4]
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	69ba      	ldr	r2, [r7, #24]
 80021da:	430a      	orrs	r2, r1
 80021dc:	605a      	str	r2, [r3, #4]
 80021de:	e000      	b.n	80021e2 <HAL_PCD_IRQHandler+0x798>
      return;
 80021e0:	bf00      	nop
    }
  }
}
 80021e2:	3734      	adds	r7, #52	; 0x34
 80021e4:	46bd      	mov	sp, r7
 80021e6:	bd90      	pop	{r4, r7, pc}

080021e8 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	b082      	sub	sp, #8
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	6078      	str	r0, [r7, #4]
 80021f0:	460b      	mov	r3, r1
 80021f2:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80021fa:	2b01      	cmp	r3, #1
 80021fc:	d101      	bne.n	8002202 <HAL_PCD_SetAddress+0x1a>
 80021fe:	2302      	movs	r3, #2
 8002200:	e013      	b.n	800222a <HAL_PCD_SetAddress+0x42>
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	2201      	movs	r2, #1
 8002206:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	78fa      	ldrb	r2, [r7, #3]
 800220e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	78fa      	ldrb	r2, [r7, #3]
 8002218:	4611      	mov	r1, r2
 800221a:	4618      	mov	r0, r3
 800221c:	f002 feae 	bl	8004f7c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	2200      	movs	r2, #0
 8002224:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002228:	2300      	movs	r3, #0
}
 800222a:	4618      	mov	r0, r3
 800222c:	3708      	adds	r7, #8
 800222e:	46bd      	mov	sp, r7
 8002230:	bd80      	pop	{r7, pc}

08002232 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002232:	b580      	push	{r7, lr}
 8002234:	b084      	sub	sp, #16
 8002236:	af00      	add	r7, sp, #0
 8002238:	6078      	str	r0, [r7, #4]
 800223a:	4608      	mov	r0, r1
 800223c:	4611      	mov	r1, r2
 800223e:	461a      	mov	r2, r3
 8002240:	4603      	mov	r3, r0
 8002242:	70fb      	strb	r3, [r7, #3]
 8002244:	460b      	mov	r3, r1
 8002246:	803b      	strh	r3, [r7, #0]
 8002248:	4613      	mov	r3, r2
 800224a:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800224c:	2300      	movs	r3, #0
 800224e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002250:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002254:	2b00      	cmp	r3, #0
 8002256:	da0f      	bge.n	8002278 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002258:	78fb      	ldrb	r3, [r7, #3]
 800225a:	f003 020f 	and.w	r2, r3, #15
 800225e:	4613      	mov	r3, r2
 8002260:	00db      	lsls	r3, r3, #3
 8002262:	1a9b      	subs	r3, r3, r2
 8002264:	009b      	lsls	r3, r3, #2
 8002266:	3338      	adds	r3, #56	; 0x38
 8002268:	687a      	ldr	r2, [r7, #4]
 800226a:	4413      	add	r3, r2
 800226c:	3304      	adds	r3, #4
 800226e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	2201      	movs	r2, #1
 8002274:	705a      	strb	r2, [r3, #1]
 8002276:	e00f      	b.n	8002298 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002278:	78fb      	ldrb	r3, [r7, #3]
 800227a:	f003 020f 	and.w	r2, r3, #15
 800227e:	4613      	mov	r3, r2
 8002280:	00db      	lsls	r3, r3, #3
 8002282:	1a9b      	subs	r3, r3, r2
 8002284:	009b      	lsls	r3, r3, #2
 8002286:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800228a:	687a      	ldr	r2, [r7, #4]
 800228c:	4413      	add	r3, r2
 800228e:	3304      	adds	r3, #4
 8002290:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	2200      	movs	r2, #0
 8002296:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002298:	78fb      	ldrb	r3, [r7, #3]
 800229a:	f003 030f 	and.w	r3, r3, #15
 800229e:	b2da      	uxtb	r2, r3
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80022a4:	883a      	ldrh	r2, [r7, #0]
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	78ba      	ldrb	r2, [r7, #2]
 80022ae:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	785b      	ldrb	r3, [r3, #1]
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d004      	beq.n	80022c2 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	781b      	ldrb	r3, [r3, #0]
 80022bc:	b29a      	uxth	r2, r3
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80022c2:	78bb      	ldrb	r3, [r7, #2]
 80022c4:	2b02      	cmp	r3, #2
 80022c6:	d102      	bne.n	80022ce <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	2200      	movs	r2, #0
 80022cc:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80022d4:	2b01      	cmp	r3, #1
 80022d6:	d101      	bne.n	80022dc <HAL_PCD_EP_Open+0xaa>
 80022d8:	2302      	movs	r3, #2
 80022da:	e00e      	b.n	80022fa <HAL_PCD_EP_Open+0xc8>
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	2201      	movs	r2, #1
 80022e0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	68f9      	ldr	r1, [r7, #12]
 80022ea:	4618      	mov	r0, r3
 80022ec:	f001 ffd4 	bl	8004298 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	2200      	movs	r2, #0
 80022f4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 80022f8:	7afb      	ldrb	r3, [r7, #11]
}
 80022fa:	4618      	mov	r0, r3
 80022fc:	3710      	adds	r7, #16
 80022fe:	46bd      	mov	sp, r7
 8002300:	bd80      	pop	{r7, pc}

08002302 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002302:	b580      	push	{r7, lr}
 8002304:	b084      	sub	sp, #16
 8002306:	af00      	add	r7, sp, #0
 8002308:	6078      	str	r0, [r7, #4]
 800230a:	460b      	mov	r3, r1
 800230c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800230e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002312:	2b00      	cmp	r3, #0
 8002314:	da0f      	bge.n	8002336 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002316:	78fb      	ldrb	r3, [r7, #3]
 8002318:	f003 020f 	and.w	r2, r3, #15
 800231c:	4613      	mov	r3, r2
 800231e:	00db      	lsls	r3, r3, #3
 8002320:	1a9b      	subs	r3, r3, r2
 8002322:	009b      	lsls	r3, r3, #2
 8002324:	3338      	adds	r3, #56	; 0x38
 8002326:	687a      	ldr	r2, [r7, #4]
 8002328:	4413      	add	r3, r2
 800232a:	3304      	adds	r3, #4
 800232c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	2201      	movs	r2, #1
 8002332:	705a      	strb	r2, [r3, #1]
 8002334:	e00f      	b.n	8002356 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002336:	78fb      	ldrb	r3, [r7, #3]
 8002338:	f003 020f 	and.w	r2, r3, #15
 800233c:	4613      	mov	r3, r2
 800233e:	00db      	lsls	r3, r3, #3
 8002340:	1a9b      	subs	r3, r3, r2
 8002342:	009b      	lsls	r3, r3, #2
 8002344:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002348:	687a      	ldr	r2, [r7, #4]
 800234a:	4413      	add	r3, r2
 800234c:	3304      	adds	r3, #4
 800234e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	2200      	movs	r2, #0
 8002354:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8002356:	78fb      	ldrb	r3, [r7, #3]
 8002358:	f003 030f 	and.w	r3, r3, #15
 800235c:	b2da      	uxtb	r2, r3
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002368:	2b01      	cmp	r3, #1
 800236a:	d101      	bne.n	8002370 <HAL_PCD_EP_Close+0x6e>
 800236c:	2302      	movs	r3, #2
 800236e:	e00e      	b.n	800238e <HAL_PCD_EP_Close+0x8c>
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	2201      	movs	r2, #1
 8002374:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	68f9      	ldr	r1, [r7, #12]
 800237e:	4618      	mov	r0, r3
 8002380:	f002 f812 	bl	80043a8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	2200      	movs	r2, #0
 8002388:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 800238c:	2300      	movs	r3, #0
}
 800238e:	4618      	mov	r0, r3
 8002390:	3710      	adds	r7, #16
 8002392:	46bd      	mov	sp, r7
 8002394:	bd80      	pop	{r7, pc}

08002396 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002396:	b580      	push	{r7, lr}
 8002398:	b086      	sub	sp, #24
 800239a:	af00      	add	r7, sp, #0
 800239c:	60f8      	str	r0, [r7, #12]
 800239e:	607a      	str	r2, [r7, #4]
 80023a0:	603b      	str	r3, [r7, #0]
 80023a2:	460b      	mov	r3, r1
 80023a4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80023a6:	7afb      	ldrb	r3, [r7, #11]
 80023a8:	f003 020f 	and.w	r2, r3, #15
 80023ac:	4613      	mov	r3, r2
 80023ae:	00db      	lsls	r3, r3, #3
 80023b0:	1a9b      	subs	r3, r3, r2
 80023b2:	009b      	lsls	r3, r3, #2
 80023b4:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80023b8:	68fa      	ldr	r2, [r7, #12]
 80023ba:	4413      	add	r3, r2
 80023bc:	3304      	adds	r3, #4
 80023be:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80023c0:	697b      	ldr	r3, [r7, #20]
 80023c2:	687a      	ldr	r2, [r7, #4]
 80023c4:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80023c6:	697b      	ldr	r3, [r7, #20]
 80023c8:	683a      	ldr	r2, [r7, #0]
 80023ca:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 80023cc:	697b      	ldr	r3, [r7, #20]
 80023ce:	2200      	movs	r2, #0
 80023d0:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 80023d2:	697b      	ldr	r3, [r7, #20]
 80023d4:	2200      	movs	r2, #0
 80023d6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80023d8:	7afb      	ldrb	r3, [r7, #11]
 80023da:	f003 030f 	and.w	r3, r3, #15
 80023de:	b2da      	uxtb	r2, r3
 80023e0:	697b      	ldr	r3, [r7, #20]
 80023e2:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	691b      	ldr	r3, [r3, #16]
 80023e8:	2b01      	cmp	r3, #1
 80023ea:	d102      	bne.n	80023f2 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80023ec:	687a      	ldr	r2, [r7, #4]
 80023ee:	697b      	ldr	r3, [r7, #20]
 80023f0:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80023f2:	7afb      	ldrb	r3, [r7, #11]
 80023f4:	f003 030f 	and.w	r3, r3, #15
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d109      	bne.n	8002410 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	6818      	ldr	r0, [r3, #0]
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	691b      	ldr	r3, [r3, #16]
 8002404:	b2db      	uxtb	r3, r3
 8002406:	461a      	mov	r2, r3
 8002408:	6979      	ldr	r1, [r7, #20]
 800240a:	f002 faf5 	bl	80049f8 <USB_EP0StartXfer>
 800240e:	e008      	b.n	8002422 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	6818      	ldr	r0, [r3, #0]
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	691b      	ldr	r3, [r3, #16]
 8002418:	b2db      	uxtb	r3, r3
 800241a:	461a      	mov	r2, r3
 800241c:	6979      	ldr	r1, [r7, #20]
 800241e:	f002 f89f 	bl	8004560 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002422:	2300      	movs	r3, #0
}
 8002424:	4618      	mov	r0, r3
 8002426:	3718      	adds	r7, #24
 8002428:	46bd      	mov	sp, r7
 800242a:	bd80      	pop	{r7, pc}

0800242c <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800242c:	b480      	push	{r7}
 800242e:	b083      	sub	sp, #12
 8002430:	af00      	add	r7, sp, #0
 8002432:	6078      	str	r0, [r7, #4]
 8002434:	460b      	mov	r3, r1
 8002436:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002438:	78fb      	ldrb	r3, [r7, #3]
 800243a:	f003 020f 	and.w	r2, r3, #15
 800243e:	6879      	ldr	r1, [r7, #4]
 8002440:	4613      	mov	r3, r2
 8002442:	00db      	lsls	r3, r3, #3
 8002444:	1a9b      	subs	r3, r3, r2
 8002446:	009b      	lsls	r3, r3, #2
 8002448:	440b      	add	r3, r1
 800244a:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800244e:	681b      	ldr	r3, [r3, #0]
}
 8002450:	4618      	mov	r0, r3
 8002452:	370c      	adds	r7, #12
 8002454:	46bd      	mov	sp, r7
 8002456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800245a:	4770      	bx	lr

0800245c <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800245c:	b580      	push	{r7, lr}
 800245e:	b086      	sub	sp, #24
 8002460:	af00      	add	r7, sp, #0
 8002462:	60f8      	str	r0, [r7, #12]
 8002464:	607a      	str	r2, [r7, #4]
 8002466:	603b      	str	r3, [r7, #0]
 8002468:	460b      	mov	r3, r1
 800246a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800246c:	7afb      	ldrb	r3, [r7, #11]
 800246e:	f003 020f 	and.w	r2, r3, #15
 8002472:	4613      	mov	r3, r2
 8002474:	00db      	lsls	r3, r3, #3
 8002476:	1a9b      	subs	r3, r3, r2
 8002478:	009b      	lsls	r3, r3, #2
 800247a:	3338      	adds	r3, #56	; 0x38
 800247c:	68fa      	ldr	r2, [r7, #12]
 800247e:	4413      	add	r3, r2
 8002480:	3304      	adds	r3, #4
 8002482:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002484:	697b      	ldr	r3, [r7, #20]
 8002486:	687a      	ldr	r2, [r7, #4]
 8002488:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800248a:	697b      	ldr	r3, [r7, #20]
 800248c:	683a      	ldr	r2, [r7, #0]
 800248e:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8002490:	697b      	ldr	r3, [r7, #20]
 8002492:	2200      	movs	r2, #0
 8002494:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8002496:	697b      	ldr	r3, [r7, #20]
 8002498:	2201      	movs	r2, #1
 800249a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800249c:	7afb      	ldrb	r3, [r7, #11]
 800249e:	f003 030f 	and.w	r3, r3, #15
 80024a2:	b2da      	uxtb	r2, r3
 80024a4:	697b      	ldr	r3, [r7, #20]
 80024a6:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	691b      	ldr	r3, [r3, #16]
 80024ac:	2b01      	cmp	r3, #1
 80024ae:	d102      	bne.n	80024b6 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80024b0:	687a      	ldr	r2, [r7, #4]
 80024b2:	697b      	ldr	r3, [r7, #20]
 80024b4:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80024b6:	7afb      	ldrb	r3, [r7, #11]
 80024b8:	f003 030f 	and.w	r3, r3, #15
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d109      	bne.n	80024d4 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	6818      	ldr	r0, [r3, #0]
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	691b      	ldr	r3, [r3, #16]
 80024c8:	b2db      	uxtb	r3, r3
 80024ca:	461a      	mov	r2, r3
 80024cc:	6979      	ldr	r1, [r7, #20]
 80024ce:	f002 fa93 	bl	80049f8 <USB_EP0StartXfer>
 80024d2:	e008      	b.n	80024e6 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	6818      	ldr	r0, [r3, #0]
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	691b      	ldr	r3, [r3, #16]
 80024dc:	b2db      	uxtb	r3, r3
 80024de:	461a      	mov	r2, r3
 80024e0:	6979      	ldr	r1, [r7, #20]
 80024e2:	f002 f83d 	bl	8004560 <USB_EPStartXfer>
  }

  return HAL_OK;
 80024e6:	2300      	movs	r3, #0
}
 80024e8:	4618      	mov	r0, r3
 80024ea:	3718      	adds	r7, #24
 80024ec:	46bd      	mov	sp, r7
 80024ee:	bd80      	pop	{r7, pc}

080024f0 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80024f0:	b580      	push	{r7, lr}
 80024f2:	b084      	sub	sp, #16
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	6078      	str	r0, [r7, #4]
 80024f8:	460b      	mov	r3, r1
 80024fa:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80024fc:	78fb      	ldrb	r3, [r7, #3]
 80024fe:	f003 020f 	and.w	r2, r3, #15
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	685b      	ldr	r3, [r3, #4]
 8002506:	429a      	cmp	r2, r3
 8002508:	d901      	bls.n	800250e <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800250a:	2301      	movs	r3, #1
 800250c:	e050      	b.n	80025b0 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800250e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002512:	2b00      	cmp	r3, #0
 8002514:	da0f      	bge.n	8002536 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002516:	78fb      	ldrb	r3, [r7, #3]
 8002518:	f003 020f 	and.w	r2, r3, #15
 800251c:	4613      	mov	r3, r2
 800251e:	00db      	lsls	r3, r3, #3
 8002520:	1a9b      	subs	r3, r3, r2
 8002522:	009b      	lsls	r3, r3, #2
 8002524:	3338      	adds	r3, #56	; 0x38
 8002526:	687a      	ldr	r2, [r7, #4]
 8002528:	4413      	add	r3, r2
 800252a:	3304      	adds	r3, #4
 800252c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	2201      	movs	r2, #1
 8002532:	705a      	strb	r2, [r3, #1]
 8002534:	e00d      	b.n	8002552 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002536:	78fa      	ldrb	r2, [r7, #3]
 8002538:	4613      	mov	r3, r2
 800253a:	00db      	lsls	r3, r3, #3
 800253c:	1a9b      	subs	r3, r3, r2
 800253e:	009b      	lsls	r3, r3, #2
 8002540:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002544:	687a      	ldr	r2, [r7, #4]
 8002546:	4413      	add	r3, r2
 8002548:	3304      	adds	r3, #4
 800254a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	2200      	movs	r2, #0
 8002550:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	2201      	movs	r2, #1
 8002556:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002558:	78fb      	ldrb	r3, [r7, #3]
 800255a:	f003 030f 	and.w	r3, r3, #15
 800255e:	b2da      	uxtb	r2, r3
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800256a:	2b01      	cmp	r3, #1
 800256c:	d101      	bne.n	8002572 <HAL_PCD_EP_SetStall+0x82>
 800256e:	2302      	movs	r3, #2
 8002570:	e01e      	b.n	80025b0 <HAL_PCD_EP_SetStall+0xc0>
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	2201      	movs	r2, #1
 8002576:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	68f9      	ldr	r1, [r7, #12]
 8002580:	4618      	mov	r0, r3
 8002582:	f002 fc27 	bl	8004dd4 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002586:	78fb      	ldrb	r3, [r7, #3]
 8002588:	f003 030f 	and.w	r3, r3, #15
 800258c:	2b00      	cmp	r3, #0
 800258e:	d10a      	bne.n	80025a6 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	6818      	ldr	r0, [r3, #0]
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	691b      	ldr	r3, [r3, #16]
 8002598:	b2d9      	uxtb	r1, r3
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80025a0:	461a      	mov	r2, r3
 80025a2:	f002 fe19 	bl	80051d8 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	2200      	movs	r2, #0
 80025aa:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80025ae:	2300      	movs	r3, #0
}
 80025b0:	4618      	mov	r0, r3
 80025b2:	3710      	adds	r7, #16
 80025b4:	46bd      	mov	sp, r7
 80025b6:	bd80      	pop	{r7, pc}

080025b8 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80025b8:	b580      	push	{r7, lr}
 80025ba:	b084      	sub	sp, #16
 80025bc:	af00      	add	r7, sp, #0
 80025be:	6078      	str	r0, [r7, #4]
 80025c0:	460b      	mov	r3, r1
 80025c2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80025c4:	78fb      	ldrb	r3, [r7, #3]
 80025c6:	f003 020f 	and.w	r2, r3, #15
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	685b      	ldr	r3, [r3, #4]
 80025ce:	429a      	cmp	r2, r3
 80025d0:	d901      	bls.n	80025d6 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80025d2:	2301      	movs	r3, #1
 80025d4:	e042      	b.n	800265c <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80025d6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80025da:	2b00      	cmp	r3, #0
 80025dc:	da0f      	bge.n	80025fe <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80025de:	78fb      	ldrb	r3, [r7, #3]
 80025e0:	f003 020f 	and.w	r2, r3, #15
 80025e4:	4613      	mov	r3, r2
 80025e6:	00db      	lsls	r3, r3, #3
 80025e8:	1a9b      	subs	r3, r3, r2
 80025ea:	009b      	lsls	r3, r3, #2
 80025ec:	3338      	adds	r3, #56	; 0x38
 80025ee:	687a      	ldr	r2, [r7, #4]
 80025f0:	4413      	add	r3, r2
 80025f2:	3304      	adds	r3, #4
 80025f4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	2201      	movs	r2, #1
 80025fa:	705a      	strb	r2, [r3, #1]
 80025fc:	e00f      	b.n	800261e <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80025fe:	78fb      	ldrb	r3, [r7, #3]
 8002600:	f003 020f 	and.w	r2, r3, #15
 8002604:	4613      	mov	r3, r2
 8002606:	00db      	lsls	r3, r3, #3
 8002608:	1a9b      	subs	r3, r3, r2
 800260a:	009b      	lsls	r3, r3, #2
 800260c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002610:	687a      	ldr	r2, [r7, #4]
 8002612:	4413      	add	r3, r2
 8002614:	3304      	adds	r3, #4
 8002616:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	2200      	movs	r2, #0
 800261c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	2200      	movs	r2, #0
 8002622:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002624:	78fb      	ldrb	r3, [r7, #3]
 8002626:	f003 030f 	and.w	r3, r3, #15
 800262a:	b2da      	uxtb	r2, r3
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002636:	2b01      	cmp	r3, #1
 8002638:	d101      	bne.n	800263e <HAL_PCD_EP_ClrStall+0x86>
 800263a:	2302      	movs	r3, #2
 800263c:	e00e      	b.n	800265c <HAL_PCD_EP_ClrStall+0xa4>
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	2201      	movs	r2, #1
 8002642:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	68f9      	ldr	r1, [r7, #12]
 800264c:	4618      	mov	r0, r3
 800264e:	f002 fc2f 	bl	8004eb0 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	2200      	movs	r2, #0
 8002656:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800265a:	2300      	movs	r3, #0
}
 800265c:	4618      	mov	r0, r3
 800265e:	3710      	adds	r7, #16
 8002660:	46bd      	mov	sp, r7
 8002662:	bd80      	pop	{r7, pc}

08002664 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002664:	b580      	push	{r7, lr}
 8002666:	b08a      	sub	sp, #40	; 0x28
 8002668:	af02      	add	r7, sp, #8
 800266a:	6078      	str	r0, [r7, #4]
 800266c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002674:	697b      	ldr	r3, [r7, #20]
 8002676:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8002678:	683a      	ldr	r2, [r7, #0]
 800267a:	4613      	mov	r3, r2
 800267c:	00db      	lsls	r3, r3, #3
 800267e:	1a9b      	subs	r3, r3, r2
 8002680:	009b      	lsls	r3, r3, #2
 8002682:	3338      	adds	r3, #56	; 0x38
 8002684:	687a      	ldr	r2, [r7, #4]
 8002686:	4413      	add	r3, r2
 8002688:	3304      	adds	r3, #4
 800268a:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	699a      	ldr	r2, [r3, #24]
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	695b      	ldr	r3, [r3, #20]
 8002694:	429a      	cmp	r2, r3
 8002696:	d901      	bls.n	800269c <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8002698:	2301      	movs	r3, #1
 800269a:	e06c      	b.n	8002776 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	695a      	ldr	r2, [r3, #20]
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	699b      	ldr	r3, [r3, #24]
 80026a4:	1ad3      	subs	r3, r2, r3
 80026a6:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	689b      	ldr	r3, [r3, #8]
 80026ac:	69fa      	ldr	r2, [r7, #28]
 80026ae:	429a      	cmp	r2, r3
 80026b0:	d902      	bls.n	80026b8 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	689b      	ldr	r3, [r3, #8]
 80026b6:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80026b8:	69fb      	ldr	r3, [r7, #28]
 80026ba:	3303      	adds	r3, #3
 80026bc:	089b      	lsrs	r3, r3, #2
 80026be:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80026c0:	e02b      	b.n	800271a <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	695a      	ldr	r2, [r3, #20]
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	699b      	ldr	r3, [r3, #24]
 80026ca:	1ad3      	subs	r3, r2, r3
 80026cc:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	689b      	ldr	r3, [r3, #8]
 80026d2:	69fa      	ldr	r2, [r7, #28]
 80026d4:	429a      	cmp	r2, r3
 80026d6:	d902      	bls.n	80026de <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	689b      	ldr	r3, [r3, #8]
 80026dc:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80026de:	69fb      	ldr	r3, [r7, #28]
 80026e0:	3303      	adds	r3, #3
 80026e2:	089b      	lsrs	r3, r3, #2
 80026e4:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	68d9      	ldr	r1, [r3, #12]
 80026ea:	683b      	ldr	r3, [r7, #0]
 80026ec:	b2da      	uxtb	r2, r3
 80026ee:	69fb      	ldr	r3, [r7, #28]
 80026f0:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80026f6:	b2db      	uxtb	r3, r3
 80026f8:	9300      	str	r3, [sp, #0]
 80026fa:	4603      	mov	r3, r0
 80026fc:	6978      	ldr	r0, [r7, #20]
 80026fe:	f002 fad3 	bl	8004ca8 <USB_WritePacket>

    ep->xfer_buff  += len;
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	68da      	ldr	r2, [r3, #12]
 8002706:	69fb      	ldr	r3, [r7, #28]
 8002708:	441a      	add	r2, r3
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	699a      	ldr	r2, [r3, #24]
 8002712:	69fb      	ldr	r3, [r7, #28]
 8002714:	441a      	add	r2, r3
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800271a:	683b      	ldr	r3, [r7, #0]
 800271c:	015a      	lsls	r2, r3, #5
 800271e:	693b      	ldr	r3, [r7, #16]
 8002720:	4413      	add	r3, r2
 8002722:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002726:	699b      	ldr	r3, [r3, #24]
 8002728:	b29b      	uxth	r3, r3
 800272a:	69ba      	ldr	r2, [r7, #24]
 800272c:	429a      	cmp	r2, r3
 800272e:	d809      	bhi.n	8002744 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	699a      	ldr	r2, [r3, #24]
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002738:	429a      	cmp	r2, r3
 800273a:	d203      	bcs.n	8002744 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	695b      	ldr	r3, [r3, #20]
 8002740:	2b00      	cmp	r3, #0
 8002742:	d1be      	bne.n	80026c2 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	695a      	ldr	r2, [r3, #20]
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	699b      	ldr	r3, [r3, #24]
 800274c:	429a      	cmp	r2, r3
 800274e:	d811      	bhi.n	8002774 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002750:	683b      	ldr	r3, [r7, #0]
 8002752:	f003 030f 	and.w	r3, r3, #15
 8002756:	2201      	movs	r2, #1
 8002758:	fa02 f303 	lsl.w	r3, r2, r3
 800275c:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800275e:	693b      	ldr	r3, [r7, #16]
 8002760:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002764:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002766:	68bb      	ldr	r3, [r7, #8]
 8002768:	43db      	mvns	r3, r3
 800276a:	6939      	ldr	r1, [r7, #16]
 800276c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002770:	4013      	ands	r3, r2
 8002772:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8002774:	2300      	movs	r3, #0
}
 8002776:	4618      	mov	r0, r3
 8002778:	3720      	adds	r7, #32
 800277a:	46bd      	mov	sp, r7
 800277c:	bd80      	pop	{r7, pc}
	...

08002780 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002780:	b580      	push	{r7, lr}
 8002782:	b086      	sub	sp, #24
 8002784:	af00      	add	r7, sp, #0
 8002786:	6078      	str	r0, [r7, #4]
 8002788:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002790:	697b      	ldr	r3, [r7, #20]
 8002792:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002794:	697b      	ldr	r3, [r7, #20]
 8002796:	333c      	adds	r3, #60	; 0x3c
 8002798:	3304      	adds	r3, #4
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800279e:	683b      	ldr	r3, [r7, #0]
 80027a0:	015a      	lsls	r2, r3, #5
 80027a2:	693b      	ldr	r3, [r7, #16]
 80027a4:	4413      	add	r3, r2
 80027a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80027aa:	689b      	ldr	r3, [r3, #8]
 80027ac:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	691b      	ldr	r3, [r3, #16]
 80027b2:	2b01      	cmp	r3, #1
 80027b4:	f040 80a0 	bne.w	80028f8 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80027b8:	68bb      	ldr	r3, [r7, #8]
 80027ba:	f003 0308 	and.w	r3, r3, #8
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d015      	beq.n	80027ee <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	4a72      	ldr	r2, [pc, #456]	; (8002990 <PCD_EP_OutXfrComplete_int+0x210>)
 80027c6:	4293      	cmp	r3, r2
 80027c8:	f240 80dd 	bls.w	8002986 <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80027cc:	68bb      	ldr	r3, [r7, #8]
 80027ce:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	f000 80d7 	beq.w	8002986 <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80027d8:	683b      	ldr	r3, [r7, #0]
 80027da:	015a      	lsls	r2, r3, #5
 80027dc:	693b      	ldr	r3, [r7, #16]
 80027de:	4413      	add	r3, r2
 80027e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80027e4:	461a      	mov	r2, r3
 80027e6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80027ea:	6093      	str	r3, [r2, #8]
 80027ec:	e0cb      	b.n	8002986 <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80027ee:	68bb      	ldr	r3, [r7, #8]
 80027f0:	f003 0320 	and.w	r3, r3, #32
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d009      	beq.n	800280c <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80027f8:	683b      	ldr	r3, [r7, #0]
 80027fa:	015a      	lsls	r2, r3, #5
 80027fc:	693b      	ldr	r3, [r7, #16]
 80027fe:	4413      	add	r3, r2
 8002800:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002804:	461a      	mov	r2, r3
 8002806:	2320      	movs	r3, #32
 8002808:	6093      	str	r3, [r2, #8]
 800280a:	e0bc      	b.n	8002986 <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800280c:	68bb      	ldr	r3, [r7, #8]
 800280e:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002812:	2b00      	cmp	r3, #0
 8002814:	f040 80b7 	bne.w	8002986 <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	4a5d      	ldr	r2, [pc, #372]	; (8002990 <PCD_EP_OutXfrComplete_int+0x210>)
 800281c:	4293      	cmp	r3, r2
 800281e:	d90f      	bls.n	8002840 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002820:	68bb      	ldr	r3, [r7, #8]
 8002822:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002826:	2b00      	cmp	r3, #0
 8002828:	d00a      	beq.n	8002840 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800282a:	683b      	ldr	r3, [r7, #0]
 800282c:	015a      	lsls	r2, r3, #5
 800282e:	693b      	ldr	r3, [r7, #16]
 8002830:	4413      	add	r3, r2
 8002832:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002836:	461a      	mov	r2, r3
 8002838:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800283c:	6093      	str	r3, [r2, #8]
 800283e:	e0a2      	b.n	8002986 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8002840:	6879      	ldr	r1, [r7, #4]
 8002842:	683a      	ldr	r2, [r7, #0]
 8002844:	4613      	mov	r3, r2
 8002846:	00db      	lsls	r3, r3, #3
 8002848:	1a9b      	subs	r3, r3, r2
 800284a:	009b      	lsls	r3, r3, #2
 800284c:	440b      	add	r3, r1
 800284e:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002852:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8002854:	683b      	ldr	r3, [r7, #0]
 8002856:	0159      	lsls	r1, r3, #5
 8002858:	693b      	ldr	r3, [r7, #16]
 800285a:	440b      	add	r3, r1
 800285c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002860:	691b      	ldr	r3, [r3, #16]
 8002862:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8002866:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8002868:	6878      	ldr	r0, [r7, #4]
 800286a:	683a      	ldr	r2, [r7, #0]
 800286c:	4613      	mov	r3, r2
 800286e:	00db      	lsls	r3, r3, #3
 8002870:	1a9b      	subs	r3, r3, r2
 8002872:	009b      	lsls	r3, r3, #2
 8002874:	4403      	add	r3, r0
 8002876:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800287a:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 800287c:	6879      	ldr	r1, [r7, #4]
 800287e:	683a      	ldr	r2, [r7, #0]
 8002880:	4613      	mov	r3, r2
 8002882:	00db      	lsls	r3, r3, #3
 8002884:	1a9b      	subs	r3, r3, r2
 8002886:	009b      	lsls	r3, r3, #2
 8002888:	440b      	add	r3, r1
 800288a:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800288e:	6819      	ldr	r1, [r3, #0]
 8002890:	6878      	ldr	r0, [r7, #4]
 8002892:	683a      	ldr	r2, [r7, #0]
 8002894:	4613      	mov	r3, r2
 8002896:	00db      	lsls	r3, r3, #3
 8002898:	1a9b      	subs	r3, r3, r2
 800289a:	009b      	lsls	r3, r3, #2
 800289c:	4403      	add	r3, r0
 800289e:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	4419      	add	r1, r3
 80028a6:	6878      	ldr	r0, [r7, #4]
 80028a8:	683a      	ldr	r2, [r7, #0]
 80028aa:	4613      	mov	r3, r2
 80028ac:	00db      	lsls	r3, r3, #3
 80028ae:	1a9b      	subs	r3, r3, r2
 80028b0:	009b      	lsls	r3, r3, #2
 80028b2:	4403      	add	r3, r0
 80028b4:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80028b8:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80028ba:	683b      	ldr	r3, [r7, #0]
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d114      	bne.n	80028ea <PCD_EP_OutXfrComplete_int+0x16a>
 80028c0:	6879      	ldr	r1, [r7, #4]
 80028c2:	683a      	ldr	r2, [r7, #0]
 80028c4:	4613      	mov	r3, r2
 80028c6:	00db      	lsls	r3, r3, #3
 80028c8:	1a9b      	subs	r3, r3, r2
 80028ca:	009b      	lsls	r3, r3, #2
 80028cc:	440b      	add	r3, r1
 80028ce:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d108      	bne.n	80028ea <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	6818      	ldr	r0, [r3, #0]
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80028e2:	461a      	mov	r2, r3
 80028e4:	2101      	movs	r1, #1
 80028e6:	f002 fc77 	bl	80051d8 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80028ea:	683b      	ldr	r3, [r7, #0]
 80028ec:	b2db      	uxtb	r3, r3
 80028ee:	4619      	mov	r1, r3
 80028f0:	6878      	ldr	r0, [r7, #4]
 80028f2:	f004 fc0f 	bl	8007114 <HAL_PCD_DataOutStageCallback>
 80028f6:	e046      	b.n	8002986 <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	4a26      	ldr	r2, [pc, #152]	; (8002994 <PCD_EP_OutXfrComplete_int+0x214>)
 80028fc:	4293      	cmp	r3, r2
 80028fe:	d124      	bne.n	800294a <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8002900:	68bb      	ldr	r3, [r7, #8]
 8002902:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002906:	2b00      	cmp	r3, #0
 8002908:	d00a      	beq.n	8002920 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800290a:	683b      	ldr	r3, [r7, #0]
 800290c:	015a      	lsls	r2, r3, #5
 800290e:	693b      	ldr	r3, [r7, #16]
 8002910:	4413      	add	r3, r2
 8002912:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002916:	461a      	mov	r2, r3
 8002918:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800291c:	6093      	str	r3, [r2, #8]
 800291e:	e032      	b.n	8002986 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002920:	68bb      	ldr	r3, [r7, #8]
 8002922:	f003 0320 	and.w	r3, r3, #32
 8002926:	2b00      	cmp	r3, #0
 8002928:	d008      	beq.n	800293c <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800292a:	683b      	ldr	r3, [r7, #0]
 800292c:	015a      	lsls	r2, r3, #5
 800292e:	693b      	ldr	r3, [r7, #16]
 8002930:	4413      	add	r3, r2
 8002932:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002936:	461a      	mov	r2, r3
 8002938:	2320      	movs	r3, #32
 800293a:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800293c:	683b      	ldr	r3, [r7, #0]
 800293e:	b2db      	uxtb	r3, r3
 8002940:	4619      	mov	r1, r3
 8002942:	6878      	ldr	r0, [r7, #4]
 8002944:	f004 fbe6 	bl	8007114 <HAL_PCD_DataOutStageCallback>
 8002948:	e01d      	b.n	8002986 <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800294a:	683b      	ldr	r3, [r7, #0]
 800294c:	2b00      	cmp	r3, #0
 800294e:	d114      	bne.n	800297a <PCD_EP_OutXfrComplete_int+0x1fa>
 8002950:	6879      	ldr	r1, [r7, #4]
 8002952:	683a      	ldr	r2, [r7, #0]
 8002954:	4613      	mov	r3, r2
 8002956:	00db      	lsls	r3, r3, #3
 8002958:	1a9b      	subs	r3, r3, r2
 800295a:	009b      	lsls	r3, r3, #2
 800295c:	440b      	add	r3, r1
 800295e:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	2b00      	cmp	r3, #0
 8002966:	d108      	bne.n	800297a <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	6818      	ldr	r0, [r3, #0]
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002972:	461a      	mov	r2, r3
 8002974:	2100      	movs	r1, #0
 8002976:	f002 fc2f 	bl	80051d8 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800297a:	683b      	ldr	r3, [r7, #0]
 800297c:	b2db      	uxtb	r3, r3
 800297e:	4619      	mov	r1, r3
 8002980:	6878      	ldr	r0, [r7, #4]
 8002982:	f004 fbc7 	bl	8007114 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8002986:	2300      	movs	r3, #0
}
 8002988:	4618      	mov	r0, r3
 800298a:	3718      	adds	r7, #24
 800298c:	46bd      	mov	sp, r7
 800298e:	bd80      	pop	{r7, pc}
 8002990:	4f54300a 	.word	0x4f54300a
 8002994:	4f54310a 	.word	0x4f54310a

08002998 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002998:	b580      	push	{r7, lr}
 800299a:	b086      	sub	sp, #24
 800299c:	af00      	add	r7, sp, #0
 800299e:	6078      	str	r0, [r7, #4]
 80029a0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80029a8:	697b      	ldr	r3, [r7, #20]
 80029aa:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80029ac:	697b      	ldr	r3, [r7, #20]
 80029ae:	333c      	adds	r3, #60	; 0x3c
 80029b0:	3304      	adds	r3, #4
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80029b6:	683b      	ldr	r3, [r7, #0]
 80029b8:	015a      	lsls	r2, r3, #5
 80029ba:	693b      	ldr	r3, [r7, #16]
 80029bc:	4413      	add	r3, r2
 80029be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80029c2:	689b      	ldr	r3, [r3, #8]
 80029c4:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	4a15      	ldr	r2, [pc, #84]	; (8002a20 <PCD_EP_OutSetupPacket_int+0x88>)
 80029ca:	4293      	cmp	r3, r2
 80029cc:	d90e      	bls.n	80029ec <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80029ce:	68bb      	ldr	r3, [r7, #8]
 80029d0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d009      	beq.n	80029ec <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80029d8:	683b      	ldr	r3, [r7, #0]
 80029da:	015a      	lsls	r2, r3, #5
 80029dc:	693b      	ldr	r3, [r7, #16]
 80029de:	4413      	add	r3, r2
 80029e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80029e4:	461a      	mov	r2, r3
 80029e6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80029ea:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80029ec:	6878      	ldr	r0, [r7, #4]
 80029ee:	f004 fb7f 	bl	80070f0 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	4a0a      	ldr	r2, [pc, #40]	; (8002a20 <PCD_EP_OutSetupPacket_int+0x88>)
 80029f6:	4293      	cmp	r3, r2
 80029f8:	d90c      	bls.n	8002a14 <PCD_EP_OutSetupPacket_int+0x7c>
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	691b      	ldr	r3, [r3, #16]
 80029fe:	2b01      	cmp	r3, #1
 8002a00:	d108      	bne.n	8002a14 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	6818      	ldr	r0, [r3, #0]
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002a0c:	461a      	mov	r2, r3
 8002a0e:	2101      	movs	r1, #1
 8002a10:	f002 fbe2 	bl	80051d8 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8002a14:	2300      	movs	r3, #0
}
 8002a16:	4618      	mov	r0, r3
 8002a18:	3718      	adds	r7, #24
 8002a1a:	46bd      	mov	sp, r7
 8002a1c:	bd80      	pop	{r7, pc}
 8002a1e:	bf00      	nop
 8002a20:	4f54300a 	.word	0x4f54300a

08002a24 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8002a24:	b480      	push	{r7}
 8002a26:	b085      	sub	sp, #20
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	6078      	str	r0, [r7, #4]
 8002a2c:	460b      	mov	r3, r1
 8002a2e:	70fb      	strb	r3, [r7, #3]
 8002a30:	4613      	mov	r3, r2
 8002a32:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a3a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8002a3c:	78fb      	ldrb	r3, [r7, #3]
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d107      	bne.n	8002a52 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8002a42:	883b      	ldrh	r3, [r7, #0]
 8002a44:	0419      	lsls	r1, r3, #16
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	68ba      	ldr	r2, [r7, #8]
 8002a4c:	430a      	orrs	r2, r1
 8002a4e:	629a      	str	r2, [r3, #40]	; 0x28
 8002a50:	e028      	b.n	8002aa4 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a58:	0c1b      	lsrs	r3, r3, #16
 8002a5a:	68ba      	ldr	r2, [r7, #8]
 8002a5c:	4413      	add	r3, r2
 8002a5e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002a60:	2300      	movs	r3, #0
 8002a62:	73fb      	strb	r3, [r7, #15]
 8002a64:	e00d      	b.n	8002a82 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681a      	ldr	r2, [r3, #0]
 8002a6a:	7bfb      	ldrb	r3, [r7, #15]
 8002a6c:	3340      	adds	r3, #64	; 0x40
 8002a6e:	009b      	lsls	r3, r3, #2
 8002a70:	4413      	add	r3, r2
 8002a72:	685b      	ldr	r3, [r3, #4]
 8002a74:	0c1b      	lsrs	r3, r3, #16
 8002a76:	68ba      	ldr	r2, [r7, #8]
 8002a78:	4413      	add	r3, r2
 8002a7a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002a7c:	7bfb      	ldrb	r3, [r7, #15]
 8002a7e:	3301      	adds	r3, #1
 8002a80:	73fb      	strb	r3, [r7, #15]
 8002a82:	7bfa      	ldrb	r2, [r7, #15]
 8002a84:	78fb      	ldrb	r3, [r7, #3]
 8002a86:	3b01      	subs	r3, #1
 8002a88:	429a      	cmp	r2, r3
 8002a8a:	d3ec      	bcc.n	8002a66 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8002a8c:	883b      	ldrh	r3, [r7, #0]
 8002a8e:	0418      	lsls	r0, r3, #16
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	6819      	ldr	r1, [r3, #0]
 8002a94:	78fb      	ldrb	r3, [r7, #3]
 8002a96:	3b01      	subs	r3, #1
 8002a98:	68ba      	ldr	r2, [r7, #8]
 8002a9a:	4302      	orrs	r2, r0
 8002a9c:	3340      	adds	r3, #64	; 0x40
 8002a9e:	009b      	lsls	r3, r3, #2
 8002aa0:	440b      	add	r3, r1
 8002aa2:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8002aa4:	2300      	movs	r3, #0
}
 8002aa6:	4618      	mov	r0, r3
 8002aa8:	3714      	adds	r7, #20
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab0:	4770      	bx	lr

08002ab2 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8002ab2:	b480      	push	{r7}
 8002ab4:	b083      	sub	sp, #12
 8002ab6:	af00      	add	r7, sp, #0
 8002ab8:	6078      	str	r0, [r7, #4]
 8002aba:	460b      	mov	r3, r1
 8002abc:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	887a      	ldrh	r2, [r7, #2]
 8002ac4:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002ac6:	2300      	movs	r3, #0
}
 8002ac8:	4618      	mov	r0, r3
 8002aca:	370c      	adds	r7, #12
 8002acc:	46bd      	mov	sp, r7
 8002ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad2:	4770      	bx	lr

08002ad4 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002ad4:	b480      	push	{r7}
 8002ad6:	b085      	sub	sp, #20
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	2201      	movs	r2, #1
 8002ae6:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	2200      	movs	r2, #0
 8002aee:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	699b      	ldr	r3, [r3, #24]
 8002af6:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002b02:	4b05      	ldr	r3, [pc, #20]	; (8002b18 <HAL_PCDEx_ActivateLPM+0x44>)
 8002b04:	4313      	orrs	r3, r2
 8002b06:	68fa      	ldr	r2, [r7, #12]
 8002b08:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8002b0a:	2300      	movs	r3, #0
}
 8002b0c:	4618      	mov	r0, r3
 8002b0e:	3714      	adds	r7, #20
 8002b10:	46bd      	mov	sp, r7
 8002b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b16:	4770      	bx	lr
 8002b18:	10000003 	.word	0x10000003

08002b1c <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002b1c:	b480      	push	{r7}
 8002b1e:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002b20:	4b05      	ldr	r3, [pc, #20]	; (8002b38 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	4a04      	ldr	r2, [pc, #16]	; (8002b38 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002b26:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b2a:	6013      	str	r3, [r2, #0]
}
 8002b2c:	bf00      	nop
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b34:	4770      	bx	lr
 8002b36:	bf00      	nop
 8002b38:	40007000 	.word	0x40007000

08002b3c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002b3c:	b580      	push	{r7, lr}
 8002b3e:	b082      	sub	sp, #8
 8002b40:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8002b42:	2300      	movs	r3, #0
 8002b44:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8002b46:	4b23      	ldr	r3, [pc, #140]	; (8002bd4 <HAL_PWREx_EnableOverDrive+0x98>)
 8002b48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b4a:	4a22      	ldr	r2, [pc, #136]	; (8002bd4 <HAL_PWREx_EnableOverDrive+0x98>)
 8002b4c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b50:	6413      	str	r3, [r2, #64]	; 0x40
 8002b52:	4b20      	ldr	r3, [pc, #128]	; (8002bd4 <HAL_PWREx_EnableOverDrive+0x98>)
 8002b54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b5a:	603b      	str	r3, [r7, #0]
 8002b5c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002b5e:	4b1e      	ldr	r3, [pc, #120]	; (8002bd8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	4a1d      	ldr	r2, [pc, #116]	; (8002bd8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002b64:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b68:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002b6a:	f7fe fb31 	bl	80011d0 <HAL_GetTick>
 8002b6e:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002b70:	e009      	b.n	8002b86 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002b72:	f7fe fb2d 	bl	80011d0 <HAL_GetTick>
 8002b76:	4602      	mov	r2, r0
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	1ad3      	subs	r3, r2, r3
 8002b7c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002b80:	d901      	bls.n	8002b86 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8002b82:	2303      	movs	r3, #3
 8002b84:	e022      	b.n	8002bcc <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002b86:	4b14      	ldr	r3, [pc, #80]	; (8002bd8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002b88:	685b      	ldr	r3, [r3, #4]
 8002b8a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b8e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b92:	d1ee      	bne.n	8002b72 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002b94:	4b10      	ldr	r3, [pc, #64]	; (8002bd8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	4a0f      	ldr	r2, [pc, #60]	; (8002bd8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002b9a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b9e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002ba0:	f7fe fb16 	bl	80011d0 <HAL_GetTick>
 8002ba4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002ba6:	e009      	b.n	8002bbc <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002ba8:	f7fe fb12 	bl	80011d0 <HAL_GetTick>
 8002bac:	4602      	mov	r2, r0
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	1ad3      	subs	r3, r2, r3
 8002bb2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002bb6:	d901      	bls.n	8002bbc <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8002bb8:	2303      	movs	r3, #3
 8002bba:	e007      	b.n	8002bcc <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002bbc:	4b06      	ldr	r3, [pc, #24]	; (8002bd8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002bbe:	685b      	ldr	r3, [r3, #4]
 8002bc0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bc4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002bc8:	d1ee      	bne.n	8002ba8 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8002bca:	2300      	movs	r3, #0
}
 8002bcc:	4618      	mov	r0, r3
 8002bce:	3708      	adds	r7, #8
 8002bd0:	46bd      	mov	sp, r7
 8002bd2:	bd80      	pop	{r7, pc}
 8002bd4:	40023800 	.word	0x40023800
 8002bd8:	40007000 	.word	0x40007000

08002bdc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002bdc:	b580      	push	{r7, lr}
 8002bde:	b086      	sub	sp, #24
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8002be4:	2300      	movs	r3, #0
 8002be6:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d101      	bne.n	8002bf2 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8002bee:	2301      	movs	r3, #1
 8002bf0:	e291      	b.n	8003116 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f003 0301 	and.w	r3, r3, #1
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	f000 8087 	beq.w	8002d0e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002c00:	4b96      	ldr	r3, [pc, #600]	; (8002e5c <HAL_RCC_OscConfig+0x280>)
 8002c02:	689b      	ldr	r3, [r3, #8]
 8002c04:	f003 030c 	and.w	r3, r3, #12
 8002c08:	2b04      	cmp	r3, #4
 8002c0a:	d00c      	beq.n	8002c26 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002c0c:	4b93      	ldr	r3, [pc, #588]	; (8002e5c <HAL_RCC_OscConfig+0x280>)
 8002c0e:	689b      	ldr	r3, [r3, #8]
 8002c10:	f003 030c 	and.w	r3, r3, #12
 8002c14:	2b08      	cmp	r3, #8
 8002c16:	d112      	bne.n	8002c3e <HAL_RCC_OscConfig+0x62>
 8002c18:	4b90      	ldr	r3, [pc, #576]	; (8002e5c <HAL_RCC_OscConfig+0x280>)
 8002c1a:	685b      	ldr	r3, [r3, #4]
 8002c1c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c20:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002c24:	d10b      	bne.n	8002c3e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c26:	4b8d      	ldr	r3, [pc, #564]	; (8002e5c <HAL_RCC_OscConfig+0x280>)
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d06c      	beq.n	8002d0c <HAL_RCC_OscConfig+0x130>
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	685b      	ldr	r3, [r3, #4]
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d168      	bne.n	8002d0c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002c3a:	2301      	movs	r3, #1
 8002c3c:	e26b      	b.n	8003116 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	685b      	ldr	r3, [r3, #4]
 8002c42:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c46:	d106      	bne.n	8002c56 <HAL_RCC_OscConfig+0x7a>
 8002c48:	4b84      	ldr	r3, [pc, #528]	; (8002e5c <HAL_RCC_OscConfig+0x280>)
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	4a83      	ldr	r2, [pc, #524]	; (8002e5c <HAL_RCC_OscConfig+0x280>)
 8002c4e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c52:	6013      	str	r3, [r2, #0]
 8002c54:	e02e      	b.n	8002cb4 <HAL_RCC_OscConfig+0xd8>
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	685b      	ldr	r3, [r3, #4]
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d10c      	bne.n	8002c78 <HAL_RCC_OscConfig+0x9c>
 8002c5e:	4b7f      	ldr	r3, [pc, #508]	; (8002e5c <HAL_RCC_OscConfig+0x280>)
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	4a7e      	ldr	r2, [pc, #504]	; (8002e5c <HAL_RCC_OscConfig+0x280>)
 8002c64:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c68:	6013      	str	r3, [r2, #0]
 8002c6a:	4b7c      	ldr	r3, [pc, #496]	; (8002e5c <HAL_RCC_OscConfig+0x280>)
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	4a7b      	ldr	r2, [pc, #492]	; (8002e5c <HAL_RCC_OscConfig+0x280>)
 8002c70:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c74:	6013      	str	r3, [r2, #0]
 8002c76:	e01d      	b.n	8002cb4 <HAL_RCC_OscConfig+0xd8>
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	685b      	ldr	r3, [r3, #4]
 8002c7c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002c80:	d10c      	bne.n	8002c9c <HAL_RCC_OscConfig+0xc0>
 8002c82:	4b76      	ldr	r3, [pc, #472]	; (8002e5c <HAL_RCC_OscConfig+0x280>)
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	4a75      	ldr	r2, [pc, #468]	; (8002e5c <HAL_RCC_OscConfig+0x280>)
 8002c88:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002c8c:	6013      	str	r3, [r2, #0]
 8002c8e:	4b73      	ldr	r3, [pc, #460]	; (8002e5c <HAL_RCC_OscConfig+0x280>)
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	4a72      	ldr	r2, [pc, #456]	; (8002e5c <HAL_RCC_OscConfig+0x280>)
 8002c94:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c98:	6013      	str	r3, [r2, #0]
 8002c9a:	e00b      	b.n	8002cb4 <HAL_RCC_OscConfig+0xd8>
 8002c9c:	4b6f      	ldr	r3, [pc, #444]	; (8002e5c <HAL_RCC_OscConfig+0x280>)
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	4a6e      	ldr	r2, [pc, #440]	; (8002e5c <HAL_RCC_OscConfig+0x280>)
 8002ca2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ca6:	6013      	str	r3, [r2, #0]
 8002ca8:	4b6c      	ldr	r3, [pc, #432]	; (8002e5c <HAL_RCC_OscConfig+0x280>)
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	4a6b      	ldr	r2, [pc, #428]	; (8002e5c <HAL_RCC_OscConfig+0x280>)
 8002cae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002cb2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	685b      	ldr	r3, [r3, #4]
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d013      	beq.n	8002ce4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cbc:	f7fe fa88 	bl	80011d0 <HAL_GetTick>
 8002cc0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002cc2:	e008      	b.n	8002cd6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002cc4:	f7fe fa84 	bl	80011d0 <HAL_GetTick>
 8002cc8:	4602      	mov	r2, r0
 8002cca:	693b      	ldr	r3, [r7, #16]
 8002ccc:	1ad3      	subs	r3, r2, r3
 8002cce:	2b64      	cmp	r3, #100	; 0x64
 8002cd0:	d901      	bls.n	8002cd6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002cd2:	2303      	movs	r3, #3
 8002cd4:	e21f      	b.n	8003116 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002cd6:	4b61      	ldr	r3, [pc, #388]	; (8002e5c <HAL_RCC_OscConfig+0x280>)
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d0f0      	beq.n	8002cc4 <HAL_RCC_OscConfig+0xe8>
 8002ce2:	e014      	b.n	8002d0e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ce4:	f7fe fa74 	bl	80011d0 <HAL_GetTick>
 8002ce8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002cea:	e008      	b.n	8002cfe <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002cec:	f7fe fa70 	bl	80011d0 <HAL_GetTick>
 8002cf0:	4602      	mov	r2, r0
 8002cf2:	693b      	ldr	r3, [r7, #16]
 8002cf4:	1ad3      	subs	r3, r2, r3
 8002cf6:	2b64      	cmp	r3, #100	; 0x64
 8002cf8:	d901      	bls.n	8002cfe <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002cfa:	2303      	movs	r3, #3
 8002cfc:	e20b      	b.n	8003116 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002cfe:	4b57      	ldr	r3, [pc, #348]	; (8002e5c <HAL_RCC_OscConfig+0x280>)
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d1f0      	bne.n	8002cec <HAL_RCC_OscConfig+0x110>
 8002d0a:	e000      	b.n	8002d0e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d0c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f003 0302 	and.w	r3, r3, #2
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d069      	beq.n	8002dee <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002d1a:	4b50      	ldr	r3, [pc, #320]	; (8002e5c <HAL_RCC_OscConfig+0x280>)
 8002d1c:	689b      	ldr	r3, [r3, #8]
 8002d1e:	f003 030c 	and.w	r3, r3, #12
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d00b      	beq.n	8002d3e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002d26:	4b4d      	ldr	r3, [pc, #308]	; (8002e5c <HAL_RCC_OscConfig+0x280>)
 8002d28:	689b      	ldr	r3, [r3, #8]
 8002d2a:	f003 030c 	and.w	r3, r3, #12
 8002d2e:	2b08      	cmp	r3, #8
 8002d30:	d11c      	bne.n	8002d6c <HAL_RCC_OscConfig+0x190>
 8002d32:	4b4a      	ldr	r3, [pc, #296]	; (8002e5c <HAL_RCC_OscConfig+0x280>)
 8002d34:	685b      	ldr	r3, [r3, #4]
 8002d36:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d116      	bne.n	8002d6c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d3e:	4b47      	ldr	r3, [pc, #284]	; (8002e5c <HAL_RCC_OscConfig+0x280>)
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	f003 0302 	and.w	r3, r3, #2
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d005      	beq.n	8002d56 <HAL_RCC_OscConfig+0x17a>
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	68db      	ldr	r3, [r3, #12]
 8002d4e:	2b01      	cmp	r3, #1
 8002d50:	d001      	beq.n	8002d56 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002d52:	2301      	movs	r3, #1
 8002d54:	e1df      	b.n	8003116 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d56:	4b41      	ldr	r3, [pc, #260]	; (8002e5c <HAL_RCC_OscConfig+0x280>)
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	691b      	ldr	r3, [r3, #16]
 8002d62:	00db      	lsls	r3, r3, #3
 8002d64:	493d      	ldr	r1, [pc, #244]	; (8002e5c <HAL_RCC_OscConfig+0x280>)
 8002d66:	4313      	orrs	r3, r2
 8002d68:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d6a:	e040      	b.n	8002dee <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	68db      	ldr	r3, [r3, #12]
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d023      	beq.n	8002dbc <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002d74:	4b39      	ldr	r3, [pc, #228]	; (8002e5c <HAL_RCC_OscConfig+0x280>)
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	4a38      	ldr	r2, [pc, #224]	; (8002e5c <HAL_RCC_OscConfig+0x280>)
 8002d7a:	f043 0301 	orr.w	r3, r3, #1
 8002d7e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d80:	f7fe fa26 	bl	80011d0 <HAL_GetTick>
 8002d84:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d86:	e008      	b.n	8002d9a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d88:	f7fe fa22 	bl	80011d0 <HAL_GetTick>
 8002d8c:	4602      	mov	r2, r0
 8002d8e:	693b      	ldr	r3, [r7, #16]
 8002d90:	1ad3      	subs	r3, r2, r3
 8002d92:	2b02      	cmp	r3, #2
 8002d94:	d901      	bls.n	8002d9a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002d96:	2303      	movs	r3, #3
 8002d98:	e1bd      	b.n	8003116 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d9a:	4b30      	ldr	r3, [pc, #192]	; (8002e5c <HAL_RCC_OscConfig+0x280>)
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f003 0302 	and.w	r3, r3, #2
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d0f0      	beq.n	8002d88 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002da6:	4b2d      	ldr	r3, [pc, #180]	; (8002e5c <HAL_RCC_OscConfig+0x280>)
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	691b      	ldr	r3, [r3, #16]
 8002db2:	00db      	lsls	r3, r3, #3
 8002db4:	4929      	ldr	r1, [pc, #164]	; (8002e5c <HAL_RCC_OscConfig+0x280>)
 8002db6:	4313      	orrs	r3, r2
 8002db8:	600b      	str	r3, [r1, #0]
 8002dba:	e018      	b.n	8002dee <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002dbc:	4b27      	ldr	r3, [pc, #156]	; (8002e5c <HAL_RCC_OscConfig+0x280>)
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	4a26      	ldr	r2, [pc, #152]	; (8002e5c <HAL_RCC_OscConfig+0x280>)
 8002dc2:	f023 0301 	bic.w	r3, r3, #1
 8002dc6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002dc8:	f7fe fa02 	bl	80011d0 <HAL_GetTick>
 8002dcc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002dce:	e008      	b.n	8002de2 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002dd0:	f7fe f9fe 	bl	80011d0 <HAL_GetTick>
 8002dd4:	4602      	mov	r2, r0
 8002dd6:	693b      	ldr	r3, [r7, #16]
 8002dd8:	1ad3      	subs	r3, r2, r3
 8002dda:	2b02      	cmp	r3, #2
 8002ddc:	d901      	bls.n	8002de2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002dde:	2303      	movs	r3, #3
 8002de0:	e199      	b.n	8003116 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002de2:	4b1e      	ldr	r3, [pc, #120]	; (8002e5c <HAL_RCC_OscConfig+0x280>)
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f003 0302 	and.w	r3, r3, #2
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d1f0      	bne.n	8002dd0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f003 0308 	and.w	r3, r3, #8
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d038      	beq.n	8002e6c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	695b      	ldr	r3, [r3, #20]
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d019      	beq.n	8002e36 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002e02:	4b16      	ldr	r3, [pc, #88]	; (8002e5c <HAL_RCC_OscConfig+0x280>)
 8002e04:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e06:	4a15      	ldr	r2, [pc, #84]	; (8002e5c <HAL_RCC_OscConfig+0x280>)
 8002e08:	f043 0301 	orr.w	r3, r3, #1
 8002e0c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e0e:	f7fe f9df 	bl	80011d0 <HAL_GetTick>
 8002e12:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e14:	e008      	b.n	8002e28 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e16:	f7fe f9db 	bl	80011d0 <HAL_GetTick>
 8002e1a:	4602      	mov	r2, r0
 8002e1c:	693b      	ldr	r3, [r7, #16]
 8002e1e:	1ad3      	subs	r3, r2, r3
 8002e20:	2b02      	cmp	r3, #2
 8002e22:	d901      	bls.n	8002e28 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002e24:	2303      	movs	r3, #3
 8002e26:	e176      	b.n	8003116 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e28:	4b0c      	ldr	r3, [pc, #48]	; (8002e5c <HAL_RCC_OscConfig+0x280>)
 8002e2a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e2c:	f003 0302 	and.w	r3, r3, #2
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d0f0      	beq.n	8002e16 <HAL_RCC_OscConfig+0x23a>
 8002e34:	e01a      	b.n	8002e6c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002e36:	4b09      	ldr	r3, [pc, #36]	; (8002e5c <HAL_RCC_OscConfig+0x280>)
 8002e38:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e3a:	4a08      	ldr	r2, [pc, #32]	; (8002e5c <HAL_RCC_OscConfig+0x280>)
 8002e3c:	f023 0301 	bic.w	r3, r3, #1
 8002e40:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e42:	f7fe f9c5 	bl	80011d0 <HAL_GetTick>
 8002e46:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e48:	e00a      	b.n	8002e60 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e4a:	f7fe f9c1 	bl	80011d0 <HAL_GetTick>
 8002e4e:	4602      	mov	r2, r0
 8002e50:	693b      	ldr	r3, [r7, #16]
 8002e52:	1ad3      	subs	r3, r2, r3
 8002e54:	2b02      	cmp	r3, #2
 8002e56:	d903      	bls.n	8002e60 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002e58:	2303      	movs	r3, #3
 8002e5a:	e15c      	b.n	8003116 <HAL_RCC_OscConfig+0x53a>
 8002e5c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e60:	4b91      	ldr	r3, [pc, #580]	; (80030a8 <HAL_RCC_OscConfig+0x4cc>)
 8002e62:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e64:	f003 0302 	and.w	r3, r3, #2
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d1ee      	bne.n	8002e4a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f003 0304 	and.w	r3, r3, #4
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	f000 80a4 	beq.w	8002fc2 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002e7a:	4b8b      	ldr	r3, [pc, #556]	; (80030a8 <HAL_RCC_OscConfig+0x4cc>)
 8002e7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d10d      	bne.n	8002ea2 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e86:	4b88      	ldr	r3, [pc, #544]	; (80030a8 <HAL_RCC_OscConfig+0x4cc>)
 8002e88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e8a:	4a87      	ldr	r2, [pc, #540]	; (80030a8 <HAL_RCC_OscConfig+0x4cc>)
 8002e8c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e90:	6413      	str	r3, [r2, #64]	; 0x40
 8002e92:	4b85      	ldr	r3, [pc, #532]	; (80030a8 <HAL_RCC_OscConfig+0x4cc>)
 8002e94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e9a:	60bb      	str	r3, [r7, #8]
 8002e9c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002e9e:	2301      	movs	r3, #1
 8002ea0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002ea2:	4b82      	ldr	r3, [pc, #520]	; (80030ac <HAL_RCC_OscConfig+0x4d0>)
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d118      	bne.n	8002ee0 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8002eae:	4b7f      	ldr	r3, [pc, #508]	; (80030ac <HAL_RCC_OscConfig+0x4d0>)
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	4a7e      	ldr	r2, [pc, #504]	; (80030ac <HAL_RCC_OscConfig+0x4d0>)
 8002eb4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002eb8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002eba:	f7fe f989 	bl	80011d0 <HAL_GetTick>
 8002ebe:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002ec0:	e008      	b.n	8002ed4 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ec2:	f7fe f985 	bl	80011d0 <HAL_GetTick>
 8002ec6:	4602      	mov	r2, r0
 8002ec8:	693b      	ldr	r3, [r7, #16]
 8002eca:	1ad3      	subs	r3, r2, r3
 8002ecc:	2b64      	cmp	r3, #100	; 0x64
 8002ece:	d901      	bls.n	8002ed4 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002ed0:	2303      	movs	r3, #3
 8002ed2:	e120      	b.n	8003116 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002ed4:	4b75      	ldr	r3, [pc, #468]	; (80030ac <HAL_RCC_OscConfig+0x4d0>)
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d0f0      	beq.n	8002ec2 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	689b      	ldr	r3, [r3, #8]
 8002ee4:	2b01      	cmp	r3, #1
 8002ee6:	d106      	bne.n	8002ef6 <HAL_RCC_OscConfig+0x31a>
 8002ee8:	4b6f      	ldr	r3, [pc, #444]	; (80030a8 <HAL_RCC_OscConfig+0x4cc>)
 8002eea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002eec:	4a6e      	ldr	r2, [pc, #440]	; (80030a8 <HAL_RCC_OscConfig+0x4cc>)
 8002eee:	f043 0301 	orr.w	r3, r3, #1
 8002ef2:	6713      	str	r3, [r2, #112]	; 0x70
 8002ef4:	e02d      	b.n	8002f52 <HAL_RCC_OscConfig+0x376>
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	689b      	ldr	r3, [r3, #8]
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d10c      	bne.n	8002f18 <HAL_RCC_OscConfig+0x33c>
 8002efe:	4b6a      	ldr	r3, [pc, #424]	; (80030a8 <HAL_RCC_OscConfig+0x4cc>)
 8002f00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f02:	4a69      	ldr	r2, [pc, #420]	; (80030a8 <HAL_RCC_OscConfig+0x4cc>)
 8002f04:	f023 0301 	bic.w	r3, r3, #1
 8002f08:	6713      	str	r3, [r2, #112]	; 0x70
 8002f0a:	4b67      	ldr	r3, [pc, #412]	; (80030a8 <HAL_RCC_OscConfig+0x4cc>)
 8002f0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f0e:	4a66      	ldr	r2, [pc, #408]	; (80030a8 <HAL_RCC_OscConfig+0x4cc>)
 8002f10:	f023 0304 	bic.w	r3, r3, #4
 8002f14:	6713      	str	r3, [r2, #112]	; 0x70
 8002f16:	e01c      	b.n	8002f52 <HAL_RCC_OscConfig+0x376>
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	689b      	ldr	r3, [r3, #8]
 8002f1c:	2b05      	cmp	r3, #5
 8002f1e:	d10c      	bne.n	8002f3a <HAL_RCC_OscConfig+0x35e>
 8002f20:	4b61      	ldr	r3, [pc, #388]	; (80030a8 <HAL_RCC_OscConfig+0x4cc>)
 8002f22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f24:	4a60      	ldr	r2, [pc, #384]	; (80030a8 <HAL_RCC_OscConfig+0x4cc>)
 8002f26:	f043 0304 	orr.w	r3, r3, #4
 8002f2a:	6713      	str	r3, [r2, #112]	; 0x70
 8002f2c:	4b5e      	ldr	r3, [pc, #376]	; (80030a8 <HAL_RCC_OscConfig+0x4cc>)
 8002f2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f30:	4a5d      	ldr	r2, [pc, #372]	; (80030a8 <HAL_RCC_OscConfig+0x4cc>)
 8002f32:	f043 0301 	orr.w	r3, r3, #1
 8002f36:	6713      	str	r3, [r2, #112]	; 0x70
 8002f38:	e00b      	b.n	8002f52 <HAL_RCC_OscConfig+0x376>
 8002f3a:	4b5b      	ldr	r3, [pc, #364]	; (80030a8 <HAL_RCC_OscConfig+0x4cc>)
 8002f3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f3e:	4a5a      	ldr	r2, [pc, #360]	; (80030a8 <HAL_RCC_OscConfig+0x4cc>)
 8002f40:	f023 0301 	bic.w	r3, r3, #1
 8002f44:	6713      	str	r3, [r2, #112]	; 0x70
 8002f46:	4b58      	ldr	r3, [pc, #352]	; (80030a8 <HAL_RCC_OscConfig+0x4cc>)
 8002f48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f4a:	4a57      	ldr	r2, [pc, #348]	; (80030a8 <HAL_RCC_OscConfig+0x4cc>)
 8002f4c:	f023 0304 	bic.w	r3, r3, #4
 8002f50:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	689b      	ldr	r3, [r3, #8]
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d015      	beq.n	8002f86 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f5a:	f7fe f939 	bl	80011d0 <HAL_GetTick>
 8002f5e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f60:	e00a      	b.n	8002f78 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f62:	f7fe f935 	bl	80011d0 <HAL_GetTick>
 8002f66:	4602      	mov	r2, r0
 8002f68:	693b      	ldr	r3, [r7, #16]
 8002f6a:	1ad3      	subs	r3, r2, r3
 8002f6c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f70:	4293      	cmp	r3, r2
 8002f72:	d901      	bls.n	8002f78 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002f74:	2303      	movs	r3, #3
 8002f76:	e0ce      	b.n	8003116 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f78:	4b4b      	ldr	r3, [pc, #300]	; (80030a8 <HAL_RCC_OscConfig+0x4cc>)
 8002f7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f7c:	f003 0302 	and.w	r3, r3, #2
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d0ee      	beq.n	8002f62 <HAL_RCC_OscConfig+0x386>
 8002f84:	e014      	b.n	8002fb0 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f86:	f7fe f923 	bl	80011d0 <HAL_GetTick>
 8002f8a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f8c:	e00a      	b.n	8002fa4 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f8e:	f7fe f91f 	bl	80011d0 <HAL_GetTick>
 8002f92:	4602      	mov	r2, r0
 8002f94:	693b      	ldr	r3, [r7, #16]
 8002f96:	1ad3      	subs	r3, r2, r3
 8002f98:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f9c:	4293      	cmp	r3, r2
 8002f9e:	d901      	bls.n	8002fa4 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002fa0:	2303      	movs	r3, #3
 8002fa2:	e0b8      	b.n	8003116 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002fa4:	4b40      	ldr	r3, [pc, #256]	; (80030a8 <HAL_RCC_OscConfig+0x4cc>)
 8002fa6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fa8:	f003 0302 	and.w	r3, r3, #2
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d1ee      	bne.n	8002f8e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002fb0:	7dfb      	ldrb	r3, [r7, #23]
 8002fb2:	2b01      	cmp	r3, #1
 8002fb4:	d105      	bne.n	8002fc2 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002fb6:	4b3c      	ldr	r3, [pc, #240]	; (80030a8 <HAL_RCC_OscConfig+0x4cc>)
 8002fb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fba:	4a3b      	ldr	r2, [pc, #236]	; (80030a8 <HAL_RCC_OscConfig+0x4cc>)
 8002fbc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002fc0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	699b      	ldr	r3, [r3, #24]
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	f000 80a4 	beq.w	8003114 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002fcc:	4b36      	ldr	r3, [pc, #216]	; (80030a8 <HAL_RCC_OscConfig+0x4cc>)
 8002fce:	689b      	ldr	r3, [r3, #8]
 8002fd0:	f003 030c 	and.w	r3, r3, #12
 8002fd4:	2b08      	cmp	r3, #8
 8002fd6:	d06b      	beq.n	80030b0 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	699b      	ldr	r3, [r3, #24]
 8002fdc:	2b02      	cmp	r3, #2
 8002fde:	d149      	bne.n	8003074 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002fe0:	4b31      	ldr	r3, [pc, #196]	; (80030a8 <HAL_RCC_OscConfig+0x4cc>)
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	4a30      	ldr	r2, [pc, #192]	; (80030a8 <HAL_RCC_OscConfig+0x4cc>)
 8002fe6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002fea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fec:	f7fe f8f0 	bl	80011d0 <HAL_GetTick>
 8002ff0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ff2:	e008      	b.n	8003006 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ff4:	f7fe f8ec 	bl	80011d0 <HAL_GetTick>
 8002ff8:	4602      	mov	r2, r0
 8002ffa:	693b      	ldr	r3, [r7, #16]
 8002ffc:	1ad3      	subs	r3, r2, r3
 8002ffe:	2b02      	cmp	r3, #2
 8003000:	d901      	bls.n	8003006 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8003002:	2303      	movs	r3, #3
 8003004:	e087      	b.n	8003116 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003006:	4b28      	ldr	r3, [pc, #160]	; (80030a8 <HAL_RCC_OscConfig+0x4cc>)
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800300e:	2b00      	cmp	r3, #0
 8003010:	d1f0      	bne.n	8002ff4 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	69da      	ldr	r2, [r3, #28]
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	6a1b      	ldr	r3, [r3, #32]
 800301a:	431a      	orrs	r2, r3
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003020:	019b      	lsls	r3, r3, #6
 8003022:	431a      	orrs	r2, r3
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003028:	085b      	lsrs	r3, r3, #1
 800302a:	3b01      	subs	r3, #1
 800302c:	041b      	lsls	r3, r3, #16
 800302e:	431a      	orrs	r2, r3
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003034:	061b      	lsls	r3, r3, #24
 8003036:	4313      	orrs	r3, r2
 8003038:	4a1b      	ldr	r2, [pc, #108]	; (80030a8 <HAL_RCC_OscConfig+0x4cc>)
 800303a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800303e:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003040:	4b19      	ldr	r3, [pc, #100]	; (80030a8 <HAL_RCC_OscConfig+0x4cc>)
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	4a18      	ldr	r2, [pc, #96]	; (80030a8 <HAL_RCC_OscConfig+0x4cc>)
 8003046:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800304a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800304c:	f7fe f8c0 	bl	80011d0 <HAL_GetTick>
 8003050:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003052:	e008      	b.n	8003066 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003054:	f7fe f8bc 	bl	80011d0 <HAL_GetTick>
 8003058:	4602      	mov	r2, r0
 800305a:	693b      	ldr	r3, [r7, #16]
 800305c:	1ad3      	subs	r3, r2, r3
 800305e:	2b02      	cmp	r3, #2
 8003060:	d901      	bls.n	8003066 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8003062:	2303      	movs	r3, #3
 8003064:	e057      	b.n	8003116 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003066:	4b10      	ldr	r3, [pc, #64]	; (80030a8 <HAL_RCC_OscConfig+0x4cc>)
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800306e:	2b00      	cmp	r3, #0
 8003070:	d0f0      	beq.n	8003054 <HAL_RCC_OscConfig+0x478>
 8003072:	e04f      	b.n	8003114 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003074:	4b0c      	ldr	r3, [pc, #48]	; (80030a8 <HAL_RCC_OscConfig+0x4cc>)
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	4a0b      	ldr	r2, [pc, #44]	; (80030a8 <HAL_RCC_OscConfig+0x4cc>)
 800307a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800307e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003080:	f7fe f8a6 	bl	80011d0 <HAL_GetTick>
 8003084:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003086:	e008      	b.n	800309a <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003088:	f7fe f8a2 	bl	80011d0 <HAL_GetTick>
 800308c:	4602      	mov	r2, r0
 800308e:	693b      	ldr	r3, [r7, #16]
 8003090:	1ad3      	subs	r3, r2, r3
 8003092:	2b02      	cmp	r3, #2
 8003094:	d901      	bls.n	800309a <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8003096:	2303      	movs	r3, #3
 8003098:	e03d      	b.n	8003116 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800309a:	4b03      	ldr	r3, [pc, #12]	; (80030a8 <HAL_RCC_OscConfig+0x4cc>)
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d1f0      	bne.n	8003088 <HAL_RCC_OscConfig+0x4ac>
 80030a6:	e035      	b.n	8003114 <HAL_RCC_OscConfig+0x538>
 80030a8:	40023800 	.word	0x40023800
 80030ac:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80030b0:	4b1b      	ldr	r3, [pc, #108]	; (8003120 <HAL_RCC_OscConfig+0x544>)
 80030b2:	685b      	ldr	r3, [r3, #4]
 80030b4:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	699b      	ldr	r3, [r3, #24]
 80030ba:	2b01      	cmp	r3, #1
 80030bc:	d028      	beq.n	8003110 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80030c8:	429a      	cmp	r2, r3
 80030ca:	d121      	bne.n	8003110 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80030d6:	429a      	cmp	r2, r3
 80030d8:	d11a      	bne.n	8003110 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80030da:	68fa      	ldr	r2, [r7, #12]
 80030dc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80030e0:	4013      	ands	r3, r2
 80030e2:	687a      	ldr	r2, [r7, #4]
 80030e4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80030e6:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80030e8:	4293      	cmp	r3, r2
 80030ea:	d111      	bne.n	8003110 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030f6:	085b      	lsrs	r3, r3, #1
 80030f8:	3b01      	subs	r3, #1
 80030fa:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80030fc:	429a      	cmp	r2, r3
 80030fe:	d107      	bne.n	8003110 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800310a:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800310c:	429a      	cmp	r2, r3
 800310e:	d001      	beq.n	8003114 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8003110:	2301      	movs	r3, #1
 8003112:	e000      	b.n	8003116 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8003114:	2300      	movs	r3, #0
}
 8003116:	4618      	mov	r0, r3
 8003118:	3718      	adds	r7, #24
 800311a:	46bd      	mov	sp, r7
 800311c:	bd80      	pop	{r7, pc}
 800311e:	bf00      	nop
 8003120:	40023800 	.word	0x40023800

08003124 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003124:	b580      	push	{r7, lr}
 8003126:	b084      	sub	sp, #16
 8003128:	af00      	add	r7, sp, #0
 800312a:	6078      	str	r0, [r7, #4]
 800312c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800312e:	2300      	movs	r3, #0
 8003130:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	2b00      	cmp	r3, #0
 8003136:	d101      	bne.n	800313c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003138:	2301      	movs	r3, #1
 800313a:	e0d0      	b.n	80032de <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800313c:	4b6a      	ldr	r3, [pc, #424]	; (80032e8 <HAL_RCC_ClockConfig+0x1c4>)
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	f003 030f 	and.w	r3, r3, #15
 8003144:	683a      	ldr	r2, [r7, #0]
 8003146:	429a      	cmp	r2, r3
 8003148:	d910      	bls.n	800316c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800314a:	4b67      	ldr	r3, [pc, #412]	; (80032e8 <HAL_RCC_ClockConfig+0x1c4>)
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	f023 020f 	bic.w	r2, r3, #15
 8003152:	4965      	ldr	r1, [pc, #404]	; (80032e8 <HAL_RCC_ClockConfig+0x1c4>)
 8003154:	683b      	ldr	r3, [r7, #0]
 8003156:	4313      	orrs	r3, r2
 8003158:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800315a:	4b63      	ldr	r3, [pc, #396]	; (80032e8 <HAL_RCC_ClockConfig+0x1c4>)
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f003 030f 	and.w	r3, r3, #15
 8003162:	683a      	ldr	r2, [r7, #0]
 8003164:	429a      	cmp	r2, r3
 8003166:	d001      	beq.n	800316c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003168:	2301      	movs	r3, #1
 800316a:	e0b8      	b.n	80032de <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	f003 0302 	and.w	r3, r3, #2
 8003174:	2b00      	cmp	r3, #0
 8003176:	d020      	beq.n	80031ba <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	f003 0304 	and.w	r3, r3, #4
 8003180:	2b00      	cmp	r3, #0
 8003182:	d005      	beq.n	8003190 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003184:	4b59      	ldr	r3, [pc, #356]	; (80032ec <HAL_RCC_ClockConfig+0x1c8>)
 8003186:	689b      	ldr	r3, [r3, #8]
 8003188:	4a58      	ldr	r2, [pc, #352]	; (80032ec <HAL_RCC_ClockConfig+0x1c8>)
 800318a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800318e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	f003 0308 	and.w	r3, r3, #8
 8003198:	2b00      	cmp	r3, #0
 800319a:	d005      	beq.n	80031a8 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800319c:	4b53      	ldr	r3, [pc, #332]	; (80032ec <HAL_RCC_ClockConfig+0x1c8>)
 800319e:	689b      	ldr	r3, [r3, #8]
 80031a0:	4a52      	ldr	r2, [pc, #328]	; (80032ec <HAL_RCC_ClockConfig+0x1c8>)
 80031a2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80031a6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80031a8:	4b50      	ldr	r3, [pc, #320]	; (80032ec <HAL_RCC_ClockConfig+0x1c8>)
 80031aa:	689b      	ldr	r3, [r3, #8]
 80031ac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	689b      	ldr	r3, [r3, #8]
 80031b4:	494d      	ldr	r1, [pc, #308]	; (80032ec <HAL_RCC_ClockConfig+0x1c8>)
 80031b6:	4313      	orrs	r3, r2
 80031b8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	f003 0301 	and.w	r3, r3, #1
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d040      	beq.n	8003248 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	685b      	ldr	r3, [r3, #4]
 80031ca:	2b01      	cmp	r3, #1
 80031cc:	d107      	bne.n	80031de <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031ce:	4b47      	ldr	r3, [pc, #284]	; (80032ec <HAL_RCC_ClockConfig+0x1c8>)
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d115      	bne.n	8003206 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80031da:	2301      	movs	r3, #1
 80031dc:	e07f      	b.n	80032de <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	685b      	ldr	r3, [r3, #4]
 80031e2:	2b02      	cmp	r3, #2
 80031e4:	d107      	bne.n	80031f6 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80031e6:	4b41      	ldr	r3, [pc, #260]	; (80032ec <HAL_RCC_ClockConfig+0x1c8>)
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d109      	bne.n	8003206 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80031f2:	2301      	movs	r3, #1
 80031f4:	e073      	b.n	80032de <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031f6:	4b3d      	ldr	r3, [pc, #244]	; (80032ec <HAL_RCC_ClockConfig+0x1c8>)
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f003 0302 	and.w	r3, r3, #2
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d101      	bne.n	8003206 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003202:	2301      	movs	r3, #1
 8003204:	e06b      	b.n	80032de <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003206:	4b39      	ldr	r3, [pc, #228]	; (80032ec <HAL_RCC_ClockConfig+0x1c8>)
 8003208:	689b      	ldr	r3, [r3, #8]
 800320a:	f023 0203 	bic.w	r2, r3, #3
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	685b      	ldr	r3, [r3, #4]
 8003212:	4936      	ldr	r1, [pc, #216]	; (80032ec <HAL_RCC_ClockConfig+0x1c8>)
 8003214:	4313      	orrs	r3, r2
 8003216:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003218:	f7fd ffda 	bl	80011d0 <HAL_GetTick>
 800321c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800321e:	e00a      	b.n	8003236 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003220:	f7fd ffd6 	bl	80011d0 <HAL_GetTick>
 8003224:	4602      	mov	r2, r0
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	1ad3      	subs	r3, r2, r3
 800322a:	f241 3288 	movw	r2, #5000	; 0x1388
 800322e:	4293      	cmp	r3, r2
 8003230:	d901      	bls.n	8003236 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8003232:	2303      	movs	r3, #3
 8003234:	e053      	b.n	80032de <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003236:	4b2d      	ldr	r3, [pc, #180]	; (80032ec <HAL_RCC_ClockConfig+0x1c8>)
 8003238:	689b      	ldr	r3, [r3, #8]
 800323a:	f003 020c 	and.w	r2, r3, #12
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	685b      	ldr	r3, [r3, #4]
 8003242:	009b      	lsls	r3, r3, #2
 8003244:	429a      	cmp	r2, r3
 8003246:	d1eb      	bne.n	8003220 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003248:	4b27      	ldr	r3, [pc, #156]	; (80032e8 <HAL_RCC_ClockConfig+0x1c4>)
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	f003 030f 	and.w	r3, r3, #15
 8003250:	683a      	ldr	r2, [r7, #0]
 8003252:	429a      	cmp	r2, r3
 8003254:	d210      	bcs.n	8003278 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003256:	4b24      	ldr	r3, [pc, #144]	; (80032e8 <HAL_RCC_ClockConfig+0x1c4>)
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f023 020f 	bic.w	r2, r3, #15
 800325e:	4922      	ldr	r1, [pc, #136]	; (80032e8 <HAL_RCC_ClockConfig+0x1c4>)
 8003260:	683b      	ldr	r3, [r7, #0]
 8003262:	4313      	orrs	r3, r2
 8003264:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003266:	4b20      	ldr	r3, [pc, #128]	; (80032e8 <HAL_RCC_ClockConfig+0x1c4>)
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	f003 030f 	and.w	r3, r3, #15
 800326e:	683a      	ldr	r2, [r7, #0]
 8003270:	429a      	cmp	r2, r3
 8003272:	d001      	beq.n	8003278 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8003274:	2301      	movs	r3, #1
 8003276:	e032      	b.n	80032de <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	f003 0304 	and.w	r3, r3, #4
 8003280:	2b00      	cmp	r3, #0
 8003282:	d008      	beq.n	8003296 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003284:	4b19      	ldr	r3, [pc, #100]	; (80032ec <HAL_RCC_ClockConfig+0x1c8>)
 8003286:	689b      	ldr	r3, [r3, #8]
 8003288:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	68db      	ldr	r3, [r3, #12]
 8003290:	4916      	ldr	r1, [pc, #88]	; (80032ec <HAL_RCC_ClockConfig+0x1c8>)
 8003292:	4313      	orrs	r3, r2
 8003294:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f003 0308 	and.w	r3, r3, #8
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d009      	beq.n	80032b6 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80032a2:	4b12      	ldr	r3, [pc, #72]	; (80032ec <HAL_RCC_ClockConfig+0x1c8>)
 80032a4:	689b      	ldr	r3, [r3, #8]
 80032a6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	691b      	ldr	r3, [r3, #16]
 80032ae:	00db      	lsls	r3, r3, #3
 80032b0:	490e      	ldr	r1, [pc, #56]	; (80032ec <HAL_RCC_ClockConfig+0x1c8>)
 80032b2:	4313      	orrs	r3, r2
 80032b4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80032b6:	f000 f821 	bl	80032fc <HAL_RCC_GetSysClockFreq>
 80032ba:	4602      	mov	r2, r0
 80032bc:	4b0b      	ldr	r3, [pc, #44]	; (80032ec <HAL_RCC_ClockConfig+0x1c8>)
 80032be:	689b      	ldr	r3, [r3, #8]
 80032c0:	091b      	lsrs	r3, r3, #4
 80032c2:	f003 030f 	and.w	r3, r3, #15
 80032c6:	490a      	ldr	r1, [pc, #40]	; (80032f0 <HAL_RCC_ClockConfig+0x1cc>)
 80032c8:	5ccb      	ldrb	r3, [r1, r3]
 80032ca:	fa22 f303 	lsr.w	r3, r2, r3
 80032ce:	4a09      	ldr	r2, [pc, #36]	; (80032f4 <HAL_RCC_ClockConfig+0x1d0>)
 80032d0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80032d2:	4b09      	ldr	r3, [pc, #36]	; (80032f8 <HAL_RCC_ClockConfig+0x1d4>)
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	4618      	mov	r0, r3
 80032d8:	f7fd ff36 	bl	8001148 <HAL_InitTick>

  return HAL_OK;
 80032dc:	2300      	movs	r3, #0
}
 80032de:	4618      	mov	r0, r3
 80032e0:	3710      	adds	r7, #16
 80032e2:	46bd      	mov	sp, r7
 80032e4:	bd80      	pop	{r7, pc}
 80032e6:	bf00      	nop
 80032e8:	40023c00 	.word	0x40023c00
 80032ec:	40023800 	.word	0x40023800
 80032f0:	080079c0 	.word	0x080079c0
 80032f4:	20000000 	.word	0x20000000
 80032f8:	20000004 	.word	0x20000004

080032fc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80032fc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003300:	b090      	sub	sp, #64	; 0x40
 8003302:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8003304:	2300      	movs	r3, #0
 8003306:	637b      	str	r3, [r7, #52]	; 0x34
 8003308:	2300      	movs	r3, #0
 800330a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800330c:	2300      	movs	r3, #0
 800330e:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
 8003310:	2300      	movs	r3, #0
 8003312:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003314:	4b59      	ldr	r3, [pc, #356]	; (800347c <HAL_RCC_GetSysClockFreq+0x180>)
 8003316:	689b      	ldr	r3, [r3, #8]
 8003318:	f003 030c 	and.w	r3, r3, #12
 800331c:	2b08      	cmp	r3, #8
 800331e:	d00d      	beq.n	800333c <HAL_RCC_GetSysClockFreq+0x40>
 8003320:	2b08      	cmp	r3, #8
 8003322:	f200 80a1 	bhi.w	8003468 <HAL_RCC_GetSysClockFreq+0x16c>
 8003326:	2b00      	cmp	r3, #0
 8003328:	d002      	beq.n	8003330 <HAL_RCC_GetSysClockFreq+0x34>
 800332a:	2b04      	cmp	r3, #4
 800332c:	d003      	beq.n	8003336 <HAL_RCC_GetSysClockFreq+0x3a>
 800332e:	e09b      	b.n	8003468 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003330:	4b53      	ldr	r3, [pc, #332]	; (8003480 <HAL_RCC_GetSysClockFreq+0x184>)
 8003332:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003334:	e09b      	b.n	800346e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003336:	4b53      	ldr	r3, [pc, #332]	; (8003484 <HAL_RCC_GetSysClockFreq+0x188>)
 8003338:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800333a:	e098      	b.n	800346e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800333c:	4b4f      	ldr	r3, [pc, #316]	; (800347c <HAL_RCC_GetSysClockFreq+0x180>)
 800333e:	685b      	ldr	r3, [r3, #4]
 8003340:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003344:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8003346:	4b4d      	ldr	r3, [pc, #308]	; (800347c <HAL_RCC_GetSysClockFreq+0x180>)
 8003348:	685b      	ldr	r3, [r3, #4]
 800334a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800334e:	2b00      	cmp	r3, #0
 8003350:	d028      	beq.n	80033a4 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003352:	4b4a      	ldr	r3, [pc, #296]	; (800347c <HAL_RCC_GetSysClockFreq+0x180>)
 8003354:	685b      	ldr	r3, [r3, #4]
 8003356:	099b      	lsrs	r3, r3, #6
 8003358:	2200      	movs	r2, #0
 800335a:	623b      	str	r3, [r7, #32]
 800335c:	627a      	str	r2, [r7, #36]	; 0x24
 800335e:	6a3b      	ldr	r3, [r7, #32]
 8003360:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003364:	2100      	movs	r1, #0
 8003366:	4b47      	ldr	r3, [pc, #284]	; (8003484 <HAL_RCC_GetSysClockFreq+0x188>)
 8003368:	fb03 f201 	mul.w	r2, r3, r1
 800336c:	2300      	movs	r3, #0
 800336e:	fb00 f303 	mul.w	r3, r0, r3
 8003372:	4413      	add	r3, r2
 8003374:	4a43      	ldr	r2, [pc, #268]	; (8003484 <HAL_RCC_GetSysClockFreq+0x188>)
 8003376:	fba0 1202 	umull	r1, r2, r0, r2
 800337a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800337c:	460a      	mov	r2, r1
 800337e:	62ba      	str	r2, [r7, #40]	; 0x28
 8003380:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003382:	4413      	add	r3, r2
 8003384:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003386:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003388:	2200      	movs	r2, #0
 800338a:	61bb      	str	r3, [r7, #24]
 800338c:	61fa      	str	r2, [r7, #28]
 800338e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003392:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003396:	f7fc ff43 	bl	8000220 <__aeabi_uldivmod>
 800339a:	4602      	mov	r2, r0
 800339c:	460b      	mov	r3, r1
 800339e:	4613      	mov	r3, r2
 80033a0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80033a2:	e053      	b.n	800344c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80033a4:	4b35      	ldr	r3, [pc, #212]	; (800347c <HAL_RCC_GetSysClockFreq+0x180>)
 80033a6:	685b      	ldr	r3, [r3, #4]
 80033a8:	099b      	lsrs	r3, r3, #6
 80033aa:	2200      	movs	r2, #0
 80033ac:	613b      	str	r3, [r7, #16]
 80033ae:	617a      	str	r2, [r7, #20]
 80033b0:	693b      	ldr	r3, [r7, #16]
 80033b2:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80033b6:	f04f 0b00 	mov.w	fp, #0
 80033ba:	4652      	mov	r2, sl
 80033bc:	465b      	mov	r3, fp
 80033be:	f04f 0000 	mov.w	r0, #0
 80033c2:	f04f 0100 	mov.w	r1, #0
 80033c6:	0159      	lsls	r1, r3, #5
 80033c8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80033cc:	0150      	lsls	r0, r2, #5
 80033ce:	4602      	mov	r2, r0
 80033d0:	460b      	mov	r3, r1
 80033d2:	ebb2 080a 	subs.w	r8, r2, sl
 80033d6:	eb63 090b 	sbc.w	r9, r3, fp
 80033da:	f04f 0200 	mov.w	r2, #0
 80033de:	f04f 0300 	mov.w	r3, #0
 80033e2:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80033e6:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80033ea:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80033ee:	ebb2 0408 	subs.w	r4, r2, r8
 80033f2:	eb63 0509 	sbc.w	r5, r3, r9
 80033f6:	f04f 0200 	mov.w	r2, #0
 80033fa:	f04f 0300 	mov.w	r3, #0
 80033fe:	00eb      	lsls	r3, r5, #3
 8003400:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003404:	00e2      	lsls	r2, r4, #3
 8003406:	4614      	mov	r4, r2
 8003408:	461d      	mov	r5, r3
 800340a:	eb14 030a 	adds.w	r3, r4, sl
 800340e:	603b      	str	r3, [r7, #0]
 8003410:	eb45 030b 	adc.w	r3, r5, fp
 8003414:	607b      	str	r3, [r7, #4]
 8003416:	f04f 0200 	mov.w	r2, #0
 800341a:	f04f 0300 	mov.w	r3, #0
 800341e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003422:	4629      	mov	r1, r5
 8003424:	028b      	lsls	r3, r1, #10
 8003426:	4621      	mov	r1, r4
 8003428:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800342c:	4621      	mov	r1, r4
 800342e:	028a      	lsls	r2, r1, #10
 8003430:	4610      	mov	r0, r2
 8003432:	4619      	mov	r1, r3
 8003434:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003436:	2200      	movs	r2, #0
 8003438:	60bb      	str	r3, [r7, #8]
 800343a:	60fa      	str	r2, [r7, #12]
 800343c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003440:	f7fc feee 	bl	8000220 <__aeabi_uldivmod>
 8003444:	4602      	mov	r2, r0
 8003446:	460b      	mov	r3, r1
 8003448:	4613      	mov	r3, r2
 800344a:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800344c:	4b0b      	ldr	r3, [pc, #44]	; (800347c <HAL_RCC_GetSysClockFreq+0x180>)
 800344e:	685b      	ldr	r3, [r3, #4]
 8003450:	0c1b      	lsrs	r3, r3, #16
 8003452:	f003 0303 	and.w	r3, r3, #3
 8003456:	3301      	adds	r3, #1
 8003458:	005b      	lsls	r3, r3, #1
 800345a:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 800345c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800345e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003460:	fbb2 f3f3 	udiv	r3, r2, r3
 8003464:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003466:	e002      	b.n	800346e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003468:	4b05      	ldr	r3, [pc, #20]	; (8003480 <HAL_RCC_GetSysClockFreq+0x184>)
 800346a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800346c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800346e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8003470:	4618      	mov	r0, r3
 8003472:	3740      	adds	r7, #64	; 0x40
 8003474:	46bd      	mov	sp, r7
 8003476:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800347a:	bf00      	nop
 800347c:	40023800 	.word	0x40023800
 8003480:	00f42400 	.word	0x00f42400
 8003484:	017d7840 	.word	0x017d7840

08003488 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003488:	b480      	push	{r7}
 800348a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800348c:	4b03      	ldr	r3, [pc, #12]	; (800349c <HAL_RCC_GetHCLKFreq+0x14>)
 800348e:	681b      	ldr	r3, [r3, #0]
}
 8003490:	4618      	mov	r0, r3
 8003492:	46bd      	mov	sp, r7
 8003494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003498:	4770      	bx	lr
 800349a:	bf00      	nop
 800349c:	20000000 	.word	0x20000000

080034a0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80034a0:	b580      	push	{r7, lr}
 80034a2:	b088      	sub	sp, #32
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80034a8:	2300      	movs	r3, #0
 80034aa:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80034ac:	2300      	movs	r3, #0
 80034ae:	613b      	str	r3, [r7, #16]
  uint32_t plli2sused = 0;
 80034b0:	2300      	movs	r3, #0
 80034b2:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80034b4:	2300      	movs	r3, #0
 80034b6:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	f003 0301 	and.w	r3, r3, #1
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d012      	beq.n	80034ea <HAL_RCCEx_PeriphCLKConfig+0x4a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80034c4:	4b65      	ldr	r3, [pc, #404]	; (800365c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80034c6:	689b      	ldr	r3, [r3, #8]
 80034c8:	4a64      	ldr	r2, [pc, #400]	; (800365c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80034ca:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80034ce:	6093      	str	r3, [r2, #8]
 80034d0:	4b62      	ldr	r3, [pc, #392]	; (800365c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80034d2:	689a      	ldr	r2, [r3, #8]
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034d8:	4960      	ldr	r1, [pc, #384]	; (800365c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80034da:	4313      	orrs	r3, r2
 80034dc:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d101      	bne.n	80034ea <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      plli2sused = 1;
 80034e6:	2301      	movs	r3, #1
 80034e8:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d017      	beq.n	8003526 <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80034f6:	4b59      	ldr	r3, [pc, #356]	; (800365c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80034f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80034fc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003504:	4955      	ldr	r1, [pc, #340]	; (800365c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003506:	4313      	orrs	r3, r2
 8003508:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003510:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003514:	d101      	bne.n	800351a <HAL_RCCEx_PeriphCLKConfig+0x7a>
    {
      plli2sused = 1;
 8003516:	2301      	movs	r3, #1
 8003518:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800351e:	2b00      	cmp	r3, #0
 8003520:	d101      	bne.n	8003526 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      pllsaiused = 1;
 8003522:	2301      	movs	r3, #1
 8003524:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800352e:	2b00      	cmp	r3, #0
 8003530:	d017      	beq.n	8003562 <HAL_RCCEx_PeriphCLKConfig+0xc2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003532:	4b4a      	ldr	r3, [pc, #296]	; (800365c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003534:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003538:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003540:	4946      	ldr	r1, [pc, #280]	; (800365c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003542:	4313      	orrs	r3, r2
 8003544:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800354c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003550:	d101      	bne.n	8003556 <HAL_RCCEx_PeriphCLKConfig+0xb6>
    {
      plli2sused = 1;
 8003552:	2301      	movs	r3, #1
 8003554:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800355a:	2b00      	cmp	r3, #0
 800355c:	d101      	bne.n	8003562 <HAL_RCCEx_PeriphCLKConfig+0xc2>
    {
      pllsaiused = 1;
 800355e:	2301      	movs	r3, #1
 8003560:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	f003 0320 	and.w	r3, r3, #32
 800356a:	2b00      	cmp	r3, #0
 800356c:	f000 808b 	beq.w	8003686 <HAL_RCCEx_PeriphCLKConfig+0x1e6>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003570:	4b3a      	ldr	r3, [pc, #232]	; (800365c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003572:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003574:	4a39      	ldr	r2, [pc, #228]	; (800365c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003576:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800357a:	6413      	str	r3, [r2, #64]	; 0x40
 800357c:	4b37      	ldr	r3, [pc, #220]	; (800365c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800357e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003580:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003584:	60fb      	str	r3, [r7, #12]
 8003586:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003588:	4b35      	ldr	r3, [pc, #212]	; (8003660 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	4a34      	ldr	r2, [pc, #208]	; (8003660 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800358e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003592:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003594:	f7fd fe1c 	bl	80011d0 <HAL_GetTick>
 8003598:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800359a:	e008      	b.n	80035ae <HAL_RCCEx_PeriphCLKConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800359c:	f7fd fe18 	bl	80011d0 <HAL_GetTick>
 80035a0:	4602      	mov	r2, r0
 80035a2:	697b      	ldr	r3, [r7, #20]
 80035a4:	1ad3      	subs	r3, r2, r3
 80035a6:	2b64      	cmp	r3, #100	; 0x64
 80035a8:	d901      	bls.n	80035ae <HAL_RCCEx_PeriphCLKConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80035aa:	2303      	movs	r3, #3
 80035ac:	e2bc      	b.n	8003b28 <HAL_RCCEx_PeriphCLKConfig+0x688>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80035ae:	4b2c      	ldr	r3, [pc, #176]	; (8003660 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d0f0      	beq.n	800359c <HAL_RCCEx_PeriphCLKConfig+0xfc>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80035ba:	4b28      	ldr	r3, [pc, #160]	; (800365c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80035bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80035c2:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80035c4:	693b      	ldr	r3, [r7, #16]
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d035      	beq.n	8003636 <HAL_RCCEx_PeriphCLKConfig+0x196>
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80035d2:	693a      	ldr	r2, [r7, #16]
 80035d4:	429a      	cmp	r2, r3
 80035d6:	d02e      	beq.n	8003636 <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80035d8:	4b20      	ldr	r3, [pc, #128]	; (800365c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80035da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035dc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80035e0:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80035e2:	4b1e      	ldr	r3, [pc, #120]	; (800365c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80035e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035e6:	4a1d      	ldr	r2, [pc, #116]	; (800365c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80035e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80035ec:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80035ee:	4b1b      	ldr	r3, [pc, #108]	; (800365c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80035f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035f2:	4a1a      	ldr	r2, [pc, #104]	; (800365c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80035f4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80035f8:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80035fa:	4a18      	ldr	r2, [pc, #96]	; (800365c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80035fc:	693b      	ldr	r3, [r7, #16]
 80035fe:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003600:	4b16      	ldr	r3, [pc, #88]	; (800365c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003602:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003604:	f003 0301 	and.w	r3, r3, #1
 8003608:	2b01      	cmp	r3, #1
 800360a:	d114      	bne.n	8003636 <HAL_RCCEx_PeriphCLKConfig+0x196>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800360c:	f7fd fde0 	bl	80011d0 <HAL_GetTick>
 8003610:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003612:	e00a      	b.n	800362a <HAL_RCCEx_PeriphCLKConfig+0x18a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003614:	f7fd fddc 	bl	80011d0 <HAL_GetTick>
 8003618:	4602      	mov	r2, r0
 800361a:	697b      	ldr	r3, [r7, #20]
 800361c:	1ad3      	subs	r3, r2, r3
 800361e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003622:	4293      	cmp	r3, r2
 8003624:	d901      	bls.n	800362a <HAL_RCCEx_PeriphCLKConfig+0x18a>
          {
            return HAL_TIMEOUT;
 8003626:	2303      	movs	r3, #3
 8003628:	e27e      	b.n	8003b28 <HAL_RCCEx_PeriphCLKConfig+0x688>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800362a:	4b0c      	ldr	r3, [pc, #48]	; (800365c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800362c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800362e:	f003 0302 	and.w	r3, r3, #2
 8003632:	2b00      	cmp	r3, #0
 8003634:	d0ee      	beq.n	8003614 <HAL_RCCEx_PeriphCLKConfig+0x174>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800363a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800363e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003642:	d111      	bne.n	8003668 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
 8003644:	4b05      	ldr	r3, [pc, #20]	; (800365c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003646:	689b      	ldr	r3, [r3, #8]
 8003648:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8003650:	4b04      	ldr	r3, [pc, #16]	; (8003664 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8003652:	400b      	ands	r3, r1
 8003654:	4901      	ldr	r1, [pc, #4]	; (800365c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003656:	4313      	orrs	r3, r2
 8003658:	608b      	str	r3, [r1, #8]
 800365a:	e00b      	b.n	8003674 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 800365c:	40023800 	.word	0x40023800
 8003660:	40007000 	.word	0x40007000
 8003664:	0ffffcff 	.word	0x0ffffcff
 8003668:	4ba4      	ldr	r3, [pc, #656]	; (80038fc <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800366a:	689b      	ldr	r3, [r3, #8]
 800366c:	4aa3      	ldr	r2, [pc, #652]	; (80038fc <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800366e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003672:	6093      	str	r3, [r2, #8]
 8003674:	4ba1      	ldr	r3, [pc, #644]	; (80038fc <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8003676:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800367c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003680:	499e      	ldr	r1, [pc, #632]	; (80038fc <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8003682:	4313      	orrs	r3, r2
 8003684:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	f003 0310 	and.w	r3, r3, #16
 800368e:	2b00      	cmp	r3, #0
 8003690:	d010      	beq.n	80036b4 <HAL_RCCEx_PeriphCLKConfig+0x214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003692:	4b9a      	ldr	r3, [pc, #616]	; (80038fc <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8003694:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003698:	4a98      	ldr	r2, [pc, #608]	; (80038fc <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800369a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800369e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80036a2:	4b96      	ldr	r3, [pc, #600]	; (80038fc <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80036a4:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036ac:	4993      	ldr	r1, [pc, #588]	; (80038fc <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80036ae:	4313      	orrs	r3, r2
 80036b0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d00a      	beq.n	80036d6 <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80036c0:	4b8e      	ldr	r3, [pc, #568]	; (80038fc <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80036c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036c6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036ce:	498b      	ldr	r1, [pc, #556]	; (80038fc <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80036d0:	4313      	orrs	r3, r2
 80036d2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d00a      	beq.n	80036f8 <HAL_RCCEx_PeriphCLKConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80036e2:	4b86      	ldr	r3, [pc, #536]	; (80038fc <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80036e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036e8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80036f0:	4982      	ldr	r1, [pc, #520]	; (80038fc <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80036f2:	4313      	orrs	r3, r2
 80036f4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003700:	2b00      	cmp	r3, #0
 8003702:	d00a      	beq.n	800371a <HAL_RCCEx_PeriphCLKConfig+0x27a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003704:	4b7d      	ldr	r3, [pc, #500]	; (80038fc <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8003706:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800370a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003712:	497a      	ldr	r1, [pc, #488]	; (80038fc <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8003714:	4313      	orrs	r3, r2
 8003716:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003722:	2b00      	cmp	r3, #0
 8003724:	d00a      	beq.n	800373c <HAL_RCCEx_PeriphCLKConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003726:	4b75      	ldr	r3, [pc, #468]	; (80038fc <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8003728:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800372c:	f023 0203 	bic.w	r2, r3, #3
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003734:	4971      	ldr	r1, [pc, #452]	; (80038fc <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8003736:	4313      	orrs	r3, r2
 8003738:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003744:	2b00      	cmp	r3, #0
 8003746:	d00a      	beq.n	800375e <HAL_RCCEx_PeriphCLKConfig+0x2be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003748:	4b6c      	ldr	r3, [pc, #432]	; (80038fc <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800374a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800374e:	f023 020c 	bic.w	r2, r3, #12
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003756:	4969      	ldr	r1, [pc, #420]	; (80038fc <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8003758:	4313      	orrs	r3, r2
 800375a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003766:	2b00      	cmp	r3, #0
 8003768:	d00a      	beq.n	8003780 <HAL_RCCEx_PeriphCLKConfig+0x2e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800376a:	4b64      	ldr	r3, [pc, #400]	; (80038fc <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800376c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003770:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003778:	4960      	ldr	r1, [pc, #384]	; (80038fc <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800377a:	4313      	orrs	r3, r2
 800377c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003788:	2b00      	cmp	r3, #0
 800378a:	d00a      	beq.n	80037a2 <HAL_RCCEx_PeriphCLKConfig+0x302>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800378c:	4b5b      	ldr	r3, [pc, #364]	; (80038fc <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800378e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003792:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800379a:	4958      	ldr	r1, [pc, #352]	; (80038fc <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800379c:	4313      	orrs	r3, r2
 800379e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d00a      	beq.n	80037c4 <HAL_RCCEx_PeriphCLKConfig+0x324>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80037ae:	4b53      	ldr	r3, [pc, #332]	; (80038fc <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80037b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037b4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80037bc:	494f      	ldr	r1, [pc, #316]	; (80038fc <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80037be:	4313      	orrs	r3, r2
 80037c0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d00a      	beq.n	80037e6 <HAL_RCCEx_PeriphCLKConfig+0x346>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80037d0:	4b4a      	ldr	r3, [pc, #296]	; (80038fc <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80037d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037d6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80037de:	4947      	ldr	r1, [pc, #284]	; (80038fc <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80037e0:	4313      	orrs	r3, r2
 80037e2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d00a      	beq.n	8003808 <HAL_RCCEx_PeriphCLKConfig+0x368>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80037f2:	4b42      	ldr	r3, [pc, #264]	; (80038fc <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80037f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037f8:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003800:	493e      	ldr	r1, [pc, #248]	; (80038fc <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8003802:	4313      	orrs	r3, r2
 8003804:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003810:	2b00      	cmp	r3, #0
 8003812:	d00a      	beq.n	800382a <HAL_RCCEx_PeriphCLKConfig+0x38a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8003814:	4b39      	ldr	r3, [pc, #228]	; (80038fc <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8003816:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800381a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003822:	4936      	ldr	r1, [pc, #216]	; (80038fc <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8003824:	4313      	orrs	r3, r2
 8003826:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003832:	2b00      	cmp	r3, #0
 8003834:	d011      	beq.n	800385a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003836:	4b31      	ldr	r3, [pc, #196]	; (80038fc <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8003838:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800383c:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003844:	492d      	ldr	r1, [pc, #180]	; (80038fc <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8003846:	4313      	orrs	r3, r2
 8003848:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003850:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003854:	d101      	bne.n	800385a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      pllsaiused = 1;
 8003856:	2301      	movs	r3, #1
 8003858:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003862:	2b00      	cmp	r3, #0
 8003864:	d00a      	beq.n	800387c <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003866:	4b25      	ldr	r3, [pc, #148]	; (80038fc <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8003868:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800386c:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003874:	4921      	ldr	r1, [pc, #132]	; (80038fc <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8003876:	4313      	orrs	r3, r2
 8003878:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003884:	2b00      	cmp	r3, #0
 8003886:	d00a      	beq.n	800389e <HAL_RCCEx_PeriphCLKConfig+0x3fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003888:	4b1c      	ldr	r3, [pc, #112]	; (80038fc <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800388a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800388e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003896:	4919      	ldr	r1, [pc, #100]	; (80038fc <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8003898:	4313      	orrs	r3, r2
 800389a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d00a      	beq.n	80038c0 <HAL_RCCEx_PeriphCLKConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 80038aa:	4b14      	ldr	r3, [pc, #80]	; (80038fc <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80038ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038b0:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80038b8:	4910      	ldr	r1, [pc, #64]	; (80038fc <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80038ba:	4313      	orrs	r3, r2
 80038bc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2 or I2S */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80038c0:	69fb      	ldr	r3, [r7, #28]
 80038c2:	2b01      	cmp	r3, #1
 80038c4:	d006      	beq.n	80038d4 <HAL_RCCEx_PeriphCLKConfig+0x434>
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	f000 809d 	beq.w	8003a0e <HAL_RCCEx_PeriphCLKConfig+0x56e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80038d4:	4b09      	ldr	r3, [pc, #36]	; (80038fc <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	4a08      	ldr	r2, [pc, #32]	; (80038fc <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80038da:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80038de:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80038e0:	f7fd fc76 	bl	80011d0 <HAL_GetTick>
 80038e4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80038e6:	e00b      	b.n	8003900 <HAL_RCCEx_PeriphCLKConfig+0x460>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80038e8:	f7fd fc72 	bl	80011d0 <HAL_GetTick>
 80038ec:	4602      	mov	r2, r0
 80038ee:	697b      	ldr	r3, [r7, #20]
 80038f0:	1ad3      	subs	r3, r2, r3
 80038f2:	2b64      	cmp	r3, #100	; 0x64
 80038f4:	d904      	bls.n	8003900 <HAL_RCCEx_PeriphCLKConfig+0x460>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80038f6:	2303      	movs	r3, #3
 80038f8:	e116      	b.n	8003b28 <HAL_RCCEx_PeriphCLKConfig+0x688>
 80038fa:	bf00      	nop
 80038fc:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003900:	4b8b      	ldr	r3, [pc, #556]	; (8003b30 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003908:	2b00      	cmp	r3, #0
 800390a:	d1ed      	bne.n	80038e8 <HAL_RCCEx_PeriphCLKConfig+0x448>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	f003 0301 	and.w	r3, r3, #1
 8003914:	2b00      	cmp	r3, #0
 8003916:	d017      	beq.n	8003948 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800391c:	2b00      	cmp	r3, #0
 800391e:	d113      	bne.n	8003948 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003920:	4b83      	ldr	r3, [pc, #524]	; (8003b30 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8003922:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003926:	0e1b      	lsrs	r3, r3, #24
 8003928:	f003 030f 	and.w	r3, r3, #15
 800392c:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, PeriphClkInit->PLLI2S.PLLI2SR);
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	685b      	ldr	r3, [r3, #4]
 8003932:	019a      	lsls	r2, r3, #6
 8003934:	693b      	ldr	r3, [r7, #16]
 8003936:	061b      	lsls	r3, r3, #24
 8003938:	431a      	orrs	r2, r3
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	689b      	ldr	r3, [r3, #8]
 800393e:	071b      	lsls	r3, r3, #28
 8003940:	497b      	ldr	r1, [pc, #492]	; (8003b30 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8003942:	4313      	orrs	r3, r2
 8003944:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003950:	2b00      	cmp	r3, #0
 8003952:	d004      	beq.n	800395e <HAL_RCCEx_PeriphCLKConfig+0x4be>
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003958:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800395c:	d00a      	beq.n	8003974 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003966:	2b00      	cmp	r3, #0
 8003968:	d024      	beq.n	80039b4 <HAL_RCCEx_PeriphCLKConfig+0x514>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800396e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003972:	d11f      	bne.n	80039b4 <HAL_RCCEx_PeriphCLKConfig+0x514>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003974:	4b6e      	ldr	r3, [pc, #440]	; (8003b30 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8003976:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800397a:	0f1b      	lsrs	r3, r3, #28
 800397c:	f003 0307 	and.w	r3, r3, #7
 8003980:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg0);
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	685b      	ldr	r3, [r3, #4]
 8003986:	019a      	lsls	r2, r3, #6
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	68db      	ldr	r3, [r3, #12]
 800398c:	061b      	lsls	r3, r3, #24
 800398e:	431a      	orrs	r2, r3
 8003990:	693b      	ldr	r3, [r7, #16]
 8003992:	071b      	lsls	r3, r3, #28
 8003994:	4966      	ldr	r1, [pc, #408]	; (8003b30 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8003996:	4313      	orrs	r3, r2
 8003998:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800399c:	4b64      	ldr	r3, [pc, #400]	; (8003b30 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800399e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80039a2:	f023 021f 	bic.w	r2, r3, #31
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	69db      	ldr	r3, [r3, #28]
 80039aa:	3b01      	subs	r3, #1
 80039ac:	4960      	ldr	r1, [pc, #384]	; (8003b30 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80039ae:	4313      	orrs	r3, r2
 80039b0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d00d      	beq.n	80039dc <HAL_RCCEx_PeriphCLKConfig+0x53c>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	685b      	ldr	r3, [r3, #4]
 80039c4:	019a      	lsls	r2, r3, #6
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	68db      	ldr	r3, [r3, #12]
 80039ca:	061b      	lsls	r3, r3, #24
 80039cc:	431a      	orrs	r2, r3
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	689b      	ldr	r3, [r3, #8]
 80039d2:	071b      	lsls	r3, r3, #28
 80039d4:	4956      	ldr	r1, [pc, #344]	; (8003b30 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80039d6:	4313      	orrs	r3, r2
 80039d8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80039dc:	4b54      	ldr	r3, [pc, #336]	; (8003b30 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	4a53      	ldr	r2, [pc, #332]	; (8003b30 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80039e2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80039e6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80039e8:	f7fd fbf2 	bl	80011d0 <HAL_GetTick>
 80039ec:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80039ee:	e008      	b.n	8003a02 <HAL_RCCEx_PeriphCLKConfig+0x562>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80039f0:	f7fd fbee 	bl	80011d0 <HAL_GetTick>
 80039f4:	4602      	mov	r2, r0
 80039f6:	697b      	ldr	r3, [r7, #20]
 80039f8:	1ad3      	subs	r3, r2, r3
 80039fa:	2b64      	cmp	r3, #100	; 0x64
 80039fc:	d901      	bls.n	8003a02 <HAL_RCCEx_PeriphCLKConfig+0x562>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80039fe:	2303      	movs	r3, #3
 8003a00:	e092      	b.n	8003b28 <HAL_RCCEx_PeriphCLKConfig+0x688>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003a02:	4b4b      	ldr	r3, [pc, #300]	; (8003b30 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d0f0      	beq.n	80039f0 <HAL_RCCEx_PeriphCLKConfig+0x550>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8003a0e:	69bb      	ldr	r3, [r7, #24]
 8003a10:	2b01      	cmp	r3, #1
 8003a12:	f040 8088 	bne.w	8003b26 <HAL_RCCEx_PeriphCLKConfig+0x686>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003a16:	4b46      	ldr	r3, [pc, #280]	; (8003b30 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	4a45      	ldr	r2, [pc, #276]	; (8003b30 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8003a1c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003a20:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003a22:	f7fd fbd5 	bl	80011d0 <HAL_GetTick>
 8003a26:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003a28:	e008      	b.n	8003a3c <HAL_RCCEx_PeriphCLKConfig+0x59c>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003a2a:	f7fd fbd1 	bl	80011d0 <HAL_GetTick>
 8003a2e:	4602      	mov	r2, r0
 8003a30:	697b      	ldr	r3, [r7, #20]
 8003a32:	1ad3      	subs	r3, r2, r3
 8003a34:	2b64      	cmp	r3, #100	; 0x64
 8003a36:	d901      	bls.n	8003a3c <HAL_RCCEx_PeriphCLKConfig+0x59c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003a38:	2303      	movs	r3, #3
 8003a3a:	e075      	b.n	8003b28 <HAL_RCCEx_PeriphCLKConfig+0x688>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003a3c:	4b3c      	ldr	r3, [pc, #240]	; (8003b30 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003a44:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003a48:	d0ef      	beq.n	8003a2a <HAL_RCCEx_PeriphCLKConfig+0x58a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d003      	beq.n	8003a5e <HAL_RCCEx_PeriphCLKConfig+0x5be>
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d009      	beq.n	8003a72 <HAL_RCCEx_PeriphCLKConfig+0x5d2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d024      	beq.n	8003ab4 <HAL_RCCEx_PeriphCLKConfig+0x614>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d120      	bne.n	8003ab4 <HAL_RCCEx_PeriphCLKConfig+0x614>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003a72:	4b2f      	ldr	r3, [pc, #188]	; (8003b30 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8003a74:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a78:	0c1b      	lsrs	r3, r3, #16
 8003a7a:	f003 0303 	and.w	r3, r3, #3
 8003a7e:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ);
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	691b      	ldr	r3, [r3, #16]
 8003a84:	019a      	lsls	r2, r3, #6
 8003a86:	693b      	ldr	r3, [r7, #16]
 8003a88:	041b      	lsls	r3, r3, #16
 8003a8a:	431a      	orrs	r2, r3
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	695b      	ldr	r3, [r3, #20]
 8003a90:	061b      	lsls	r3, r3, #24
 8003a92:	4927      	ldr	r1, [pc, #156]	; (8003b30 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8003a94:	4313      	orrs	r3, r2
 8003a96:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003a9a:	4b25      	ldr	r3, [pc, #148]	; (8003b30 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8003a9c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003aa0:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	6a1b      	ldr	r3, [r3, #32]
 8003aa8:	3b01      	subs	r3, #1
 8003aaa:	021b      	lsls	r3, r3, #8
 8003aac:	4920      	ldr	r1, [pc, #128]	; (8003b30 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8003aae:	4313      	orrs	r3, r2
 8003ab0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d018      	beq.n	8003af2 <HAL_RCCEx_PeriphCLKConfig+0x652>
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ac4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003ac8:	d113      	bne.n	8003af2 <HAL_RCCEx_PeriphCLKConfig+0x652>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003aca:	4b19      	ldr	r3, [pc, #100]	; (8003b30 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8003acc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ad0:	0e1b      	lsrs	r3, r3, #24
 8003ad2:	f003 030f 	and.w	r3, r3, #15
 8003ad6:	613b      	str	r3, [r7, #16]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0);
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	691b      	ldr	r3, [r3, #16]
 8003adc:	019a      	lsls	r2, r3, #6
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	699b      	ldr	r3, [r3, #24]
 8003ae2:	041b      	lsls	r3, r3, #16
 8003ae4:	431a      	orrs	r2, r3
 8003ae6:	693b      	ldr	r3, [r7, #16]
 8003ae8:	061b      	lsls	r3, r3, #24
 8003aea:	4911      	ldr	r1, [pc, #68]	; (8003b30 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8003aec:	4313      	orrs	r3, r2
 8003aee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003af2:	4b0f      	ldr	r3, [pc, #60]	; (8003b30 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	4a0e      	ldr	r2, [pc, #56]	; (8003b30 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8003af8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003afc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003afe:	f7fd fb67 	bl	80011d0 <HAL_GetTick>
 8003b02:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003b04:	e008      	b.n	8003b18 <HAL_RCCEx_PeriphCLKConfig+0x678>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003b06:	f7fd fb63 	bl	80011d0 <HAL_GetTick>
 8003b0a:	4602      	mov	r2, r0
 8003b0c:	697b      	ldr	r3, [r7, #20]
 8003b0e:	1ad3      	subs	r3, r2, r3
 8003b10:	2b64      	cmp	r3, #100	; 0x64
 8003b12:	d901      	bls.n	8003b18 <HAL_RCCEx_PeriphCLKConfig+0x678>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003b14:	2303      	movs	r3, #3
 8003b16:	e007      	b.n	8003b28 <HAL_RCCEx_PeriphCLKConfig+0x688>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003b18:	4b05      	ldr	r3, [pc, #20]	; (8003b30 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003b20:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003b24:	d1ef      	bne.n	8003b06 <HAL_RCCEx_PeriphCLKConfig+0x666>
      }
    }
  }
  return HAL_OK;
 8003b26:	2300      	movs	r3, #0
}
 8003b28:	4618      	mov	r0, r3
 8003b2a:	3720      	adds	r7, #32
 8003b2c:	46bd      	mov	sp, r7
 8003b2e:	bd80      	pop	{r7, pc}
 8003b30:	40023800 	.word	0x40023800

08003b34 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003b34:	b084      	sub	sp, #16
 8003b36:	b580      	push	{r7, lr}
 8003b38:	b084      	sub	sp, #16
 8003b3a:	af00      	add	r7, sp, #0
 8003b3c:	6078      	str	r0, [r7, #4]
 8003b3e:	f107 001c 	add.w	r0, r7, #28
 8003b42:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003b46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b48:	2b01      	cmp	r3, #1
 8003b4a:	d126      	bne.n	8003b9a <USB_CoreInit+0x66>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b50:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	68da      	ldr	r2, [r3, #12]
 8003b5c:	4b3f      	ldr	r3, [pc, #252]	; (8003c5c <USB_CoreInit+0x128>)
 8003b5e:	4013      	ands	r3, r2
 8003b60:	687a      	ldr	r2, [r7, #4]
 8003b62:	60d3      	str	r3, [r2, #12]

#if defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx)
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	68db      	ldr	r3, [r3, #12]
 8003b68:	f043 0210 	orr.w	r2, r3, #16
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	60da      	str	r2, [r3, #12]
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	68db      	ldr	r3, [r3, #12]
 8003b74:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8003b7c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003b7e:	2b01      	cmp	r3, #1
 8003b80:	d105      	bne.n	8003b8e <USB_CoreInit+0x5a>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	68db      	ldr	r3, [r3, #12]
 8003b86:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003b8e:	6878      	ldr	r0, [r7, #4]
 8003b90:	f001 fb80 	bl	8005294 <USB_CoreReset>
 8003b94:	4603      	mov	r3, r0
 8003b96:	73fb      	strb	r3, [r7, #15]
 8003b98:	e048      	b.n	8003c2c <USB_CoreInit+0xf8>
  }
#if defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx)
  else if (cfg.phy_itface == USB_OTG_HS_EMBEDDED_PHY)
 8003b9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b9c:	2b03      	cmp	r3, #3
 8003b9e:	d134      	bne.n	8003c0a <USB_CoreInit+0xd6>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ba4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The UTMI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	68da      	ldr	r2, [r3, #12]
 8003bb0:	4b2a      	ldr	r3, [pc, #168]	; (8003c5c <USB_CoreInit+0x128>)
 8003bb2:	4013      	ands	r3, r2
 8003bb4:	687a      	ldr	r2, [r7, #4]
 8003bb6:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	68db      	ldr	r3, [r3, #12]
 8003bbc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	60da      	str	r2, [r3, #12]

    /* Select UTMI Interface */
    USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	68db      	ldr	r3, [r3, #12]
 8003bc8:	f023 0210 	bic.w	r2, r3, #16
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	60da      	str	r2, [r3, #12]
#ifdef USBPHYC
    /* Enable USB HS PHY */
    USBx->GCCFG |= USB_OTG_GCCFG_PHYHSEN;
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bd4:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enables control of a High Speed USB PHY */
    if (USB_HS_PHYCInit(USBx) != HAL_OK)
 8003bdc:	6878      	ldr	r0, [r7, #4]
 8003bde:	f001 fb8b 	bl	80052f8 <USB_HS_PHYCInit>
 8003be2:	4603      	mov	r3, r0
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d001      	beq.n	8003bec <USB_CoreInit+0xb8>
    {
      return HAL_ERROR;
 8003be8:	2301      	movs	r3, #1
 8003bea:	e02f      	b.n	8003c4c <USB_CoreInit+0x118>
    }
#endif /* USBPHYC */

    if (cfg.use_external_vbus == 1U)
 8003bec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003bee:	2b01      	cmp	r3, #1
 8003bf0:	d105      	bne.n	8003bfe <USB_CoreInit+0xca>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	68db      	ldr	r3, [r3, #12]
 8003bf6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003bfe:	6878      	ldr	r0, [r7, #4]
 8003c00:	f001 fb48 	bl	8005294 <USB_CoreReset>
 8003c04:	4603      	mov	r3, r0
 8003c06:	73fb      	strb	r3, [r7, #15]
 8003c08:	e010      	b.n	8003c2c <USB_CoreInit+0xf8>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	68db      	ldr	r3, [r3, #12]
 8003c0e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003c16:	6878      	ldr	r0, [r7, #4]
 8003c18:	f001 fb3c 	bl	8005294 <USB_CoreReset>
 8003c1c:	4603      	mov	r3, r0
 8003c1e:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c24:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8003c2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c2e:	2b01      	cmp	r3, #1
 8003c30:	d10b      	bne.n	8003c4a <USB_CoreInit+0x116>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	689b      	ldr	r3, [r3, #8]
 8003c36:	f043 0206 	orr.w	r2, r3, #6
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	689b      	ldr	r3, [r3, #8]
 8003c42:	f043 0220 	orr.w	r2, r3, #32
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8003c4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c4c:	4618      	mov	r0, r3
 8003c4e:	3710      	adds	r7, #16
 8003c50:	46bd      	mov	sp, r7
 8003c52:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003c56:	b004      	add	sp, #16
 8003c58:	4770      	bx	lr
 8003c5a:	bf00      	nop
 8003c5c:	ffbdffbf 	.word	0xffbdffbf

08003c60 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8003c60:	b480      	push	{r7}
 8003c62:	b087      	sub	sp, #28
 8003c64:	af00      	add	r7, sp, #0
 8003c66:	60f8      	str	r0, [r7, #12]
 8003c68:	60b9      	str	r1, [r7, #8]
 8003c6a:	4613      	mov	r3, r2
 8003c6c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8003c6e:	79fb      	ldrb	r3, [r7, #7]
 8003c70:	2b02      	cmp	r3, #2
 8003c72:	d165      	bne.n	8003d40 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8003c74:	68bb      	ldr	r3, [r7, #8]
 8003c76:	4a41      	ldr	r2, [pc, #260]	; (8003d7c <USB_SetTurnaroundTime+0x11c>)
 8003c78:	4293      	cmp	r3, r2
 8003c7a:	d906      	bls.n	8003c8a <USB_SetTurnaroundTime+0x2a>
 8003c7c:	68bb      	ldr	r3, [r7, #8]
 8003c7e:	4a40      	ldr	r2, [pc, #256]	; (8003d80 <USB_SetTurnaroundTime+0x120>)
 8003c80:	4293      	cmp	r3, r2
 8003c82:	d202      	bcs.n	8003c8a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8003c84:	230f      	movs	r3, #15
 8003c86:	617b      	str	r3, [r7, #20]
 8003c88:	e062      	b.n	8003d50 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8003c8a:	68bb      	ldr	r3, [r7, #8]
 8003c8c:	4a3c      	ldr	r2, [pc, #240]	; (8003d80 <USB_SetTurnaroundTime+0x120>)
 8003c8e:	4293      	cmp	r3, r2
 8003c90:	d306      	bcc.n	8003ca0 <USB_SetTurnaroundTime+0x40>
 8003c92:	68bb      	ldr	r3, [r7, #8]
 8003c94:	4a3b      	ldr	r2, [pc, #236]	; (8003d84 <USB_SetTurnaroundTime+0x124>)
 8003c96:	4293      	cmp	r3, r2
 8003c98:	d202      	bcs.n	8003ca0 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8003c9a:	230e      	movs	r3, #14
 8003c9c:	617b      	str	r3, [r7, #20]
 8003c9e:	e057      	b.n	8003d50 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8003ca0:	68bb      	ldr	r3, [r7, #8]
 8003ca2:	4a38      	ldr	r2, [pc, #224]	; (8003d84 <USB_SetTurnaroundTime+0x124>)
 8003ca4:	4293      	cmp	r3, r2
 8003ca6:	d306      	bcc.n	8003cb6 <USB_SetTurnaroundTime+0x56>
 8003ca8:	68bb      	ldr	r3, [r7, #8]
 8003caa:	4a37      	ldr	r2, [pc, #220]	; (8003d88 <USB_SetTurnaroundTime+0x128>)
 8003cac:	4293      	cmp	r3, r2
 8003cae:	d202      	bcs.n	8003cb6 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8003cb0:	230d      	movs	r3, #13
 8003cb2:	617b      	str	r3, [r7, #20]
 8003cb4:	e04c      	b.n	8003d50 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8003cb6:	68bb      	ldr	r3, [r7, #8]
 8003cb8:	4a33      	ldr	r2, [pc, #204]	; (8003d88 <USB_SetTurnaroundTime+0x128>)
 8003cba:	4293      	cmp	r3, r2
 8003cbc:	d306      	bcc.n	8003ccc <USB_SetTurnaroundTime+0x6c>
 8003cbe:	68bb      	ldr	r3, [r7, #8]
 8003cc0:	4a32      	ldr	r2, [pc, #200]	; (8003d8c <USB_SetTurnaroundTime+0x12c>)
 8003cc2:	4293      	cmp	r3, r2
 8003cc4:	d802      	bhi.n	8003ccc <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8003cc6:	230c      	movs	r3, #12
 8003cc8:	617b      	str	r3, [r7, #20]
 8003cca:	e041      	b.n	8003d50 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8003ccc:	68bb      	ldr	r3, [r7, #8]
 8003cce:	4a2f      	ldr	r2, [pc, #188]	; (8003d8c <USB_SetTurnaroundTime+0x12c>)
 8003cd0:	4293      	cmp	r3, r2
 8003cd2:	d906      	bls.n	8003ce2 <USB_SetTurnaroundTime+0x82>
 8003cd4:	68bb      	ldr	r3, [r7, #8]
 8003cd6:	4a2e      	ldr	r2, [pc, #184]	; (8003d90 <USB_SetTurnaroundTime+0x130>)
 8003cd8:	4293      	cmp	r3, r2
 8003cda:	d802      	bhi.n	8003ce2 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8003cdc:	230b      	movs	r3, #11
 8003cde:	617b      	str	r3, [r7, #20]
 8003ce0:	e036      	b.n	8003d50 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8003ce2:	68bb      	ldr	r3, [r7, #8]
 8003ce4:	4a2a      	ldr	r2, [pc, #168]	; (8003d90 <USB_SetTurnaroundTime+0x130>)
 8003ce6:	4293      	cmp	r3, r2
 8003ce8:	d906      	bls.n	8003cf8 <USB_SetTurnaroundTime+0x98>
 8003cea:	68bb      	ldr	r3, [r7, #8]
 8003cec:	4a29      	ldr	r2, [pc, #164]	; (8003d94 <USB_SetTurnaroundTime+0x134>)
 8003cee:	4293      	cmp	r3, r2
 8003cf0:	d802      	bhi.n	8003cf8 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8003cf2:	230a      	movs	r3, #10
 8003cf4:	617b      	str	r3, [r7, #20]
 8003cf6:	e02b      	b.n	8003d50 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8003cf8:	68bb      	ldr	r3, [r7, #8]
 8003cfa:	4a26      	ldr	r2, [pc, #152]	; (8003d94 <USB_SetTurnaroundTime+0x134>)
 8003cfc:	4293      	cmp	r3, r2
 8003cfe:	d906      	bls.n	8003d0e <USB_SetTurnaroundTime+0xae>
 8003d00:	68bb      	ldr	r3, [r7, #8]
 8003d02:	4a25      	ldr	r2, [pc, #148]	; (8003d98 <USB_SetTurnaroundTime+0x138>)
 8003d04:	4293      	cmp	r3, r2
 8003d06:	d202      	bcs.n	8003d0e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8003d08:	2309      	movs	r3, #9
 8003d0a:	617b      	str	r3, [r7, #20]
 8003d0c:	e020      	b.n	8003d50 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8003d0e:	68bb      	ldr	r3, [r7, #8]
 8003d10:	4a21      	ldr	r2, [pc, #132]	; (8003d98 <USB_SetTurnaroundTime+0x138>)
 8003d12:	4293      	cmp	r3, r2
 8003d14:	d306      	bcc.n	8003d24 <USB_SetTurnaroundTime+0xc4>
 8003d16:	68bb      	ldr	r3, [r7, #8]
 8003d18:	4a20      	ldr	r2, [pc, #128]	; (8003d9c <USB_SetTurnaroundTime+0x13c>)
 8003d1a:	4293      	cmp	r3, r2
 8003d1c:	d802      	bhi.n	8003d24 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8003d1e:	2308      	movs	r3, #8
 8003d20:	617b      	str	r3, [r7, #20]
 8003d22:	e015      	b.n	8003d50 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8003d24:	68bb      	ldr	r3, [r7, #8]
 8003d26:	4a1d      	ldr	r2, [pc, #116]	; (8003d9c <USB_SetTurnaroundTime+0x13c>)
 8003d28:	4293      	cmp	r3, r2
 8003d2a:	d906      	bls.n	8003d3a <USB_SetTurnaroundTime+0xda>
 8003d2c:	68bb      	ldr	r3, [r7, #8]
 8003d2e:	4a1c      	ldr	r2, [pc, #112]	; (8003da0 <USB_SetTurnaroundTime+0x140>)
 8003d30:	4293      	cmp	r3, r2
 8003d32:	d202      	bcs.n	8003d3a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8003d34:	2307      	movs	r3, #7
 8003d36:	617b      	str	r3, [r7, #20]
 8003d38:	e00a      	b.n	8003d50 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8003d3a:	2306      	movs	r3, #6
 8003d3c:	617b      	str	r3, [r7, #20]
 8003d3e:	e007      	b.n	8003d50 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8003d40:	79fb      	ldrb	r3, [r7, #7]
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d102      	bne.n	8003d4c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8003d46:	2309      	movs	r3, #9
 8003d48:	617b      	str	r3, [r7, #20]
 8003d4a:	e001      	b.n	8003d50 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8003d4c:	2309      	movs	r3, #9
 8003d4e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	68db      	ldr	r3, [r3, #12]
 8003d54:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	68da      	ldr	r2, [r3, #12]
 8003d60:	697b      	ldr	r3, [r7, #20]
 8003d62:	029b      	lsls	r3, r3, #10
 8003d64:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8003d68:	431a      	orrs	r2, r3
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003d6e:	2300      	movs	r3, #0
}
 8003d70:	4618      	mov	r0, r3
 8003d72:	371c      	adds	r7, #28
 8003d74:	46bd      	mov	sp, r7
 8003d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d7a:	4770      	bx	lr
 8003d7c:	00d8acbf 	.word	0x00d8acbf
 8003d80:	00e4e1c0 	.word	0x00e4e1c0
 8003d84:	00f42400 	.word	0x00f42400
 8003d88:	01067380 	.word	0x01067380
 8003d8c:	011a499f 	.word	0x011a499f
 8003d90:	01312cff 	.word	0x01312cff
 8003d94:	014ca43f 	.word	0x014ca43f
 8003d98:	016e3600 	.word	0x016e3600
 8003d9c:	01a6ab1f 	.word	0x01a6ab1f
 8003da0:	01e84800 	.word	0x01e84800

08003da4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003da4:	b480      	push	{r7}
 8003da6:	b083      	sub	sp, #12
 8003da8:	af00      	add	r7, sp, #0
 8003daa:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	689b      	ldr	r3, [r3, #8]
 8003db0:	f043 0201 	orr.w	r2, r3, #1
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003db8:	2300      	movs	r3, #0
}
 8003dba:	4618      	mov	r0, r3
 8003dbc:	370c      	adds	r7, #12
 8003dbe:	46bd      	mov	sp, r7
 8003dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc4:	4770      	bx	lr

08003dc6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003dc6:	b480      	push	{r7}
 8003dc8:	b083      	sub	sp, #12
 8003dca:	af00      	add	r7, sp, #0
 8003dcc:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	689b      	ldr	r3, [r3, #8]
 8003dd2:	f023 0201 	bic.w	r2, r3, #1
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003dda:	2300      	movs	r3, #0
}
 8003ddc:	4618      	mov	r0, r3
 8003dde:	370c      	adds	r7, #12
 8003de0:	46bd      	mov	sp, r7
 8003de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de6:	4770      	bx	lr

08003de8 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8003de8:	b580      	push	{r7, lr}
 8003dea:	b084      	sub	sp, #16
 8003dec:	af00      	add	r7, sp, #0
 8003dee:	6078      	str	r0, [r7, #4]
 8003df0:	460b      	mov	r3, r1
 8003df2:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8003df4:	2300      	movs	r3, #0
 8003df6:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	68db      	ldr	r3, [r3, #12]
 8003dfc:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8003e04:	78fb      	ldrb	r3, [r7, #3]
 8003e06:	2b01      	cmp	r3, #1
 8003e08:	d115      	bne.n	8003e36 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	68db      	ldr	r3, [r3, #12]
 8003e0e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8003e16:	2001      	movs	r0, #1
 8003e18:	f7fd f9e6 	bl	80011e8 <HAL_Delay>
      ms++;
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	3301      	adds	r3, #1
 8003e20:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8003e22:	6878      	ldr	r0, [r7, #4]
 8003e24:	f001 f9a5 	bl	8005172 <USB_GetMode>
 8003e28:	4603      	mov	r3, r0
 8003e2a:	2b01      	cmp	r3, #1
 8003e2c:	d01e      	beq.n	8003e6c <USB_SetCurrentMode+0x84>
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	2b31      	cmp	r3, #49	; 0x31
 8003e32:	d9f0      	bls.n	8003e16 <USB_SetCurrentMode+0x2e>
 8003e34:	e01a      	b.n	8003e6c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8003e36:	78fb      	ldrb	r3, [r7, #3]
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d115      	bne.n	8003e68 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	68db      	ldr	r3, [r3, #12]
 8003e40:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8003e48:	2001      	movs	r0, #1
 8003e4a:	f7fd f9cd 	bl	80011e8 <HAL_Delay>
      ms++;
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	3301      	adds	r3, #1
 8003e52:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8003e54:	6878      	ldr	r0, [r7, #4]
 8003e56:	f001 f98c 	bl	8005172 <USB_GetMode>
 8003e5a:	4603      	mov	r3, r0
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d005      	beq.n	8003e6c <USB_SetCurrentMode+0x84>
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	2b31      	cmp	r3, #49	; 0x31
 8003e64:	d9f0      	bls.n	8003e48 <USB_SetCurrentMode+0x60>
 8003e66:	e001      	b.n	8003e6c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8003e68:	2301      	movs	r3, #1
 8003e6a:	e005      	b.n	8003e78 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	2b32      	cmp	r3, #50	; 0x32
 8003e70:	d101      	bne.n	8003e76 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8003e72:	2301      	movs	r3, #1
 8003e74:	e000      	b.n	8003e78 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8003e76:	2300      	movs	r3, #0
}
 8003e78:	4618      	mov	r0, r3
 8003e7a:	3710      	adds	r7, #16
 8003e7c:	46bd      	mov	sp, r7
 8003e7e:	bd80      	pop	{r7, pc}

08003e80 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003e80:	b084      	sub	sp, #16
 8003e82:	b580      	push	{r7, lr}
 8003e84:	b086      	sub	sp, #24
 8003e86:	af00      	add	r7, sp, #0
 8003e88:	6078      	str	r0, [r7, #4]
 8003e8a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8003e8e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8003e92:	2300      	movs	r3, #0
 8003e94:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8003e9a:	2300      	movs	r3, #0
 8003e9c:	613b      	str	r3, [r7, #16]
 8003e9e:	e009      	b.n	8003eb4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8003ea0:	687a      	ldr	r2, [r7, #4]
 8003ea2:	693b      	ldr	r3, [r7, #16]
 8003ea4:	3340      	adds	r3, #64	; 0x40
 8003ea6:	009b      	lsls	r3, r3, #2
 8003ea8:	4413      	add	r3, r2
 8003eaa:	2200      	movs	r2, #0
 8003eac:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8003eae:	693b      	ldr	r3, [r7, #16]
 8003eb0:	3301      	adds	r3, #1
 8003eb2:	613b      	str	r3, [r7, #16]
 8003eb4:	693b      	ldr	r3, [r7, #16]
 8003eb6:	2b0e      	cmp	r3, #14
 8003eb8:	d9f2      	bls.n	8003ea0 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8003eba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d11c      	bne.n	8003efa <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ec6:	685b      	ldr	r3, [r3, #4]
 8003ec8:	68fa      	ldr	r2, [r7, #12]
 8003eca:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003ece:	f043 0302 	orr.w	r3, r3, #2
 8003ed2:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ed8:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	601a      	str	r2, [r3, #0]
 8003ef8:	e005      	b.n	8003f06 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003efe:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003f0c:	461a      	mov	r2, r3
 8003f0e:	2300      	movs	r3, #0
 8003f10:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f18:	4619      	mov	r1, r3
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f20:	461a      	mov	r2, r3
 8003f22:	680b      	ldr	r3, [r1, #0]
 8003f24:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003f26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f28:	2b01      	cmp	r3, #1
 8003f2a:	d10c      	bne.n	8003f46 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8003f2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d104      	bne.n	8003f3c <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8003f32:	2100      	movs	r1, #0
 8003f34:	6878      	ldr	r0, [r7, #4]
 8003f36:	f000 f971 	bl	800421c <USB_SetDevSpeed>
 8003f3a:	e018      	b.n	8003f6e <USB_DevInit+0xee>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8003f3c:	2101      	movs	r1, #1
 8003f3e:	6878      	ldr	r0, [r7, #4]
 8003f40:	f000 f96c 	bl	800421c <USB_SetDevSpeed>
 8003f44:	e013      	b.n	8003f6e <USB_DevInit+0xee>
    }
  }
#if defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx)
  else if (cfg.phy_itface == USB_OTG_HS_EMBEDDED_PHY)
 8003f46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f48:	2b03      	cmp	r3, #3
 8003f4a:	d10c      	bne.n	8003f66 <USB_DevInit+0xe6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8003f4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d104      	bne.n	8003f5c <USB_DevInit+0xdc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8003f52:	2100      	movs	r1, #0
 8003f54:	6878      	ldr	r0, [r7, #4]
 8003f56:	f000 f961 	bl	800421c <USB_SetDevSpeed>
 8003f5a:	e008      	b.n	8003f6e <USB_DevInit+0xee>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8003f5c:	2101      	movs	r1, #1
 8003f5e:	6878      	ldr	r0, [r7, #4]
 8003f60:	f000 f95c 	bl	800421c <USB_SetDevSpeed>
 8003f64:	e003      	b.n	8003f6e <USB_DevInit+0xee>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8003f66:	2103      	movs	r1, #3
 8003f68:	6878      	ldr	r0, [r7, #4]
 8003f6a:	f000 f957 	bl	800421c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8003f6e:	2110      	movs	r1, #16
 8003f70:	6878      	ldr	r0, [r7, #4]
 8003f72:	f000 f8f3 	bl	800415c <USB_FlushTxFifo>
 8003f76:	4603      	mov	r3, r0
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d001      	beq.n	8003f80 <USB_DevInit+0x100>
  {
    ret = HAL_ERROR;
 8003f7c:	2301      	movs	r3, #1
 8003f7e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8003f80:	6878      	ldr	r0, [r7, #4]
 8003f82:	f000 f91d 	bl	80041c0 <USB_FlushRxFifo>
 8003f86:	4603      	mov	r3, r0
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d001      	beq.n	8003f90 <USB_DevInit+0x110>
  {
    ret = HAL_ERROR;
 8003f8c:	2301      	movs	r3, #1
 8003f8e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f96:	461a      	mov	r2, r3
 8003f98:	2300      	movs	r3, #0
 8003f9a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003fa2:	461a      	mov	r2, r3
 8003fa4:	2300      	movs	r3, #0
 8003fa6:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003fae:	461a      	mov	r2, r3
 8003fb0:	2300      	movs	r3, #0
 8003fb2:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003fb4:	2300      	movs	r3, #0
 8003fb6:	613b      	str	r3, [r7, #16]
 8003fb8:	e043      	b.n	8004042 <USB_DevInit+0x1c2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003fba:	693b      	ldr	r3, [r7, #16]
 8003fbc:	015a      	lsls	r2, r3, #5
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	4413      	add	r3, r2
 8003fc2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003fcc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003fd0:	d118      	bne.n	8004004 <USB_DevInit+0x184>
    {
      if (i == 0U)
 8003fd2:	693b      	ldr	r3, [r7, #16]
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d10a      	bne.n	8003fee <USB_DevInit+0x16e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8003fd8:	693b      	ldr	r3, [r7, #16]
 8003fda:	015a      	lsls	r2, r3, #5
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	4413      	add	r3, r2
 8003fe0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003fe4:	461a      	mov	r2, r3
 8003fe6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003fea:	6013      	str	r3, [r2, #0]
 8003fec:	e013      	b.n	8004016 <USB_DevInit+0x196>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8003fee:	693b      	ldr	r3, [r7, #16]
 8003ff0:	015a      	lsls	r2, r3, #5
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	4413      	add	r3, r2
 8003ff6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ffa:	461a      	mov	r2, r3
 8003ffc:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004000:	6013      	str	r3, [r2, #0]
 8004002:	e008      	b.n	8004016 <USB_DevInit+0x196>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004004:	693b      	ldr	r3, [r7, #16]
 8004006:	015a      	lsls	r2, r3, #5
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	4413      	add	r3, r2
 800400c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004010:	461a      	mov	r2, r3
 8004012:	2300      	movs	r3, #0
 8004014:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004016:	693b      	ldr	r3, [r7, #16]
 8004018:	015a      	lsls	r2, r3, #5
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	4413      	add	r3, r2
 800401e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004022:	461a      	mov	r2, r3
 8004024:	2300      	movs	r3, #0
 8004026:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004028:	693b      	ldr	r3, [r7, #16]
 800402a:	015a      	lsls	r2, r3, #5
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	4413      	add	r3, r2
 8004030:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004034:	461a      	mov	r2, r3
 8004036:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800403a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800403c:	693b      	ldr	r3, [r7, #16]
 800403e:	3301      	adds	r3, #1
 8004040:	613b      	str	r3, [r7, #16]
 8004042:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004044:	693a      	ldr	r2, [r7, #16]
 8004046:	429a      	cmp	r2, r3
 8004048:	d3b7      	bcc.n	8003fba <USB_DevInit+0x13a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800404a:	2300      	movs	r3, #0
 800404c:	613b      	str	r3, [r7, #16]
 800404e:	e043      	b.n	80040d8 <USB_DevInit+0x258>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004050:	693b      	ldr	r3, [r7, #16]
 8004052:	015a      	lsls	r2, r3, #5
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	4413      	add	r3, r2
 8004058:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004062:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004066:	d118      	bne.n	800409a <USB_DevInit+0x21a>
    {
      if (i == 0U)
 8004068:	693b      	ldr	r3, [r7, #16]
 800406a:	2b00      	cmp	r3, #0
 800406c:	d10a      	bne.n	8004084 <USB_DevInit+0x204>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800406e:	693b      	ldr	r3, [r7, #16]
 8004070:	015a      	lsls	r2, r3, #5
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	4413      	add	r3, r2
 8004076:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800407a:	461a      	mov	r2, r3
 800407c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004080:	6013      	str	r3, [r2, #0]
 8004082:	e013      	b.n	80040ac <USB_DevInit+0x22c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004084:	693b      	ldr	r3, [r7, #16]
 8004086:	015a      	lsls	r2, r3, #5
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	4413      	add	r3, r2
 800408c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004090:	461a      	mov	r2, r3
 8004092:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004096:	6013      	str	r3, [r2, #0]
 8004098:	e008      	b.n	80040ac <USB_DevInit+0x22c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800409a:	693b      	ldr	r3, [r7, #16]
 800409c:	015a      	lsls	r2, r3, #5
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	4413      	add	r3, r2
 80040a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80040a6:	461a      	mov	r2, r3
 80040a8:	2300      	movs	r3, #0
 80040aa:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80040ac:	693b      	ldr	r3, [r7, #16]
 80040ae:	015a      	lsls	r2, r3, #5
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	4413      	add	r3, r2
 80040b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80040b8:	461a      	mov	r2, r3
 80040ba:	2300      	movs	r3, #0
 80040bc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80040be:	693b      	ldr	r3, [r7, #16]
 80040c0:	015a      	lsls	r2, r3, #5
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	4413      	add	r3, r2
 80040c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80040ca:	461a      	mov	r2, r3
 80040cc:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80040d0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80040d2:	693b      	ldr	r3, [r7, #16]
 80040d4:	3301      	adds	r3, #1
 80040d6:	613b      	str	r3, [r7, #16]
 80040d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040da:	693a      	ldr	r2, [r7, #16]
 80040dc:	429a      	cmp	r2, r3
 80040de:	d3b7      	bcc.n	8004050 <USB_DevInit+0x1d0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80040e6:	691b      	ldr	r3, [r3, #16]
 80040e8:	68fa      	ldr	r2, [r7, #12]
 80040ea:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80040ee:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80040f2:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	2200      	movs	r2, #0
 80040f8:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8004100:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004102:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004104:	2b00      	cmp	r3, #0
 8004106:	d105      	bne.n	8004114 <USB_DevInit+0x294>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	699b      	ldr	r3, [r3, #24]
 800410c:	f043 0210 	orr.w	r2, r3, #16
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	699a      	ldr	r2, [r3, #24]
 8004118:	4b0e      	ldr	r3, [pc, #56]	; (8004154 <USB_DevInit+0x2d4>)
 800411a:	4313      	orrs	r3, r2
 800411c:	687a      	ldr	r2, [r7, #4]
 800411e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004120:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004122:	2b00      	cmp	r3, #0
 8004124:	d005      	beq.n	8004132 <USB_DevInit+0x2b2>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	699b      	ldr	r3, [r3, #24]
 800412a:	f043 0208 	orr.w	r2, r3, #8
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004132:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004134:	2b01      	cmp	r3, #1
 8004136:	d105      	bne.n	8004144 <USB_DevInit+0x2c4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	699a      	ldr	r2, [r3, #24]
 800413c:	4b06      	ldr	r3, [pc, #24]	; (8004158 <USB_DevInit+0x2d8>)
 800413e:	4313      	orrs	r3, r2
 8004140:	687a      	ldr	r2, [r7, #4]
 8004142:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004144:	7dfb      	ldrb	r3, [r7, #23]
}
 8004146:	4618      	mov	r0, r3
 8004148:	3718      	adds	r7, #24
 800414a:	46bd      	mov	sp, r7
 800414c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004150:	b004      	add	sp, #16
 8004152:	4770      	bx	lr
 8004154:	803c3800 	.word	0x803c3800
 8004158:	40000004 	.word	0x40000004

0800415c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800415c:	b480      	push	{r7}
 800415e:	b085      	sub	sp, #20
 8004160:	af00      	add	r7, sp, #0
 8004162:	6078      	str	r0, [r7, #4]
 8004164:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004166:	2300      	movs	r3, #0
 8004168:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	3301      	adds	r3, #1
 800416e:	60fb      	str	r3, [r7, #12]
 8004170:	4a12      	ldr	r2, [pc, #72]	; (80041bc <USB_FlushTxFifo+0x60>)
 8004172:	4293      	cmp	r3, r2
 8004174:	d901      	bls.n	800417a <USB_FlushTxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8004176:	2303      	movs	r3, #3
 8004178:	e01a      	b.n	80041b0 <USB_FlushTxFifo+0x54>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	691b      	ldr	r3, [r3, #16]
 800417e:	2b00      	cmp	r3, #0
 8004180:	daf3      	bge.n	800416a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004182:	2300      	movs	r3, #0
 8004184:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004186:	683b      	ldr	r3, [r7, #0]
 8004188:	019b      	lsls	r3, r3, #6
 800418a:	f043 0220 	orr.w	r2, r3, #32
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	3301      	adds	r3, #1
 8004196:	60fb      	str	r3, [r7, #12]
 8004198:	4a08      	ldr	r2, [pc, #32]	; (80041bc <USB_FlushTxFifo+0x60>)
 800419a:	4293      	cmp	r3, r2
 800419c:	d901      	bls.n	80041a2 <USB_FlushTxFifo+0x46>
    {
      return HAL_TIMEOUT;
 800419e:	2303      	movs	r3, #3
 80041a0:	e006      	b.n	80041b0 <USB_FlushTxFifo+0x54>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	691b      	ldr	r3, [r3, #16]
 80041a6:	f003 0320 	and.w	r3, r3, #32
 80041aa:	2b20      	cmp	r3, #32
 80041ac:	d0f1      	beq.n	8004192 <USB_FlushTxFifo+0x36>

  return HAL_OK;
 80041ae:	2300      	movs	r3, #0
}
 80041b0:	4618      	mov	r0, r3
 80041b2:	3714      	adds	r7, #20
 80041b4:	46bd      	mov	sp, r7
 80041b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ba:	4770      	bx	lr
 80041bc:	00030d40 	.word	0x00030d40

080041c0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80041c0:	b480      	push	{r7}
 80041c2:	b085      	sub	sp, #20
 80041c4:	af00      	add	r7, sp, #0
 80041c6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80041c8:	2300      	movs	r3, #0
 80041ca:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	3301      	adds	r3, #1
 80041d0:	60fb      	str	r3, [r7, #12]
 80041d2:	4a11      	ldr	r2, [pc, #68]	; (8004218 <USB_FlushRxFifo+0x58>)
 80041d4:	4293      	cmp	r3, r2
 80041d6:	d901      	bls.n	80041dc <USB_FlushRxFifo+0x1c>
    {
      return HAL_TIMEOUT;
 80041d8:	2303      	movs	r3, #3
 80041da:	e017      	b.n	800420c <USB_FlushRxFifo+0x4c>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	691b      	ldr	r3, [r3, #16]
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	daf3      	bge.n	80041cc <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80041e4:	2300      	movs	r3, #0
 80041e6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	2210      	movs	r2, #16
 80041ec:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	3301      	adds	r3, #1
 80041f2:	60fb      	str	r3, [r7, #12]
 80041f4:	4a08      	ldr	r2, [pc, #32]	; (8004218 <USB_FlushRxFifo+0x58>)
 80041f6:	4293      	cmp	r3, r2
 80041f8:	d901      	bls.n	80041fe <USB_FlushRxFifo+0x3e>
    {
      return HAL_TIMEOUT;
 80041fa:	2303      	movs	r3, #3
 80041fc:	e006      	b.n	800420c <USB_FlushRxFifo+0x4c>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	691b      	ldr	r3, [r3, #16]
 8004202:	f003 0310 	and.w	r3, r3, #16
 8004206:	2b10      	cmp	r3, #16
 8004208:	d0f1      	beq.n	80041ee <USB_FlushRxFifo+0x2e>

  return HAL_OK;
 800420a:	2300      	movs	r3, #0
}
 800420c:	4618      	mov	r0, r3
 800420e:	3714      	adds	r7, #20
 8004210:	46bd      	mov	sp, r7
 8004212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004216:	4770      	bx	lr
 8004218:	00030d40 	.word	0x00030d40

0800421c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800421c:	b480      	push	{r7}
 800421e:	b085      	sub	sp, #20
 8004220:	af00      	add	r7, sp, #0
 8004222:	6078      	str	r0, [r7, #4]
 8004224:	460b      	mov	r3, r1
 8004226:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004232:	681a      	ldr	r2, [r3, #0]
 8004234:	78fb      	ldrb	r3, [r7, #3]
 8004236:	68f9      	ldr	r1, [r7, #12]
 8004238:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800423c:	4313      	orrs	r3, r2
 800423e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004240:	2300      	movs	r3, #0
}
 8004242:	4618      	mov	r0, r3
 8004244:	3714      	adds	r7, #20
 8004246:	46bd      	mov	sp, r7
 8004248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800424c:	4770      	bx	lr

0800424e <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800424e:	b480      	push	{r7}
 8004250:	b087      	sub	sp, #28
 8004252:	af00      	add	r7, sp, #0
 8004254:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800425a:	693b      	ldr	r3, [r7, #16]
 800425c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004260:	689b      	ldr	r3, [r3, #8]
 8004262:	f003 0306 	and.w	r3, r3, #6
 8004266:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	2b00      	cmp	r3, #0
 800426c:	d102      	bne.n	8004274 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800426e:	2300      	movs	r3, #0
 8004270:	75fb      	strb	r3, [r7, #23]
 8004272:	e00a      	b.n	800428a <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	2b02      	cmp	r3, #2
 8004278:	d002      	beq.n	8004280 <USB_GetDevSpeed+0x32>
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	2b06      	cmp	r3, #6
 800427e:	d102      	bne.n	8004286 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8004280:	2302      	movs	r3, #2
 8004282:	75fb      	strb	r3, [r7, #23]
 8004284:	e001      	b.n	800428a <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8004286:	230f      	movs	r3, #15
 8004288:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800428a:	7dfb      	ldrb	r3, [r7, #23]
}
 800428c:	4618      	mov	r0, r3
 800428e:	371c      	adds	r7, #28
 8004290:	46bd      	mov	sp, r7
 8004292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004296:	4770      	bx	lr

08004298 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004298:	b480      	push	{r7}
 800429a:	b085      	sub	sp, #20
 800429c:	af00      	add	r7, sp, #0
 800429e:	6078      	str	r0, [r7, #4]
 80042a0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80042a6:	683b      	ldr	r3, [r7, #0]
 80042a8:	781b      	ldrb	r3, [r3, #0]
 80042aa:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80042ac:	683b      	ldr	r3, [r7, #0]
 80042ae:	785b      	ldrb	r3, [r3, #1]
 80042b0:	2b01      	cmp	r3, #1
 80042b2:	d139      	bne.n	8004328 <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80042ba:	69da      	ldr	r2, [r3, #28]
 80042bc:	683b      	ldr	r3, [r7, #0]
 80042be:	781b      	ldrb	r3, [r3, #0]
 80042c0:	f003 030f 	and.w	r3, r3, #15
 80042c4:	2101      	movs	r1, #1
 80042c6:	fa01 f303 	lsl.w	r3, r1, r3
 80042ca:	b29b      	uxth	r3, r3
 80042cc:	68f9      	ldr	r1, [r7, #12]
 80042ce:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80042d2:	4313      	orrs	r3, r2
 80042d4:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80042d6:	68bb      	ldr	r3, [r7, #8]
 80042d8:	015a      	lsls	r2, r3, #5
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	4413      	add	r3, r2
 80042de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d153      	bne.n	8004394 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80042ec:	68bb      	ldr	r3, [r7, #8]
 80042ee:	015a      	lsls	r2, r3, #5
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	4413      	add	r3, r2
 80042f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80042f8:	681a      	ldr	r2, [r3, #0]
 80042fa:	683b      	ldr	r3, [r7, #0]
 80042fc:	689b      	ldr	r3, [r3, #8]
 80042fe:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004302:	683b      	ldr	r3, [r7, #0]
 8004304:	78db      	ldrb	r3, [r3, #3]
 8004306:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004308:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800430a:	68bb      	ldr	r3, [r7, #8]
 800430c:	059b      	lsls	r3, r3, #22
 800430e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004310:	431a      	orrs	r2, r3
 8004312:	68bb      	ldr	r3, [r7, #8]
 8004314:	0159      	lsls	r1, r3, #5
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	440b      	add	r3, r1
 800431a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800431e:	4619      	mov	r1, r3
 8004320:	4b20      	ldr	r3, [pc, #128]	; (80043a4 <USB_ActivateEndpoint+0x10c>)
 8004322:	4313      	orrs	r3, r2
 8004324:	600b      	str	r3, [r1, #0]
 8004326:	e035      	b.n	8004394 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800432e:	69da      	ldr	r2, [r3, #28]
 8004330:	683b      	ldr	r3, [r7, #0]
 8004332:	781b      	ldrb	r3, [r3, #0]
 8004334:	f003 030f 	and.w	r3, r3, #15
 8004338:	2101      	movs	r1, #1
 800433a:	fa01 f303 	lsl.w	r3, r1, r3
 800433e:	041b      	lsls	r3, r3, #16
 8004340:	68f9      	ldr	r1, [r7, #12]
 8004342:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004346:	4313      	orrs	r3, r2
 8004348:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800434a:	68bb      	ldr	r3, [r7, #8]
 800434c:	015a      	lsls	r2, r3, #5
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	4413      	add	r3, r2
 8004352:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800435c:	2b00      	cmp	r3, #0
 800435e:	d119      	bne.n	8004394 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004360:	68bb      	ldr	r3, [r7, #8]
 8004362:	015a      	lsls	r2, r3, #5
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	4413      	add	r3, r2
 8004368:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800436c:	681a      	ldr	r2, [r3, #0]
 800436e:	683b      	ldr	r3, [r7, #0]
 8004370:	689b      	ldr	r3, [r3, #8]
 8004372:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8004376:	683b      	ldr	r3, [r7, #0]
 8004378:	78db      	ldrb	r3, [r3, #3]
 800437a:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800437c:	430b      	orrs	r3, r1
 800437e:	431a      	orrs	r2, r3
 8004380:	68bb      	ldr	r3, [r7, #8]
 8004382:	0159      	lsls	r1, r3, #5
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	440b      	add	r3, r1
 8004388:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800438c:	4619      	mov	r1, r3
 800438e:	4b05      	ldr	r3, [pc, #20]	; (80043a4 <USB_ActivateEndpoint+0x10c>)
 8004390:	4313      	orrs	r3, r2
 8004392:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8004394:	2300      	movs	r3, #0
}
 8004396:	4618      	mov	r0, r3
 8004398:	3714      	adds	r7, #20
 800439a:	46bd      	mov	sp, r7
 800439c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a0:	4770      	bx	lr
 80043a2:	bf00      	nop
 80043a4:	10008000 	.word	0x10008000

080043a8 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80043a8:	b480      	push	{r7}
 80043aa:	b085      	sub	sp, #20
 80043ac:	af00      	add	r7, sp, #0
 80043ae:	6078      	str	r0, [r7, #4]
 80043b0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80043b6:	683b      	ldr	r3, [r7, #0]
 80043b8:	781b      	ldrb	r3, [r3, #0]
 80043ba:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80043bc:	683b      	ldr	r3, [r7, #0]
 80043be:	785b      	ldrb	r3, [r3, #1]
 80043c0:	2b01      	cmp	r3, #1
 80043c2:	d161      	bne.n	8004488 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80043c4:	68bb      	ldr	r3, [r7, #8]
 80043c6:	015a      	lsls	r2, r3, #5
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	4413      	add	r3, r2
 80043cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80043d6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80043da:	d11f      	bne.n	800441c <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80043dc:	68bb      	ldr	r3, [r7, #8]
 80043de:	015a      	lsls	r2, r3, #5
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	4413      	add	r3, r2
 80043e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	68ba      	ldr	r2, [r7, #8]
 80043ec:	0151      	lsls	r1, r2, #5
 80043ee:	68fa      	ldr	r2, [r7, #12]
 80043f0:	440a      	add	r2, r1
 80043f2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80043f6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80043fa:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80043fc:	68bb      	ldr	r3, [r7, #8]
 80043fe:	015a      	lsls	r2, r3, #5
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	4413      	add	r3, r2
 8004404:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	68ba      	ldr	r2, [r7, #8]
 800440c:	0151      	lsls	r1, r2, #5
 800440e:	68fa      	ldr	r2, [r7, #12]
 8004410:	440a      	add	r2, r1
 8004412:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004416:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800441a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004422:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004424:	683b      	ldr	r3, [r7, #0]
 8004426:	781b      	ldrb	r3, [r3, #0]
 8004428:	f003 030f 	and.w	r3, r3, #15
 800442c:	2101      	movs	r1, #1
 800442e:	fa01 f303 	lsl.w	r3, r1, r3
 8004432:	b29b      	uxth	r3, r3
 8004434:	43db      	mvns	r3, r3
 8004436:	68f9      	ldr	r1, [r7, #12]
 8004438:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800443c:	4013      	ands	r3, r2
 800443e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004446:	69da      	ldr	r2, [r3, #28]
 8004448:	683b      	ldr	r3, [r7, #0]
 800444a:	781b      	ldrb	r3, [r3, #0]
 800444c:	f003 030f 	and.w	r3, r3, #15
 8004450:	2101      	movs	r1, #1
 8004452:	fa01 f303 	lsl.w	r3, r1, r3
 8004456:	b29b      	uxth	r3, r3
 8004458:	43db      	mvns	r3, r3
 800445a:	68f9      	ldr	r1, [r7, #12]
 800445c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004460:	4013      	ands	r3, r2
 8004462:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8004464:	68bb      	ldr	r3, [r7, #8]
 8004466:	015a      	lsls	r2, r3, #5
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	4413      	add	r3, r2
 800446c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004470:	681a      	ldr	r2, [r3, #0]
 8004472:	68bb      	ldr	r3, [r7, #8]
 8004474:	0159      	lsls	r1, r3, #5
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	440b      	add	r3, r1
 800447a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800447e:	4619      	mov	r1, r3
 8004480:	4b35      	ldr	r3, [pc, #212]	; (8004558 <USB_DeactivateEndpoint+0x1b0>)
 8004482:	4013      	ands	r3, r2
 8004484:	600b      	str	r3, [r1, #0]
 8004486:	e060      	b.n	800454a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004488:	68bb      	ldr	r3, [r7, #8]
 800448a:	015a      	lsls	r2, r3, #5
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	4413      	add	r3, r2
 8004490:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800449a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800449e:	d11f      	bne.n	80044e0 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80044a0:	68bb      	ldr	r3, [r7, #8]
 80044a2:	015a      	lsls	r2, r3, #5
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	4413      	add	r3, r2
 80044a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	68ba      	ldr	r2, [r7, #8]
 80044b0:	0151      	lsls	r1, r2, #5
 80044b2:	68fa      	ldr	r2, [r7, #12]
 80044b4:	440a      	add	r2, r1
 80044b6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80044ba:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80044be:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80044c0:	68bb      	ldr	r3, [r7, #8]
 80044c2:	015a      	lsls	r2, r3, #5
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	4413      	add	r3, r2
 80044c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	68ba      	ldr	r2, [r7, #8]
 80044d0:	0151      	lsls	r1, r2, #5
 80044d2:	68fa      	ldr	r2, [r7, #12]
 80044d4:	440a      	add	r2, r1
 80044d6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80044da:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80044de:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80044e6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80044e8:	683b      	ldr	r3, [r7, #0]
 80044ea:	781b      	ldrb	r3, [r3, #0]
 80044ec:	f003 030f 	and.w	r3, r3, #15
 80044f0:	2101      	movs	r1, #1
 80044f2:	fa01 f303 	lsl.w	r3, r1, r3
 80044f6:	041b      	lsls	r3, r3, #16
 80044f8:	43db      	mvns	r3, r3
 80044fa:	68f9      	ldr	r1, [r7, #12]
 80044fc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004500:	4013      	ands	r3, r2
 8004502:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800450a:	69da      	ldr	r2, [r3, #28]
 800450c:	683b      	ldr	r3, [r7, #0]
 800450e:	781b      	ldrb	r3, [r3, #0]
 8004510:	f003 030f 	and.w	r3, r3, #15
 8004514:	2101      	movs	r1, #1
 8004516:	fa01 f303 	lsl.w	r3, r1, r3
 800451a:	041b      	lsls	r3, r3, #16
 800451c:	43db      	mvns	r3, r3
 800451e:	68f9      	ldr	r1, [r7, #12]
 8004520:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004524:	4013      	ands	r3, r2
 8004526:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8004528:	68bb      	ldr	r3, [r7, #8]
 800452a:	015a      	lsls	r2, r3, #5
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	4413      	add	r3, r2
 8004530:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004534:	681a      	ldr	r2, [r3, #0]
 8004536:	68bb      	ldr	r3, [r7, #8]
 8004538:	0159      	lsls	r1, r3, #5
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	440b      	add	r3, r1
 800453e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004542:	4619      	mov	r1, r3
 8004544:	4b05      	ldr	r3, [pc, #20]	; (800455c <USB_DeactivateEndpoint+0x1b4>)
 8004546:	4013      	ands	r3, r2
 8004548:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800454a:	2300      	movs	r3, #0
}
 800454c:	4618      	mov	r0, r3
 800454e:	3714      	adds	r7, #20
 8004550:	46bd      	mov	sp, r7
 8004552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004556:	4770      	bx	lr
 8004558:	ec337800 	.word	0xec337800
 800455c:	eff37800 	.word	0xeff37800

08004560 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8004560:	b580      	push	{r7, lr}
 8004562:	b08a      	sub	sp, #40	; 0x28
 8004564:	af02      	add	r7, sp, #8
 8004566:	60f8      	str	r0, [r7, #12]
 8004568:	60b9      	str	r1, [r7, #8]
 800456a:	4613      	mov	r3, r2
 800456c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8004572:	68bb      	ldr	r3, [r7, #8]
 8004574:	781b      	ldrb	r3, [r3, #0]
 8004576:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004578:	68bb      	ldr	r3, [r7, #8]
 800457a:	785b      	ldrb	r3, [r3, #1]
 800457c:	2b01      	cmp	r3, #1
 800457e:	f040 8163 	bne.w	8004848 <USB_EPStartXfer+0x2e8>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8004582:	68bb      	ldr	r3, [r7, #8]
 8004584:	695b      	ldr	r3, [r3, #20]
 8004586:	2b00      	cmp	r3, #0
 8004588:	d132      	bne.n	80045f0 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800458a:	69bb      	ldr	r3, [r7, #24]
 800458c:	015a      	lsls	r2, r3, #5
 800458e:	69fb      	ldr	r3, [r7, #28]
 8004590:	4413      	add	r3, r2
 8004592:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004596:	691a      	ldr	r2, [r3, #16]
 8004598:	69bb      	ldr	r3, [r7, #24]
 800459a:	0159      	lsls	r1, r3, #5
 800459c:	69fb      	ldr	r3, [r7, #28]
 800459e:	440b      	add	r3, r1
 80045a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80045a4:	4619      	mov	r1, r3
 80045a6:	4ba5      	ldr	r3, [pc, #660]	; (800483c <USB_EPStartXfer+0x2dc>)
 80045a8:	4013      	ands	r3, r2
 80045aa:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80045ac:	69bb      	ldr	r3, [r7, #24]
 80045ae:	015a      	lsls	r2, r3, #5
 80045b0:	69fb      	ldr	r3, [r7, #28]
 80045b2:	4413      	add	r3, r2
 80045b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80045b8:	691b      	ldr	r3, [r3, #16]
 80045ba:	69ba      	ldr	r2, [r7, #24]
 80045bc:	0151      	lsls	r1, r2, #5
 80045be:	69fa      	ldr	r2, [r7, #28]
 80045c0:	440a      	add	r2, r1
 80045c2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80045c6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80045ca:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80045cc:	69bb      	ldr	r3, [r7, #24]
 80045ce:	015a      	lsls	r2, r3, #5
 80045d0:	69fb      	ldr	r3, [r7, #28]
 80045d2:	4413      	add	r3, r2
 80045d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80045d8:	691a      	ldr	r2, [r3, #16]
 80045da:	69bb      	ldr	r3, [r7, #24]
 80045dc:	0159      	lsls	r1, r3, #5
 80045de:	69fb      	ldr	r3, [r7, #28]
 80045e0:	440b      	add	r3, r1
 80045e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80045e6:	4619      	mov	r1, r3
 80045e8:	4b95      	ldr	r3, [pc, #596]	; (8004840 <USB_EPStartXfer+0x2e0>)
 80045ea:	4013      	ands	r3, r2
 80045ec:	610b      	str	r3, [r1, #16]
 80045ee:	e074      	b.n	80046da <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80045f0:	69bb      	ldr	r3, [r7, #24]
 80045f2:	015a      	lsls	r2, r3, #5
 80045f4:	69fb      	ldr	r3, [r7, #28]
 80045f6:	4413      	add	r3, r2
 80045f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80045fc:	691a      	ldr	r2, [r3, #16]
 80045fe:	69bb      	ldr	r3, [r7, #24]
 8004600:	0159      	lsls	r1, r3, #5
 8004602:	69fb      	ldr	r3, [r7, #28]
 8004604:	440b      	add	r3, r1
 8004606:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800460a:	4619      	mov	r1, r3
 800460c:	4b8c      	ldr	r3, [pc, #560]	; (8004840 <USB_EPStartXfer+0x2e0>)
 800460e:	4013      	ands	r3, r2
 8004610:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004612:	69bb      	ldr	r3, [r7, #24]
 8004614:	015a      	lsls	r2, r3, #5
 8004616:	69fb      	ldr	r3, [r7, #28]
 8004618:	4413      	add	r3, r2
 800461a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800461e:	691a      	ldr	r2, [r3, #16]
 8004620:	69bb      	ldr	r3, [r7, #24]
 8004622:	0159      	lsls	r1, r3, #5
 8004624:	69fb      	ldr	r3, [r7, #28]
 8004626:	440b      	add	r3, r1
 8004628:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800462c:	4619      	mov	r1, r3
 800462e:	4b83      	ldr	r3, [pc, #524]	; (800483c <USB_EPStartXfer+0x2dc>)
 8004630:	4013      	ands	r3, r2
 8004632:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8004634:	69bb      	ldr	r3, [r7, #24]
 8004636:	015a      	lsls	r2, r3, #5
 8004638:	69fb      	ldr	r3, [r7, #28]
 800463a:	4413      	add	r3, r2
 800463c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004640:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8004642:	68bb      	ldr	r3, [r7, #8]
 8004644:	6959      	ldr	r1, [r3, #20]
 8004646:	68bb      	ldr	r3, [r7, #8]
 8004648:	689b      	ldr	r3, [r3, #8]
 800464a:	440b      	add	r3, r1
 800464c:	1e59      	subs	r1, r3, #1
 800464e:	68bb      	ldr	r3, [r7, #8]
 8004650:	689b      	ldr	r3, [r3, #8]
 8004652:	fbb1 f3f3 	udiv	r3, r1, r3
 8004656:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8004658:	4b7a      	ldr	r3, [pc, #488]	; (8004844 <USB_EPStartXfer+0x2e4>)
 800465a:	400b      	ands	r3, r1
 800465c:	69b9      	ldr	r1, [r7, #24]
 800465e:	0148      	lsls	r0, r1, #5
 8004660:	69f9      	ldr	r1, [r7, #28]
 8004662:	4401      	add	r1, r0
 8004664:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004668:	4313      	orrs	r3, r2
 800466a:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800466c:	69bb      	ldr	r3, [r7, #24]
 800466e:	015a      	lsls	r2, r3, #5
 8004670:	69fb      	ldr	r3, [r7, #28]
 8004672:	4413      	add	r3, r2
 8004674:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004678:	691a      	ldr	r2, [r3, #16]
 800467a:	68bb      	ldr	r3, [r7, #8]
 800467c:	695b      	ldr	r3, [r3, #20]
 800467e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004682:	69b9      	ldr	r1, [r7, #24]
 8004684:	0148      	lsls	r0, r1, #5
 8004686:	69f9      	ldr	r1, [r7, #28]
 8004688:	4401      	add	r1, r0
 800468a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800468e:	4313      	orrs	r3, r2
 8004690:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8004692:	68bb      	ldr	r3, [r7, #8]
 8004694:	78db      	ldrb	r3, [r3, #3]
 8004696:	2b01      	cmp	r3, #1
 8004698:	d11f      	bne.n	80046da <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800469a:	69bb      	ldr	r3, [r7, #24]
 800469c:	015a      	lsls	r2, r3, #5
 800469e:	69fb      	ldr	r3, [r7, #28]
 80046a0:	4413      	add	r3, r2
 80046a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80046a6:	691b      	ldr	r3, [r3, #16]
 80046a8:	69ba      	ldr	r2, [r7, #24]
 80046aa:	0151      	lsls	r1, r2, #5
 80046ac:	69fa      	ldr	r2, [r7, #28]
 80046ae:	440a      	add	r2, r1
 80046b0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80046b4:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80046b8:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80046ba:	69bb      	ldr	r3, [r7, #24]
 80046bc:	015a      	lsls	r2, r3, #5
 80046be:	69fb      	ldr	r3, [r7, #28]
 80046c0:	4413      	add	r3, r2
 80046c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80046c6:	691b      	ldr	r3, [r3, #16]
 80046c8:	69ba      	ldr	r2, [r7, #24]
 80046ca:	0151      	lsls	r1, r2, #5
 80046cc:	69fa      	ldr	r2, [r7, #28]
 80046ce:	440a      	add	r2, r1
 80046d0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80046d4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80046d8:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 80046da:	79fb      	ldrb	r3, [r7, #7]
 80046dc:	2b01      	cmp	r3, #1
 80046de:	d14b      	bne.n	8004778 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80046e0:	68bb      	ldr	r3, [r7, #8]
 80046e2:	691b      	ldr	r3, [r3, #16]
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d009      	beq.n	80046fc <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80046e8:	69bb      	ldr	r3, [r7, #24]
 80046ea:	015a      	lsls	r2, r3, #5
 80046ec:	69fb      	ldr	r3, [r7, #28]
 80046ee:	4413      	add	r3, r2
 80046f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80046f4:	461a      	mov	r2, r3
 80046f6:	68bb      	ldr	r3, [r7, #8]
 80046f8:	691b      	ldr	r3, [r3, #16]
 80046fa:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80046fc:	68bb      	ldr	r3, [r7, #8]
 80046fe:	78db      	ldrb	r3, [r3, #3]
 8004700:	2b01      	cmp	r3, #1
 8004702:	d128      	bne.n	8004756 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004704:	69fb      	ldr	r3, [r7, #28]
 8004706:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800470a:	689b      	ldr	r3, [r3, #8]
 800470c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004710:	2b00      	cmp	r3, #0
 8004712:	d110      	bne.n	8004736 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004714:	69bb      	ldr	r3, [r7, #24]
 8004716:	015a      	lsls	r2, r3, #5
 8004718:	69fb      	ldr	r3, [r7, #28]
 800471a:	4413      	add	r3, r2
 800471c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	69ba      	ldr	r2, [r7, #24]
 8004724:	0151      	lsls	r1, r2, #5
 8004726:	69fa      	ldr	r2, [r7, #28]
 8004728:	440a      	add	r2, r1
 800472a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800472e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004732:	6013      	str	r3, [r2, #0]
 8004734:	e00f      	b.n	8004756 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004736:	69bb      	ldr	r3, [r7, #24]
 8004738:	015a      	lsls	r2, r3, #5
 800473a:	69fb      	ldr	r3, [r7, #28]
 800473c:	4413      	add	r3, r2
 800473e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	69ba      	ldr	r2, [r7, #24]
 8004746:	0151      	lsls	r1, r2, #5
 8004748:	69fa      	ldr	r2, [r7, #28]
 800474a:	440a      	add	r2, r1
 800474c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004750:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004754:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004756:	69bb      	ldr	r3, [r7, #24]
 8004758:	015a      	lsls	r2, r3, #5
 800475a:	69fb      	ldr	r3, [r7, #28]
 800475c:	4413      	add	r3, r2
 800475e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	69ba      	ldr	r2, [r7, #24]
 8004766:	0151      	lsls	r1, r2, #5
 8004768:	69fa      	ldr	r2, [r7, #28]
 800476a:	440a      	add	r2, r1
 800476c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004770:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004774:	6013      	str	r3, [r2, #0]
 8004776:	e133      	b.n	80049e0 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004778:	69bb      	ldr	r3, [r7, #24]
 800477a:	015a      	lsls	r2, r3, #5
 800477c:	69fb      	ldr	r3, [r7, #28]
 800477e:	4413      	add	r3, r2
 8004780:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	69ba      	ldr	r2, [r7, #24]
 8004788:	0151      	lsls	r1, r2, #5
 800478a:	69fa      	ldr	r2, [r7, #28]
 800478c:	440a      	add	r2, r1
 800478e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004792:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004796:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004798:	68bb      	ldr	r3, [r7, #8]
 800479a:	78db      	ldrb	r3, [r3, #3]
 800479c:	2b01      	cmp	r3, #1
 800479e:	d015      	beq.n	80047cc <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80047a0:	68bb      	ldr	r3, [r7, #8]
 80047a2:	695b      	ldr	r3, [r3, #20]
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	f000 811b 	beq.w	80049e0 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80047aa:	69fb      	ldr	r3, [r7, #28]
 80047ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80047b0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80047b2:	68bb      	ldr	r3, [r7, #8]
 80047b4:	781b      	ldrb	r3, [r3, #0]
 80047b6:	f003 030f 	and.w	r3, r3, #15
 80047ba:	2101      	movs	r1, #1
 80047bc:	fa01 f303 	lsl.w	r3, r1, r3
 80047c0:	69f9      	ldr	r1, [r7, #28]
 80047c2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80047c6:	4313      	orrs	r3, r2
 80047c8:	634b      	str	r3, [r1, #52]	; 0x34
 80047ca:	e109      	b.n	80049e0 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80047cc:	69fb      	ldr	r3, [r7, #28]
 80047ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80047d2:	689b      	ldr	r3, [r3, #8]
 80047d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d110      	bne.n	80047fe <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80047dc:	69bb      	ldr	r3, [r7, #24]
 80047de:	015a      	lsls	r2, r3, #5
 80047e0:	69fb      	ldr	r3, [r7, #28]
 80047e2:	4413      	add	r3, r2
 80047e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	69ba      	ldr	r2, [r7, #24]
 80047ec:	0151      	lsls	r1, r2, #5
 80047ee:	69fa      	ldr	r2, [r7, #28]
 80047f0:	440a      	add	r2, r1
 80047f2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80047f6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80047fa:	6013      	str	r3, [r2, #0]
 80047fc:	e00f      	b.n	800481e <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80047fe:	69bb      	ldr	r3, [r7, #24]
 8004800:	015a      	lsls	r2, r3, #5
 8004802:	69fb      	ldr	r3, [r7, #28]
 8004804:	4413      	add	r3, r2
 8004806:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	69ba      	ldr	r2, [r7, #24]
 800480e:	0151      	lsls	r1, r2, #5
 8004810:	69fa      	ldr	r2, [r7, #28]
 8004812:	440a      	add	r2, r1
 8004814:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004818:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800481c:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800481e:	68bb      	ldr	r3, [r7, #8]
 8004820:	68d9      	ldr	r1, [r3, #12]
 8004822:	68bb      	ldr	r3, [r7, #8]
 8004824:	781a      	ldrb	r2, [r3, #0]
 8004826:	68bb      	ldr	r3, [r7, #8]
 8004828:	695b      	ldr	r3, [r3, #20]
 800482a:	b298      	uxth	r0, r3
 800482c:	79fb      	ldrb	r3, [r7, #7]
 800482e:	9300      	str	r3, [sp, #0]
 8004830:	4603      	mov	r3, r0
 8004832:	68f8      	ldr	r0, [r7, #12]
 8004834:	f000 fa38 	bl	8004ca8 <USB_WritePacket>
 8004838:	e0d2      	b.n	80049e0 <USB_EPStartXfer+0x480>
 800483a:	bf00      	nop
 800483c:	e007ffff 	.word	0xe007ffff
 8004840:	fff80000 	.word	0xfff80000
 8004844:	1ff80000 	.word	0x1ff80000
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004848:	69bb      	ldr	r3, [r7, #24]
 800484a:	015a      	lsls	r2, r3, #5
 800484c:	69fb      	ldr	r3, [r7, #28]
 800484e:	4413      	add	r3, r2
 8004850:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004854:	691a      	ldr	r2, [r3, #16]
 8004856:	69bb      	ldr	r3, [r7, #24]
 8004858:	0159      	lsls	r1, r3, #5
 800485a:	69fb      	ldr	r3, [r7, #28]
 800485c:	440b      	add	r3, r1
 800485e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004862:	4619      	mov	r1, r3
 8004864:	4b61      	ldr	r3, [pc, #388]	; (80049ec <USB_EPStartXfer+0x48c>)
 8004866:	4013      	ands	r3, r2
 8004868:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800486a:	69bb      	ldr	r3, [r7, #24]
 800486c:	015a      	lsls	r2, r3, #5
 800486e:	69fb      	ldr	r3, [r7, #28]
 8004870:	4413      	add	r3, r2
 8004872:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004876:	691a      	ldr	r2, [r3, #16]
 8004878:	69bb      	ldr	r3, [r7, #24]
 800487a:	0159      	lsls	r1, r3, #5
 800487c:	69fb      	ldr	r3, [r7, #28]
 800487e:	440b      	add	r3, r1
 8004880:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004884:	4619      	mov	r1, r3
 8004886:	4b5a      	ldr	r3, [pc, #360]	; (80049f0 <USB_EPStartXfer+0x490>)
 8004888:	4013      	ands	r3, r2
 800488a:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len == 0U)
 800488c:	68bb      	ldr	r3, [r7, #8]
 800488e:	695b      	ldr	r3, [r3, #20]
 8004890:	2b00      	cmp	r3, #0
 8004892:	d123      	bne.n	80048dc <USB_EPStartXfer+0x37c>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8004894:	69bb      	ldr	r3, [r7, #24]
 8004896:	015a      	lsls	r2, r3, #5
 8004898:	69fb      	ldr	r3, [r7, #28]
 800489a:	4413      	add	r3, r2
 800489c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80048a0:	691a      	ldr	r2, [r3, #16]
 80048a2:	68bb      	ldr	r3, [r7, #8]
 80048a4:	689b      	ldr	r3, [r3, #8]
 80048a6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80048aa:	69b9      	ldr	r1, [r7, #24]
 80048ac:	0148      	lsls	r0, r1, #5
 80048ae:	69f9      	ldr	r1, [r7, #28]
 80048b0:	4401      	add	r1, r0
 80048b2:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80048b6:	4313      	orrs	r3, r2
 80048b8:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80048ba:	69bb      	ldr	r3, [r7, #24]
 80048bc:	015a      	lsls	r2, r3, #5
 80048be:	69fb      	ldr	r3, [r7, #28]
 80048c0:	4413      	add	r3, r2
 80048c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80048c6:	691b      	ldr	r3, [r3, #16]
 80048c8:	69ba      	ldr	r2, [r7, #24]
 80048ca:	0151      	lsls	r1, r2, #5
 80048cc:	69fa      	ldr	r2, [r7, #28]
 80048ce:	440a      	add	r2, r1
 80048d0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80048d4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80048d8:	6113      	str	r3, [r2, #16]
 80048da:	e033      	b.n	8004944 <USB_EPStartXfer+0x3e4>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80048dc:	68bb      	ldr	r3, [r7, #8]
 80048de:	695a      	ldr	r2, [r3, #20]
 80048e0:	68bb      	ldr	r3, [r7, #8]
 80048e2:	689b      	ldr	r3, [r3, #8]
 80048e4:	4413      	add	r3, r2
 80048e6:	1e5a      	subs	r2, r3, #1
 80048e8:	68bb      	ldr	r3, [r7, #8]
 80048ea:	689b      	ldr	r3, [r3, #8]
 80048ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80048f0:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80048f2:	69bb      	ldr	r3, [r7, #24]
 80048f4:	015a      	lsls	r2, r3, #5
 80048f6:	69fb      	ldr	r3, [r7, #28]
 80048f8:	4413      	add	r3, r2
 80048fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80048fe:	691a      	ldr	r2, [r3, #16]
 8004900:	8afb      	ldrh	r3, [r7, #22]
 8004902:	04d9      	lsls	r1, r3, #19
 8004904:	4b3b      	ldr	r3, [pc, #236]	; (80049f4 <USB_EPStartXfer+0x494>)
 8004906:	400b      	ands	r3, r1
 8004908:	69b9      	ldr	r1, [r7, #24]
 800490a:	0148      	lsls	r0, r1, #5
 800490c:	69f9      	ldr	r1, [r7, #28]
 800490e:	4401      	add	r1, r0
 8004910:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004914:	4313      	orrs	r3, r2
 8004916:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8004918:	69bb      	ldr	r3, [r7, #24]
 800491a:	015a      	lsls	r2, r3, #5
 800491c:	69fb      	ldr	r3, [r7, #28]
 800491e:	4413      	add	r3, r2
 8004920:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004924:	691a      	ldr	r2, [r3, #16]
 8004926:	68bb      	ldr	r3, [r7, #8]
 8004928:	689b      	ldr	r3, [r3, #8]
 800492a:	8af9      	ldrh	r1, [r7, #22]
 800492c:	fb01 f303 	mul.w	r3, r1, r3
 8004930:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004934:	69b9      	ldr	r1, [r7, #24]
 8004936:	0148      	lsls	r0, r1, #5
 8004938:	69f9      	ldr	r1, [r7, #28]
 800493a:	4401      	add	r1, r0
 800493c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004940:	4313      	orrs	r3, r2
 8004942:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8004944:	79fb      	ldrb	r3, [r7, #7]
 8004946:	2b01      	cmp	r3, #1
 8004948:	d10d      	bne.n	8004966 <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800494a:	68bb      	ldr	r3, [r7, #8]
 800494c:	68db      	ldr	r3, [r3, #12]
 800494e:	2b00      	cmp	r3, #0
 8004950:	d009      	beq.n	8004966 <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8004952:	68bb      	ldr	r3, [r7, #8]
 8004954:	68d9      	ldr	r1, [r3, #12]
 8004956:	69bb      	ldr	r3, [r7, #24]
 8004958:	015a      	lsls	r2, r3, #5
 800495a:	69fb      	ldr	r3, [r7, #28]
 800495c:	4413      	add	r3, r2
 800495e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004962:	460a      	mov	r2, r1
 8004964:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8004966:	68bb      	ldr	r3, [r7, #8]
 8004968:	78db      	ldrb	r3, [r3, #3]
 800496a:	2b01      	cmp	r3, #1
 800496c:	d128      	bne.n	80049c0 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800496e:	69fb      	ldr	r3, [r7, #28]
 8004970:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004974:	689b      	ldr	r3, [r3, #8]
 8004976:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800497a:	2b00      	cmp	r3, #0
 800497c:	d110      	bne.n	80049a0 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800497e:	69bb      	ldr	r3, [r7, #24]
 8004980:	015a      	lsls	r2, r3, #5
 8004982:	69fb      	ldr	r3, [r7, #28]
 8004984:	4413      	add	r3, r2
 8004986:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	69ba      	ldr	r2, [r7, #24]
 800498e:	0151      	lsls	r1, r2, #5
 8004990:	69fa      	ldr	r2, [r7, #28]
 8004992:	440a      	add	r2, r1
 8004994:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004998:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800499c:	6013      	str	r3, [r2, #0]
 800499e:	e00f      	b.n	80049c0 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80049a0:	69bb      	ldr	r3, [r7, #24]
 80049a2:	015a      	lsls	r2, r3, #5
 80049a4:	69fb      	ldr	r3, [r7, #28]
 80049a6:	4413      	add	r3, r2
 80049a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	69ba      	ldr	r2, [r7, #24]
 80049b0:	0151      	lsls	r1, r2, #5
 80049b2:	69fa      	ldr	r2, [r7, #28]
 80049b4:	440a      	add	r2, r1
 80049b6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80049ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80049be:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80049c0:	69bb      	ldr	r3, [r7, #24]
 80049c2:	015a      	lsls	r2, r3, #5
 80049c4:	69fb      	ldr	r3, [r7, #28]
 80049c6:	4413      	add	r3, r2
 80049c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	69ba      	ldr	r2, [r7, #24]
 80049d0:	0151      	lsls	r1, r2, #5
 80049d2:	69fa      	ldr	r2, [r7, #28]
 80049d4:	440a      	add	r2, r1
 80049d6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80049da:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80049de:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80049e0:	2300      	movs	r3, #0
}
 80049e2:	4618      	mov	r0, r3
 80049e4:	3720      	adds	r7, #32
 80049e6:	46bd      	mov	sp, r7
 80049e8:	bd80      	pop	{r7, pc}
 80049ea:	bf00      	nop
 80049ec:	fff80000 	.word	0xfff80000
 80049f0:	e007ffff 	.word	0xe007ffff
 80049f4:	1ff80000 	.word	0x1ff80000

080049f8 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80049f8:	b480      	push	{r7}
 80049fa:	b087      	sub	sp, #28
 80049fc:	af00      	add	r7, sp, #0
 80049fe:	60f8      	str	r0, [r7, #12]
 8004a00:	60b9      	str	r1, [r7, #8]
 8004a02:	4613      	mov	r3, r2
 8004a04:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8004a0a:	68bb      	ldr	r3, [r7, #8]
 8004a0c:	781b      	ldrb	r3, [r3, #0]
 8004a0e:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004a10:	68bb      	ldr	r3, [r7, #8]
 8004a12:	785b      	ldrb	r3, [r3, #1]
 8004a14:	2b01      	cmp	r3, #1
 8004a16:	f040 80cd 	bne.w	8004bb4 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8004a1a:	68bb      	ldr	r3, [r7, #8]
 8004a1c:	695b      	ldr	r3, [r3, #20]
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d132      	bne.n	8004a88 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004a22:	693b      	ldr	r3, [r7, #16]
 8004a24:	015a      	lsls	r2, r3, #5
 8004a26:	697b      	ldr	r3, [r7, #20]
 8004a28:	4413      	add	r3, r2
 8004a2a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a2e:	691a      	ldr	r2, [r3, #16]
 8004a30:	693b      	ldr	r3, [r7, #16]
 8004a32:	0159      	lsls	r1, r3, #5
 8004a34:	697b      	ldr	r3, [r7, #20]
 8004a36:	440b      	add	r3, r1
 8004a38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a3c:	4619      	mov	r1, r3
 8004a3e:	4b98      	ldr	r3, [pc, #608]	; (8004ca0 <USB_EP0StartXfer+0x2a8>)
 8004a40:	4013      	ands	r3, r2
 8004a42:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004a44:	693b      	ldr	r3, [r7, #16]
 8004a46:	015a      	lsls	r2, r3, #5
 8004a48:	697b      	ldr	r3, [r7, #20]
 8004a4a:	4413      	add	r3, r2
 8004a4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a50:	691b      	ldr	r3, [r3, #16]
 8004a52:	693a      	ldr	r2, [r7, #16]
 8004a54:	0151      	lsls	r1, r2, #5
 8004a56:	697a      	ldr	r2, [r7, #20]
 8004a58:	440a      	add	r2, r1
 8004a5a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004a5e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004a62:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004a64:	693b      	ldr	r3, [r7, #16]
 8004a66:	015a      	lsls	r2, r3, #5
 8004a68:	697b      	ldr	r3, [r7, #20]
 8004a6a:	4413      	add	r3, r2
 8004a6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a70:	691a      	ldr	r2, [r3, #16]
 8004a72:	693b      	ldr	r3, [r7, #16]
 8004a74:	0159      	lsls	r1, r3, #5
 8004a76:	697b      	ldr	r3, [r7, #20]
 8004a78:	440b      	add	r3, r1
 8004a7a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a7e:	4619      	mov	r1, r3
 8004a80:	4b88      	ldr	r3, [pc, #544]	; (8004ca4 <USB_EP0StartXfer+0x2ac>)
 8004a82:	4013      	ands	r3, r2
 8004a84:	610b      	str	r3, [r1, #16]
 8004a86:	e04e      	b.n	8004b26 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004a88:	693b      	ldr	r3, [r7, #16]
 8004a8a:	015a      	lsls	r2, r3, #5
 8004a8c:	697b      	ldr	r3, [r7, #20]
 8004a8e:	4413      	add	r3, r2
 8004a90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a94:	691a      	ldr	r2, [r3, #16]
 8004a96:	693b      	ldr	r3, [r7, #16]
 8004a98:	0159      	lsls	r1, r3, #5
 8004a9a:	697b      	ldr	r3, [r7, #20]
 8004a9c:	440b      	add	r3, r1
 8004a9e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004aa2:	4619      	mov	r1, r3
 8004aa4:	4b7f      	ldr	r3, [pc, #508]	; (8004ca4 <USB_EP0StartXfer+0x2ac>)
 8004aa6:	4013      	ands	r3, r2
 8004aa8:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004aaa:	693b      	ldr	r3, [r7, #16]
 8004aac:	015a      	lsls	r2, r3, #5
 8004aae:	697b      	ldr	r3, [r7, #20]
 8004ab0:	4413      	add	r3, r2
 8004ab2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ab6:	691a      	ldr	r2, [r3, #16]
 8004ab8:	693b      	ldr	r3, [r7, #16]
 8004aba:	0159      	lsls	r1, r3, #5
 8004abc:	697b      	ldr	r3, [r7, #20]
 8004abe:	440b      	add	r3, r1
 8004ac0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ac4:	4619      	mov	r1, r3
 8004ac6:	4b76      	ldr	r3, [pc, #472]	; (8004ca0 <USB_EP0StartXfer+0x2a8>)
 8004ac8:	4013      	ands	r3, r2
 8004aca:	610b      	str	r3, [r1, #16]

      if (ep->xfer_len > ep->maxpacket)
 8004acc:	68bb      	ldr	r3, [r7, #8]
 8004ace:	695a      	ldr	r2, [r3, #20]
 8004ad0:	68bb      	ldr	r3, [r7, #8]
 8004ad2:	689b      	ldr	r3, [r3, #8]
 8004ad4:	429a      	cmp	r2, r3
 8004ad6:	d903      	bls.n	8004ae0 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8004ad8:	68bb      	ldr	r3, [r7, #8]
 8004ada:	689a      	ldr	r2, [r3, #8]
 8004adc:	68bb      	ldr	r3, [r7, #8]
 8004ade:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004ae0:	693b      	ldr	r3, [r7, #16]
 8004ae2:	015a      	lsls	r2, r3, #5
 8004ae4:	697b      	ldr	r3, [r7, #20]
 8004ae6:	4413      	add	r3, r2
 8004ae8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004aec:	691b      	ldr	r3, [r3, #16]
 8004aee:	693a      	ldr	r2, [r7, #16]
 8004af0:	0151      	lsls	r1, r2, #5
 8004af2:	697a      	ldr	r2, [r7, #20]
 8004af4:	440a      	add	r2, r1
 8004af6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004afa:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004afe:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004b00:	693b      	ldr	r3, [r7, #16]
 8004b02:	015a      	lsls	r2, r3, #5
 8004b04:	697b      	ldr	r3, [r7, #20]
 8004b06:	4413      	add	r3, r2
 8004b08:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b0c:	691a      	ldr	r2, [r3, #16]
 8004b0e:	68bb      	ldr	r3, [r7, #8]
 8004b10:	695b      	ldr	r3, [r3, #20]
 8004b12:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004b16:	6939      	ldr	r1, [r7, #16]
 8004b18:	0148      	lsls	r0, r1, #5
 8004b1a:	6979      	ldr	r1, [r7, #20]
 8004b1c:	4401      	add	r1, r0
 8004b1e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004b22:	4313      	orrs	r3, r2
 8004b24:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8004b26:	79fb      	ldrb	r3, [r7, #7]
 8004b28:	2b01      	cmp	r3, #1
 8004b2a:	d11e      	bne.n	8004b6a <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8004b2c:	68bb      	ldr	r3, [r7, #8]
 8004b2e:	691b      	ldr	r3, [r3, #16]
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d009      	beq.n	8004b48 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004b34:	693b      	ldr	r3, [r7, #16]
 8004b36:	015a      	lsls	r2, r3, #5
 8004b38:	697b      	ldr	r3, [r7, #20]
 8004b3a:	4413      	add	r3, r2
 8004b3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b40:	461a      	mov	r2, r3
 8004b42:	68bb      	ldr	r3, [r7, #8]
 8004b44:	691b      	ldr	r3, [r3, #16]
 8004b46:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004b48:	693b      	ldr	r3, [r7, #16]
 8004b4a:	015a      	lsls	r2, r3, #5
 8004b4c:	697b      	ldr	r3, [r7, #20]
 8004b4e:	4413      	add	r3, r2
 8004b50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	693a      	ldr	r2, [r7, #16]
 8004b58:	0151      	lsls	r1, r2, #5
 8004b5a:	697a      	ldr	r2, [r7, #20]
 8004b5c:	440a      	add	r2, r1
 8004b5e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004b62:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004b66:	6013      	str	r3, [r2, #0]
 8004b68:	e092      	b.n	8004c90 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004b6a:	693b      	ldr	r3, [r7, #16]
 8004b6c:	015a      	lsls	r2, r3, #5
 8004b6e:	697b      	ldr	r3, [r7, #20]
 8004b70:	4413      	add	r3, r2
 8004b72:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	693a      	ldr	r2, [r7, #16]
 8004b7a:	0151      	lsls	r1, r2, #5
 8004b7c:	697a      	ldr	r2, [r7, #20]
 8004b7e:	440a      	add	r2, r1
 8004b80:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004b84:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004b88:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8004b8a:	68bb      	ldr	r3, [r7, #8]
 8004b8c:	695b      	ldr	r3, [r3, #20]
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d07e      	beq.n	8004c90 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8004b92:	697b      	ldr	r3, [r7, #20]
 8004b94:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b98:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004b9a:	68bb      	ldr	r3, [r7, #8]
 8004b9c:	781b      	ldrb	r3, [r3, #0]
 8004b9e:	f003 030f 	and.w	r3, r3, #15
 8004ba2:	2101      	movs	r1, #1
 8004ba4:	fa01 f303 	lsl.w	r3, r1, r3
 8004ba8:	6979      	ldr	r1, [r7, #20]
 8004baa:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004bae:	4313      	orrs	r3, r2
 8004bb0:	634b      	str	r3, [r1, #52]	; 0x34
 8004bb2:	e06d      	b.n	8004c90 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004bb4:	693b      	ldr	r3, [r7, #16]
 8004bb6:	015a      	lsls	r2, r3, #5
 8004bb8:	697b      	ldr	r3, [r7, #20]
 8004bba:	4413      	add	r3, r2
 8004bbc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004bc0:	691a      	ldr	r2, [r3, #16]
 8004bc2:	693b      	ldr	r3, [r7, #16]
 8004bc4:	0159      	lsls	r1, r3, #5
 8004bc6:	697b      	ldr	r3, [r7, #20]
 8004bc8:	440b      	add	r3, r1
 8004bca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004bce:	4619      	mov	r1, r3
 8004bd0:	4b34      	ldr	r3, [pc, #208]	; (8004ca4 <USB_EP0StartXfer+0x2ac>)
 8004bd2:	4013      	ands	r3, r2
 8004bd4:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004bd6:	693b      	ldr	r3, [r7, #16]
 8004bd8:	015a      	lsls	r2, r3, #5
 8004bda:	697b      	ldr	r3, [r7, #20]
 8004bdc:	4413      	add	r3, r2
 8004bde:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004be2:	691a      	ldr	r2, [r3, #16]
 8004be4:	693b      	ldr	r3, [r7, #16]
 8004be6:	0159      	lsls	r1, r3, #5
 8004be8:	697b      	ldr	r3, [r7, #20]
 8004bea:	440b      	add	r3, r1
 8004bec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004bf0:	4619      	mov	r1, r3
 8004bf2:	4b2b      	ldr	r3, [pc, #172]	; (8004ca0 <USB_EP0StartXfer+0x2a8>)
 8004bf4:	4013      	ands	r3, r2
 8004bf6:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len > 0U)
 8004bf8:	68bb      	ldr	r3, [r7, #8]
 8004bfa:	695b      	ldr	r3, [r3, #20]
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d003      	beq.n	8004c08 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8004c00:	68bb      	ldr	r3, [r7, #8]
 8004c02:	689a      	ldr	r2, [r3, #8]
 8004c04:	68bb      	ldr	r3, [r7, #8]
 8004c06:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004c08:	693b      	ldr	r3, [r7, #16]
 8004c0a:	015a      	lsls	r2, r3, #5
 8004c0c:	697b      	ldr	r3, [r7, #20]
 8004c0e:	4413      	add	r3, r2
 8004c10:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c14:	691b      	ldr	r3, [r3, #16]
 8004c16:	693a      	ldr	r2, [r7, #16]
 8004c18:	0151      	lsls	r1, r2, #5
 8004c1a:	697a      	ldr	r2, [r7, #20]
 8004c1c:	440a      	add	r2, r1
 8004c1e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004c22:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004c26:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8004c28:	693b      	ldr	r3, [r7, #16]
 8004c2a:	015a      	lsls	r2, r3, #5
 8004c2c:	697b      	ldr	r3, [r7, #20]
 8004c2e:	4413      	add	r3, r2
 8004c30:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c34:	691a      	ldr	r2, [r3, #16]
 8004c36:	68bb      	ldr	r3, [r7, #8]
 8004c38:	689b      	ldr	r3, [r3, #8]
 8004c3a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004c3e:	6939      	ldr	r1, [r7, #16]
 8004c40:	0148      	lsls	r0, r1, #5
 8004c42:	6979      	ldr	r1, [r7, #20]
 8004c44:	4401      	add	r1, r0
 8004c46:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004c4a:	4313      	orrs	r3, r2
 8004c4c:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8004c4e:	79fb      	ldrb	r3, [r7, #7]
 8004c50:	2b01      	cmp	r3, #1
 8004c52:	d10d      	bne.n	8004c70 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8004c54:	68bb      	ldr	r3, [r7, #8]
 8004c56:	68db      	ldr	r3, [r3, #12]
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d009      	beq.n	8004c70 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8004c5c:	68bb      	ldr	r3, [r7, #8]
 8004c5e:	68d9      	ldr	r1, [r3, #12]
 8004c60:	693b      	ldr	r3, [r7, #16]
 8004c62:	015a      	lsls	r2, r3, #5
 8004c64:	697b      	ldr	r3, [r7, #20]
 8004c66:	4413      	add	r3, r2
 8004c68:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c6c:	460a      	mov	r2, r1
 8004c6e:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8004c70:	693b      	ldr	r3, [r7, #16]
 8004c72:	015a      	lsls	r2, r3, #5
 8004c74:	697b      	ldr	r3, [r7, #20]
 8004c76:	4413      	add	r3, r2
 8004c78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	693a      	ldr	r2, [r7, #16]
 8004c80:	0151      	lsls	r1, r2, #5
 8004c82:	697a      	ldr	r2, [r7, #20]
 8004c84:	440a      	add	r2, r1
 8004c86:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004c8a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004c8e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004c90:	2300      	movs	r3, #0
}
 8004c92:	4618      	mov	r0, r3
 8004c94:	371c      	adds	r7, #28
 8004c96:	46bd      	mov	sp, r7
 8004c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c9c:	4770      	bx	lr
 8004c9e:	bf00      	nop
 8004ca0:	e007ffff 	.word	0xe007ffff
 8004ca4:	fff80000 	.word	0xfff80000

08004ca8 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8004ca8:	b480      	push	{r7}
 8004caa:	b089      	sub	sp, #36	; 0x24
 8004cac:	af00      	add	r7, sp, #0
 8004cae:	60f8      	str	r0, [r7, #12]
 8004cb0:	60b9      	str	r1, [r7, #8]
 8004cb2:	4611      	mov	r1, r2
 8004cb4:	461a      	mov	r2, r3
 8004cb6:	460b      	mov	r3, r1
 8004cb8:	71fb      	strb	r3, [r7, #7]
 8004cba:	4613      	mov	r3, r2
 8004cbc:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8004cc2:	68bb      	ldr	r3, [r7, #8]
 8004cc4:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8004cc6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d123      	bne.n	8004d16 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8004cce:	88bb      	ldrh	r3, [r7, #4]
 8004cd0:	3303      	adds	r3, #3
 8004cd2:	089b      	lsrs	r3, r3, #2
 8004cd4:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8004cd6:	2300      	movs	r3, #0
 8004cd8:	61bb      	str	r3, [r7, #24]
 8004cda:	e018      	b.n	8004d0e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8004cdc:	79fb      	ldrb	r3, [r7, #7]
 8004cde:	031a      	lsls	r2, r3, #12
 8004ce0:	697b      	ldr	r3, [r7, #20]
 8004ce2:	4413      	add	r3, r2
 8004ce4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004ce8:	461a      	mov	r2, r3
 8004cea:	69fb      	ldr	r3, [r7, #28]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	6013      	str	r3, [r2, #0]
      pSrc++;
 8004cf0:	69fb      	ldr	r3, [r7, #28]
 8004cf2:	3301      	adds	r3, #1
 8004cf4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004cf6:	69fb      	ldr	r3, [r7, #28]
 8004cf8:	3301      	adds	r3, #1
 8004cfa:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004cfc:	69fb      	ldr	r3, [r7, #28]
 8004cfe:	3301      	adds	r3, #1
 8004d00:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004d02:	69fb      	ldr	r3, [r7, #28]
 8004d04:	3301      	adds	r3, #1
 8004d06:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8004d08:	69bb      	ldr	r3, [r7, #24]
 8004d0a:	3301      	adds	r3, #1
 8004d0c:	61bb      	str	r3, [r7, #24]
 8004d0e:	69ba      	ldr	r2, [r7, #24]
 8004d10:	693b      	ldr	r3, [r7, #16]
 8004d12:	429a      	cmp	r2, r3
 8004d14:	d3e2      	bcc.n	8004cdc <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8004d16:	2300      	movs	r3, #0
}
 8004d18:	4618      	mov	r0, r3
 8004d1a:	3724      	adds	r7, #36	; 0x24
 8004d1c:	46bd      	mov	sp, r7
 8004d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d22:	4770      	bx	lr

08004d24 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8004d24:	b480      	push	{r7}
 8004d26:	b08b      	sub	sp, #44	; 0x2c
 8004d28:	af00      	add	r7, sp, #0
 8004d2a:	60f8      	str	r0, [r7, #12]
 8004d2c:	60b9      	str	r1, [r7, #8]
 8004d2e:	4613      	mov	r3, r2
 8004d30:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8004d36:	68bb      	ldr	r3, [r7, #8]
 8004d38:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8004d3a:	88fb      	ldrh	r3, [r7, #6]
 8004d3c:	089b      	lsrs	r3, r3, #2
 8004d3e:	b29b      	uxth	r3, r3
 8004d40:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8004d42:	88fb      	ldrh	r3, [r7, #6]
 8004d44:	f003 0303 	and.w	r3, r3, #3
 8004d48:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8004d4a:	2300      	movs	r3, #0
 8004d4c:	623b      	str	r3, [r7, #32]
 8004d4e:	e014      	b.n	8004d7a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8004d50:	69bb      	ldr	r3, [r7, #24]
 8004d52:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004d56:	681a      	ldr	r2, [r3, #0]
 8004d58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d5a:	601a      	str	r2, [r3, #0]
    pDest++;
 8004d5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d5e:	3301      	adds	r3, #1
 8004d60:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004d62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d64:	3301      	adds	r3, #1
 8004d66:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004d68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d6a:	3301      	adds	r3, #1
 8004d6c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004d6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d70:	3301      	adds	r3, #1
 8004d72:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8004d74:	6a3b      	ldr	r3, [r7, #32]
 8004d76:	3301      	adds	r3, #1
 8004d78:	623b      	str	r3, [r7, #32]
 8004d7a:	6a3a      	ldr	r2, [r7, #32]
 8004d7c:	697b      	ldr	r3, [r7, #20]
 8004d7e:	429a      	cmp	r2, r3
 8004d80:	d3e6      	bcc.n	8004d50 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8004d82:	8bfb      	ldrh	r3, [r7, #30]
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d01e      	beq.n	8004dc6 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8004d88:	2300      	movs	r3, #0
 8004d8a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8004d8c:	69bb      	ldr	r3, [r7, #24]
 8004d8e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004d92:	461a      	mov	r2, r3
 8004d94:	f107 0310 	add.w	r3, r7, #16
 8004d98:	6812      	ldr	r2, [r2, #0]
 8004d9a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8004d9c:	693a      	ldr	r2, [r7, #16]
 8004d9e:	6a3b      	ldr	r3, [r7, #32]
 8004da0:	b2db      	uxtb	r3, r3
 8004da2:	00db      	lsls	r3, r3, #3
 8004da4:	fa22 f303 	lsr.w	r3, r2, r3
 8004da8:	b2da      	uxtb	r2, r3
 8004daa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dac:	701a      	strb	r2, [r3, #0]
      i++;
 8004dae:	6a3b      	ldr	r3, [r7, #32]
 8004db0:	3301      	adds	r3, #1
 8004db2:	623b      	str	r3, [r7, #32]
      pDest++;
 8004db4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004db6:	3301      	adds	r3, #1
 8004db8:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8004dba:	8bfb      	ldrh	r3, [r7, #30]
 8004dbc:	3b01      	subs	r3, #1
 8004dbe:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8004dc0:	8bfb      	ldrh	r3, [r7, #30]
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d1ea      	bne.n	8004d9c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8004dc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004dc8:	4618      	mov	r0, r3
 8004dca:	372c      	adds	r7, #44	; 0x2c
 8004dcc:	46bd      	mov	sp, r7
 8004dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd2:	4770      	bx	lr

08004dd4 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004dd4:	b480      	push	{r7}
 8004dd6:	b085      	sub	sp, #20
 8004dd8:	af00      	add	r7, sp, #0
 8004dda:	6078      	str	r0, [r7, #4]
 8004ddc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004de2:	683b      	ldr	r3, [r7, #0]
 8004de4:	781b      	ldrb	r3, [r3, #0]
 8004de6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004de8:	683b      	ldr	r3, [r7, #0]
 8004dea:	785b      	ldrb	r3, [r3, #1]
 8004dec:	2b01      	cmp	r3, #1
 8004dee:	d12c      	bne.n	8004e4a <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8004df0:	68bb      	ldr	r3, [r7, #8]
 8004df2:	015a      	lsls	r2, r3, #5
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	4413      	add	r3, r2
 8004df8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	db12      	blt.n	8004e28 <USB_EPSetStall+0x54>
 8004e02:	68bb      	ldr	r3, [r7, #8]
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d00f      	beq.n	8004e28 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8004e08:	68bb      	ldr	r3, [r7, #8]
 8004e0a:	015a      	lsls	r2, r3, #5
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	4413      	add	r3, r2
 8004e10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	68ba      	ldr	r2, [r7, #8]
 8004e18:	0151      	lsls	r1, r2, #5
 8004e1a:	68fa      	ldr	r2, [r7, #12]
 8004e1c:	440a      	add	r2, r1
 8004e1e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004e22:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004e26:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8004e28:	68bb      	ldr	r3, [r7, #8]
 8004e2a:	015a      	lsls	r2, r3, #5
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	4413      	add	r3, r2
 8004e30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	68ba      	ldr	r2, [r7, #8]
 8004e38:	0151      	lsls	r1, r2, #5
 8004e3a:	68fa      	ldr	r2, [r7, #12]
 8004e3c:	440a      	add	r2, r1
 8004e3e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004e42:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004e46:	6013      	str	r3, [r2, #0]
 8004e48:	e02b      	b.n	8004ea2 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8004e4a:	68bb      	ldr	r3, [r7, #8]
 8004e4c:	015a      	lsls	r2, r3, #5
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	4413      	add	r3, r2
 8004e52:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	db12      	blt.n	8004e82 <USB_EPSetStall+0xae>
 8004e5c:	68bb      	ldr	r3, [r7, #8]
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d00f      	beq.n	8004e82 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8004e62:	68bb      	ldr	r3, [r7, #8]
 8004e64:	015a      	lsls	r2, r3, #5
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	4413      	add	r3, r2
 8004e6a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	68ba      	ldr	r2, [r7, #8]
 8004e72:	0151      	lsls	r1, r2, #5
 8004e74:	68fa      	ldr	r2, [r7, #12]
 8004e76:	440a      	add	r2, r1
 8004e78:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004e7c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004e80:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8004e82:	68bb      	ldr	r3, [r7, #8]
 8004e84:	015a      	lsls	r2, r3, #5
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	4413      	add	r3, r2
 8004e8a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	68ba      	ldr	r2, [r7, #8]
 8004e92:	0151      	lsls	r1, r2, #5
 8004e94:	68fa      	ldr	r2, [r7, #12]
 8004e96:	440a      	add	r2, r1
 8004e98:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004e9c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004ea0:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004ea2:	2300      	movs	r3, #0
}
 8004ea4:	4618      	mov	r0, r3
 8004ea6:	3714      	adds	r7, #20
 8004ea8:	46bd      	mov	sp, r7
 8004eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eae:	4770      	bx	lr

08004eb0 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004eb0:	b480      	push	{r7}
 8004eb2:	b085      	sub	sp, #20
 8004eb4:	af00      	add	r7, sp, #0
 8004eb6:	6078      	str	r0, [r7, #4]
 8004eb8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004ebe:	683b      	ldr	r3, [r7, #0]
 8004ec0:	781b      	ldrb	r3, [r3, #0]
 8004ec2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004ec4:	683b      	ldr	r3, [r7, #0]
 8004ec6:	785b      	ldrb	r3, [r3, #1]
 8004ec8:	2b01      	cmp	r3, #1
 8004eca:	d128      	bne.n	8004f1e <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8004ecc:	68bb      	ldr	r3, [r7, #8]
 8004ece:	015a      	lsls	r2, r3, #5
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	4413      	add	r3, r2
 8004ed4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	68ba      	ldr	r2, [r7, #8]
 8004edc:	0151      	lsls	r1, r2, #5
 8004ede:	68fa      	ldr	r2, [r7, #12]
 8004ee0:	440a      	add	r2, r1
 8004ee2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004ee6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004eea:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8004eec:	683b      	ldr	r3, [r7, #0]
 8004eee:	78db      	ldrb	r3, [r3, #3]
 8004ef0:	2b03      	cmp	r3, #3
 8004ef2:	d003      	beq.n	8004efc <USB_EPClearStall+0x4c>
 8004ef4:	683b      	ldr	r3, [r7, #0]
 8004ef6:	78db      	ldrb	r3, [r3, #3]
 8004ef8:	2b02      	cmp	r3, #2
 8004efa:	d138      	bne.n	8004f6e <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8004efc:	68bb      	ldr	r3, [r7, #8]
 8004efe:	015a      	lsls	r2, r3, #5
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	4413      	add	r3, r2
 8004f04:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	68ba      	ldr	r2, [r7, #8]
 8004f0c:	0151      	lsls	r1, r2, #5
 8004f0e:	68fa      	ldr	r2, [r7, #12]
 8004f10:	440a      	add	r2, r1
 8004f12:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004f16:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004f1a:	6013      	str	r3, [r2, #0]
 8004f1c:	e027      	b.n	8004f6e <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8004f1e:	68bb      	ldr	r3, [r7, #8]
 8004f20:	015a      	lsls	r2, r3, #5
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	4413      	add	r3, r2
 8004f26:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	68ba      	ldr	r2, [r7, #8]
 8004f2e:	0151      	lsls	r1, r2, #5
 8004f30:	68fa      	ldr	r2, [r7, #12]
 8004f32:	440a      	add	r2, r1
 8004f34:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004f38:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004f3c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8004f3e:	683b      	ldr	r3, [r7, #0]
 8004f40:	78db      	ldrb	r3, [r3, #3]
 8004f42:	2b03      	cmp	r3, #3
 8004f44:	d003      	beq.n	8004f4e <USB_EPClearStall+0x9e>
 8004f46:	683b      	ldr	r3, [r7, #0]
 8004f48:	78db      	ldrb	r3, [r3, #3]
 8004f4a:	2b02      	cmp	r3, #2
 8004f4c:	d10f      	bne.n	8004f6e <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8004f4e:	68bb      	ldr	r3, [r7, #8]
 8004f50:	015a      	lsls	r2, r3, #5
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	4413      	add	r3, r2
 8004f56:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	68ba      	ldr	r2, [r7, #8]
 8004f5e:	0151      	lsls	r1, r2, #5
 8004f60:	68fa      	ldr	r2, [r7, #12]
 8004f62:	440a      	add	r2, r1
 8004f64:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004f68:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004f6c:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8004f6e:	2300      	movs	r3, #0
}
 8004f70:	4618      	mov	r0, r3
 8004f72:	3714      	adds	r7, #20
 8004f74:	46bd      	mov	sp, r7
 8004f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f7a:	4770      	bx	lr

08004f7c <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8004f7c:	b480      	push	{r7}
 8004f7e:	b085      	sub	sp, #20
 8004f80:	af00      	add	r7, sp, #0
 8004f82:	6078      	str	r0, [r7, #4]
 8004f84:	460b      	mov	r3, r1
 8004f86:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	68fa      	ldr	r2, [r7, #12]
 8004f96:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004f9a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8004f9e:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004fa6:	681a      	ldr	r2, [r3, #0]
 8004fa8:	78fb      	ldrb	r3, [r7, #3]
 8004faa:	011b      	lsls	r3, r3, #4
 8004fac:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8004fb0:	68f9      	ldr	r1, [r7, #12]
 8004fb2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004fb6:	4313      	orrs	r3, r2
 8004fb8:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8004fba:	2300      	movs	r3, #0
}
 8004fbc:	4618      	mov	r0, r3
 8004fbe:	3714      	adds	r7, #20
 8004fc0:	46bd      	mov	sp, r7
 8004fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc6:	4770      	bx	lr

08004fc8 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8004fc8:	b480      	push	{r7}
 8004fca:	b085      	sub	sp, #20
 8004fcc:	af00      	add	r7, sp, #0
 8004fce:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	68fa      	ldr	r2, [r7, #12]
 8004fde:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8004fe2:	f023 0303 	bic.w	r3, r3, #3
 8004fe6:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004fee:	685b      	ldr	r3, [r3, #4]
 8004ff0:	68fa      	ldr	r2, [r7, #12]
 8004ff2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004ff6:	f023 0302 	bic.w	r3, r3, #2
 8004ffa:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004ffc:	2300      	movs	r3, #0
}
 8004ffe:	4618      	mov	r0, r3
 8005000:	3714      	adds	r7, #20
 8005002:	46bd      	mov	sp, r7
 8005004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005008:	4770      	bx	lr

0800500a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800500a:	b480      	push	{r7}
 800500c:	b085      	sub	sp, #20
 800500e:	af00      	add	r7, sp, #0
 8005010:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	68fa      	ldr	r2, [r7, #12]
 8005020:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005024:	f023 0303 	bic.w	r3, r3, #3
 8005028:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005030:	685b      	ldr	r3, [r3, #4]
 8005032:	68fa      	ldr	r2, [r7, #12]
 8005034:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005038:	f043 0302 	orr.w	r3, r3, #2
 800503c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800503e:	2300      	movs	r3, #0
}
 8005040:	4618      	mov	r0, r3
 8005042:	3714      	adds	r7, #20
 8005044:	46bd      	mov	sp, r7
 8005046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800504a:	4770      	bx	lr

0800504c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800504c:	b480      	push	{r7}
 800504e:	b085      	sub	sp, #20
 8005050:	af00      	add	r7, sp, #0
 8005052:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	695b      	ldr	r3, [r3, #20]
 8005058:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	699b      	ldr	r3, [r3, #24]
 800505e:	68fa      	ldr	r2, [r7, #12]
 8005060:	4013      	ands	r3, r2
 8005062:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005064:	68fb      	ldr	r3, [r7, #12]
}
 8005066:	4618      	mov	r0, r3
 8005068:	3714      	adds	r7, #20
 800506a:	46bd      	mov	sp, r7
 800506c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005070:	4770      	bx	lr

08005072 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005072:	b480      	push	{r7}
 8005074:	b085      	sub	sp, #20
 8005076:	af00      	add	r7, sp, #0
 8005078:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005084:	699b      	ldr	r3, [r3, #24]
 8005086:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800508e:	69db      	ldr	r3, [r3, #28]
 8005090:	68ba      	ldr	r2, [r7, #8]
 8005092:	4013      	ands	r3, r2
 8005094:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8005096:	68bb      	ldr	r3, [r7, #8]
 8005098:	0c1b      	lsrs	r3, r3, #16
}
 800509a:	4618      	mov	r0, r3
 800509c:	3714      	adds	r7, #20
 800509e:	46bd      	mov	sp, r7
 80050a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a4:	4770      	bx	lr

080050a6 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80050a6:	b480      	push	{r7}
 80050a8:	b085      	sub	sp, #20
 80050aa:	af00      	add	r7, sp, #0
 80050ac:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80050b8:	699b      	ldr	r3, [r3, #24]
 80050ba:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80050c2:	69db      	ldr	r3, [r3, #28]
 80050c4:	68ba      	ldr	r2, [r7, #8]
 80050c6:	4013      	ands	r3, r2
 80050c8:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80050ca:	68bb      	ldr	r3, [r7, #8]
 80050cc:	b29b      	uxth	r3, r3
}
 80050ce:	4618      	mov	r0, r3
 80050d0:	3714      	adds	r7, #20
 80050d2:	46bd      	mov	sp, r7
 80050d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d8:	4770      	bx	lr

080050da <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80050da:	b480      	push	{r7}
 80050dc:	b085      	sub	sp, #20
 80050de:	af00      	add	r7, sp, #0
 80050e0:	6078      	str	r0, [r7, #4]
 80050e2:	460b      	mov	r3, r1
 80050e4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80050ea:	78fb      	ldrb	r3, [r7, #3]
 80050ec:	015a      	lsls	r2, r3, #5
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	4413      	add	r3, r2
 80050f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80050f6:	689b      	ldr	r3, [r3, #8]
 80050f8:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005100:	695b      	ldr	r3, [r3, #20]
 8005102:	68ba      	ldr	r2, [r7, #8]
 8005104:	4013      	ands	r3, r2
 8005106:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005108:	68bb      	ldr	r3, [r7, #8]
}
 800510a:	4618      	mov	r0, r3
 800510c:	3714      	adds	r7, #20
 800510e:	46bd      	mov	sp, r7
 8005110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005114:	4770      	bx	lr

08005116 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005116:	b480      	push	{r7}
 8005118:	b087      	sub	sp, #28
 800511a:	af00      	add	r7, sp, #0
 800511c:	6078      	str	r0, [r7, #4]
 800511e:	460b      	mov	r3, r1
 8005120:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8005126:	697b      	ldr	r3, [r7, #20]
 8005128:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800512c:	691b      	ldr	r3, [r3, #16]
 800512e:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8005130:	697b      	ldr	r3, [r7, #20]
 8005132:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005136:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005138:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800513a:	78fb      	ldrb	r3, [r7, #3]
 800513c:	f003 030f 	and.w	r3, r3, #15
 8005140:	68fa      	ldr	r2, [r7, #12]
 8005142:	fa22 f303 	lsr.w	r3, r2, r3
 8005146:	01db      	lsls	r3, r3, #7
 8005148:	b2db      	uxtb	r3, r3
 800514a:	693a      	ldr	r2, [r7, #16]
 800514c:	4313      	orrs	r3, r2
 800514e:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8005150:	78fb      	ldrb	r3, [r7, #3]
 8005152:	015a      	lsls	r2, r3, #5
 8005154:	697b      	ldr	r3, [r7, #20]
 8005156:	4413      	add	r3, r2
 8005158:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800515c:	689b      	ldr	r3, [r3, #8]
 800515e:	693a      	ldr	r2, [r7, #16]
 8005160:	4013      	ands	r3, r2
 8005162:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005164:	68bb      	ldr	r3, [r7, #8]
}
 8005166:	4618      	mov	r0, r3
 8005168:	371c      	adds	r7, #28
 800516a:	46bd      	mov	sp, r7
 800516c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005170:	4770      	bx	lr

08005172 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005172:	b480      	push	{r7}
 8005174:	b083      	sub	sp, #12
 8005176:	af00      	add	r7, sp, #0
 8005178:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	695b      	ldr	r3, [r3, #20]
 800517e:	f003 0301 	and.w	r3, r3, #1
}
 8005182:	4618      	mov	r0, r3
 8005184:	370c      	adds	r7, #12
 8005186:	46bd      	mov	sp, r7
 8005188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800518c:	4770      	bx	lr
	...

08005190 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8005190:	b480      	push	{r7}
 8005192:	b085      	sub	sp, #20
 8005194:	af00      	add	r7, sp, #0
 8005196:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051a2:	681a      	ldr	r2, [r3, #0]
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051aa:	4619      	mov	r1, r3
 80051ac:	4b09      	ldr	r3, [pc, #36]	; (80051d4 <USB_ActivateSetup+0x44>)
 80051ae:	4013      	ands	r3, r2
 80051b0:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80051b8:	685b      	ldr	r3, [r3, #4]
 80051ba:	68fa      	ldr	r2, [r7, #12]
 80051bc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80051c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80051c4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80051c6:	2300      	movs	r3, #0
}
 80051c8:	4618      	mov	r0, r3
 80051ca:	3714      	adds	r7, #20
 80051cc:	46bd      	mov	sp, r7
 80051ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d2:	4770      	bx	lr
 80051d4:	fffff800 	.word	0xfffff800

080051d8 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 80051d8:	b480      	push	{r7}
 80051da:	b087      	sub	sp, #28
 80051dc:	af00      	add	r7, sp, #0
 80051de:	60f8      	str	r0, [r7, #12]
 80051e0:	460b      	mov	r3, r1
 80051e2:	607a      	str	r2, [r7, #4]
 80051e4:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	333c      	adds	r3, #60	; 0x3c
 80051ee:	3304      	adds	r3, #4
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80051f4:	693b      	ldr	r3, [r7, #16]
 80051f6:	4a26      	ldr	r2, [pc, #152]	; (8005290 <USB_EP0_OutStart+0xb8>)
 80051f8:	4293      	cmp	r3, r2
 80051fa:	d90a      	bls.n	8005212 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80051fc:	697b      	ldr	r3, [r7, #20]
 80051fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005208:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800520c:	d101      	bne.n	8005212 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800520e:	2300      	movs	r3, #0
 8005210:	e037      	b.n	8005282 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8005212:	697b      	ldr	r3, [r7, #20]
 8005214:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005218:	461a      	mov	r2, r3
 800521a:	2300      	movs	r3, #0
 800521c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800521e:	697b      	ldr	r3, [r7, #20]
 8005220:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005224:	691b      	ldr	r3, [r3, #16]
 8005226:	697a      	ldr	r2, [r7, #20]
 8005228:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800522c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005230:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8005232:	697b      	ldr	r3, [r7, #20]
 8005234:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005238:	691b      	ldr	r3, [r3, #16]
 800523a:	697a      	ldr	r2, [r7, #20]
 800523c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005240:	f043 0318 	orr.w	r3, r3, #24
 8005244:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8005246:	697b      	ldr	r3, [r7, #20]
 8005248:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800524c:	691b      	ldr	r3, [r3, #16]
 800524e:	697a      	ldr	r2, [r7, #20]
 8005250:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005254:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8005258:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800525a:	7afb      	ldrb	r3, [r7, #11]
 800525c:	2b01      	cmp	r3, #1
 800525e:	d10f      	bne.n	8005280 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8005260:	697b      	ldr	r3, [r7, #20]
 8005262:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005266:	461a      	mov	r2, r3
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800526c:	697b      	ldr	r3, [r7, #20]
 800526e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	697a      	ldr	r2, [r7, #20]
 8005276:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800527a:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800527e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005280:	2300      	movs	r3, #0
}
 8005282:	4618      	mov	r0, r3
 8005284:	371c      	adds	r7, #28
 8005286:	46bd      	mov	sp, r7
 8005288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800528c:	4770      	bx	lr
 800528e:	bf00      	nop
 8005290:	4f54300a 	.word	0x4f54300a

08005294 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005294:	b480      	push	{r7}
 8005296:	b085      	sub	sp, #20
 8005298:	af00      	add	r7, sp, #0
 800529a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800529c:	2300      	movs	r3, #0
 800529e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	3301      	adds	r3, #1
 80052a4:	60fb      	str	r3, [r7, #12]
 80052a6:	4a13      	ldr	r2, [pc, #76]	; (80052f4 <USB_CoreReset+0x60>)
 80052a8:	4293      	cmp	r3, r2
 80052aa:	d901      	bls.n	80052b0 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 80052ac:	2303      	movs	r3, #3
 80052ae:	e01a      	b.n	80052e6 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	691b      	ldr	r3, [r3, #16]
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	daf3      	bge.n	80052a0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80052b8:	2300      	movs	r3, #0
 80052ba:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	691b      	ldr	r3, [r3, #16]
 80052c0:	f043 0201 	orr.w	r2, r3, #1
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	3301      	adds	r3, #1
 80052cc:	60fb      	str	r3, [r7, #12]
 80052ce:	4a09      	ldr	r2, [pc, #36]	; (80052f4 <USB_CoreReset+0x60>)
 80052d0:	4293      	cmp	r3, r2
 80052d2:	d901      	bls.n	80052d8 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 80052d4:	2303      	movs	r3, #3
 80052d6:	e006      	b.n	80052e6 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	691b      	ldr	r3, [r3, #16]
 80052dc:	f003 0301 	and.w	r3, r3, #1
 80052e0:	2b01      	cmp	r3, #1
 80052e2:	d0f1      	beq.n	80052c8 <USB_CoreReset+0x34>

  return HAL_OK;
 80052e4:	2300      	movs	r3, #0
}
 80052e6:	4618      	mov	r0, r3
 80052e8:	3714      	adds	r7, #20
 80052ea:	46bd      	mov	sp, r7
 80052ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f0:	4770      	bx	lr
 80052f2:	bf00      	nop
 80052f4:	00030d40 	.word	0x00030d40

080052f8 <USB_HS_PHYCInit>:
  *         Init the low level hardware : GPIO, CLOCK, NVIC...
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_HS_PHYCInit(USB_OTG_GlobalTypeDef *USBx)
{
 80052f8:	b580      	push	{r7, lr}
 80052fa:	b084      	sub	sp, #16
 80052fc:	af00      	add	r7, sp, #0
 80052fe:	6078      	str	r0, [r7, #4]
  UNUSED(USBx);
  __IO uint32_t count = 0U;
 8005300:	2300      	movs	r3, #0
 8005302:	60fb      	str	r3, [r7, #12]

  /* Enable LDO */
  USB_HS_PHYC->USB_HS_PHYC_LDO |= USB_HS_PHYC_LDO_ENABLE;
 8005304:	4b16      	ldr	r3, [pc, #88]	; (8005360 <USB_HS_PHYCInit+0x68>)
 8005306:	699b      	ldr	r3, [r3, #24]
 8005308:	4a15      	ldr	r2, [pc, #84]	; (8005360 <USB_HS_PHYCInit+0x68>)
 800530a:	f043 0304 	orr.w	r3, r3, #4
 800530e:	6193      	str	r3, [r2, #24]

  /* wait for LDO Ready */
  while ((USB_HS_PHYC->USB_HS_PHYC_LDO & USB_HS_PHYC_LDO_STATUS) == 0U)
 8005310:	e007      	b.n	8005322 <USB_HS_PHYCInit+0x2a>
  {
    if (++count > 200000U)
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	3301      	adds	r3, #1
 8005316:	60fb      	str	r3, [r7, #12]
 8005318:	4a12      	ldr	r2, [pc, #72]	; (8005364 <USB_HS_PHYCInit+0x6c>)
 800531a:	4293      	cmp	r3, r2
 800531c:	d901      	bls.n	8005322 <USB_HS_PHYCInit+0x2a>
    {
      return HAL_TIMEOUT;
 800531e:	2303      	movs	r3, #3
 8005320:	e019      	b.n	8005356 <USB_HS_PHYCInit+0x5e>
  while ((USB_HS_PHYC->USB_HS_PHYC_LDO & USB_HS_PHYC_LDO_STATUS) == 0U)
 8005322:	4b0f      	ldr	r3, [pc, #60]	; (8005360 <USB_HS_PHYCInit+0x68>)
 8005324:	699b      	ldr	r3, [r3, #24]
 8005326:	f003 0302 	and.w	r3, r3, #2
 800532a:	2b00      	cmp	r3, #0
 800532c:	d0f1      	beq.n	8005312 <USB_HS_PHYCInit+0x1a>
  {
    USB_HS_PHYC->USB_HS_PHYC_PLL = (0x4U << 1);
  }
  else if (HSE_VALUE == 25000000U) /* HSE = 25MHz */
  {
    USB_HS_PHYC->USB_HS_PHYC_PLL = (0x5U << 1);
 800532e:	4b0c      	ldr	r3, [pc, #48]	; (8005360 <USB_HS_PHYCInit+0x68>)
 8005330:	220a      	movs	r2, #10
 8005332:	601a      	str	r2, [r3, #0]
  {
    /* ... */
  }

  /* Control the tuning interface of the High Speed PHY */
  USB_HS_PHYC->USB_HS_PHYC_TUNE |= USB_HS_PHYC_TUNE_VALUE;
 8005334:	4b0a      	ldr	r3, [pc, #40]	; (8005360 <USB_HS_PHYCInit+0x68>)
 8005336:	68da      	ldr	r2, [r3, #12]
 8005338:	4909      	ldr	r1, [pc, #36]	; (8005360 <USB_HS_PHYCInit+0x68>)
 800533a:	f640 7313 	movw	r3, #3859	; 0xf13
 800533e:	4313      	orrs	r3, r2
 8005340:	60cb      	str	r3, [r1, #12]

  /* Enable PLL internal PHY */
  USB_HS_PHYC->USB_HS_PHYC_PLL |= USB_HS_PHYC_PLL_PLLEN;
 8005342:	4b07      	ldr	r3, [pc, #28]	; (8005360 <USB_HS_PHYCInit+0x68>)
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	4a06      	ldr	r2, [pc, #24]	; (8005360 <USB_HS_PHYCInit+0x68>)
 8005348:	f043 0301 	orr.w	r3, r3, #1
 800534c:	6013      	str	r3, [r2, #0]


  /* 2ms Delay required to get internal phy clock stable */
  HAL_Delay(2U);
 800534e:	2002      	movs	r0, #2
 8005350:	f7fb ff4a 	bl	80011e8 <HAL_Delay>

  return HAL_OK;
 8005354:	2300      	movs	r3, #0
}
 8005356:	4618      	mov	r0, r3
 8005358:	3710      	adds	r7, #16
 800535a:	46bd      	mov	sp, r7
 800535c:	bd80      	pop	{r7, pc}
 800535e:	bf00      	nop
 8005360:	40017c00 	.word	0x40017c00
 8005364:	00030d40 	.word	0x00030d40

08005368 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005368:	b580      	push	{r7, lr}
 800536a:	b084      	sub	sp, #16
 800536c:	af00      	add	r7, sp, #0
 800536e:	6078      	str	r0, [r7, #4]
 8005370:	460b      	mov	r3, r1
 8005372:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8005374:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8005378:	f002 f9e2 	bl	8007740 <malloc>
 800537c:	4603      	mov	r3, r0
 800537e:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	2b00      	cmp	r3, #0
 8005384:	d105      	bne.n	8005392 <USBD_CDC_Init+0x2a>
  {
    pdev->pClassData = NULL;
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	2200      	movs	r2, #0
 800538a:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 800538e:	2302      	movs	r3, #2
 8005390:	e066      	b.n	8005460 <USBD_CDC_Init+0xf8>
  }

  pdev->pClassData = (void *)hcdc;
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	68fa      	ldr	r2, [r7, #12]
 8005396:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	7c1b      	ldrb	r3, [r3, #16]
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d119      	bne.n	80053d6 <USBD_CDC_Init+0x6e>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80053a2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80053a6:	2202      	movs	r2, #2
 80053a8:	2181      	movs	r1, #129	; 0x81
 80053aa:	6878      	ldr	r0, [r7, #4]
 80053ac:	f001 fffb 	bl	80073a6 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	2201      	movs	r2, #1
 80053b4:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80053b6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80053ba:	2202      	movs	r2, #2
 80053bc:	2101      	movs	r1, #1
 80053be:	6878      	ldr	r0, [r7, #4]
 80053c0:	f001 fff1 	bl	80073a6 <USBD_LL_OpenEP>
                          CDC_DATA_HS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	2201      	movs	r2, #1
 80053c8:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CDC CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	2210      	movs	r2, #16
 80053d0:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 80053d4:	e016      	b.n	8005404 <USBD_CDC_Init+0x9c>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80053d6:	2340      	movs	r3, #64	; 0x40
 80053d8:	2202      	movs	r2, #2
 80053da:	2181      	movs	r1, #129	; 0x81
 80053dc:	6878      	ldr	r0, [r7, #4]
 80053de:	f001 ffe2 	bl	80073a6 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	2201      	movs	r2, #1
 80053e6:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80053e8:	2340      	movs	r3, #64	; 0x40
 80053ea:	2202      	movs	r2, #2
 80053ec:	2101      	movs	r1, #1
 80053ee:	6878      	ldr	r0, [r7, #4]
 80053f0:	f001 ffd9 	bl	80073a6 <USBD_LL_OpenEP>
                          CDC_DATA_FS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	2201      	movs	r2, #1
 80053f8:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	2210      	movs	r2, #16
 8005400:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8005404:	2308      	movs	r3, #8
 8005406:	2203      	movs	r2, #3
 8005408:	2182      	movs	r1, #130	; 0x82
 800540a:	6878      	ldr	r0, [r7, #4]
 800540c:	f001 ffcb 	bl	80073a6 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	2201      	movs	r2, #1
 8005414:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	2200      	movs	r2, #0
 8005426:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	2200      	movs	r2, #0
 800542e:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	7c1b      	ldrb	r3, [r3, #16]
 8005436:	2b00      	cmp	r3, #0
 8005438:	d109      	bne.n	800544e <USBD_CDC_Init+0xe6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005440:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005444:	2101      	movs	r1, #1
 8005446:	6878      	ldr	r0, [r7, #4]
 8005448:	f002 f89c 	bl	8007584 <USBD_LL_PrepareReceive>
 800544c:	e007      	b.n	800545e <USBD_CDC_Init+0xf6>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005454:	2340      	movs	r3, #64	; 0x40
 8005456:	2101      	movs	r1, #1
 8005458:	6878      	ldr	r0, [r7, #4]
 800545a:	f002 f893 	bl	8007584 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800545e:	2300      	movs	r3, #0
}
 8005460:	4618      	mov	r0, r3
 8005462:	3710      	adds	r7, #16
 8005464:	46bd      	mov	sp, r7
 8005466:	bd80      	pop	{r7, pc}

08005468 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005468:	b580      	push	{r7, lr}
 800546a:	b084      	sub	sp, #16
 800546c:	af00      	add	r7, sp, #0
 800546e:	6078      	str	r0, [r7, #4]
 8005470:	460b      	mov	r3, r1
 8005472:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  uint8_t ret = 0U;
 8005474:	2300      	movs	r3, #0
 8005476:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8005478:	2181      	movs	r1, #129	; 0x81
 800547a:	6878      	ldr	r0, [r7, #4]
 800547c:	f001 ffb9 	bl	80073f2 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	2200      	movs	r2, #0
 8005484:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8005486:	2101      	movs	r1, #1
 8005488:	6878      	ldr	r0, [r7, #4]
 800548a:	f001 ffb2 	bl	80073f2 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	2200      	movs	r2, #0
 8005492:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8005496:	2182      	movs	r1, #130	; 0x82
 8005498:	6878      	ldr	r0, [r7, #4]
 800549a:	f001 ffaa 	bl	80073f2 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	2200      	movs	r2, #0
 80054a2:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	2200      	movs	r2, #0
 80054aa:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d00e      	beq.n	80054d6 <USBD_CDC_DeInit+0x6e>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80054be:	685b      	ldr	r3, [r3, #4]
 80054c0:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80054c8:	4618      	mov	r0, r3
 80054ca:	f002 f941 	bl	8007750 <free>
    pdev->pClassData = NULL;
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	2200      	movs	r2, #0
 80054d2:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return ret;
 80054d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80054d8:	4618      	mov	r0, r3
 80054da:	3710      	adds	r7, #16
 80054dc:	46bd      	mov	sp, r7
 80054de:	bd80      	pop	{r7, pc}

080054e0 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 80054e0:	b580      	push	{r7, lr}
 80054e2:	b086      	sub	sp, #24
 80054e4:	af00      	add	r7, sp, #0
 80054e6:	6078      	str	r0, [r7, #4]
 80054e8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80054f0:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 80054f2:	2300      	movs	r3, #0
 80054f4:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 80054f6:	2300      	movs	r3, #0
 80054f8:	81bb      	strh	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 80054fa:	2300      	movs	r3, #0
 80054fc:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80054fe:	683b      	ldr	r3, [r7, #0]
 8005500:	781b      	ldrb	r3, [r3, #0]
 8005502:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005506:	2b00      	cmp	r3, #0
 8005508:	d03a      	beq.n	8005580 <USBD_CDC_Setup+0xa0>
 800550a:	2b20      	cmp	r3, #32
 800550c:	f040 8097 	bne.w	800563e <USBD_CDC_Setup+0x15e>
  {
  case USB_REQ_TYPE_CLASS:
    if (req->wLength != 0U)
 8005510:	683b      	ldr	r3, [r7, #0]
 8005512:	88db      	ldrh	r3, [r3, #6]
 8005514:	2b00      	cmp	r3, #0
 8005516:	d029      	beq.n	800556c <USBD_CDC_Setup+0x8c>
    {
      if ((req->bmRequest & 0x80U) != 0U)
 8005518:	683b      	ldr	r3, [r7, #0]
 800551a:	781b      	ldrb	r3, [r3, #0]
 800551c:	b25b      	sxtb	r3, r3
 800551e:	2b00      	cmp	r3, #0
 8005520:	da11      	bge.n	8005546 <USBD_CDC_Setup+0x66>
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005528:	689b      	ldr	r3, [r3, #8]
 800552a:	683a      	ldr	r2, [r7, #0]
 800552c:	7850      	ldrb	r0, [r2, #1]
                                                          (uint8_t *)hcdc->data,
 800552e:	6939      	ldr	r1, [r7, #16]
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005530:	683a      	ldr	r2, [r7, #0]
 8005532:	88d2      	ldrh	r2, [r2, #6]
 8005534:	4798      	blx	r3
                                                          req->wLength);

          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, req->wLength);
 8005536:	6939      	ldr	r1, [r7, #16]
 8005538:	683b      	ldr	r3, [r7, #0]
 800553a:	88db      	ldrh	r3, [r3, #6]
 800553c:	461a      	mov	r2, r3
 800553e:	6878      	ldr	r0, [r7, #4]
 8005540:	f001 fad6 	bl	8006af0 <USBD_CtlSendData>
    else
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                        (uint8_t *)req, 0U);
    }
    break;
 8005544:	e082      	b.n	800564c <USBD_CDC_Setup+0x16c>
        hcdc->CmdOpCode = req->bRequest;
 8005546:	683b      	ldr	r3, [r7, #0]
 8005548:	785a      	ldrb	r2, [r3, #1]
 800554a:	693b      	ldr	r3, [r7, #16]
 800554c:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
        hcdc->CmdLength = (uint8_t)req->wLength;
 8005550:	683b      	ldr	r3, [r7, #0]
 8005552:	88db      	ldrh	r3, [r3, #6]
 8005554:	b2da      	uxtb	r2, r3
 8005556:	693b      	ldr	r3, [r7, #16]
 8005558:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
        (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 800555c:	6939      	ldr	r1, [r7, #16]
 800555e:	683b      	ldr	r3, [r7, #0]
 8005560:	88db      	ldrh	r3, [r3, #6]
 8005562:	461a      	mov	r2, r3
 8005564:	6878      	ldr	r0, [r7, #4]
 8005566:	f001 faef 	bl	8006b48 <USBD_CtlPrepareRx>
    break;
 800556a:	e06f      	b.n	800564c <USBD_CDC_Setup+0x16c>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005572:	689b      	ldr	r3, [r3, #8]
 8005574:	683a      	ldr	r2, [r7, #0]
 8005576:	7850      	ldrb	r0, [r2, #1]
 8005578:	2200      	movs	r2, #0
 800557a:	6839      	ldr	r1, [r7, #0]
 800557c:	4798      	blx	r3
    break;
 800557e:	e065      	b.n	800564c <USBD_CDC_Setup+0x16c>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8005580:	683b      	ldr	r3, [r7, #0]
 8005582:	785b      	ldrb	r3, [r3, #1]
 8005584:	2b0b      	cmp	r3, #11
 8005586:	d84f      	bhi.n	8005628 <USBD_CDC_Setup+0x148>
 8005588:	a201      	add	r2, pc, #4	; (adr r2, 8005590 <USBD_CDC_Setup+0xb0>)
 800558a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800558e:	bf00      	nop
 8005590:	080055c1 	.word	0x080055c1
 8005594:	08005637 	.word	0x08005637
 8005598:	08005629 	.word	0x08005629
 800559c:	08005629 	.word	0x08005629
 80055a0:	08005629 	.word	0x08005629
 80055a4:	08005629 	.word	0x08005629
 80055a8:	08005629 	.word	0x08005629
 80055ac:	08005629 	.word	0x08005629
 80055b0:	08005629 	.word	0x08005629
 80055b4:	08005629 	.word	0x08005629
 80055b8:	080055e9 	.word	0x080055e9
 80055bc:	08005611 	.word	0x08005611
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80055c6:	2b03      	cmp	r3, #3
 80055c8:	d107      	bne.n	80055da <USBD_CDC_Setup+0xfa>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80055ca:	f107 030c 	add.w	r3, r7, #12
 80055ce:	2202      	movs	r2, #2
 80055d0:	4619      	mov	r1, r3
 80055d2:	6878      	ldr	r0, [r7, #4]
 80055d4:	f001 fa8c 	bl	8006af0 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 80055d8:	e030      	b.n	800563c <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 80055da:	6839      	ldr	r1, [r7, #0]
 80055dc:	6878      	ldr	r0, [r7, #4]
 80055de:	f001 fa16 	bl	8006a0e <USBD_CtlError>
        ret = USBD_FAIL;
 80055e2:	2303      	movs	r3, #3
 80055e4:	75fb      	strb	r3, [r7, #23]
      break;
 80055e6:	e029      	b.n	800563c <USBD_CDC_Setup+0x15c>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80055ee:	2b03      	cmp	r3, #3
 80055f0:	d107      	bne.n	8005602 <USBD_CDC_Setup+0x122>
      {
        (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80055f2:	f107 030f 	add.w	r3, r7, #15
 80055f6:	2201      	movs	r2, #1
 80055f8:	4619      	mov	r1, r3
 80055fa:	6878      	ldr	r0, [r7, #4]
 80055fc:	f001 fa78 	bl	8006af0 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8005600:	e01c      	b.n	800563c <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 8005602:	6839      	ldr	r1, [r7, #0]
 8005604:	6878      	ldr	r0, [r7, #4]
 8005606:	f001 fa02 	bl	8006a0e <USBD_CtlError>
        ret = USBD_FAIL;
 800560a:	2303      	movs	r3, #3
 800560c:	75fb      	strb	r3, [r7, #23]
      break;
 800560e:	e015      	b.n	800563c <USBD_CDC_Setup+0x15c>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005616:	2b03      	cmp	r3, #3
 8005618:	d00f      	beq.n	800563a <USBD_CDC_Setup+0x15a>
      {
        USBD_CtlError(pdev, req);
 800561a:	6839      	ldr	r1, [r7, #0]
 800561c:	6878      	ldr	r0, [r7, #4]
 800561e:	f001 f9f6 	bl	8006a0e <USBD_CtlError>
        ret = USBD_FAIL;
 8005622:	2303      	movs	r3, #3
 8005624:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8005626:	e008      	b.n	800563a <USBD_CDC_Setup+0x15a>

    case USB_REQ_CLEAR_FEATURE:
      break;

    default:
      USBD_CtlError(pdev, req);
 8005628:	6839      	ldr	r1, [r7, #0]
 800562a:	6878      	ldr	r0, [r7, #4]
 800562c:	f001 f9ef 	bl	8006a0e <USBD_CtlError>
      ret = USBD_FAIL;
 8005630:	2303      	movs	r3, #3
 8005632:	75fb      	strb	r3, [r7, #23]
      break;
 8005634:	e002      	b.n	800563c <USBD_CDC_Setup+0x15c>
      break;
 8005636:	bf00      	nop
 8005638:	e008      	b.n	800564c <USBD_CDC_Setup+0x16c>
      break;
 800563a:	bf00      	nop
    }
    break;
 800563c:	e006      	b.n	800564c <USBD_CDC_Setup+0x16c>

  default:
    USBD_CtlError(pdev, req);
 800563e:	6839      	ldr	r1, [r7, #0]
 8005640:	6878      	ldr	r0, [r7, #4]
 8005642:	f001 f9e4 	bl	8006a0e <USBD_CtlError>
    ret = USBD_FAIL;
 8005646:	2303      	movs	r3, #3
 8005648:	75fb      	strb	r3, [r7, #23]
    break;
 800564a:	bf00      	nop
  }

  return (uint8_t)ret;
 800564c:	7dfb      	ldrb	r3, [r7, #23]
}
 800564e:	4618      	mov	r0, r3
 8005650:	3718      	adds	r7, #24
 8005652:	46bd      	mov	sp, r7
 8005654:	bd80      	pop	{r7, pc}
 8005656:	bf00      	nop

08005658 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005658:	b580      	push	{r7, lr}
 800565a:	b084      	sub	sp, #16
 800565c:	af00      	add	r7, sp, #0
 800565e:	6078      	str	r0, [r7, #4]
 8005660:	460b      	mov	r3, r1
 8005662:	70fb      	strb	r3, [r7, #3]
	/*uint8_t buff[10] = {0};
  USBD_LL_Transmit(pdev, epnum, buff, sizeof(buff));
  return (uint8_t)USBD_OK; */
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800566a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005672:	2b00      	cmp	r3, #0
 8005674:	d101      	bne.n	800567a <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8005676:	2303      	movs	r3, #3
 8005678:	e049      	b.n	800570e <USBD_CDC_DataIn+0xb6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005680:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8005682:	78fa      	ldrb	r2, [r7, #3]
 8005684:	6879      	ldr	r1, [r7, #4]
 8005686:	4613      	mov	r3, r2
 8005688:	009b      	lsls	r3, r3, #2
 800568a:	4413      	add	r3, r2
 800568c:	009b      	lsls	r3, r3, #2
 800568e:	440b      	add	r3, r1
 8005690:	3318      	adds	r3, #24
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	2b00      	cmp	r3, #0
 8005696:	d029      	beq.n	80056ec <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8005698:	78fa      	ldrb	r2, [r7, #3]
 800569a:	6879      	ldr	r1, [r7, #4]
 800569c:	4613      	mov	r3, r2
 800569e:	009b      	lsls	r3, r3, #2
 80056a0:	4413      	add	r3, r2
 80056a2:	009b      	lsls	r3, r3, #2
 80056a4:	440b      	add	r3, r1
 80056a6:	3318      	adds	r3, #24
 80056a8:	681a      	ldr	r2, [r3, #0]
 80056aa:	78f9      	ldrb	r1, [r7, #3]
 80056ac:	68f8      	ldr	r0, [r7, #12]
 80056ae:	460b      	mov	r3, r1
 80056b0:	00db      	lsls	r3, r3, #3
 80056b2:	1a5b      	subs	r3, r3, r1
 80056b4:	009b      	lsls	r3, r3, #2
 80056b6:	4403      	add	r3, r0
 80056b8:	3344      	adds	r3, #68	; 0x44
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	fbb2 f1f3 	udiv	r1, r2, r3
 80056c0:	fb01 f303 	mul.w	r3, r1, r3
 80056c4:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d110      	bne.n	80056ec <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 80056ca:	78fa      	ldrb	r2, [r7, #3]
 80056cc:	6879      	ldr	r1, [r7, #4]
 80056ce:	4613      	mov	r3, r2
 80056d0:	009b      	lsls	r3, r3, #2
 80056d2:	4413      	add	r3, r2
 80056d4:	009b      	lsls	r3, r3, #2
 80056d6:	440b      	add	r3, r1
 80056d8:	3318      	adds	r3, #24
 80056da:	2200      	movs	r2, #0
 80056dc:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80056de:	78f9      	ldrb	r1, [r7, #3]
 80056e0:	2300      	movs	r3, #0
 80056e2:	2200      	movs	r2, #0
 80056e4:	6878      	ldr	r0, [r7, #4]
 80056e6:	f001 ff2c 	bl	8007542 <USBD_LL_Transmit>
 80056ea:	e00f      	b.n	800570c <USBD_CDC_DataIn+0xb4>
  }
  else
  {
    hcdc->TxState = 0U;
 80056ec:	68bb      	ldr	r3, [r7, #8]
 80056ee:	2200      	movs	r2, #0
 80056f0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80056fa:	691b      	ldr	r3, [r3, #16]
 80056fc:	68ba      	ldr	r2, [r7, #8]
 80056fe:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8005702:	68ba      	ldr	r2, [r7, #8]
 8005704:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8005708:	78fa      	ldrb	r2, [r7, #3]
 800570a:	4798      	blx	r3
  }

  return (uint8_t)USBD_OK;
 800570c:	2300      	movs	r3, #0
}
 800570e:	4618      	mov	r0, r3
 8005710:	3710      	adds	r7, #16
 8005712:	46bd      	mov	sp, r7
 8005714:	bd80      	pop	{r7, pc}

08005716 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005716:	b580      	push	{r7, lr}
 8005718:	b084      	sub	sp, #16
 800571a:	af00      	add	r7, sp, #0
 800571c:	6078      	str	r0, [r7, #4]
 800571e:	460b      	mov	r3, r1
 8005720:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005728:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005730:	2b00      	cmp	r3, #0
 8005732:	d101      	bne.n	8005738 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8005734:	2303      	movs	r3, #3
 8005736:	e015      	b.n	8005764 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8005738:	78fb      	ldrb	r3, [r7, #3]
 800573a:	4619      	mov	r1, r3
 800573c:	6878      	ldr	r0, [r7, #4]
 800573e:	f001 ff42 	bl	80075c6 <USBD_LL_GetRxDataSize>
 8005742:	4602      	mov	r2, r0
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005750:	68db      	ldr	r3, [r3, #12]
 8005752:	68fa      	ldr	r2, [r7, #12]
 8005754:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8005758:	68fa      	ldr	r2, [r7, #12]
 800575a:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800575e:	4611      	mov	r1, r2
 8005760:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8005762:	2300      	movs	r3, #0
}
 8005764:	4618      	mov	r0, r3
 8005766:	3710      	adds	r7, #16
 8005768:	46bd      	mov	sp, r7
 800576a:	bd80      	pop	{r7, pc}

0800576c <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800576c:	b580      	push	{r7, lr}
 800576e:	b084      	sub	sp, #16
 8005770:	af00      	add	r7, sp, #0
 8005772:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800577a:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005782:	2b00      	cmp	r3, #0
 8005784:	d015      	beq.n	80057b2 <USBD_CDC_EP0_RxReady+0x46>
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800578c:	2bff      	cmp	r3, #255	; 0xff
 800578e:	d010      	beq.n	80057b2 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005796:	689b      	ldr	r3, [r3, #8]
 8005798:	68fa      	ldr	r2, [r7, #12]
 800579a:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 800579e:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 80057a0:	68fa      	ldr	r2, [r7, #12]
 80057a2:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80057a6:	b292      	uxth	r2, r2
 80057a8:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	22ff      	movs	r2, #255	; 0xff
 80057ae:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }

  return (uint8_t)USBD_OK;
 80057b2:	2300      	movs	r3, #0
}
 80057b4:	4618      	mov	r0, r3
 80057b6:	3710      	adds	r7, #16
 80057b8:	46bd      	mov	sp, r7
 80057ba:	bd80      	pop	{r7, pc}

080057bc <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80057bc:	b480      	push	{r7}
 80057be:	b083      	sub	sp, #12
 80057c0:	af00      	add	r7, sp, #0
 80057c2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	2219      	movs	r2, #25
 80057c8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 80057ca:	4b03      	ldr	r3, [pc, #12]	; (80057d8 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 80057cc:	4618      	mov	r0, r3
 80057ce:	370c      	adds	r7, #12
 80057d0:	46bd      	mov	sp, r7
 80057d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d6:	4770      	bx	lr
 80057d8:	2000006c 	.word	0x2000006c

080057dc <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80057dc:	b480      	push	{r7}
 80057de:	b083      	sub	sp, #12
 80057e0:	af00      	add	r7, sp, #0
 80057e2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	2219      	movs	r2, #25
 80057e8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 80057ea:	4b03      	ldr	r3, [pc, #12]	; (80057f8 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 80057ec:	4618      	mov	r0, r3
 80057ee:	370c      	adds	r7, #12
 80057f0:	46bd      	mov	sp, r7
 80057f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f6:	4770      	bx	lr
 80057f8:	20000050 	.word	0x20000050

080057fc <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80057fc:	b480      	push	{r7}
 80057fe:	b083      	sub	sp, #12
 8005800:	af00      	add	r7, sp, #0
 8005802:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	2219      	movs	r2, #25
 8005808:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 800580a:	4b03      	ldr	r3, [pc, #12]	; (8005818 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800580c:	4618      	mov	r0, r3
 800580e:	370c      	adds	r7, #12
 8005810:	46bd      	mov	sp, r7
 8005812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005816:	4770      	bx	lr
 8005818:	20000088 	.word	0x20000088

0800581c <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800581c:	b480      	push	{r7}
 800581e:	b083      	sub	sp, #12
 8005820:	af00      	add	r7, sp, #0
 8005822:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	220a      	movs	r2, #10
 8005828:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800582a:	4b03      	ldr	r3, [pc, #12]	; (8005838 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800582c:	4618      	mov	r0, r3
 800582e:	370c      	adds	r7, #12
 8005830:	46bd      	mov	sp, r7
 8005832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005836:	4770      	bx	lr
 8005838:	2000000c 	.word	0x2000000c

0800583c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800583c:	b480      	push	{r7}
 800583e:	b083      	sub	sp, #12
 8005840:	af00      	add	r7, sp, #0
 8005842:	6078      	str	r0, [r7, #4]
 8005844:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8005846:	683b      	ldr	r3, [r7, #0]
 8005848:	2b00      	cmp	r3, #0
 800584a:	d101      	bne.n	8005850 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800584c:	2303      	movs	r3, #3
 800584e:	e004      	b.n	800585a <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	683a      	ldr	r2, [r7, #0]
 8005854:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8005858:	2300      	movs	r3, #0
}
 800585a:	4618      	mov	r0, r3
 800585c:	370c      	adds	r7, #12
 800585e:	46bd      	mov	sp, r7
 8005860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005864:	4770      	bx	lr

08005866 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8005866:	b480      	push	{r7}
 8005868:	b087      	sub	sp, #28
 800586a:	af00      	add	r7, sp, #0
 800586c:	60f8      	str	r0, [r7, #12]
 800586e:	60b9      	str	r1, [r7, #8]
 8005870:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005878:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800587a:	697b      	ldr	r3, [r7, #20]
 800587c:	68ba      	ldr	r2, [r7, #8]
 800587e:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8005882:	697b      	ldr	r3, [r7, #20]
 8005884:	687a      	ldr	r2, [r7, #4]
 8005886:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800588a:	2300      	movs	r3, #0
}
 800588c:	4618      	mov	r0, r3
 800588e:	371c      	adds	r7, #28
 8005890:	46bd      	mov	sp, r7
 8005892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005896:	4770      	bx	lr

08005898 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8005898:	b480      	push	{r7}
 800589a:	b085      	sub	sp, #20
 800589c:	af00      	add	r7, sp, #0
 800589e:	6078      	str	r0, [r7, #4]
 80058a0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80058a8:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	683a      	ldr	r2, [r7, #0]
 80058ae:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 80058b2:	2300      	movs	r3, #0
}
 80058b4:	4618      	mov	r0, r3
 80058b6:	3714      	adds	r7, #20
 80058b8:	46bd      	mov	sp, r7
 80058ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058be:	4770      	bx	lr

080058c0 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 80058c0:	b580      	push	{r7, lr}
 80058c2:	b084      	sub	sp, #16
 80058c4:	af00      	add	r7, sp, #0
 80058c6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80058ce:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 80058d0:	2301      	movs	r3, #1
 80058d2:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d101      	bne.n	80058e2 <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80058de:	2303      	movs	r3, #3
 80058e0:	e01a      	b.n	8005918 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 80058e2:	68bb      	ldr	r3, [r7, #8]
 80058e4:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d114      	bne.n	8005916 <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 80058ec:	68bb      	ldr	r3, [r7, #8]
 80058ee:	2201      	movs	r2, #1
 80058f0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 80058f4:	68bb      	ldr	r3, [r7, #8]
 80058f6:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 80058fe:	68bb      	ldr	r3, [r7, #8]
 8005900:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8005904:	68bb      	ldr	r3, [r7, #8]
 8005906:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800590a:	2181      	movs	r1, #129	; 0x81
 800590c:	6878      	ldr	r0, [r7, #4]
 800590e:	f001 fe18 	bl	8007542 <USBD_LL_Transmit>

    ret = USBD_OK;
 8005912:	2300      	movs	r3, #0
 8005914:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8005916:	7bfb      	ldrb	r3, [r7, #15]
}
 8005918:	4618      	mov	r0, r3
 800591a:	3710      	adds	r7, #16
 800591c:	46bd      	mov	sp, r7
 800591e:	bd80      	pop	{r7, pc}

08005920 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8005920:	b580      	push	{r7, lr}
 8005922:	b084      	sub	sp, #16
 8005924:	af00      	add	r7, sp, #0
 8005926:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800592e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005936:	2b00      	cmp	r3, #0
 8005938:	d101      	bne.n	800593e <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800593a:	2303      	movs	r3, #3
 800593c:	e016      	b.n	800596c <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	7c1b      	ldrb	r3, [r3, #16]
 8005942:	2b00      	cmp	r3, #0
 8005944:	d109      	bne.n	800595a <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800594c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005950:	2101      	movs	r1, #1
 8005952:	6878      	ldr	r0, [r7, #4]
 8005954:	f001 fe16 	bl	8007584 <USBD_LL_PrepareReceive>
 8005958:	e007      	b.n	800596a <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005960:	2340      	movs	r3, #64	; 0x40
 8005962:	2101      	movs	r1, #1
 8005964:	6878      	ldr	r0, [r7, #4]
 8005966:	f001 fe0d 	bl	8007584 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800596a:	2300      	movs	r3, #0
}
 800596c:	4618      	mov	r0, r3
 800596e:	3710      	adds	r7, #16
 8005970:	46bd      	mov	sp, r7
 8005972:	bd80      	pop	{r7, pc}

08005974 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8005974:	b580      	push	{r7, lr}
 8005976:	b086      	sub	sp, #24
 8005978:	af00      	add	r7, sp, #0
 800597a:	60f8      	str	r0, [r7, #12]
 800597c:	60b9      	str	r1, [r7, #8]
 800597e:	4613      	mov	r3, r2
 8005980:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	2b00      	cmp	r3, #0
 8005986:	d101      	bne.n	800598c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8005988:	2303      	movs	r3, #3
 800598a:	e025      	b.n	80059d8 <USBD_Init+0x64>
  }

  /* Unlink previous class */
  if (pdev->pClass != NULL)
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005992:	2b00      	cmp	r3, #0
 8005994:	d003      	beq.n	800599e <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	2200      	movs	r2, #0
 800599a:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  if (pdev->pConfDesc != NULL)
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d003      	beq.n	80059b0 <USBD_Init+0x3c>
  {
    pdev->pConfDesc = NULL;
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	2200      	movs	r2, #0
 80059ac:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80059b0:	68bb      	ldr	r3, [r7, #8]
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d003      	beq.n	80059be <USBD_Init+0x4a>
  {
    pdev->pDesc = pdesc;
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	68ba      	ldr	r2, [r7, #8]
 80059ba:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	2201      	movs	r2, #1
 80059c2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	79fa      	ldrb	r2, [r7, #7]
 80059ca:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80059cc:	68f8      	ldr	r0, [r7, #12]
 80059ce:	f001 fc81 	bl	80072d4 <USBD_LL_Init>
 80059d2:	4603      	mov	r3, r0
 80059d4:	75fb      	strb	r3, [r7, #23]

  return ret;
 80059d6:	7dfb      	ldrb	r3, [r7, #23]
}
 80059d8:	4618      	mov	r0, r3
 80059da:	3718      	adds	r7, #24
 80059dc:	46bd      	mov	sp, r7
 80059de:	bd80      	pop	{r7, pc}

080059e0 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80059e0:	b580      	push	{r7, lr}
 80059e2:	b084      	sub	sp, #16
 80059e4:	af00      	add	r7, sp, #0
 80059e6:	6078      	str	r0, [r7, #4]
 80059e8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80059ea:	2300      	movs	r3, #0
 80059ec:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80059ee:	683b      	ldr	r3, [r7, #0]
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d101      	bne.n	80059f8 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 80059f4:	2303      	movs	r3, #3
 80059f6:	e010      	b.n	8005a1a <USBD_RegisterClass+0x3a>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	683a      	ldr	r2, [r7, #0]
 80059fc:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  /* Get Device Configuration Descriptor */
#ifdef USE_USB_FS
  pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
#else /* USE_USB_HS */
  pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005a06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a08:	f107 020e 	add.w	r2, r7, #14
 8005a0c:	4610      	mov	r0, r2
 8005a0e:	4798      	blx	r3
 8005a10:	4602      	mov	r2, r0
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
#endif /* USE_USB_FS */


  return USBD_OK;
 8005a18:	2300      	movs	r3, #0
}
 8005a1a:	4618      	mov	r0, r3
 8005a1c:	3710      	adds	r7, #16
 8005a1e:	46bd      	mov	sp, r7
 8005a20:	bd80      	pop	{r7, pc}

08005a22 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8005a22:	b580      	push	{r7, lr}
 8005a24:	b082      	sub	sp, #8
 8005a26:	af00      	add	r7, sp, #0
 8005a28:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8005a2a:	6878      	ldr	r0, [r7, #4]
 8005a2c:	f001 fca0 	bl	8007370 <USBD_LL_Start>
 8005a30:	4603      	mov	r3, r0
}
 8005a32:	4618      	mov	r0, r3
 8005a34:	3708      	adds	r7, #8
 8005a36:	46bd      	mov	sp, r7
 8005a38:	bd80      	pop	{r7, pc}

08005a3a <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8005a3a:	b480      	push	{r7}
 8005a3c:	b083      	sub	sp, #12
 8005a3e:	af00      	add	r7, sp, #0
 8005a40:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005a42:	2300      	movs	r3, #0
}
 8005a44:	4618      	mov	r0, r3
 8005a46:	370c      	adds	r7, #12
 8005a48:	46bd      	mov	sp, r7
 8005a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a4e:	4770      	bx	lr

08005a50 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005a50:	b580      	push	{r7, lr}
 8005a52:	b084      	sub	sp, #16
 8005a54:	af00      	add	r7, sp, #0
 8005a56:	6078      	str	r0, [r7, #4]
 8005a58:	460b      	mov	r3, r1
 8005a5a:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8005a5c:	2303      	movs	r3, #3
 8005a5e:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d009      	beq.n	8005a7e <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	78fa      	ldrb	r2, [r7, #3]
 8005a74:	4611      	mov	r1, r2
 8005a76:	6878      	ldr	r0, [r7, #4]
 8005a78:	4798      	blx	r3
 8005a7a:	4603      	mov	r3, r0
 8005a7c:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8005a7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a80:	4618      	mov	r0, r3
 8005a82:	3710      	adds	r7, #16
 8005a84:	46bd      	mov	sp, r7
 8005a86:	bd80      	pop	{r7, pc}

08005a88 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005a88:	b580      	push	{r7, lr}
 8005a8a:	b082      	sub	sp, #8
 8005a8c:	af00      	add	r7, sp, #0
 8005a8e:	6078      	str	r0, [r7, #4]
 8005a90:	460b      	mov	r3, r1
 8005a92:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d007      	beq.n	8005aae <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005aa4:	685b      	ldr	r3, [r3, #4]
 8005aa6:	78fa      	ldrb	r2, [r7, #3]
 8005aa8:	4611      	mov	r1, r2
 8005aaa:	6878      	ldr	r0, [r7, #4]
 8005aac:	4798      	blx	r3
  }

  return USBD_OK;
 8005aae:	2300      	movs	r3, #0
}
 8005ab0:	4618      	mov	r0, r3
 8005ab2:	3708      	adds	r7, #8
 8005ab4:	46bd      	mov	sp, r7
 8005ab6:	bd80      	pop	{r7, pc}

08005ab8 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8005ab8:	b580      	push	{r7, lr}
 8005aba:	b084      	sub	sp, #16
 8005abc:	af00      	add	r7, sp, #0
 8005abe:	6078      	str	r0, [r7, #4]
 8005ac0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005ac8:	6839      	ldr	r1, [r7, #0]
 8005aca:	4618      	mov	r0, r3
 8005acc:	f000 ff65 	bl	800699a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	2201      	movs	r2, #1
 8005ad4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8005ade:	461a      	mov	r2, r3
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8005aec:	f003 031f 	and.w	r3, r3, #31
 8005af0:	2b02      	cmp	r3, #2
 8005af2:	d01a      	beq.n	8005b2a <USBD_LL_SetupStage+0x72>
 8005af4:	2b02      	cmp	r3, #2
 8005af6:	d822      	bhi.n	8005b3e <USBD_LL_SetupStage+0x86>
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d002      	beq.n	8005b02 <USBD_LL_SetupStage+0x4a>
 8005afc:	2b01      	cmp	r3, #1
 8005afe:	d00a      	beq.n	8005b16 <USBD_LL_SetupStage+0x5e>
 8005b00:	e01d      	b.n	8005b3e <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005b08:	4619      	mov	r1, r3
 8005b0a:	6878      	ldr	r0, [r7, #4]
 8005b0c:	f000 fa18 	bl	8005f40 <USBD_StdDevReq>
 8005b10:	4603      	mov	r3, r0
 8005b12:	73fb      	strb	r3, [r7, #15]
      break;
 8005b14:	e020      	b.n	8005b58 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005b1c:	4619      	mov	r1, r3
 8005b1e:	6878      	ldr	r0, [r7, #4]
 8005b20:	f000 fa7c 	bl	800601c <USBD_StdItfReq>
 8005b24:	4603      	mov	r3, r0
 8005b26:	73fb      	strb	r3, [r7, #15]
      break;
 8005b28:	e016      	b.n	8005b58 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005b30:	4619      	mov	r1, r3
 8005b32:	6878      	ldr	r0, [r7, #4]
 8005b34:	f000 faba 	bl	80060ac <USBD_StdEPReq>
 8005b38:	4603      	mov	r3, r0
 8005b3a:	73fb      	strb	r3, [r7, #15]
      break;
 8005b3c:	e00c      	b.n	8005b58 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8005b44:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8005b48:	b2db      	uxtb	r3, r3
 8005b4a:	4619      	mov	r1, r3
 8005b4c:	6878      	ldr	r0, [r7, #4]
 8005b4e:	f001 fc6f 	bl	8007430 <USBD_LL_StallEP>
 8005b52:	4603      	mov	r3, r0
 8005b54:	73fb      	strb	r3, [r7, #15]
      break;
 8005b56:	bf00      	nop
  }

  return ret;
 8005b58:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b5a:	4618      	mov	r0, r3
 8005b5c:	3710      	adds	r7, #16
 8005b5e:	46bd      	mov	sp, r7
 8005b60:	bd80      	pop	{r7, pc}

08005b62 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8005b62:	b580      	push	{r7, lr}
 8005b64:	b086      	sub	sp, #24
 8005b66:	af00      	add	r7, sp, #0
 8005b68:	60f8      	str	r0, [r7, #12]
 8005b6a:	460b      	mov	r3, r1
 8005b6c:	607a      	str	r2, [r7, #4]
 8005b6e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8005b70:	7afb      	ldrb	r3, [r7, #11]
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d137      	bne.n	8005be6 <USBD_LL_DataOutStage+0x84>
  {
    pep = &pdev->ep_out[0];
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8005b7c:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005b84:	2b03      	cmp	r3, #3
 8005b86:	d14a      	bne.n	8005c1e <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8005b88:	693b      	ldr	r3, [r7, #16]
 8005b8a:	689a      	ldr	r2, [r3, #8]
 8005b8c:	693b      	ldr	r3, [r7, #16]
 8005b8e:	68db      	ldr	r3, [r3, #12]
 8005b90:	429a      	cmp	r2, r3
 8005b92:	d913      	bls.n	8005bbc <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8005b94:	693b      	ldr	r3, [r7, #16]
 8005b96:	689a      	ldr	r2, [r3, #8]
 8005b98:	693b      	ldr	r3, [r7, #16]
 8005b9a:	68db      	ldr	r3, [r3, #12]
 8005b9c:	1ad2      	subs	r2, r2, r3
 8005b9e:	693b      	ldr	r3, [r7, #16]
 8005ba0:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8005ba2:	693b      	ldr	r3, [r7, #16]
 8005ba4:	68da      	ldr	r2, [r3, #12]
 8005ba6:	693b      	ldr	r3, [r7, #16]
 8005ba8:	689b      	ldr	r3, [r3, #8]
 8005baa:	4293      	cmp	r3, r2
 8005bac:	bf28      	it	cs
 8005bae:	4613      	movcs	r3, r2
 8005bb0:	461a      	mov	r2, r3
 8005bb2:	6879      	ldr	r1, [r7, #4]
 8005bb4:	68f8      	ldr	r0, [r7, #12]
 8005bb6:	f000 ffe4 	bl	8006b82 <USBD_CtlContinueRx>
 8005bba:	e030      	b.n	8005c1e <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005bc2:	691b      	ldr	r3, [r3, #16]
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d00a      	beq.n	8005bde <USBD_LL_DataOutStage+0x7c>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8005bce:	2b03      	cmp	r3, #3
 8005bd0:	d105      	bne.n	8005bde <USBD_LL_DataOutStage+0x7c>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005bd8:	691b      	ldr	r3, [r3, #16]
 8005bda:	68f8      	ldr	r0, [r7, #12]
 8005bdc:	4798      	blx	r3
        }
        (void)USBD_CtlSendStatus(pdev);
 8005bde:	68f8      	ldr	r0, [r7, #12]
 8005be0:	f000 ffe0 	bl	8006ba4 <USBD_CtlSendStatus>
 8005be4:	e01b      	b.n	8005c1e <USBD_LL_DataOutStage+0xbc>
        (void)USBD_LL_StallEP(pdev, 0U);
      }
#endif
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005bec:	699b      	ldr	r3, [r3, #24]
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d013      	beq.n	8005c1a <USBD_LL_DataOutStage+0xb8>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8005bf8:	2b03      	cmp	r3, #3
 8005bfa:	d10e      	bne.n	8005c1a <USBD_LL_DataOutStage+0xb8>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005c02:	699b      	ldr	r3, [r3, #24]
 8005c04:	7afa      	ldrb	r2, [r7, #11]
 8005c06:	4611      	mov	r1, r2
 8005c08:	68f8      	ldr	r0, [r7, #12]
 8005c0a:	4798      	blx	r3
 8005c0c:	4603      	mov	r3, r0
 8005c0e:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 8005c10:	7dfb      	ldrb	r3, [r7, #23]
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d003      	beq.n	8005c1e <USBD_LL_DataOutStage+0xbc>
    {
      return ret;
 8005c16:	7dfb      	ldrb	r3, [r7, #23]
 8005c18:	e002      	b.n	8005c20 <USBD_LL_DataOutStage+0xbe>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8005c1a:	2303      	movs	r3, #3
 8005c1c:	e000      	b.n	8005c20 <USBD_LL_DataOutStage+0xbe>
  }

  return USBD_OK;
 8005c1e:	2300      	movs	r3, #0
}
 8005c20:	4618      	mov	r0, r3
 8005c22:	3718      	adds	r7, #24
 8005c24:	46bd      	mov	sp, r7
 8005c26:	bd80      	pop	{r7, pc}

08005c28 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8005c28:	b580      	push	{r7, lr}
 8005c2a:	b086      	sub	sp, #24
 8005c2c:	af00      	add	r7, sp, #0
 8005c2e:	60f8      	str	r0, [r7, #12]
 8005c30:	460b      	mov	r3, r1
 8005c32:	607a      	str	r2, [r7, #4]
 8005c34:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8005c36:	7afb      	ldrb	r3, [r7, #11]
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d16a      	bne.n	8005d12 <USBD_LL_DataInStage+0xea>
  {
    pep = &pdev->ep_in[0];
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	3314      	adds	r3, #20
 8005c40:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005c48:	2b02      	cmp	r3, #2
 8005c4a:	d155      	bne.n	8005cf8 <USBD_LL_DataInStage+0xd0>
    {
      if (pep->rem_length > pep->maxpacket)
 8005c4c:	693b      	ldr	r3, [r7, #16]
 8005c4e:	689a      	ldr	r2, [r3, #8]
 8005c50:	693b      	ldr	r3, [r7, #16]
 8005c52:	68db      	ldr	r3, [r3, #12]
 8005c54:	429a      	cmp	r2, r3
 8005c56:	d914      	bls.n	8005c82 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8005c58:	693b      	ldr	r3, [r7, #16]
 8005c5a:	689a      	ldr	r2, [r3, #8]
 8005c5c:	693b      	ldr	r3, [r7, #16]
 8005c5e:	68db      	ldr	r3, [r3, #12]
 8005c60:	1ad2      	subs	r2, r2, r3
 8005c62:	693b      	ldr	r3, [r7, #16]
 8005c64:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8005c66:	693b      	ldr	r3, [r7, #16]
 8005c68:	689b      	ldr	r3, [r3, #8]
 8005c6a:	461a      	mov	r2, r3
 8005c6c:	6879      	ldr	r1, [r7, #4]
 8005c6e:	68f8      	ldr	r0, [r7, #12]
 8005c70:	f000 ff59 	bl	8006b26 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005c74:	2300      	movs	r3, #0
 8005c76:	2200      	movs	r2, #0
 8005c78:	2100      	movs	r1, #0
 8005c7a:	68f8      	ldr	r0, [r7, #12]
 8005c7c:	f001 fc82 	bl	8007584 <USBD_LL_PrepareReceive>
 8005c80:	e03a      	b.n	8005cf8 <USBD_LL_DataInStage+0xd0>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8005c82:	693b      	ldr	r3, [r7, #16]
 8005c84:	68da      	ldr	r2, [r3, #12]
 8005c86:	693b      	ldr	r3, [r7, #16]
 8005c88:	689b      	ldr	r3, [r3, #8]
 8005c8a:	429a      	cmp	r2, r3
 8005c8c:	d11c      	bne.n	8005cc8 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8005c8e:	693b      	ldr	r3, [r7, #16]
 8005c90:	685a      	ldr	r2, [r3, #4]
 8005c92:	693b      	ldr	r3, [r7, #16]
 8005c94:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8005c96:	429a      	cmp	r2, r3
 8005c98:	d316      	bcc.n	8005cc8 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8005c9a:	693b      	ldr	r3, [r7, #16]
 8005c9c:	685a      	ldr	r2, [r3, #4]
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8005ca4:	429a      	cmp	r2, r3
 8005ca6:	d20f      	bcs.n	8005cc8 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8005ca8:	2200      	movs	r2, #0
 8005caa:	2100      	movs	r1, #0
 8005cac:	68f8      	ldr	r0, [r7, #12]
 8005cae:	f000 ff3a 	bl	8006b26 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	2200      	movs	r2, #0
 8005cb6:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005cba:	2300      	movs	r3, #0
 8005cbc:	2200      	movs	r2, #0
 8005cbe:	2100      	movs	r1, #0
 8005cc0:	68f8      	ldr	r0, [r7, #12]
 8005cc2:	f001 fc5f 	bl	8007584 <USBD_LL_PrepareReceive>
 8005cc6:	e017      	b.n	8005cf8 <USBD_LL_DataInStage+0xd0>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005cce:	68db      	ldr	r3, [r3, #12]
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d00a      	beq.n	8005cea <USBD_LL_DataInStage+0xc2>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8005cda:	2b03      	cmp	r3, #3
 8005cdc:	d105      	bne.n	8005cea <USBD_LL_DataInStage+0xc2>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005ce4:	68db      	ldr	r3, [r3, #12]
 8005ce6:	68f8      	ldr	r0, [r7, #12]
 8005ce8:	4798      	blx	r3
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8005cea:	2180      	movs	r1, #128	; 0x80
 8005cec:	68f8      	ldr	r0, [r7, #12]
 8005cee:	f001 fb9f 	bl	8007430 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8005cf2:	68f8      	ldr	r0, [r7, #12]
 8005cf4:	f000 ff69 	bl	8006bca <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8005cfe:	2b01      	cmp	r3, #1
 8005d00:	d123      	bne.n	8005d4a <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8005d02:	68f8      	ldr	r0, [r7, #12]
 8005d04:	f7ff fe99 	bl	8005a3a <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	2200      	movs	r2, #0
 8005d0c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8005d10:	e01b      	b.n	8005d4a <USBD_LL_DataInStage+0x122>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005d18:	695b      	ldr	r3, [r3, #20]
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d013      	beq.n	8005d46 <USBD_LL_DataInStage+0x11e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8005d24:	2b03      	cmp	r3, #3
 8005d26:	d10e      	bne.n	8005d46 <USBD_LL_DataInStage+0x11e>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005d2e:	695b      	ldr	r3, [r3, #20]
 8005d30:	7afa      	ldrb	r2, [r7, #11]
 8005d32:	4611      	mov	r1, r2
 8005d34:	68f8      	ldr	r0, [r7, #12]
 8005d36:	4798      	blx	r3
 8005d38:	4603      	mov	r3, r0
 8005d3a:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 8005d3c:	7dfb      	ldrb	r3, [r7, #23]
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d003      	beq.n	8005d4a <USBD_LL_DataInStage+0x122>
    {
      return ret;
 8005d42:	7dfb      	ldrb	r3, [r7, #23]
 8005d44:	e002      	b.n	8005d4c <USBD_LL_DataInStage+0x124>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8005d46:	2303      	movs	r3, #3
 8005d48:	e000      	b.n	8005d4c <USBD_LL_DataInStage+0x124>
  }

  return USBD_OK;
 8005d4a:	2300      	movs	r3, #0
}
 8005d4c:	4618      	mov	r0, r3
 8005d4e:	3718      	adds	r7, #24
 8005d50:	46bd      	mov	sp, r7
 8005d52:	bd80      	pop	{r7, pc}

08005d54 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8005d54:	b580      	push	{r7, lr}
 8005d56:	b082      	sub	sp, #8
 8005d58:	af00      	add	r7, sp, #0
 8005d5a:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	2201      	movs	r2, #1
 8005d60:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	2200      	movs	r2, #0
 8005d68:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	2200      	movs	r2, #0
 8005d70:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	2200      	movs	r2, #0
 8005d76:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData != NULL)
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d009      	beq.n	8005d98 <USBD_LL_Reset+0x44>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005d8a:	685b      	ldr	r3, [r3, #4]
 8005d8c:	687a      	ldr	r2, [r7, #4]
 8005d8e:	6852      	ldr	r2, [r2, #4]
 8005d90:	b2d2      	uxtb	r2, r2
 8005d92:	4611      	mov	r1, r2
 8005d94:	6878      	ldr	r0, [r7, #4]
 8005d96:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005d98:	2340      	movs	r3, #64	; 0x40
 8005d9a:	2200      	movs	r2, #0
 8005d9c:	2100      	movs	r1, #0
 8005d9e:	6878      	ldr	r0, [r7, #4]
 8005da0:	f001 fb01 	bl	80073a6 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	2201      	movs	r2, #1
 8005da8:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	2240      	movs	r2, #64	; 0x40
 8005db0:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005db4:	2340      	movs	r3, #64	; 0x40
 8005db6:	2200      	movs	r2, #0
 8005db8:	2180      	movs	r1, #128	; 0x80
 8005dba:	6878      	ldr	r0, [r7, #4]
 8005dbc:	f001 faf3 	bl	80073a6 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	2201      	movs	r2, #1
 8005dc4:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	2240      	movs	r2, #64	; 0x40
 8005dca:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8005dcc:	2300      	movs	r3, #0
}
 8005dce:	4618      	mov	r0, r3
 8005dd0:	3708      	adds	r7, #8
 8005dd2:	46bd      	mov	sp, r7
 8005dd4:	bd80      	pop	{r7, pc}

08005dd6 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8005dd6:	b480      	push	{r7}
 8005dd8:	b083      	sub	sp, #12
 8005dda:	af00      	add	r7, sp, #0
 8005ddc:	6078      	str	r0, [r7, #4]
 8005dde:	460b      	mov	r3, r1
 8005de0:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	78fa      	ldrb	r2, [r7, #3]
 8005de6:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8005de8:	2300      	movs	r3, #0
}
 8005dea:	4618      	mov	r0, r3
 8005dec:	370c      	adds	r7, #12
 8005dee:	46bd      	mov	sp, r7
 8005df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df4:	4770      	bx	lr

08005df6 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8005df6:	b480      	push	{r7}
 8005df8:	b083      	sub	sp, #12
 8005dfa:	af00      	add	r7, sp, #0
 8005dfc:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	2204      	movs	r2, #4
 8005e0e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8005e12:	2300      	movs	r3, #0
}
 8005e14:	4618      	mov	r0, r3
 8005e16:	370c      	adds	r7, #12
 8005e18:	46bd      	mov	sp, r7
 8005e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e1e:	4770      	bx	lr

08005e20 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8005e20:	b480      	push	{r7}
 8005e22:	b083      	sub	sp, #12
 8005e24:	af00      	add	r7, sp, #0
 8005e26:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005e2e:	2b04      	cmp	r3, #4
 8005e30:	d105      	bne.n	8005e3e <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8005e3e:	2300      	movs	r3, #0
}
 8005e40:	4618      	mov	r0, r3
 8005e42:	370c      	adds	r7, #12
 8005e44:	46bd      	mov	sp, r7
 8005e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e4a:	4770      	bx	lr

08005e4c <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8005e4c:	b580      	push	{r7, lr}
 8005e4e:	b082      	sub	sp, #8
 8005e50:	af00      	add	r7, sp, #0
 8005e52:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005e5a:	2b03      	cmp	r3, #3
 8005e5c:	d10b      	bne.n	8005e76 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005e64:	69db      	ldr	r3, [r3, #28]
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d005      	beq.n	8005e76 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005e70:	69db      	ldr	r3, [r3, #28]
 8005e72:	6878      	ldr	r0, [r7, #4]
 8005e74:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8005e76:	2300      	movs	r3, #0
}
 8005e78:	4618      	mov	r0, r3
 8005e7a:	3708      	adds	r7, #8
 8005e7c:	46bd      	mov	sp, r7
 8005e7e:	bd80      	pop	{r7, pc}

08005e80 <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8005e80:	b480      	push	{r7}
 8005e82:	b083      	sub	sp, #12
 8005e84:	af00      	add	r7, sp, #0
 8005e86:	6078      	str	r0, [r7, #4]
 8005e88:	460b      	mov	r3, r1
 8005e8a:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8005e8c:	2300      	movs	r3, #0
}
 8005e8e:	4618      	mov	r0, r3
 8005e90:	370c      	adds	r7, #12
 8005e92:	46bd      	mov	sp, r7
 8005e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e98:	4770      	bx	lr

08005e9a <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8005e9a:	b480      	push	{r7}
 8005e9c:	b083      	sub	sp, #12
 8005e9e:	af00      	add	r7, sp, #0
 8005ea0:	6078      	str	r0, [r7, #4]
 8005ea2:	460b      	mov	r3, r1
 8005ea4:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8005ea6:	2300      	movs	r3, #0
}
 8005ea8:	4618      	mov	r0, r3
 8005eaa:	370c      	adds	r7, #12
 8005eac:	46bd      	mov	sp, r7
 8005eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eb2:	4770      	bx	lr

08005eb4 <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8005eb4:	b480      	push	{r7}
 8005eb6:	b083      	sub	sp, #12
 8005eb8:	af00      	add	r7, sp, #0
 8005eba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005ebc:	2300      	movs	r3, #0
}
 8005ebe:	4618      	mov	r0, r3
 8005ec0:	370c      	adds	r7, #12
 8005ec2:	46bd      	mov	sp, r7
 8005ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec8:	4770      	bx	lr

08005eca <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8005eca:	b580      	push	{r7, lr}
 8005ecc:	b082      	sub	sp, #8
 8005ece:	af00      	add	r7, sp, #0
 8005ed0:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	2201      	movs	r2, #1
 8005ed6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d009      	beq.n	8005ef8 <USBD_LL_DevDisconnected+0x2e>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005eea:	685b      	ldr	r3, [r3, #4]
 8005eec:	687a      	ldr	r2, [r7, #4]
 8005eee:	6852      	ldr	r2, [r2, #4]
 8005ef0:	b2d2      	uxtb	r2, r2
 8005ef2:	4611      	mov	r1, r2
 8005ef4:	6878      	ldr	r0, [r7, #4]
 8005ef6:	4798      	blx	r3
  }

  return USBD_OK;
 8005ef8:	2300      	movs	r3, #0
}
 8005efa:	4618      	mov	r0, r3
 8005efc:	3708      	adds	r7, #8
 8005efe:	46bd      	mov	sp, r7
 8005f00:	bd80      	pop	{r7, pc}

08005f02 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8005f02:	b480      	push	{r7}
 8005f04:	b087      	sub	sp, #28
 8005f06:	af00      	add	r7, sp, #0
 8005f08:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8005f0e:	697b      	ldr	r3, [r7, #20]
 8005f10:	781b      	ldrb	r3, [r3, #0]
 8005f12:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8005f14:	697b      	ldr	r3, [r7, #20]
 8005f16:	3301      	adds	r3, #1
 8005f18:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8005f1a:	697b      	ldr	r3, [r7, #20]
 8005f1c:	781b      	ldrb	r3, [r3, #0]
 8005f1e:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8005f20:	8a3b      	ldrh	r3, [r7, #16]
 8005f22:	021b      	lsls	r3, r3, #8
 8005f24:	b21a      	sxth	r2, r3
 8005f26:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8005f2a:	4313      	orrs	r3, r2
 8005f2c:	b21b      	sxth	r3, r3
 8005f2e:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8005f30:	89fb      	ldrh	r3, [r7, #14]
}
 8005f32:	4618      	mov	r0, r3
 8005f34:	371c      	adds	r7, #28
 8005f36:	46bd      	mov	sp, r7
 8005f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f3c:	4770      	bx	lr
	...

08005f40 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005f40:	b580      	push	{r7, lr}
 8005f42:	b084      	sub	sp, #16
 8005f44:	af00      	add	r7, sp, #0
 8005f46:	6078      	str	r0, [r7, #4]
 8005f48:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005f4a:	2300      	movs	r3, #0
 8005f4c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005f4e:	683b      	ldr	r3, [r7, #0]
 8005f50:	781b      	ldrb	r3, [r3, #0]
 8005f52:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005f56:	2b40      	cmp	r3, #64	; 0x40
 8005f58:	d005      	beq.n	8005f66 <USBD_StdDevReq+0x26>
 8005f5a:	2b40      	cmp	r3, #64	; 0x40
 8005f5c:	d853      	bhi.n	8006006 <USBD_StdDevReq+0xc6>
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d00b      	beq.n	8005f7a <USBD_StdDevReq+0x3a>
 8005f62:	2b20      	cmp	r3, #32
 8005f64:	d14f      	bne.n	8006006 <USBD_StdDevReq+0xc6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005f6c:	689b      	ldr	r3, [r3, #8]
 8005f6e:	6839      	ldr	r1, [r7, #0]
 8005f70:	6878      	ldr	r0, [r7, #4]
 8005f72:	4798      	blx	r3
 8005f74:	4603      	mov	r3, r0
 8005f76:	73fb      	strb	r3, [r7, #15]
    break;
 8005f78:	e04a      	b.n	8006010 <USBD_StdDevReq+0xd0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8005f7a:	683b      	ldr	r3, [r7, #0]
 8005f7c:	785b      	ldrb	r3, [r3, #1]
 8005f7e:	2b09      	cmp	r3, #9
 8005f80:	d83b      	bhi.n	8005ffa <USBD_StdDevReq+0xba>
 8005f82:	a201      	add	r2, pc, #4	; (adr r2, 8005f88 <USBD_StdDevReq+0x48>)
 8005f84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f88:	08005fdd 	.word	0x08005fdd
 8005f8c:	08005ff1 	.word	0x08005ff1
 8005f90:	08005ffb 	.word	0x08005ffb
 8005f94:	08005fe7 	.word	0x08005fe7
 8005f98:	08005ffb 	.word	0x08005ffb
 8005f9c:	08005fbb 	.word	0x08005fbb
 8005fa0:	08005fb1 	.word	0x08005fb1
 8005fa4:	08005ffb 	.word	0x08005ffb
 8005fa8:	08005fd3 	.word	0x08005fd3
 8005fac:	08005fc5 	.word	0x08005fc5
    {
    case USB_REQ_GET_DESCRIPTOR:
      USBD_GetDescriptor(pdev, req);
 8005fb0:	6839      	ldr	r1, [r7, #0]
 8005fb2:	6878      	ldr	r0, [r7, #4]
 8005fb4:	f000 f9d8 	bl	8006368 <USBD_GetDescriptor>
      break;
 8005fb8:	e024      	b.n	8006004 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress(pdev, req);
 8005fba:	6839      	ldr	r1, [r7, #0]
 8005fbc:	6878      	ldr	r0, [r7, #4]
 8005fbe:	f000 fb67 	bl	8006690 <USBD_SetAddress>
      break;
 8005fc2:	e01f      	b.n	8006004 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_CONFIGURATION:
      ret = USBD_SetConfig(pdev, req);
 8005fc4:	6839      	ldr	r1, [r7, #0]
 8005fc6:	6878      	ldr	r0, [r7, #4]
 8005fc8:	f000 fba6 	bl	8006718 <USBD_SetConfig>
 8005fcc:	4603      	mov	r3, r0
 8005fce:	73fb      	strb	r3, [r7, #15]
      break;
 8005fd0:	e018      	b.n	8006004 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig(pdev, req);
 8005fd2:	6839      	ldr	r1, [r7, #0]
 8005fd4:	6878      	ldr	r0, [r7, #4]
 8005fd6:	f000 fc43 	bl	8006860 <USBD_GetConfig>
      break;
 8005fda:	e013      	b.n	8006004 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus(pdev, req);
 8005fdc:	6839      	ldr	r1, [r7, #0]
 8005fde:	6878      	ldr	r0, [r7, #4]
 8005fe0:	f000 fc73 	bl	80068ca <USBD_GetStatus>
      break;
 8005fe4:	e00e      	b.n	8006004 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_FEATURE:
      USBD_SetFeature(pdev, req);
 8005fe6:	6839      	ldr	r1, [r7, #0]
 8005fe8:	6878      	ldr	r0, [r7, #4]
 8005fea:	f000 fca1 	bl	8006930 <USBD_SetFeature>
      break;
 8005fee:	e009      	b.n	8006004 <USBD_StdDevReq+0xc4>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature(pdev, req);
 8005ff0:	6839      	ldr	r1, [r7, #0]
 8005ff2:	6878      	ldr	r0, [r7, #4]
 8005ff4:	f000 fcb0 	bl	8006958 <USBD_ClrFeature>
      break;
 8005ff8:	e004      	b.n	8006004 <USBD_StdDevReq+0xc4>

    default:
      USBD_CtlError(pdev, req);
 8005ffa:	6839      	ldr	r1, [r7, #0]
 8005ffc:	6878      	ldr	r0, [r7, #4]
 8005ffe:	f000 fd06 	bl	8006a0e <USBD_CtlError>
      break;
 8006002:	bf00      	nop
    }
    break;
 8006004:	e004      	b.n	8006010 <USBD_StdDevReq+0xd0>

  default:
    USBD_CtlError(pdev, req);
 8006006:	6839      	ldr	r1, [r7, #0]
 8006008:	6878      	ldr	r0, [r7, #4]
 800600a:	f000 fd00 	bl	8006a0e <USBD_CtlError>
    break;
 800600e:	bf00      	nop
  }

  return ret;
 8006010:	7bfb      	ldrb	r3, [r7, #15]
}
 8006012:	4618      	mov	r0, r3
 8006014:	3710      	adds	r7, #16
 8006016:	46bd      	mov	sp, r7
 8006018:	bd80      	pop	{r7, pc}
 800601a:	bf00      	nop

0800601c <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800601c:	b580      	push	{r7, lr}
 800601e:	b084      	sub	sp, #16
 8006020:	af00      	add	r7, sp, #0
 8006022:	6078      	str	r0, [r7, #4]
 8006024:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006026:	2300      	movs	r3, #0
 8006028:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800602a:	683b      	ldr	r3, [r7, #0]
 800602c:	781b      	ldrb	r3, [r3, #0]
 800602e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006032:	2b40      	cmp	r3, #64	; 0x40
 8006034:	d005      	beq.n	8006042 <USBD_StdItfReq+0x26>
 8006036:	2b40      	cmp	r3, #64	; 0x40
 8006038:	d82e      	bhi.n	8006098 <USBD_StdItfReq+0x7c>
 800603a:	2b00      	cmp	r3, #0
 800603c:	d001      	beq.n	8006042 <USBD_StdItfReq+0x26>
 800603e:	2b20      	cmp	r3, #32
 8006040:	d12a      	bne.n	8006098 <USBD_StdItfReq+0x7c>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006048:	3b01      	subs	r3, #1
 800604a:	2b02      	cmp	r3, #2
 800604c:	d81d      	bhi.n	800608a <USBD_StdItfReq+0x6e>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800604e:	683b      	ldr	r3, [r7, #0]
 8006050:	889b      	ldrh	r3, [r3, #4]
 8006052:	b2db      	uxtb	r3, r3
 8006054:	2b01      	cmp	r3, #1
 8006056:	d813      	bhi.n	8006080 <USBD_StdItfReq+0x64>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800605e:	689b      	ldr	r3, [r3, #8]
 8006060:	6839      	ldr	r1, [r7, #0]
 8006062:	6878      	ldr	r0, [r7, #4]
 8006064:	4798      	blx	r3
 8006066:	4603      	mov	r3, r0
 8006068:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 800606a:	683b      	ldr	r3, [r7, #0]
 800606c:	88db      	ldrh	r3, [r3, #6]
 800606e:	2b00      	cmp	r3, #0
 8006070:	d110      	bne.n	8006094 <USBD_StdItfReq+0x78>
 8006072:	7bfb      	ldrb	r3, [r7, #15]
 8006074:	2b00      	cmp	r3, #0
 8006076:	d10d      	bne.n	8006094 <USBD_StdItfReq+0x78>
        {
          (void)USBD_CtlSendStatus(pdev);
 8006078:	6878      	ldr	r0, [r7, #4]
 800607a:	f000 fd93 	bl	8006ba4 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 800607e:	e009      	b.n	8006094 <USBD_StdItfReq+0x78>
        USBD_CtlError(pdev, req);
 8006080:	6839      	ldr	r1, [r7, #0]
 8006082:	6878      	ldr	r0, [r7, #4]
 8006084:	f000 fcc3 	bl	8006a0e <USBD_CtlError>
      break;
 8006088:	e004      	b.n	8006094 <USBD_StdItfReq+0x78>

    default:
      USBD_CtlError(pdev, req);
 800608a:	6839      	ldr	r1, [r7, #0]
 800608c:	6878      	ldr	r0, [r7, #4]
 800608e:	f000 fcbe 	bl	8006a0e <USBD_CtlError>
      break;
 8006092:	e000      	b.n	8006096 <USBD_StdItfReq+0x7a>
      break;
 8006094:	bf00      	nop
    }
    break;
 8006096:	e004      	b.n	80060a2 <USBD_StdItfReq+0x86>

  default:
    USBD_CtlError(pdev, req);
 8006098:	6839      	ldr	r1, [r7, #0]
 800609a:	6878      	ldr	r0, [r7, #4]
 800609c:	f000 fcb7 	bl	8006a0e <USBD_CtlError>
    break;
 80060a0:	bf00      	nop
  }

  return ret;
 80060a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80060a4:	4618      	mov	r0, r3
 80060a6:	3710      	adds	r7, #16
 80060a8:	46bd      	mov	sp, r7
 80060aa:	bd80      	pop	{r7, pc}

080060ac <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80060ac:	b580      	push	{r7, lr}
 80060ae:	b084      	sub	sp, #16
 80060b0:	af00      	add	r7, sp, #0
 80060b2:	6078      	str	r0, [r7, #4]
 80060b4:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80060b6:	2300      	movs	r3, #0
 80060b8:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 80060ba:	683b      	ldr	r3, [r7, #0]
 80060bc:	889b      	ldrh	r3, [r3, #4]
 80060be:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80060c0:	683b      	ldr	r3, [r7, #0]
 80060c2:	781b      	ldrb	r3, [r3, #0]
 80060c4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80060c8:	2b40      	cmp	r3, #64	; 0x40
 80060ca:	d007      	beq.n	80060dc <USBD_StdEPReq+0x30>
 80060cc:	2b40      	cmp	r3, #64	; 0x40
 80060ce:	f200 8140 	bhi.w	8006352 <USBD_StdEPReq+0x2a6>
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d00c      	beq.n	80060f0 <USBD_StdEPReq+0x44>
 80060d6:	2b20      	cmp	r3, #32
 80060d8:	f040 813b 	bne.w	8006352 <USBD_StdEPReq+0x2a6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80060e2:	689b      	ldr	r3, [r3, #8]
 80060e4:	6839      	ldr	r1, [r7, #0]
 80060e6:	6878      	ldr	r0, [r7, #4]
 80060e8:	4798      	blx	r3
 80060ea:	4603      	mov	r3, r0
 80060ec:	73fb      	strb	r3, [r7, #15]
    break;
 80060ee:	e135      	b.n	800635c <USBD_StdEPReq+0x2b0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 80060f0:	683b      	ldr	r3, [r7, #0]
 80060f2:	785b      	ldrb	r3, [r3, #1]
 80060f4:	2b03      	cmp	r3, #3
 80060f6:	d007      	beq.n	8006108 <USBD_StdEPReq+0x5c>
 80060f8:	2b03      	cmp	r3, #3
 80060fa:	f300 8124 	bgt.w	8006346 <USBD_StdEPReq+0x29a>
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d07b      	beq.n	80061fa <USBD_StdEPReq+0x14e>
 8006102:	2b01      	cmp	r3, #1
 8006104:	d03b      	beq.n	800617e <USBD_StdEPReq+0xd2>
 8006106:	e11e      	b.n	8006346 <USBD_StdEPReq+0x29a>
    {
    case USB_REQ_SET_FEATURE:
      switch (pdev->dev_state)
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800610e:	2b02      	cmp	r3, #2
 8006110:	d002      	beq.n	8006118 <USBD_StdEPReq+0x6c>
 8006112:	2b03      	cmp	r3, #3
 8006114:	d016      	beq.n	8006144 <USBD_StdEPReq+0x98>
 8006116:	e02c      	b.n	8006172 <USBD_StdEPReq+0xc6>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006118:	7bbb      	ldrb	r3, [r7, #14]
 800611a:	2b00      	cmp	r3, #0
 800611c:	d00d      	beq.n	800613a <USBD_StdEPReq+0x8e>
 800611e:	7bbb      	ldrb	r3, [r7, #14]
 8006120:	2b80      	cmp	r3, #128	; 0x80
 8006122:	d00a      	beq.n	800613a <USBD_StdEPReq+0x8e>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 8006124:	7bbb      	ldrb	r3, [r7, #14]
 8006126:	4619      	mov	r1, r3
 8006128:	6878      	ldr	r0, [r7, #4]
 800612a:	f001 f981 	bl	8007430 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800612e:	2180      	movs	r1, #128	; 0x80
 8006130:	6878      	ldr	r0, [r7, #4]
 8006132:	f001 f97d 	bl	8007430 <USBD_LL_StallEP>
 8006136:	bf00      	nop
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8006138:	e020      	b.n	800617c <USBD_StdEPReq+0xd0>
          USBD_CtlError(pdev, req);
 800613a:	6839      	ldr	r1, [r7, #0]
 800613c:	6878      	ldr	r0, [r7, #4]
 800613e:	f000 fc66 	bl	8006a0e <USBD_CtlError>
        break;
 8006142:	e01b      	b.n	800617c <USBD_StdEPReq+0xd0>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8006144:	683b      	ldr	r3, [r7, #0]
 8006146:	885b      	ldrh	r3, [r3, #2]
 8006148:	2b00      	cmp	r3, #0
 800614a:	d10e      	bne.n	800616a <USBD_StdEPReq+0xbe>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800614c:	7bbb      	ldrb	r3, [r7, #14]
 800614e:	2b00      	cmp	r3, #0
 8006150:	d00b      	beq.n	800616a <USBD_StdEPReq+0xbe>
 8006152:	7bbb      	ldrb	r3, [r7, #14]
 8006154:	2b80      	cmp	r3, #128	; 0x80
 8006156:	d008      	beq.n	800616a <USBD_StdEPReq+0xbe>
 8006158:	683b      	ldr	r3, [r7, #0]
 800615a:	88db      	ldrh	r3, [r3, #6]
 800615c:	2b00      	cmp	r3, #0
 800615e:	d104      	bne.n	800616a <USBD_StdEPReq+0xbe>
          {
            (void)USBD_LL_StallEP(pdev, ep_addr);
 8006160:	7bbb      	ldrb	r3, [r7, #14]
 8006162:	4619      	mov	r1, r3
 8006164:	6878      	ldr	r0, [r7, #4]
 8006166:	f001 f963 	bl	8007430 <USBD_LL_StallEP>
          }
        }
        (void)USBD_CtlSendStatus(pdev);
 800616a:	6878      	ldr	r0, [r7, #4]
 800616c:	f000 fd1a 	bl	8006ba4 <USBD_CtlSendStatus>

        break;
 8006170:	e004      	b.n	800617c <USBD_StdEPReq+0xd0>

      default:
        USBD_CtlError(pdev, req);
 8006172:	6839      	ldr	r1, [r7, #0]
 8006174:	6878      	ldr	r0, [r7, #4]
 8006176:	f000 fc4a 	bl	8006a0e <USBD_CtlError>
        break;
 800617a:	bf00      	nop
      }
      break;
 800617c:	e0e8      	b.n	8006350 <USBD_StdEPReq+0x2a4>

    case USB_REQ_CLEAR_FEATURE:

      switch (pdev->dev_state)
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006184:	2b02      	cmp	r3, #2
 8006186:	d002      	beq.n	800618e <USBD_StdEPReq+0xe2>
 8006188:	2b03      	cmp	r3, #3
 800618a:	d016      	beq.n	80061ba <USBD_StdEPReq+0x10e>
 800618c:	e02e      	b.n	80061ec <USBD_StdEPReq+0x140>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800618e:	7bbb      	ldrb	r3, [r7, #14]
 8006190:	2b00      	cmp	r3, #0
 8006192:	d00d      	beq.n	80061b0 <USBD_StdEPReq+0x104>
 8006194:	7bbb      	ldrb	r3, [r7, #14]
 8006196:	2b80      	cmp	r3, #128	; 0x80
 8006198:	d00a      	beq.n	80061b0 <USBD_StdEPReq+0x104>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 800619a:	7bbb      	ldrb	r3, [r7, #14]
 800619c:	4619      	mov	r1, r3
 800619e:	6878      	ldr	r0, [r7, #4]
 80061a0:	f001 f946 	bl	8007430 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80061a4:	2180      	movs	r1, #128	; 0x80
 80061a6:	6878      	ldr	r0, [r7, #4]
 80061a8:	f001 f942 	bl	8007430 <USBD_LL_StallEP>
 80061ac:	bf00      	nop
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 80061ae:	e023      	b.n	80061f8 <USBD_StdEPReq+0x14c>
          USBD_CtlError(pdev, req);
 80061b0:	6839      	ldr	r1, [r7, #0]
 80061b2:	6878      	ldr	r0, [r7, #4]
 80061b4:	f000 fc2b 	bl	8006a0e <USBD_CtlError>
        break;
 80061b8:	e01e      	b.n	80061f8 <USBD_StdEPReq+0x14c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 80061ba:	683b      	ldr	r3, [r7, #0]
 80061bc:	885b      	ldrh	r3, [r3, #2]
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d119      	bne.n	80061f6 <USBD_StdEPReq+0x14a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 80061c2:	7bbb      	ldrb	r3, [r7, #14]
 80061c4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d004      	beq.n	80061d6 <USBD_StdEPReq+0x12a>
          {
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80061cc:	7bbb      	ldrb	r3, [r7, #14]
 80061ce:	4619      	mov	r1, r3
 80061d0:	6878      	ldr	r0, [r7, #4]
 80061d2:	f001 f94c 	bl	800746e <USBD_LL_ClearStallEP>
          }
          (void)USBD_CtlSendStatus(pdev);
 80061d6:	6878      	ldr	r0, [r7, #4]
 80061d8:	f000 fce4 	bl	8006ba4 <USBD_CtlSendStatus>
          (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80061e2:	689b      	ldr	r3, [r3, #8]
 80061e4:	6839      	ldr	r1, [r7, #0]
 80061e6:	6878      	ldr	r0, [r7, #4]
 80061e8:	4798      	blx	r3
        }
        break;
 80061ea:	e004      	b.n	80061f6 <USBD_StdEPReq+0x14a>

      default:
        USBD_CtlError(pdev, req);
 80061ec:	6839      	ldr	r1, [r7, #0]
 80061ee:	6878      	ldr	r0, [r7, #4]
 80061f0:	f000 fc0d 	bl	8006a0e <USBD_CtlError>
        break;
 80061f4:	e000      	b.n	80061f8 <USBD_StdEPReq+0x14c>
        break;
 80061f6:	bf00      	nop
      }
      break;
 80061f8:	e0aa      	b.n	8006350 <USBD_StdEPReq+0x2a4>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006200:	2b02      	cmp	r3, #2
 8006202:	d002      	beq.n	800620a <USBD_StdEPReq+0x15e>
 8006204:	2b03      	cmp	r3, #3
 8006206:	d032      	beq.n	800626e <USBD_StdEPReq+0x1c2>
 8006208:	e097      	b.n	800633a <USBD_StdEPReq+0x28e>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800620a:	7bbb      	ldrb	r3, [r7, #14]
 800620c:	2b00      	cmp	r3, #0
 800620e:	d007      	beq.n	8006220 <USBD_StdEPReq+0x174>
 8006210:	7bbb      	ldrb	r3, [r7, #14]
 8006212:	2b80      	cmp	r3, #128	; 0x80
 8006214:	d004      	beq.n	8006220 <USBD_StdEPReq+0x174>
        {
          USBD_CtlError(pdev, req);
 8006216:	6839      	ldr	r1, [r7, #0]
 8006218:	6878      	ldr	r0, [r7, #4]
 800621a:	f000 fbf8 	bl	8006a0e <USBD_CtlError>
          break;
 800621e:	e091      	b.n	8006344 <USBD_StdEPReq+0x298>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006220:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006224:	2b00      	cmp	r3, #0
 8006226:	da0b      	bge.n	8006240 <USBD_StdEPReq+0x194>
 8006228:	7bbb      	ldrb	r3, [r7, #14]
 800622a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800622e:	4613      	mov	r3, r2
 8006230:	009b      	lsls	r3, r3, #2
 8006232:	4413      	add	r3, r2
 8006234:	009b      	lsls	r3, r3, #2
 8006236:	3310      	adds	r3, #16
 8006238:	687a      	ldr	r2, [r7, #4]
 800623a:	4413      	add	r3, r2
 800623c:	3304      	adds	r3, #4
 800623e:	e00b      	b.n	8006258 <USBD_StdEPReq+0x1ac>
              &pdev->ep_out[ep_addr & 0x7FU];
 8006240:	7bbb      	ldrb	r3, [r7, #14]
 8006242:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006246:	4613      	mov	r3, r2
 8006248:	009b      	lsls	r3, r3, #2
 800624a:	4413      	add	r3, r2
 800624c:	009b      	lsls	r3, r3, #2
 800624e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006252:	687a      	ldr	r2, [r7, #4]
 8006254:	4413      	add	r3, r2
 8006256:	3304      	adds	r3, #4
 8006258:	60bb      	str	r3, [r7, #8]

        pep->status = 0x0000U;
 800625a:	68bb      	ldr	r3, [r7, #8]
 800625c:	2200      	movs	r2, #0
 800625e:	601a      	str	r2, [r3, #0]

        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006260:	68bb      	ldr	r3, [r7, #8]
 8006262:	2202      	movs	r2, #2
 8006264:	4619      	mov	r1, r3
 8006266:	6878      	ldr	r0, [r7, #4]
 8006268:	f000 fc42 	bl	8006af0 <USBD_CtlSendData>
        break;
 800626c:	e06a      	b.n	8006344 <USBD_StdEPReq+0x298>

      case USBD_STATE_CONFIGURED:
        if ((ep_addr & 0x80U) == 0x80U)
 800626e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006272:	2b00      	cmp	r3, #0
 8006274:	da11      	bge.n	800629a <USBD_StdEPReq+0x1ee>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8006276:	7bbb      	ldrb	r3, [r7, #14]
 8006278:	f003 020f 	and.w	r2, r3, #15
 800627c:	6879      	ldr	r1, [r7, #4]
 800627e:	4613      	mov	r3, r2
 8006280:	009b      	lsls	r3, r3, #2
 8006282:	4413      	add	r3, r2
 8006284:	009b      	lsls	r3, r3, #2
 8006286:	440b      	add	r3, r1
 8006288:	3324      	adds	r3, #36	; 0x24
 800628a:	881b      	ldrh	r3, [r3, #0]
 800628c:	2b00      	cmp	r3, #0
 800628e:	d117      	bne.n	80062c0 <USBD_StdEPReq+0x214>
          {
            USBD_CtlError(pdev, req);
 8006290:	6839      	ldr	r1, [r7, #0]
 8006292:	6878      	ldr	r0, [r7, #4]
 8006294:	f000 fbbb 	bl	8006a0e <USBD_CtlError>
            break;
 8006298:	e054      	b.n	8006344 <USBD_StdEPReq+0x298>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800629a:	7bbb      	ldrb	r3, [r7, #14]
 800629c:	f003 020f 	and.w	r2, r3, #15
 80062a0:	6879      	ldr	r1, [r7, #4]
 80062a2:	4613      	mov	r3, r2
 80062a4:	009b      	lsls	r3, r3, #2
 80062a6:	4413      	add	r3, r2
 80062a8:	009b      	lsls	r3, r3, #2
 80062aa:	440b      	add	r3, r1
 80062ac:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80062b0:	881b      	ldrh	r3, [r3, #0]
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d104      	bne.n	80062c0 <USBD_StdEPReq+0x214>
          {
            USBD_CtlError(pdev, req);
 80062b6:	6839      	ldr	r1, [r7, #0]
 80062b8:	6878      	ldr	r0, [r7, #4]
 80062ba:	f000 fba8 	bl	8006a0e <USBD_CtlError>
            break;
 80062be:	e041      	b.n	8006344 <USBD_StdEPReq+0x298>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80062c0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	da0b      	bge.n	80062e0 <USBD_StdEPReq+0x234>
 80062c8:	7bbb      	ldrb	r3, [r7, #14]
 80062ca:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80062ce:	4613      	mov	r3, r2
 80062d0:	009b      	lsls	r3, r3, #2
 80062d2:	4413      	add	r3, r2
 80062d4:	009b      	lsls	r3, r3, #2
 80062d6:	3310      	adds	r3, #16
 80062d8:	687a      	ldr	r2, [r7, #4]
 80062da:	4413      	add	r3, r2
 80062dc:	3304      	adds	r3, #4
 80062de:	e00b      	b.n	80062f8 <USBD_StdEPReq+0x24c>
              &pdev->ep_out[ep_addr & 0x7FU];
 80062e0:	7bbb      	ldrb	r3, [r7, #14]
 80062e2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80062e6:	4613      	mov	r3, r2
 80062e8:	009b      	lsls	r3, r3, #2
 80062ea:	4413      	add	r3, r2
 80062ec:	009b      	lsls	r3, r3, #2
 80062ee:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80062f2:	687a      	ldr	r2, [r7, #4]
 80062f4:	4413      	add	r3, r2
 80062f6:	3304      	adds	r3, #4
 80062f8:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80062fa:	7bbb      	ldrb	r3, [r7, #14]
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d002      	beq.n	8006306 <USBD_StdEPReq+0x25a>
 8006300:	7bbb      	ldrb	r3, [r7, #14]
 8006302:	2b80      	cmp	r3, #128	; 0x80
 8006304:	d103      	bne.n	800630e <USBD_StdEPReq+0x262>
          {
            pep->status = 0x0000U;
 8006306:	68bb      	ldr	r3, [r7, #8]
 8006308:	2200      	movs	r2, #0
 800630a:	601a      	str	r2, [r3, #0]
 800630c:	e00e      	b.n	800632c <USBD_StdEPReq+0x280>
          }
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800630e:	7bbb      	ldrb	r3, [r7, #14]
 8006310:	4619      	mov	r1, r3
 8006312:	6878      	ldr	r0, [r7, #4]
 8006314:	f001 f8ca 	bl	80074ac <USBD_LL_IsStallEP>
 8006318:	4603      	mov	r3, r0
 800631a:	2b00      	cmp	r3, #0
 800631c:	d003      	beq.n	8006326 <USBD_StdEPReq+0x27a>
          {
            pep->status = 0x0001U;
 800631e:	68bb      	ldr	r3, [r7, #8]
 8006320:	2201      	movs	r2, #1
 8006322:	601a      	str	r2, [r3, #0]
 8006324:	e002      	b.n	800632c <USBD_StdEPReq+0x280>
          }
          else
          {
            pep->status = 0x0000U;
 8006326:	68bb      	ldr	r3, [r7, #8]
 8006328:	2200      	movs	r2, #0
 800632a:	601a      	str	r2, [r3, #0]
          }

          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800632c:	68bb      	ldr	r3, [r7, #8]
 800632e:	2202      	movs	r2, #2
 8006330:	4619      	mov	r1, r3
 8006332:	6878      	ldr	r0, [r7, #4]
 8006334:	f000 fbdc 	bl	8006af0 <USBD_CtlSendData>
          break;
 8006338:	e004      	b.n	8006344 <USBD_StdEPReq+0x298>

      default:
        USBD_CtlError(pdev, req);
 800633a:	6839      	ldr	r1, [r7, #0]
 800633c:	6878      	ldr	r0, [r7, #4]
 800633e:	f000 fb66 	bl	8006a0e <USBD_CtlError>
        break;
 8006342:	bf00      	nop
      }
      break;
 8006344:	e004      	b.n	8006350 <USBD_StdEPReq+0x2a4>

    default:
      USBD_CtlError(pdev, req);
 8006346:	6839      	ldr	r1, [r7, #0]
 8006348:	6878      	ldr	r0, [r7, #4]
 800634a:	f000 fb60 	bl	8006a0e <USBD_CtlError>
      break;
 800634e:	bf00      	nop
    }
    break;
 8006350:	e004      	b.n	800635c <USBD_StdEPReq+0x2b0>

  default:
    USBD_CtlError(pdev, req);
 8006352:	6839      	ldr	r1, [r7, #0]
 8006354:	6878      	ldr	r0, [r7, #4]
 8006356:	f000 fb5a 	bl	8006a0e <USBD_CtlError>
    break;
 800635a:	bf00      	nop
  }

  return ret;
 800635c:	7bfb      	ldrb	r3, [r7, #15]
}
 800635e:	4618      	mov	r0, r3
 8006360:	3710      	adds	r7, #16
 8006362:	46bd      	mov	sp, r7
 8006364:	bd80      	pop	{r7, pc}
	...

08006368 <USBD_GetDescriptor>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006368:	b580      	push	{r7, lr}
 800636a:	b084      	sub	sp, #16
 800636c:	af00      	add	r7, sp, #0
 800636e:	6078      	str	r0, [r7, #4]
 8006370:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006372:	2300      	movs	r3, #0
 8006374:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8006376:	2300      	movs	r3, #0
 8006378:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800637a:	2300      	movs	r3, #0
 800637c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800637e:	683b      	ldr	r3, [r7, #0]
 8006380:	885b      	ldrh	r3, [r3, #2]
 8006382:	0a1b      	lsrs	r3, r3, #8
 8006384:	b29b      	uxth	r3, r3
 8006386:	3b01      	subs	r3, #1
 8006388:	2b0e      	cmp	r3, #14
 800638a:	f200 8152 	bhi.w	8006632 <USBD_GetDescriptor+0x2ca>
 800638e:	a201      	add	r2, pc, #4	; (adr r2, 8006394 <USBD_GetDescriptor+0x2c>)
 8006390:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006394:	08006405 	.word	0x08006405
 8006398:	0800641d 	.word	0x0800641d
 800639c:	0800645d 	.word	0x0800645d
 80063a0:	08006633 	.word	0x08006633
 80063a4:	08006633 	.word	0x08006633
 80063a8:	080065d3 	.word	0x080065d3
 80063ac:	080065ff 	.word	0x080065ff
 80063b0:	08006633 	.word	0x08006633
 80063b4:	08006633 	.word	0x08006633
 80063b8:	08006633 	.word	0x08006633
 80063bc:	08006633 	.word	0x08006633
 80063c0:	08006633 	.word	0x08006633
 80063c4:	08006633 	.word	0x08006633
 80063c8:	08006633 	.word	0x08006633
 80063cc:	080063d1 	.word	0x080063d1
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
  case USB_DESC_TYPE_BOS:
    if (pdev->pDesc->GetBOSDescriptor != NULL)
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80063d6:	69db      	ldr	r3, [r3, #28]
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d00b      	beq.n	80063f4 <USBD_GetDescriptor+0x8c>
    {
      pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80063e2:	69db      	ldr	r3, [r3, #28]
 80063e4:	687a      	ldr	r2, [r7, #4]
 80063e6:	7c12      	ldrb	r2, [r2, #16]
 80063e8:	f107 0108 	add.w	r1, r7, #8
 80063ec:	4610      	mov	r0, r2
 80063ee:	4798      	blx	r3
 80063f0:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 80063f2:	e126      	b.n	8006642 <USBD_GetDescriptor+0x2da>
      USBD_CtlError(pdev, req);
 80063f4:	6839      	ldr	r1, [r7, #0]
 80063f6:	6878      	ldr	r0, [r7, #4]
 80063f8:	f000 fb09 	bl	8006a0e <USBD_CtlError>
      err++;
 80063fc:	7afb      	ldrb	r3, [r7, #11]
 80063fe:	3301      	adds	r3, #1
 8006400:	72fb      	strb	r3, [r7, #11]
    break;
 8006402:	e11e      	b.n	8006642 <USBD_GetDescriptor+0x2da>
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	687a      	ldr	r2, [r7, #4]
 800640e:	7c12      	ldrb	r2, [r2, #16]
 8006410:	f107 0108 	add.w	r1, r7, #8
 8006414:	4610      	mov	r0, r2
 8006416:	4798      	blx	r3
 8006418:	60f8      	str	r0, [r7, #12]
    break;
 800641a:	e112      	b.n	8006642 <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	7c1b      	ldrb	r3, [r3, #16]
 8006420:	2b00      	cmp	r3, #0
 8006422:	d10d      	bne.n	8006440 <USBD_GetDescriptor+0xd8>
    {
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800642a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800642c:	f107 0208 	add.w	r2, r7, #8
 8006430:	4610      	mov	r0, r2
 8006432:	4798      	blx	r3
 8006434:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	3301      	adds	r3, #1
 800643a:	2202      	movs	r2, #2
 800643c:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 800643e:	e100      	b.n	8006642 <USBD_GetDescriptor+0x2da>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006446:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006448:	f107 0208 	add.w	r2, r7, #8
 800644c:	4610      	mov	r0, r2
 800644e:	4798      	blx	r3
 8006450:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	3301      	adds	r3, #1
 8006456:	2202      	movs	r2, #2
 8006458:	701a      	strb	r2, [r3, #0]
    break;
 800645a:	e0f2      	b.n	8006642 <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 800645c:	683b      	ldr	r3, [r7, #0]
 800645e:	885b      	ldrh	r3, [r3, #2]
 8006460:	b2db      	uxtb	r3, r3
 8006462:	2b05      	cmp	r3, #5
 8006464:	f200 80ac 	bhi.w	80065c0 <USBD_GetDescriptor+0x258>
 8006468:	a201      	add	r2, pc, #4	; (adr r2, 8006470 <USBD_GetDescriptor+0x108>)
 800646a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800646e:	bf00      	nop
 8006470:	08006489 	.word	0x08006489
 8006474:	080064bd 	.word	0x080064bd
 8006478:	080064f1 	.word	0x080064f1
 800647c:	08006525 	.word	0x08006525
 8006480:	08006559 	.word	0x08006559
 8006484:	0800658d 	.word	0x0800658d
    {
    case USBD_IDX_LANGID_STR:
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800648e:	685b      	ldr	r3, [r3, #4]
 8006490:	2b00      	cmp	r3, #0
 8006492:	d00b      	beq.n	80064ac <USBD_GetDescriptor+0x144>
      {
        pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800649a:	685b      	ldr	r3, [r3, #4]
 800649c:	687a      	ldr	r2, [r7, #4]
 800649e:	7c12      	ldrb	r2, [r2, #16]
 80064a0:	f107 0108 	add.w	r1, r7, #8
 80064a4:	4610      	mov	r0, r2
 80064a6:	4798      	blx	r3
 80064a8:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80064aa:	e091      	b.n	80065d0 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 80064ac:	6839      	ldr	r1, [r7, #0]
 80064ae:	6878      	ldr	r0, [r7, #4]
 80064b0:	f000 faad 	bl	8006a0e <USBD_CtlError>
        err++;
 80064b4:	7afb      	ldrb	r3, [r7, #11]
 80064b6:	3301      	adds	r3, #1
 80064b8:	72fb      	strb	r3, [r7, #11]
      break;
 80064ba:	e089      	b.n	80065d0 <USBD_GetDescriptor+0x268>

    case USBD_IDX_MFC_STR:
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80064c2:	689b      	ldr	r3, [r3, #8]
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d00b      	beq.n	80064e0 <USBD_GetDescriptor+0x178>
      {
        pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80064ce:	689b      	ldr	r3, [r3, #8]
 80064d0:	687a      	ldr	r2, [r7, #4]
 80064d2:	7c12      	ldrb	r2, [r2, #16]
 80064d4:	f107 0108 	add.w	r1, r7, #8
 80064d8:	4610      	mov	r0, r2
 80064da:	4798      	blx	r3
 80064dc:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80064de:	e077      	b.n	80065d0 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 80064e0:	6839      	ldr	r1, [r7, #0]
 80064e2:	6878      	ldr	r0, [r7, #4]
 80064e4:	f000 fa93 	bl	8006a0e <USBD_CtlError>
        err++;
 80064e8:	7afb      	ldrb	r3, [r7, #11]
 80064ea:	3301      	adds	r3, #1
 80064ec:	72fb      	strb	r3, [r7, #11]
      break;
 80064ee:	e06f      	b.n	80065d0 <USBD_GetDescriptor+0x268>

    case USBD_IDX_PRODUCT_STR:
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80064f6:	68db      	ldr	r3, [r3, #12]
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d00b      	beq.n	8006514 <USBD_GetDescriptor+0x1ac>
      {
        pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006502:	68db      	ldr	r3, [r3, #12]
 8006504:	687a      	ldr	r2, [r7, #4]
 8006506:	7c12      	ldrb	r2, [r2, #16]
 8006508:	f107 0108 	add.w	r1, r7, #8
 800650c:	4610      	mov	r0, r2
 800650e:	4798      	blx	r3
 8006510:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006512:	e05d      	b.n	80065d0 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 8006514:	6839      	ldr	r1, [r7, #0]
 8006516:	6878      	ldr	r0, [r7, #4]
 8006518:	f000 fa79 	bl	8006a0e <USBD_CtlError>
        err++;
 800651c:	7afb      	ldrb	r3, [r7, #11]
 800651e:	3301      	adds	r3, #1
 8006520:	72fb      	strb	r3, [r7, #11]
      break;
 8006522:	e055      	b.n	80065d0 <USBD_GetDescriptor+0x268>

    case USBD_IDX_SERIAL_STR:
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800652a:	691b      	ldr	r3, [r3, #16]
 800652c:	2b00      	cmp	r3, #0
 800652e:	d00b      	beq.n	8006548 <USBD_GetDescriptor+0x1e0>
      {
        pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006536:	691b      	ldr	r3, [r3, #16]
 8006538:	687a      	ldr	r2, [r7, #4]
 800653a:	7c12      	ldrb	r2, [r2, #16]
 800653c:	f107 0108 	add.w	r1, r7, #8
 8006540:	4610      	mov	r0, r2
 8006542:	4798      	blx	r3
 8006544:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006546:	e043      	b.n	80065d0 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 8006548:	6839      	ldr	r1, [r7, #0]
 800654a:	6878      	ldr	r0, [r7, #4]
 800654c:	f000 fa5f 	bl	8006a0e <USBD_CtlError>
        err++;
 8006550:	7afb      	ldrb	r3, [r7, #11]
 8006552:	3301      	adds	r3, #1
 8006554:	72fb      	strb	r3, [r7, #11]
      break;
 8006556:	e03b      	b.n	80065d0 <USBD_GetDescriptor+0x268>

    case USBD_IDX_CONFIG_STR:
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800655e:	695b      	ldr	r3, [r3, #20]
 8006560:	2b00      	cmp	r3, #0
 8006562:	d00b      	beq.n	800657c <USBD_GetDescriptor+0x214>
      {
        pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800656a:	695b      	ldr	r3, [r3, #20]
 800656c:	687a      	ldr	r2, [r7, #4]
 800656e:	7c12      	ldrb	r2, [r2, #16]
 8006570:	f107 0108 	add.w	r1, r7, #8
 8006574:	4610      	mov	r0, r2
 8006576:	4798      	blx	r3
 8006578:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800657a:	e029      	b.n	80065d0 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 800657c:	6839      	ldr	r1, [r7, #0]
 800657e:	6878      	ldr	r0, [r7, #4]
 8006580:	f000 fa45 	bl	8006a0e <USBD_CtlError>
        err++;
 8006584:	7afb      	ldrb	r3, [r7, #11]
 8006586:	3301      	adds	r3, #1
 8006588:	72fb      	strb	r3, [r7, #11]
      break;
 800658a:	e021      	b.n	80065d0 <USBD_GetDescriptor+0x268>

    case USBD_IDX_INTERFACE_STR:
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006592:	699b      	ldr	r3, [r3, #24]
 8006594:	2b00      	cmp	r3, #0
 8006596:	d00b      	beq.n	80065b0 <USBD_GetDescriptor+0x248>
      {
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800659e:	699b      	ldr	r3, [r3, #24]
 80065a0:	687a      	ldr	r2, [r7, #4]
 80065a2:	7c12      	ldrb	r2, [r2, #16]
 80065a4:	f107 0108 	add.w	r1, r7, #8
 80065a8:	4610      	mov	r0, r2
 80065aa:	4798      	blx	r3
 80065ac:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80065ae:	e00f      	b.n	80065d0 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 80065b0:	6839      	ldr	r1, [r7, #0]
 80065b2:	6878      	ldr	r0, [r7, #4]
 80065b4:	f000 fa2b 	bl	8006a0e <USBD_CtlError>
        err++;
 80065b8:	7afb      	ldrb	r3, [r7, #11]
 80065ba:	3301      	adds	r3, #1
 80065bc:	72fb      	strb	r3, [r7, #11]
      break;
 80065be:	e007      	b.n	80065d0 <USBD_GetDescriptor+0x268>
      {
        USBD_CtlError(pdev, req);
        err++;
      }
#else
      USBD_CtlError(pdev, req);
 80065c0:	6839      	ldr	r1, [r7, #0]
 80065c2:	6878      	ldr	r0, [r7, #4]
 80065c4:	f000 fa23 	bl	8006a0e <USBD_CtlError>
      err++;
 80065c8:	7afb      	ldrb	r3, [r7, #11]
 80065ca:	3301      	adds	r3, #1
 80065cc:	72fb      	strb	r3, [r7, #11]
#endif
      break;
 80065ce:	bf00      	nop
    }
    break;
 80065d0:	e037      	b.n	8006642 <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_DEVICE_QUALIFIER:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	7c1b      	ldrb	r3, [r3, #16]
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d109      	bne.n	80065ee <USBD_GetDescriptor+0x286>
    {
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80065e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80065e2:	f107 0208 	add.w	r2, r7, #8
 80065e6:	4610      	mov	r0, r2
 80065e8:	4798      	blx	r3
 80065ea:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 80065ec:	e029      	b.n	8006642 <USBD_GetDescriptor+0x2da>
      USBD_CtlError(pdev, req);
 80065ee:	6839      	ldr	r1, [r7, #0]
 80065f0:	6878      	ldr	r0, [r7, #4]
 80065f2:	f000 fa0c 	bl	8006a0e <USBD_CtlError>
      err++;
 80065f6:	7afb      	ldrb	r3, [r7, #11]
 80065f8:	3301      	adds	r3, #1
 80065fa:	72fb      	strb	r3, [r7, #11]
    break;
 80065fc:	e021      	b.n	8006642 <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	7c1b      	ldrb	r3, [r3, #16]
 8006602:	2b00      	cmp	r3, #0
 8006604:	d10d      	bne.n	8006622 <USBD_GetDescriptor+0x2ba>
    {
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800660c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800660e:	f107 0208 	add.w	r2, r7, #8
 8006612:	4610      	mov	r0, r2
 8006614:	4798      	blx	r3
 8006616:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	3301      	adds	r3, #1
 800661c:	2207      	movs	r2, #7
 800661e:	701a      	strb	r2, [r3, #0]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8006620:	e00f      	b.n	8006642 <USBD_GetDescriptor+0x2da>
      USBD_CtlError(pdev, req);
 8006622:	6839      	ldr	r1, [r7, #0]
 8006624:	6878      	ldr	r0, [r7, #4]
 8006626:	f000 f9f2 	bl	8006a0e <USBD_CtlError>
      err++;
 800662a:	7afb      	ldrb	r3, [r7, #11]
 800662c:	3301      	adds	r3, #1
 800662e:	72fb      	strb	r3, [r7, #11]
    break;
 8006630:	e007      	b.n	8006642 <USBD_GetDescriptor+0x2da>

  default:
    USBD_CtlError(pdev, req);
 8006632:	6839      	ldr	r1, [r7, #0]
 8006634:	6878      	ldr	r0, [r7, #4]
 8006636:	f000 f9ea 	bl	8006a0e <USBD_CtlError>
    err++;
 800663a:	7afb      	ldrb	r3, [r7, #11]
 800663c:	3301      	adds	r3, #1
 800663e:	72fb      	strb	r3, [r7, #11]
    break;
 8006640:	bf00      	nop
  }

  if (err != 0U)
 8006642:	7afb      	ldrb	r3, [r7, #11]
 8006644:	2b00      	cmp	r3, #0
 8006646:	d11e      	bne.n	8006686 <USBD_GetDescriptor+0x31e>
  {
    return;
  }
  else
  {
    if (req->wLength != 0U)
 8006648:	683b      	ldr	r3, [r7, #0]
 800664a:	88db      	ldrh	r3, [r3, #6]
 800664c:	2b00      	cmp	r3, #0
 800664e:	d016      	beq.n	800667e <USBD_GetDescriptor+0x316>
    {
      if (len != 0U)
 8006650:	893b      	ldrh	r3, [r7, #8]
 8006652:	2b00      	cmp	r3, #0
 8006654:	d00e      	beq.n	8006674 <USBD_GetDescriptor+0x30c>
      {
        len = MIN(len, req->wLength);
 8006656:	683b      	ldr	r3, [r7, #0]
 8006658:	88da      	ldrh	r2, [r3, #6]
 800665a:	893b      	ldrh	r3, [r7, #8]
 800665c:	4293      	cmp	r3, r2
 800665e:	bf28      	it	cs
 8006660:	4613      	movcs	r3, r2
 8006662:	b29b      	uxth	r3, r3
 8006664:	813b      	strh	r3, [r7, #8]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 8006666:	893b      	ldrh	r3, [r7, #8]
 8006668:	461a      	mov	r2, r3
 800666a:	68f9      	ldr	r1, [r7, #12]
 800666c:	6878      	ldr	r0, [r7, #4]
 800666e:	f000 fa3f 	bl	8006af0 <USBD_CtlSendData>
 8006672:	e009      	b.n	8006688 <USBD_GetDescriptor+0x320>
      }
      else
      {
        USBD_CtlError(pdev, req);
 8006674:	6839      	ldr	r1, [r7, #0]
 8006676:	6878      	ldr	r0, [r7, #4]
 8006678:	f000 f9c9 	bl	8006a0e <USBD_CtlError>
 800667c:	e004      	b.n	8006688 <USBD_GetDescriptor+0x320>
      }
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
 800667e:	6878      	ldr	r0, [r7, #4]
 8006680:	f000 fa90 	bl	8006ba4 <USBD_CtlSendStatus>
 8006684:	e000      	b.n	8006688 <USBD_GetDescriptor+0x320>
    return;
 8006686:	bf00      	nop
    }
  }
}
 8006688:	3710      	adds	r7, #16
 800668a:	46bd      	mov	sp, r7
 800668c:	bd80      	pop	{r7, pc}
 800668e:	bf00      	nop

08006690 <USBD_SetAddress>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006690:	b580      	push	{r7, lr}
 8006692:	b084      	sub	sp, #16
 8006694:	af00      	add	r7, sp, #0
 8006696:	6078      	str	r0, [r7, #4]
 8006698:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800669a:	683b      	ldr	r3, [r7, #0]
 800669c:	889b      	ldrh	r3, [r3, #4]
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d130      	bne.n	8006704 <USBD_SetAddress+0x74>
 80066a2:	683b      	ldr	r3, [r7, #0]
 80066a4:	88db      	ldrh	r3, [r3, #6]
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d12c      	bne.n	8006704 <USBD_SetAddress+0x74>
 80066aa:	683b      	ldr	r3, [r7, #0]
 80066ac:	885b      	ldrh	r3, [r3, #2]
 80066ae:	2b7f      	cmp	r3, #127	; 0x7f
 80066b0:	d828      	bhi.n	8006704 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80066b2:	683b      	ldr	r3, [r7, #0]
 80066b4:	885b      	ldrh	r3, [r3, #2]
 80066b6:	b2db      	uxtb	r3, r3
 80066b8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80066bc:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80066c4:	2b03      	cmp	r3, #3
 80066c6:	d104      	bne.n	80066d2 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 80066c8:	6839      	ldr	r1, [r7, #0]
 80066ca:	6878      	ldr	r0, [r7, #4]
 80066cc:	f000 f99f 	bl	8006a0e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80066d0:	e01d      	b.n	800670e <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	7bfa      	ldrb	r2, [r7, #15]
 80066d6:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80066da:	7bfb      	ldrb	r3, [r7, #15]
 80066dc:	4619      	mov	r1, r3
 80066de:	6878      	ldr	r0, [r7, #4]
 80066e0:	f000 ff10 	bl	8007504 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80066e4:	6878      	ldr	r0, [r7, #4]
 80066e6:	f000 fa5d 	bl	8006ba4 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80066ea:	7bfb      	ldrb	r3, [r7, #15]
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d004      	beq.n	80066fa <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	2202      	movs	r2, #2
 80066f4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80066f8:	e009      	b.n	800670e <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	2201      	movs	r2, #1
 80066fe:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006702:	e004      	b.n	800670e <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8006704:	6839      	ldr	r1, [r7, #0]
 8006706:	6878      	ldr	r0, [r7, #4]
 8006708:	f000 f981 	bl	8006a0e <USBD_CtlError>
  }
}
 800670c:	bf00      	nop
 800670e:	bf00      	nop
 8006710:	3710      	adds	r7, #16
 8006712:	46bd      	mov	sp, r7
 8006714:	bd80      	pop	{r7, pc}
	...

08006718 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006718:	b580      	push	{r7, lr}
 800671a:	b084      	sub	sp, #16
 800671c:	af00      	add	r7, sp, #0
 800671e:	6078      	str	r0, [r7, #4]
 8006720:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006722:	2300      	movs	r3, #0
 8006724:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8006726:	683b      	ldr	r3, [r7, #0]
 8006728:	885b      	ldrh	r3, [r3, #2]
 800672a:	b2da      	uxtb	r2, r3
 800672c:	4b4b      	ldr	r3, [pc, #300]	; (800685c <USBD_SetConfig+0x144>)
 800672e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8006730:	4b4a      	ldr	r3, [pc, #296]	; (800685c <USBD_SetConfig+0x144>)
 8006732:	781b      	ldrb	r3, [r3, #0]
 8006734:	2b01      	cmp	r3, #1
 8006736:	d905      	bls.n	8006744 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8006738:	6839      	ldr	r1, [r7, #0]
 800673a:	6878      	ldr	r0, [r7, #4]
 800673c:	f000 f967 	bl	8006a0e <USBD_CtlError>
    return USBD_FAIL;
 8006740:	2303      	movs	r3, #3
 8006742:	e087      	b.n	8006854 <USBD_SetConfig+0x13c>
  }

  switch (pdev->dev_state)
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800674a:	2b02      	cmp	r3, #2
 800674c:	d002      	beq.n	8006754 <USBD_SetConfig+0x3c>
 800674e:	2b03      	cmp	r3, #3
 8006750:	d025      	beq.n	800679e <USBD_SetConfig+0x86>
 8006752:	e071      	b.n	8006838 <USBD_SetConfig+0x120>
  {
  case USBD_STATE_ADDRESSED:
    if (cfgidx != 0U)
 8006754:	4b41      	ldr	r3, [pc, #260]	; (800685c <USBD_SetConfig+0x144>)
 8006756:	781b      	ldrb	r3, [r3, #0]
 8006758:	2b00      	cmp	r3, #0
 800675a:	d01c      	beq.n	8006796 <USBD_SetConfig+0x7e>
    {
      pdev->dev_config = cfgidx;
 800675c:	4b3f      	ldr	r3, [pc, #252]	; (800685c <USBD_SetConfig+0x144>)
 800675e:	781b      	ldrb	r3, [r3, #0]
 8006760:	461a      	mov	r2, r3
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	605a      	str	r2, [r3, #4]

      ret = USBD_SetClassConfig(pdev, cfgidx);
 8006766:	4b3d      	ldr	r3, [pc, #244]	; (800685c <USBD_SetConfig+0x144>)
 8006768:	781b      	ldrb	r3, [r3, #0]
 800676a:	4619      	mov	r1, r3
 800676c:	6878      	ldr	r0, [r7, #4]
 800676e:	f7ff f96f 	bl	8005a50 <USBD_SetClassConfig>
 8006772:	4603      	mov	r3, r0
 8006774:	73fb      	strb	r3, [r7, #15]

      if (ret != USBD_OK)
 8006776:	7bfb      	ldrb	r3, [r7, #15]
 8006778:	2b00      	cmp	r3, #0
 800677a:	d004      	beq.n	8006786 <USBD_SetConfig+0x6e>
      {
        USBD_CtlError(pdev, req);
 800677c:	6839      	ldr	r1, [r7, #0]
 800677e:	6878      	ldr	r0, [r7, #4]
 8006780:	f000 f945 	bl	8006a0e <USBD_CtlError>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 8006784:	e065      	b.n	8006852 <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 8006786:	6878      	ldr	r0, [r7, #4]
 8006788:	f000 fa0c 	bl	8006ba4 <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	2203      	movs	r2, #3
 8006790:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 8006794:	e05d      	b.n	8006852 <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 8006796:	6878      	ldr	r0, [r7, #4]
 8006798:	f000 fa04 	bl	8006ba4 <USBD_CtlSendStatus>
    break;
 800679c:	e059      	b.n	8006852 <USBD_SetConfig+0x13a>

  case USBD_STATE_CONFIGURED:
    if (cfgidx == 0U)
 800679e:	4b2f      	ldr	r3, [pc, #188]	; (800685c <USBD_SetConfig+0x144>)
 80067a0:	781b      	ldrb	r3, [r3, #0]
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d112      	bne.n	80067cc <USBD_SetConfig+0xb4>
    {
      pdev->dev_state = USBD_STATE_ADDRESSED;
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	2202      	movs	r2, #2
 80067aa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      pdev->dev_config = cfgidx;
 80067ae:	4b2b      	ldr	r3, [pc, #172]	; (800685c <USBD_SetConfig+0x144>)
 80067b0:	781b      	ldrb	r3, [r3, #0]
 80067b2:	461a      	mov	r2, r3
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	605a      	str	r2, [r3, #4]
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80067b8:	4b28      	ldr	r3, [pc, #160]	; (800685c <USBD_SetConfig+0x144>)
 80067ba:	781b      	ldrb	r3, [r3, #0]
 80067bc:	4619      	mov	r1, r3
 80067be:	6878      	ldr	r0, [r7, #4]
 80067c0:	f7ff f962 	bl	8005a88 <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 80067c4:	6878      	ldr	r0, [r7, #4]
 80067c6:	f000 f9ed 	bl	8006ba4 <USBD_CtlSendStatus>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 80067ca:	e042      	b.n	8006852 <USBD_SetConfig+0x13a>
    else if (cfgidx != pdev->dev_config)
 80067cc:	4b23      	ldr	r3, [pc, #140]	; (800685c <USBD_SetConfig+0x144>)
 80067ce:	781b      	ldrb	r3, [r3, #0]
 80067d0:	461a      	mov	r2, r3
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	685b      	ldr	r3, [r3, #4]
 80067d6:	429a      	cmp	r2, r3
 80067d8:	d02a      	beq.n	8006830 <USBD_SetConfig+0x118>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	685b      	ldr	r3, [r3, #4]
 80067de:	b2db      	uxtb	r3, r3
 80067e0:	4619      	mov	r1, r3
 80067e2:	6878      	ldr	r0, [r7, #4]
 80067e4:	f7ff f950 	bl	8005a88 <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 80067e8:	4b1c      	ldr	r3, [pc, #112]	; (800685c <USBD_SetConfig+0x144>)
 80067ea:	781b      	ldrb	r3, [r3, #0]
 80067ec:	461a      	mov	r2, r3
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	605a      	str	r2, [r3, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 80067f2:	4b1a      	ldr	r3, [pc, #104]	; (800685c <USBD_SetConfig+0x144>)
 80067f4:	781b      	ldrb	r3, [r3, #0]
 80067f6:	4619      	mov	r1, r3
 80067f8:	6878      	ldr	r0, [r7, #4]
 80067fa:	f7ff f929 	bl	8005a50 <USBD_SetClassConfig>
 80067fe:	4603      	mov	r3, r0
 8006800:	73fb      	strb	r3, [r7, #15]
      if (ret != USBD_OK)
 8006802:	7bfb      	ldrb	r3, [r7, #15]
 8006804:	2b00      	cmp	r3, #0
 8006806:	d00f      	beq.n	8006828 <USBD_SetConfig+0x110>
        USBD_CtlError(pdev, req);
 8006808:	6839      	ldr	r1, [r7, #0]
 800680a:	6878      	ldr	r0, [r7, #4]
 800680c:	f000 f8ff 	bl	8006a0e <USBD_CtlError>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	685b      	ldr	r3, [r3, #4]
 8006814:	b2db      	uxtb	r3, r3
 8006816:	4619      	mov	r1, r3
 8006818:	6878      	ldr	r0, [r7, #4]
 800681a:	f7ff f935 	bl	8005a88 <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	2202      	movs	r2, #2
 8006822:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 8006826:	e014      	b.n	8006852 <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 8006828:	6878      	ldr	r0, [r7, #4]
 800682a:	f000 f9bb 	bl	8006ba4 <USBD_CtlSendStatus>
    break;
 800682e:	e010      	b.n	8006852 <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 8006830:	6878      	ldr	r0, [r7, #4]
 8006832:	f000 f9b7 	bl	8006ba4 <USBD_CtlSendStatus>
    break;
 8006836:	e00c      	b.n	8006852 <USBD_SetConfig+0x13a>

  default:
    USBD_CtlError(pdev, req);
 8006838:	6839      	ldr	r1, [r7, #0]
 800683a:	6878      	ldr	r0, [r7, #4]
 800683c:	f000 f8e7 	bl	8006a0e <USBD_CtlError>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 8006840:	4b06      	ldr	r3, [pc, #24]	; (800685c <USBD_SetConfig+0x144>)
 8006842:	781b      	ldrb	r3, [r3, #0]
 8006844:	4619      	mov	r1, r3
 8006846:	6878      	ldr	r0, [r7, #4]
 8006848:	f7ff f91e 	bl	8005a88 <USBD_ClrClassConfig>
    ret = USBD_FAIL;
 800684c:	2303      	movs	r3, #3
 800684e:	73fb      	strb	r3, [r7, #15]
    break;
 8006850:	bf00      	nop
  }

  return ret;
 8006852:	7bfb      	ldrb	r3, [r7, #15]
}
 8006854:	4618      	mov	r0, r3
 8006856:	3710      	adds	r7, #16
 8006858:	46bd      	mov	sp, r7
 800685a:	bd80      	pop	{r7, pc}
 800685c:	200181a0 	.word	0x200181a0

08006860 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006860:	b580      	push	{r7, lr}
 8006862:	b082      	sub	sp, #8
 8006864:	af00      	add	r7, sp, #0
 8006866:	6078      	str	r0, [r7, #4]
 8006868:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800686a:	683b      	ldr	r3, [r7, #0]
 800686c:	88db      	ldrh	r3, [r3, #6]
 800686e:	2b01      	cmp	r3, #1
 8006870:	d004      	beq.n	800687c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8006872:	6839      	ldr	r1, [r7, #0]
 8006874:	6878      	ldr	r0, [r7, #4]
 8006876:	f000 f8ca 	bl	8006a0e <USBD_CtlError>
    default:
      USBD_CtlError(pdev, req);
      break;
    }
  }
}
 800687a:	e022      	b.n	80068c2 <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006882:	2b02      	cmp	r3, #2
 8006884:	dc02      	bgt.n	800688c <USBD_GetConfig+0x2c>
 8006886:	2b00      	cmp	r3, #0
 8006888:	dc03      	bgt.n	8006892 <USBD_GetConfig+0x32>
 800688a:	e015      	b.n	80068b8 <USBD_GetConfig+0x58>
 800688c:	2b03      	cmp	r3, #3
 800688e:	d00b      	beq.n	80068a8 <USBD_GetConfig+0x48>
 8006890:	e012      	b.n	80068b8 <USBD_GetConfig+0x58>
      pdev->dev_default_config = 0U;
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	2200      	movs	r2, #0
 8006896:	609a      	str	r2, [r3, #8]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	3308      	adds	r3, #8
 800689c:	2201      	movs	r2, #1
 800689e:	4619      	mov	r1, r3
 80068a0:	6878      	ldr	r0, [r7, #4]
 80068a2:	f000 f925 	bl	8006af0 <USBD_CtlSendData>
      break;
 80068a6:	e00c      	b.n	80068c2 <USBD_GetConfig+0x62>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	3304      	adds	r3, #4
 80068ac:	2201      	movs	r2, #1
 80068ae:	4619      	mov	r1, r3
 80068b0:	6878      	ldr	r0, [r7, #4]
 80068b2:	f000 f91d 	bl	8006af0 <USBD_CtlSendData>
      break;
 80068b6:	e004      	b.n	80068c2 <USBD_GetConfig+0x62>
      USBD_CtlError(pdev, req);
 80068b8:	6839      	ldr	r1, [r7, #0]
 80068ba:	6878      	ldr	r0, [r7, #4]
 80068bc:	f000 f8a7 	bl	8006a0e <USBD_CtlError>
      break;
 80068c0:	bf00      	nop
}
 80068c2:	bf00      	nop
 80068c4:	3708      	adds	r7, #8
 80068c6:	46bd      	mov	sp, r7
 80068c8:	bd80      	pop	{r7, pc}

080068ca <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80068ca:	b580      	push	{r7, lr}
 80068cc:	b082      	sub	sp, #8
 80068ce:	af00      	add	r7, sp, #0
 80068d0:	6078      	str	r0, [r7, #4]
 80068d2:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80068da:	3b01      	subs	r3, #1
 80068dc:	2b02      	cmp	r3, #2
 80068de:	d81e      	bhi.n	800691e <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wLength != 0x2U)
 80068e0:	683b      	ldr	r3, [r7, #0]
 80068e2:	88db      	ldrh	r3, [r3, #6]
 80068e4:	2b02      	cmp	r3, #2
 80068e6:	d004      	beq.n	80068f2 <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 80068e8:	6839      	ldr	r1, [r7, #0]
 80068ea:	6878      	ldr	r0, [r7, #4]
 80068ec:	f000 f88f 	bl	8006a0e <USBD_CtlError>
      break;
 80068f0:	e01a      	b.n	8006928 <USBD_GetStatus+0x5e>
    }

#if (USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	2201      	movs	r2, #1
 80068f6:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup != 0U)
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d005      	beq.n	800690e <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	68db      	ldr	r3, [r3, #12]
 8006906:	f043 0202 	orr.w	r2, r3, #2
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	60da      	str	r2, [r3, #12]
    }

    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	330c      	adds	r3, #12
 8006912:	2202      	movs	r2, #2
 8006914:	4619      	mov	r1, r3
 8006916:	6878      	ldr	r0, [r7, #4]
 8006918:	f000 f8ea 	bl	8006af0 <USBD_CtlSendData>
    break;
 800691c:	e004      	b.n	8006928 <USBD_GetStatus+0x5e>

  default:
    USBD_CtlError(pdev, req);
 800691e:	6839      	ldr	r1, [r7, #0]
 8006920:	6878      	ldr	r0, [r7, #4]
 8006922:	f000 f874 	bl	8006a0e <USBD_CtlError>
    break;
 8006926:	bf00      	nop
  }
}
 8006928:	bf00      	nop
 800692a:	3708      	adds	r7, #8
 800692c:	46bd      	mov	sp, r7
 800692e:	bd80      	pop	{r7, pc}

08006930 <USBD_SetFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006930:	b580      	push	{r7, lr}
 8006932:	b082      	sub	sp, #8
 8006934:	af00      	add	r7, sp, #0
 8006936:	6078      	str	r0, [r7, #4]
 8006938:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800693a:	683b      	ldr	r3, [r7, #0]
 800693c:	885b      	ldrh	r3, [r3, #2]
 800693e:	2b01      	cmp	r3, #1
 8006940:	d106      	bne.n	8006950 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	2201      	movs	r2, #1
 8006946:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800694a:	6878      	ldr	r0, [r7, #4]
 800694c:	f000 f92a 	bl	8006ba4 <USBD_CtlSendStatus>
  }
}
 8006950:	bf00      	nop
 8006952:	3708      	adds	r7, #8
 8006954:	46bd      	mov	sp, r7
 8006956:	bd80      	pop	{r7, pc}

08006958 <USBD_ClrFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006958:	b580      	push	{r7, lr}
 800695a:	b082      	sub	sp, #8
 800695c:	af00      	add	r7, sp, #0
 800695e:	6078      	str	r0, [r7, #4]
 8006960:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006968:	3b01      	subs	r3, #1
 800696a:	2b02      	cmp	r3, #2
 800696c:	d80b      	bhi.n	8006986 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800696e:	683b      	ldr	r3, [r7, #0]
 8006970:	885b      	ldrh	r3, [r3, #2]
 8006972:	2b01      	cmp	r3, #1
 8006974:	d10c      	bne.n	8006990 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	2200      	movs	r2, #0
 800697a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800697e:	6878      	ldr	r0, [r7, #4]
 8006980:	f000 f910 	bl	8006ba4 <USBD_CtlSendStatus>
      }
      break;
 8006984:	e004      	b.n	8006990 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8006986:	6839      	ldr	r1, [r7, #0]
 8006988:	6878      	ldr	r0, [r7, #4]
 800698a:	f000 f840 	bl	8006a0e <USBD_CtlError>
      break;
 800698e:	e000      	b.n	8006992 <USBD_ClrFeature+0x3a>
      break;
 8006990:	bf00      	nop
  }
}
 8006992:	bf00      	nop
 8006994:	3708      	adds	r7, #8
 8006996:	46bd      	mov	sp, r7
 8006998:	bd80      	pop	{r7, pc}

0800699a <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800699a:	b580      	push	{r7, lr}
 800699c:	b084      	sub	sp, #16
 800699e:	af00      	add	r7, sp, #0
 80069a0:	6078      	str	r0, [r7, #4]
 80069a2:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80069a4:	683b      	ldr	r3, [r7, #0]
 80069a6:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	781a      	ldrb	r2, [r3, #0]
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	3301      	adds	r3, #1
 80069b4:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	781a      	ldrb	r2, [r3, #0]
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	3301      	adds	r3, #1
 80069c2:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80069c4:	68f8      	ldr	r0, [r7, #12]
 80069c6:	f7ff fa9c 	bl	8005f02 <SWAPBYTE>
 80069ca:	4603      	mov	r3, r0
 80069cc:	461a      	mov	r2, r3
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	3301      	adds	r3, #1
 80069d6:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	3301      	adds	r3, #1
 80069dc:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80069de:	68f8      	ldr	r0, [r7, #12]
 80069e0:	f7ff fa8f 	bl	8005f02 <SWAPBYTE>
 80069e4:	4603      	mov	r3, r0
 80069e6:	461a      	mov	r2, r3
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	3301      	adds	r3, #1
 80069f0:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	3301      	adds	r3, #1
 80069f6:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80069f8:	68f8      	ldr	r0, [r7, #12]
 80069fa:	f7ff fa82 	bl	8005f02 <SWAPBYTE>
 80069fe:	4603      	mov	r3, r0
 8006a00:	461a      	mov	r2, r3
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	80da      	strh	r2, [r3, #6]
}
 8006a06:	bf00      	nop
 8006a08:	3710      	adds	r7, #16
 8006a0a:	46bd      	mov	sp, r7
 8006a0c:	bd80      	pop	{r7, pc}

08006a0e <USBD_CtlError>:
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006a0e:	b580      	push	{r7, lr}
 8006a10:	b082      	sub	sp, #8
 8006a12:	af00      	add	r7, sp, #0
 8006a14:	6078      	str	r0, [r7, #4]
 8006a16:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8006a18:	2180      	movs	r1, #128	; 0x80
 8006a1a:	6878      	ldr	r0, [r7, #4]
 8006a1c:	f000 fd08 	bl	8007430 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8006a20:	2100      	movs	r1, #0
 8006a22:	6878      	ldr	r0, [r7, #4]
 8006a24:	f000 fd04 	bl	8007430 <USBD_LL_StallEP>
}
 8006a28:	bf00      	nop
 8006a2a:	3708      	adds	r7, #8
 8006a2c:	46bd      	mov	sp, r7
 8006a2e:	bd80      	pop	{r7, pc}

08006a30 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8006a30:	b580      	push	{r7, lr}
 8006a32:	b086      	sub	sp, #24
 8006a34:	af00      	add	r7, sp, #0
 8006a36:	60f8      	str	r0, [r7, #12]
 8006a38:	60b9      	str	r1, [r7, #8]
 8006a3a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8006a3c:	2300      	movs	r3, #0
 8006a3e:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d036      	beq.n	8006ab4 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8006a4a:	6938      	ldr	r0, [r7, #16]
 8006a4c:	f000 f836 	bl	8006abc <USBD_GetLen>
 8006a50:	4603      	mov	r3, r0
 8006a52:	3301      	adds	r3, #1
 8006a54:	b29b      	uxth	r3, r3
 8006a56:	005b      	lsls	r3, r3, #1
 8006a58:	b29a      	uxth	r2, r3
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8006a5e:	7dfb      	ldrb	r3, [r7, #23]
 8006a60:	68ba      	ldr	r2, [r7, #8]
 8006a62:	4413      	add	r3, r2
 8006a64:	687a      	ldr	r2, [r7, #4]
 8006a66:	7812      	ldrb	r2, [r2, #0]
 8006a68:	701a      	strb	r2, [r3, #0]
  idx++;
 8006a6a:	7dfb      	ldrb	r3, [r7, #23]
 8006a6c:	3301      	adds	r3, #1
 8006a6e:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8006a70:	7dfb      	ldrb	r3, [r7, #23]
 8006a72:	68ba      	ldr	r2, [r7, #8]
 8006a74:	4413      	add	r3, r2
 8006a76:	2203      	movs	r2, #3
 8006a78:	701a      	strb	r2, [r3, #0]
  idx++;
 8006a7a:	7dfb      	ldrb	r3, [r7, #23]
 8006a7c:	3301      	adds	r3, #1
 8006a7e:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8006a80:	e013      	b.n	8006aaa <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8006a82:	7dfb      	ldrb	r3, [r7, #23]
 8006a84:	68ba      	ldr	r2, [r7, #8]
 8006a86:	4413      	add	r3, r2
 8006a88:	693a      	ldr	r2, [r7, #16]
 8006a8a:	7812      	ldrb	r2, [r2, #0]
 8006a8c:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8006a8e:	693b      	ldr	r3, [r7, #16]
 8006a90:	3301      	adds	r3, #1
 8006a92:	613b      	str	r3, [r7, #16]
    idx++;
 8006a94:	7dfb      	ldrb	r3, [r7, #23]
 8006a96:	3301      	adds	r3, #1
 8006a98:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8006a9a:	7dfb      	ldrb	r3, [r7, #23]
 8006a9c:	68ba      	ldr	r2, [r7, #8]
 8006a9e:	4413      	add	r3, r2
 8006aa0:	2200      	movs	r2, #0
 8006aa2:	701a      	strb	r2, [r3, #0]
    idx++;
 8006aa4:	7dfb      	ldrb	r3, [r7, #23]
 8006aa6:	3301      	adds	r3, #1
 8006aa8:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8006aaa:	693b      	ldr	r3, [r7, #16]
 8006aac:	781b      	ldrb	r3, [r3, #0]
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d1e7      	bne.n	8006a82 <USBD_GetString+0x52>
 8006ab2:	e000      	b.n	8006ab6 <USBD_GetString+0x86>
    return;
 8006ab4:	bf00      	nop
  }
}
 8006ab6:	3718      	adds	r7, #24
 8006ab8:	46bd      	mov	sp, r7
 8006aba:	bd80      	pop	{r7, pc}

08006abc <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8006abc:	b480      	push	{r7}
 8006abe:	b085      	sub	sp, #20
 8006ac0:	af00      	add	r7, sp, #0
 8006ac2:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8006ac4:	2300      	movs	r3, #0
 8006ac6:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8006acc:	e005      	b.n	8006ada <USBD_GetLen+0x1e>
  {
    len++;
 8006ace:	7bfb      	ldrb	r3, [r7, #15]
 8006ad0:	3301      	adds	r3, #1
 8006ad2:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8006ad4:	68bb      	ldr	r3, [r7, #8]
 8006ad6:	3301      	adds	r3, #1
 8006ad8:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8006ada:	68bb      	ldr	r3, [r7, #8]
 8006adc:	781b      	ldrb	r3, [r3, #0]
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d1f5      	bne.n	8006ace <USBD_GetLen+0x12>
  }

  return len;
 8006ae2:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ae4:	4618      	mov	r0, r3
 8006ae6:	3714      	adds	r7, #20
 8006ae8:	46bd      	mov	sp, r7
 8006aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aee:	4770      	bx	lr

08006af0 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8006af0:	b580      	push	{r7, lr}
 8006af2:	b084      	sub	sp, #16
 8006af4:	af00      	add	r7, sp, #0
 8006af6:	60f8      	str	r0, [r7, #12]
 8006af8:	60b9      	str	r1, [r7, #8]
 8006afa:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	2202      	movs	r2, #2
 8006b00:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	687a      	ldr	r2, [r7, #4]
 8006b08:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length = len;
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	687a      	ldr	r2, [r7, #4]
 8006b0e:	61da      	str	r2, [r3, #28]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	68ba      	ldr	r2, [r7, #8]
 8006b14:	2100      	movs	r1, #0
 8006b16:	68f8      	ldr	r0, [r7, #12]
 8006b18:	f000 fd13 	bl	8007542 <USBD_LL_Transmit>

  return USBD_OK;
 8006b1c:	2300      	movs	r3, #0
}
 8006b1e:	4618      	mov	r0, r3
 8006b20:	3710      	adds	r7, #16
 8006b22:	46bd      	mov	sp, r7
 8006b24:	bd80      	pop	{r7, pc}

08006b26 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8006b26:	b580      	push	{r7, lr}
 8006b28:	b084      	sub	sp, #16
 8006b2a:	af00      	add	r7, sp, #0
 8006b2c:	60f8      	str	r0, [r7, #12]
 8006b2e:	60b9      	str	r1, [r7, #8]
 8006b30:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	68ba      	ldr	r2, [r7, #8]
 8006b36:	2100      	movs	r1, #0
 8006b38:	68f8      	ldr	r0, [r7, #12]
 8006b3a:	f000 fd02 	bl	8007542 <USBD_LL_Transmit>

  return USBD_OK;
 8006b3e:	2300      	movs	r3, #0
}
 8006b40:	4618      	mov	r0, r3
 8006b42:	3710      	adds	r7, #16
 8006b44:	46bd      	mov	sp, r7
 8006b46:	bd80      	pop	{r7, pc}

08006b48 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8006b48:	b580      	push	{r7, lr}
 8006b4a:	b084      	sub	sp, #16
 8006b4c:	af00      	add	r7, sp, #0
 8006b4e:	60f8      	str	r0, [r7, #12]
 8006b50:	60b9      	str	r1, [r7, #8]
 8006b52:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	2203      	movs	r2, #3
 8006b58:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	687a      	ldr	r2, [r7, #4]
 8006b60:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  pdev->ep_out[0].rem_length = len;
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	687a      	ldr	r2, [r7, #4]
 8006b68:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	68ba      	ldr	r2, [r7, #8]
 8006b70:	2100      	movs	r1, #0
 8006b72:	68f8      	ldr	r0, [r7, #12]
 8006b74:	f000 fd06 	bl	8007584 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006b78:	2300      	movs	r3, #0
}
 8006b7a:	4618      	mov	r0, r3
 8006b7c:	3710      	adds	r7, #16
 8006b7e:	46bd      	mov	sp, r7
 8006b80:	bd80      	pop	{r7, pc}

08006b82 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8006b82:	b580      	push	{r7, lr}
 8006b84:	b084      	sub	sp, #16
 8006b86:	af00      	add	r7, sp, #0
 8006b88:	60f8      	str	r0, [r7, #12]
 8006b8a:	60b9      	str	r1, [r7, #8]
 8006b8c:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	68ba      	ldr	r2, [r7, #8]
 8006b92:	2100      	movs	r1, #0
 8006b94:	68f8      	ldr	r0, [r7, #12]
 8006b96:	f000 fcf5 	bl	8007584 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006b9a:	2300      	movs	r3, #0
}
 8006b9c:	4618      	mov	r0, r3
 8006b9e:	3710      	adds	r7, #16
 8006ba0:	46bd      	mov	sp, r7
 8006ba2:	bd80      	pop	{r7, pc}

08006ba4 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8006ba4:	b580      	push	{r7, lr}
 8006ba6:	b082      	sub	sp, #8
 8006ba8:	af00      	add	r7, sp, #0
 8006baa:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	2204      	movs	r2, #4
 8006bb0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8006bb4:	2300      	movs	r3, #0
 8006bb6:	2200      	movs	r2, #0
 8006bb8:	2100      	movs	r1, #0
 8006bba:	6878      	ldr	r0, [r7, #4]
 8006bbc:	f000 fcc1 	bl	8007542 <USBD_LL_Transmit>

  return USBD_OK;
 8006bc0:	2300      	movs	r3, #0
}
 8006bc2:	4618      	mov	r0, r3
 8006bc4:	3708      	adds	r7, #8
 8006bc6:	46bd      	mov	sp, r7
 8006bc8:	bd80      	pop	{r7, pc}

08006bca <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8006bca:	b580      	push	{r7, lr}
 8006bcc:	b082      	sub	sp, #8
 8006bce:	af00      	add	r7, sp, #0
 8006bd0:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	2205      	movs	r2, #5
 8006bd6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006bda:	2300      	movs	r3, #0
 8006bdc:	2200      	movs	r2, #0
 8006bde:	2100      	movs	r1, #0
 8006be0:	6878      	ldr	r0, [r7, #4]
 8006be2:	f000 fccf 	bl	8007584 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006be6:	2300      	movs	r3, #0
}
 8006be8:	4618      	mov	r0, r3
 8006bea:	3708      	adds	r7, #8
 8006bec:	46bd      	mov	sp, r7
 8006bee:	bd80      	pop	{r7, pc}

08006bf0 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8006bf0:	b580      	push	{r7, lr}
 8006bf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceHS, &HS_Desc, DEVICE_HS) != USBD_OK)
 8006bf4:	2201      	movs	r2, #1
 8006bf6:	4912      	ldr	r1, [pc, #72]	; (8006c40 <MX_USB_DEVICE_Init+0x50>)
 8006bf8:	4812      	ldr	r0, [pc, #72]	; (8006c44 <MX_USB_DEVICE_Init+0x54>)
 8006bfa:	f7fe febb 	bl	8005974 <USBD_Init>
 8006bfe:	4603      	mov	r3, r0
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d001      	beq.n	8006c08 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8006c04:	f7fa f9b4 	bl	8000f70 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceHS, &USBD_CDC) != USBD_OK)
 8006c08:	490f      	ldr	r1, [pc, #60]	; (8006c48 <MX_USB_DEVICE_Init+0x58>)
 8006c0a:	480e      	ldr	r0, [pc, #56]	; (8006c44 <MX_USB_DEVICE_Init+0x54>)
 8006c0c:	f7fe fee8 	bl	80059e0 <USBD_RegisterClass>
 8006c10:	4603      	mov	r3, r0
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d001      	beq.n	8006c1a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8006c16:	f7fa f9ab 	bl	8000f70 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceHS, &USBD_Interface_fops_HS) != USBD_OK)
 8006c1a:	490c      	ldr	r1, [pc, #48]	; (8006c4c <MX_USB_DEVICE_Init+0x5c>)
 8006c1c:	4809      	ldr	r0, [pc, #36]	; (8006c44 <MX_USB_DEVICE_Init+0x54>)
 8006c1e:	f7fe fe0d 	bl	800583c <USBD_CDC_RegisterInterface>
 8006c22:	4603      	mov	r3, r0
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d001      	beq.n	8006c2c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8006c28:	f7fa f9a2 	bl	8000f70 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceHS) != USBD_OK)
 8006c2c:	4805      	ldr	r0, [pc, #20]	; (8006c44 <MX_USB_DEVICE_Init+0x54>)
 8006c2e:	f7fe fef8 	bl	8005a22 <USBD_Start>
 8006c32:	4603      	mov	r3, r0
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d001      	beq.n	8006c3c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8006c38:	f7fa f99a 	bl	8000f70 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8006c3c:	bf00      	nop
 8006c3e:	bd80      	pop	{r7, pc}
 8006c40:	200000b8 	.word	0x200000b8
 8006c44:	200181a4 	.word	0x200181a4
 8006c48:	20000018 	.word	0x20000018
 8006c4c:	200000a4 	.word	0x200000a4

08006c50 <CDC_Init_HS>:
/**
  * @brief  Initializes the CDC media low layer over the USB HS IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_HS(void)
{
 8006c50:	b580      	push	{r7, lr}
 8006c52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 8 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceHS, UserTxBufferHS, 0);
 8006c54:	2200      	movs	r2, #0
 8006c56:	4905      	ldr	r1, [pc, #20]	; (8006c6c <CDC_Init_HS+0x1c>)
 8006c58:	4805      	ldr	r0, [pc, #20]	; (8006c70 <CDC_Init_HS+0x20>)
 8006c5a:	f7fe fe04 	bl	8005866 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceHS, UserRxBufferHS);
 8006c5e:	4905      	ldr	r1, [pc, #20]	; (8006c74 <CDC_Init_HS+0x24>)
 8006c60:	4803      	ldr	r0, [pc, #12]	; (8006c70 <CDC_Init_HS+0x20>)
 8006c62:	f7fe fe19 	bl	8005898 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8006c66:	2300      	movs	r3, #0
  /* USER CODE END 8 */
}
 8006c68:	4618      	mov	r0, r3
 8006c6a:	bd80      	pop	{r7, pc}
 8006c6c:	20018c74 	.word	0x20018c74
 8006c70:	200181a4 	.word	0x200181a4
 8006c74:	20018474 	.word	0x20018474

08006c78 <CDC_DeInit_HS>:
  * @brief  DeInitializes the CDC media low layer
  * @param  None
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_HS(void)
{
 8006c78:	b480      	push	{r7}
 8006c7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 9 */
  return (USBD_OK);
 8006c7c:	2300      	movs	r3, #0
  /* USER CODE END 9 */
}
 8006c7e:	4618      	mov	r0, r3
 8006c80:	46bd      	mov	sp, r7
 8006c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c86:	4770      	bx	lr

08006c88 <CDC_Control_HS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_HS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8006c88:	b480      	push	{r7}
 8006c8a:	b083      	sub	sp, #12
 8006c8c:	af00      	add	r7, sp, #0
 8006c8e:	4603      	mov	r3, r0
 8006c90:	6039      	str	r1, [r7, #0]
 8006c92:	71fb      	strb	r3, [r7, #7]
 8006c94:	4613      	mov	r3, r2
 8006c96:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 10 */
  switch(cmd)
 8006c98:	79fb      	ldrb	r3, [r7, #7]
 8006c9a:	2b23      	cmp	r3, #35	; 0x23
 8006c9c:	d84a      	bhi.n	8006d34 <CDC_Control_HS+0xac>
 8006c9e:	a201      	add	r2, pc, #4	; (adr r2, 8006ca4 <CDC_Control_HS+0x1c>)
 8006ca0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ca4:	08006d35 	.word	0x08006d35
 8006ca8:	08006d35 	.word	0x08006d35
 8006cac:	08006d35 	.word	0x08006d35
 8006cb0:	08006d35 	.word	0x08006d35
 8006cb4:	08006d35 	.word	0x08006d35
 8006cb8:	08006d35 	.word	0x08006d35
 8006cbc:	08006d35 	.word	0x08006d35
 8006cc0:	08006d35 	.word	0x08006d35
 8006cc4:	08006d35 	.word	0x08006d35
 8006cc8:	08006d35 	.word	0x08006d35
 8006ccc:	08006d35 	.word	0x08006d35
 8006cd0:	08006d35 	.word	0x08006d35
 8006cd4:	08006d35 	.word	0x08006d35
 8006cd8:	08006d35 	.word	0x08006d35
 8006cdc:	08006d35 	.word	0x08006d35
 8006ce0:	08006d35 	.word	0x08006d35
 8006ce4:	08006d35 	.word	0x08006d35
 8006ce8:	08006d35 	.word	0x08006d35
 8006cec:	08006d35 	.word	0x08006d35
 8006cf0:	08006d35 	.word	0x08006d35
 8006cf4:	08006d35 	.word	0x08006d35
 8006cf8:	08006d35 	.word	0x08006d35
 8006cfc:	08006d35 	.word	0x08006d35
 8006d00:	08006d35 	.word	0x08006d35
 8006d04:	08006d35 	.word	0x08006d35
 8006d08:	08006d35 	.word	0x08006d35
 8006d0c:	08006d35 	.word	0x08006d35
 8006d10:	08006d35 	.word	0x08006d35
 8006d14:	08006d35 	.word	0x08006d35
 8006d18:	08006d35 	.word	0x08006d35
 8006d1c:	08006d35 	.word	0x08006d35
 8006d20:	08006d35 	.word	0x08006d35
 8006d24:	08006d35 	.word	0x08006d35
 8006d28:	08006d35 	.word	0x08006d35
 8006d2c:	08006d35 	.word	0x08006d35
 8006d30:	08006d35 	.word	0x08006d35
  case CDC_SEND_BREAK:

    break;

  default:
    break;
 8006d34:	bf00      	nop
  }

  return (USBD_OK);
 8006d36:	2300      	movs	r3, #0
  /* USER CODE END 10 */
}
 8006d38:	4618      	mov	r0, r3
 8006d3a:	370c      	adds	r7, #12
 8006d3c:	46bd      	mov	sp, r7
 8006d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d42:	4770      	bx	lr

08006d44 <CDC_Receive_HS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_HS(uint8_t* Buf, uint32_t *Len)
{
 8006d44:	b580      	push	{r7, lr}
 8006d46:	b082      	sub	sp, #8
 8006d48:	af00      	add	r7, sp, #0
 8006d4a:	6078      	str	r0, [r7, #4]
 8006d4c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 11 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceHS, &Buf[0]);
 8006d4e:	6879      	ldr	r1, [r7, #4]
 8006d50:	4805      	ldr	r0, [pc, #20]	; (8006d68 <CDC_Receive_HS+0x24>)
 8006d52:	f7fe fda1 	bl	8005898 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceHS);
 8006d56:	4804      	ldr	r0, [pc, #16]	; (8006d68 <CDC_Receive_HS+0x24>)
 8006d58:	f7fe fde2 	bl	8005920 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8006d5c:	2300      	movs	r3, #0
  /* USER CODE END 11 */
}
 8006d5e:	4618      	mov	r0, r3
 8006d60:	3708      	adds	r7, #8
 8006d62:	46bd      	mov	sp, r7
 8006d64:	bd80      	pop	{r7, pc}
 8006d66:	bf00      	nop
 8006d68:	200181a4 	.word	0x200181a4

08006d6c <CDC_Transmit_HS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_HS(uint8_t* Buf, uint16_t Len)
{
 8006d6c:	b580      	push	{r7, lr}
 8006d6e:	b084      	sub	sp, #16
 8006d70:	af00      	add	r7, sp, #0
 8006d72:	6078      	str	r0, [r7, #4]
 8006d74:	460b      	mov	r3, r1
 8006d76:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8006d78:	2300      	movs	r3, #0
 8006d7a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 12 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceHS.pClassData;
 8006d7c:	4b0d      	ldr	r3, [pc, #52]	; (8006db4 <CDC_Transmit_HS+0x48>)
 8006d7e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006d82:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8006d84:	68bb      	ldr	r3, [r7, #8]
 8006d86:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d001      	beq.n	8006d92 <CDC_Transmit_HS+0x26>
    return USBD_BUSY;
 8006d8e:	2301      	movs	r3, #1
 8006d90:	e00b      	b.n	8006daa <CDC_Transmit_HS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceHS, Buf, Len);
 8006d92:	887b      	ldrh	r3, [r7, #2]
 8006d94:	461a      	mov	r2, r3
 8006d96:	6879      	ldr	r1, [r7, #4]
 8006d98:	4806      	ldr	r0, [pc, #24]	; (8006db4 <CDC_Transmit_HS+0x48>)
 8006d9a:	f7fe fd64 	bl	8005866 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceHS);
 8006d9e:	4805      	ldr	r0, [pc, #20]	; (8006db4 <CDC_Transmit_HS+0x48>)
 8006da0:	f7fe fd8e 	bl	80058c0 <USBD_CDC_TransmitPacket>
 8006da4:	4603      	mov	r3, r0
 8006da6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 12 */
  return result;
 8006da8:	7bfb      	ldrb	r3, [r7, #15]
}
 8006daa:	4618      	mov	r0, r3
 8006dac:	3710      	adds	r7, #16
 8006dae:	46bd      	mov	sp, r7
 8006db0:	bd80      	pop	{r7, pc}
 8006db2:	bf00      	nop
 8006db4:	200181a4 	.word	0x200181a4

08006db8 <CDC_TransmitCplt_HS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_HS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8006db8:	b480      	push	{r7}
 8006dba:	b087      	sub	sp, #28
 8006dbc:	af00      	add	r7, sp, #0
 8006dbe:	60f8      	str	r0, [r7, #12]
 8006dc0:	60b9      	str	r1, [r7, #8]
 8006dc2:	4613      	mov	r3, r2
 8006dc4:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8006dc6:	2300      	movs	r3, #0
 8006dc8:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 14 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 14 */
  return result;
 8006dca:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006dce:	4618      	mov	r0, r3
 8006dd0:	371c      	adds	r7, #28
 8006dd2:	46bd      	mov	sp, r7
 8006dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dd8:	4770      	bx	lr
	...

08006ddc <USBD_HS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006ddc:	b480      	push	{r7}
 8006dde:	b083      	sub	sp, #12
 8006de0:	af00      	add	r7, sp, #0
 8006de2:	4603      	mov	r3, r0
 8006de4:	6039      	str	r1, [r7, #0]
 8006de6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_HS_DeviceDesc);
 8006de8:	683b      	ldr	r3, [r7, #0]
 8006dea:	2212      	movs	r2, #18
 8006dec:	801a      	strh	r2, [r3, #0]
  return USBD_HS_DeviceDesc;
 8006dee:	4b03      	ldr	r3, [pc, #12]	; (8006dfc <USBD_HS_DeviceDescriptor+0x20>)
}
 8006df0:	4618      	mov	r0, r3
 8006df2:	370c      	adds	r7, #12
 8006df4:	46bd      	mov	sp, r7
 8006df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dfa:	4770      	bx	lr
 8006dfc:	200000d8 	.word	0x200000d8

08006e00 <USBD_HS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006e00:	b480      	push	{r7}
 8006e02:	b083      	sub	sp, #12
 8006e04:	af00      	add	r7, sp, #0
 8006e06:	4603      	mov	r3, r0
 8006e08:	6039      	str	r1, [r7, #0]
 8006e0a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8006e0c:	683b      	ldr	r3, [r7, #0]
 8006e0e:	2204      	movs	r2, #4
 8006e10:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8006e12:	4b03      	ldr	r3, [pc, #12]	; (8006e20 <USBD_HS_LangIDStrDescriptor+0x20>)
}
 8006e14:	4618      	mov	r0, r3
 8006e16:	370c      	adds	r7, #12
 8006e18:	46bd      	mov	sp, r7
 8006e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e1e:	4770      	bx	lr
 8006e20:	200000f8 	.word	0x200000f8

08006e24 <USBD_HS_ProductStrDescriptor>:
  * @param  speed : current device speed
  * @param  length : pointer to data length variable
  * @retval pointer to descriptor buffer
  */
uint8_t * USBD_HS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006e24:	b580      	push	{r7, lr}
 8006e26:	b082      	sub	sp, #8
 8006e28:	af00      	add	r7, sp, #0
 8006e2a:	4603      	mov	r3, r0
 8006e2c:	6039      	str	r1, [r7, #0]
 8006e2e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8006e30:	79fb      	ldrb	r3, [r7, #7]
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d105      	bne.n	8006e42 <USBD_HS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 8006e36:	683a      	ldr	r2, [r7, #0]
 8006e38:	4907      	ldr	r1, [pc, #28]	; (8006e58 <USBD_HS_ProductStrDescriptor+0x34>)
 8006e3a:	4808      	ldr	r0, [pc, #32]	; (8006e5c <USBD_HS_ProductStrDescriptor+0x38>)
 8006e3c:	f7ff fdf8 	bl	8006a30 <USBD_GetString>
 8006e40:	e004      	b.n	8006e4c <USBD_HS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 8006e42:	683a      	ldr	r2, [r7, #0]
 8006e44:	4904      	ldr	r1, [pc, #16]	; (8006e58 <USBD_HS_ProductStrDescriptor+0x34>)
 8006e46:	4805      	ldr	r0, [pc, #20]	; (8006e5c <USBD_HS_ProductStrDescriptor+0x38>)
 8006e48:	f7ff fdf2 	bl	8006a30 <USBD_GetString>
  }
  return USBD_StrDesc;
 8006e4c:	4b02      	ldr	r3, [pc, #8]	; (8006e58 <USBD_HS_ProductStrDescriptor+0x34>)
}
 8006e4e:	4618      	mov	r0, r3
 8006e50:	3708      	adds	r7, #8
 8006e52:	46bd      	mov	sp, r7
 8006e54:	bd80      	pop	{r7, pc}
 8006e56:	bf00      	nop
 8006e58:	20019474 	.word	0x20019474
 8006e5c:	08007984 	.word	0x08007984

08006e60 <USBD_HS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006e60:	b580      	push	{r7, lr}
 8006e62:	b082      	sub	sp, #8
 8006e64:	af00      	add	r7, sp, #0
 8006e66:	4603      	mov	r3, r0
 8006e68:	6039      	str	r1, [r7, #0]
 8006e6a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8006e6c:	683a      	ldr	r2, [r7, #0]
 8006e6e:	4904      	ldr	r1, [pc, #16]	; (8006e80 <USBD_HS_ManufacturerStrDescriptor+0x20>)
 8006e70:	4804      	ldr	r0, [pc, #16]	; (8006e84 <USBD_HS_ManufacturerStrDescriptor+0x24>)
 8006e72:	f7ff fddd 	bl	8006a30 <USBD_GetString>
  return USBD_StrDesc;
 8006e76:	4b02      	ldr	r3, [pc, #8]	; (8006e80 <USBD_HS_ManufacturerStrDescriptor+0x20>)
}
 8006e78:	4618      	mov	r0, r3
 8006e7a:	3708      	adds	r7, #8
 8006e7c:	46bd      	mov	sp, r7
 8006e7e:	bd80      	pop	{r7, pc}
 8006e80:	20019474 	.word	0x20019474
 8006e84:	0800799c 	.word	0x0800799c

08006e88 <USBD_HS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006e88:	b580      	push	{r7, lr}
 8006e8a:	b082      	sub	sp, #8
 8006e8c:	af00      	add	r7, sp, #0
 8006e8e:	4603      	mov	r3, r0
 8006e90:	6039      	str	r1, [r7, #0]
 8006e92:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8006e94:	683b      	ldr	r3, [r7, #0]
 8006e96:	221a      	movs	r2, #26
 8006e98:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8006e9a:	f000 f855 	bl	8006f48 <Get_SerialNum>
  /* USER CODE BEGIN USBD_HS_SerialStrDescriptor */

  /* USER CODE END USBD_HS_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 8006e9e:	4b02      	ldr	r3, [pc, #8]	; (8006ea8 <USBD_HS_SerialStrDescriptor+0x20>)
}
 8006ea0:	4618      	mov	r0, r3
 8006ea2:	3708      	adds	r7, #8
 8006ea4:	46bd      	mov	sp, r7
 8006ea6:	bd80      	pop	{r7, pc}
 8006ea8:	200000fc 	.word	0x200000fc

08006eac <USBD_HS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006eac:	b580      	push	{r7, lr}
 8006eae:	b082      	sub	sp, #8
 8006eb0:	af00      	add	r7, sp, #0
 8006eb2:	4603      	mov	r3, r0
 8006eb4:	6039      	str	r1, [r7, #0]
 8006eb6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8006eb8:	79fb      	ldrb	r3, [r7, #7]
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d105      	bne.n	8006eca <USBD_HS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 8006ebe:	683a      	ldr	r2, [r7, #0]
 8006ec0:	4907      	ldr	r1, [pc, #28]	; (8006ee0 <USBD_HS_ConfigStrDescriptor+0x34>)
 8006ec2:	4808      	ldr	r0, [pc, #32]	; (8006ee4 <USBD_HS_ConfigStrDescriptor+0x38>)
 8006ec4:	f7ff fdb4 	bl	8006a30 <USBD_GetString>
 8006ec8:	e004      	b.n	8006ed4 <USBD_HS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 8006eca:	683a      	ldr	r2, [r7, #0]
 8006ecc:	4904      	ldr	r1, [pc, #16]	; (8006ee0 <USBD_HS_ConfigStrDescriptor+0x34>)
 8006ece:	4805      	ldr	r0, [pc, #20]	; (8006ee4 <USBD_HS_ConfigStrDescriptor+0x38>)
 8006ed0:	f7ff fdae 	bl	8006a30 <USBD_GetString>
  }
  return USBD_StrDesc;
 8006ed4:	4b02      	ldr	r3, [pc, #8]	; (8006ee0 <USBD_HS_ConfigStrDescriptor+0x34>)
}
 8006ed6:	4618      	mov	r0, r3
 8006ed8:	3708      	adds	r7, #8
 8006eda:	46bd      	mov	sp, r7
 8006edc:	bd80      	pop	{r7, pc}
 8006ede:	bf00      	nop
 8006ee0:	20019474 	.word	0x20019474
 8006ee4:	080079a4 	.word	0x080079a4

08006ee8 <USBD_HS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006ee8:	b580      	push	{r7, lr}
 8006eea:	b082      	sub	sp, #8
 8006eec:	af00      	add	r7, sp, #0
 8006eee:	4603      	mov	r3, r0
 8006ef0:	6039      	str	r1, [r7, #0]
 8006ef2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8006ef4:	79fb      	ldrb	r3, [r7, #7]
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d105      	bne.n	8006f06 <USBD_HS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 8006efa:	683a      	ldr	r2, [r7, #0]
 8006efc:	4907      	ldr	r1, [pc, #28]	; (8006f1c <USBD_HS_InterfaceStrDescriptor+0x34>)
 8006efe:	4808      	ldr	r0, [pc, #32]	; (8006f20 <USBD_HS_InterfaceStrDescriptor+0x38>)
 8006f00:	f7ff fd96 	bl	8006a30 <USBD_GetString>
 8006f04:	e004      	b.n	8006f10 <USBD_HS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 8006f06:	683a      	ldr	r2, [r7, #0]
 8006f08:	4904      	ldr	r1, [pc, #16]	; (8006f1c <USBD_HS_InterfaceStrDescriptor+0x34>)
 8006f0a:	4805      	ldr	r0, [pc, #20]	; (8006f20 <USBD_HS_InterfaceStrDescriptor+0x38>)
 8006f0c:	f7ff fd90 	bl	8006a30 <USBD_GetString>
  }
  return USBD_StrDesc;
 8006f10:	4b02      	ldr	r3, [pc, #8]	; (8006f1c <USBD_HS_InterfaceStrDescriptor+0x34>)
}
 8006f12:	4618      	mov	r0, r3
 8006f14:	3708      	adds	r7, #8
 8006f16:	46bd      	mov	sp, r7
 8006f18:	bd80      	pop	{r7, pc}
 8006f1a:	bf00      	nop
 8006f1c:	20019474 	.word	0x20019474
 8006f20:	080079b0 	.word	0x080079b0

08006f24 <USBD_HS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006f24:	b480      	push	{r7}
 8006f26:	b083      	sub	sp, #12
 8006f28:	af00      	add	r7, sp, #0
 8006f2a:	4603      	mov	r3, r0
 8006f2c:	6039      	str	r1, [r7, #0]
 8006f2e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_HS_BOSDesc);
 8006f30:	683b      	ldr	r3, [r7, #0]
 8006f32:	220c      	movs	r2, #12
 8006f34:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_HS_BOSDesc;
 8006f36:	4b03      	ldr	r3, [pc, #12]	; (8006f44 <USBD_HS_USR_BOSDescriptor+0x20>)
}
 8006f38:	4618      	mov	r0, r3
 8006f3a:	370c      	adds	r7, #12
 8006f3c:	46bd      	mov	sp, r7
 8006f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f42:	4770      	bx	lr
 8006f44:	200000ec 	.word	0x200000ec

08006f48 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8006f48:	b580      	push	{r7, lr}
 8006f4a:	b084      	sub	sp, #16
 8006f4c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8006f4e:	4b0f      	ldr	r3, [pc, #60]	; (8006f8c <Get_SerialNum+0x44>)
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8006f54:	4b0e      	ldr	r3, [pc, #56]	; (8006f90 <Get_SerialNum+0x48>)
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8006f5a:	4b0e      	ldr	r3, [pc, #56]	; (8006f94 <Get_SerialNum+0x4c>)
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8006f60:	68fa      	ldr	r2, [r7, #12]
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	4413      	add	r3, r2
 8006f66:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d009      	beq.n	8006f82 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8006f6e:	2208      	movs	r2, #8
 8006f70:	4909      	ldr	r1, [pc, #36]	; (8006f98 <Get_SerialNum+0x50>)
 8006f72:	68f8      	ldr	r0, [r7, #12]
 8006f74:	f000 f814 	bl	8006fa0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8006f78:	2204      	movs	r2, #4
 8006f7a:	4908      	ldr	r1, [pc, #32]	; (8006f9c <Get_SerialNum+0x54>)
 8006f7c:	68b8      	ldr	r0, [r7, #8]
 8006f7e:	f000 f80f 	bl	8006fa0 <IntToUnicode>
  }
}
 8006f82:	bf00      	nop
 8006f84:	3710      	adds	r7, #16
 8006f86:	46bd      	mov	sp, r7
 8006f88:	bd80      	pop	{r7, pc}
 8006f8a:	bf00      	nop
 8006f8c:	1ff07a10 	.word	0x1ff07a10
 8006f90:	1ff07a14 	.word	0x1ff07a14
 8006f94:	1ff07a18 	.word	0x1ff07a18
 8006f98:	200000fe 	.word	0x200000fe
 8006f9c:	2000010e 	.word	0x2000010e

08006fa0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8006fa0:	b480      	push	{r7}
 8006fa2:	b087      	sub	sp, #28
 8006fa4:	af00      	add	r7, sp, #0
 8006fa6:	60f8      	str	r0, [r7, #12]
 8006fa8:	60b9      	str	r1, [r7, #8]
 8006faa:	4613      	mov	r3, r2
 8006fac:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8006fae:	2300      	movs	r3, #0
 8006fb0:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8006fb2:	2300      	movs	r3, #0
 8006fb4:	75fb      	strb	r3, [r7, #23]
 8006fb6:	e027      	b.n	8007008 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	0f1b      	lsrs	r3, r3, #28
 8006fbc:	2b09      	cmp	r3, #9
 8006fbe:	d80b      	bhi.n	8006fd8 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	0f1b      	lsrs	r3, r3, #28
 8006fc4:	b2da      	uxtb	r2, r3
 8006fc6:	7dfb      	ldrb	r3, [r7, #23]
 8006fc8:	005b      	lsls	r3, r3, #1
 8006fca:	4619      	mov	r1, r3
 8006fcc:	68bb      	ldr	r3, [r7, #8]
 8006fce:	440b      	add	r3, r1
 8006fd0:	3230      	adds	r2, #48	; 0x30
 8006fd2:	b2d2      	uxtb	r2, r2
 8006fd4:	701a      	strb	r2, [r3, #0]
 8006fd6:	e00a      	b.n	8006fee <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	0f1b      	lsrs	r3, r3, #28
 8006fdc:	b2da      	uxtb	r2, r3
 8006fde:	7dfb      	ldrb	r3, [r7, #23]
 8006fe0:	005b      	lsls	r3, r3, #1
 8006fe2:	4619      	mov	r1, r3
 8006fe4:	68bb      	ldr	r3, [r7, #8]
 8006fe6:	440b      	add	r3, r1
 8006fe8:	3237      	adds	r2, #55	; 0x37
 8006fea:	b2d2      	uxtb	r2, r2
 8006fec:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	011b      	lsls	r3, r3, #4
 8006ff2:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8006ff4:	7dfb      	ldrb	r3, [r7, #23]
 8006ff6:	005b      	lsls	r3, r3, #1
 8006ff8:	3301      	adds	r3, #1
 8006ffa:	68ba      	ldr	r2, [r7, #8]
 8006ffc:	4413      	add	r3, r2
 8006ffe:	2200      	movs	r2, #0
 8007000:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8007002:	7dfb      	ldrb	r3, [r7, #23]
 8007004:	3301      	adds	r3, #1
 8007006:	75fb      	strb	r3, [r7, #23]
 8007008:	7dfa      	ldrb	r2, [r7, #23]
 800700a:	79fb      	ldrb	r3, [r7, #7]
 800700c:	429a      	cmp	r2, r3
 800700e:	d3d3      	bcc.n	8006fb8 <IntToUnicode+0x18>
  }
}
 8007010:	bf00      	nop
 8007012:	bf00      	nop
 8007014:	371c      	adds	r7, #28
 8007016:	46bd      	mov	sp, r7
 8007018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800701c:	4770      	bx	lr
	...

08007020 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8007020:	b580      	push	{r7, lr}
 8007022:	b0aa      	sub	sp, #168	; 0xa8
 8007024:	af00      	add	r7, sp, #0
 8007026:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007028:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800702c:	2200      	movs	r2, #0
 800702e:	601a      	str	r2, [r3, #0]
 8007030:	605a      	str	r2, [r3, #4]
 8007032:	609a      	str	r2, [r3, #8]
 8007034:	60da      	str	r2, [r3, #12]
 8007036:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8007038:	f107 0314 	add.w	r3, r7, #20
 800703c:	2280      	movs	r2, #128	; 0x80
 800703e:	2100      	movs	r1, #0
 8007040:	4618      	mov	r0, r3
 8007042:	f000 fb8d 	bl	8007760 <memset>
  if(pcdHandle->Instance==USB_OTG_HS)
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	4a26      	ldr	r2, [pc, #152]	; (80070e4 <HAL_PCD_MspInit+0xc4>)
 800704c:	4293      	cmp	r3, r2
 800704e:	d145      	bne.n	80070dc <HAL_PCD_MspInit+0xbc>
  /* USER CODE BEGIN USB_OTG_HS_MspInit 0 */

  /* USER CODE END USB_OTG_HS_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8007050:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8007054:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8007056:	2300      	movs	r3, #0
 8007058:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800705c:	f107 0314 	add.w	r3, r7, #20
 8007060:	4618      	mov	r0, r3
 8007062:	f7fc fa1d 	bl	80034a0 <HAL_RCCEx_PeriphCLKConfig>
 8007066:	4603      	mov	r3, r0
 8007068:	2b00      	cmp	r3, #0
 800706a:	d001      	beq.n	8007070 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 800706c:	f7f9 ff80 	bl	8000f70 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007070:	4b1d      	ldr	r3, [pc, #116]	; (80070e8 <HAL_PCD_MspInit+0xc8>)
 8007072:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007074:	4a1c      	ldr	r2, [pc, #112]	; (80070e8 <HAL_PCD_MspInit+0xc8>)
 8007076:	f043 0302 	orr.w	r3, r3, #2
 800707a:	6313      	str	r3, [r2, #48]	; 0x30
 800707c:	4b1a      	ldr	r3, [pc, #104]	; (80070e8 <HAL_PCD_MspInit+0xc8>)
 800707e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007080:	f003 0302 	and.w	r3, r3, #2
 8007084:	613b      	str	r3, [r7, #16]
 8007086:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_HS GPIO Configuration
    PB14     ------> USB_OTG_HS_DM
    PB15     ------> USB_OTG_HS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8007088:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 800708c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007090:	2302      	movs	r3, #2
 8007092:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007096:	2300      	movs	r3, #0
 8007098:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800709c:	2303      	movs	r3, #3
 800709e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 80070a2:	230c      	movs	r3, #12
 80070a4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80070a8:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80070ac:	4619      	mov	r1, r3
 80070ae:	480f      	ldr	r0, [pc, #60]	; (80070ec <HAL_PCD_MspInit+0xcc>)
 80070b0:	f7fa f9d0 	bl	8001454 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_OTGPHYC_CLK_ENABLE();
 80070b4:	4b0c      	ldr	r3, [pc, #48]	; (80070e8 <HAL_PCD_MspInit+0xc8>)
 80070b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80070b8:	4a0b      	ldr	r2, [pc, #44]	; (80070e8 <HAL_PCD_MspInit+0xc8>)
 80070ba:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80070be:	6453      	str	r3, [r2, #68]	; 0x44
 80070c0:	4b09      	ldr	r3, [pc, #36]	; (80070e8 <HAL_PCD_MspInit+0xc8>)
 80070c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80070c4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80070c8:	60fb      	str	r3, [r7, #12]
 80070ca:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 0, 0);
 80070cc:	2200      	movs	r2, #0
 80070ce:	2100      	movs	r1, #0
 80070d0:	204d      	movs	r0, #77	; 0x4d
 80070d2:	f7fa f988 	bl	80013e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 80070d6:	204d      	movs	r0, #77	; 0x4d
 80070d8:	f7fa f9a1 	bl	800141e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }
}
 80070dc:	bf00      	nop
 80070de:	37a8      	adds	r7, #168	; 0xa8
 80070e0:	46bd      	mov	sp, r7
 80070e2:	bd80      	pop	{r7, pc}
 80070e4:	40040000 	.word	0x40040000
 80070e8:	40023800 	.word	0x40023800
 80070ec:	40020400 	.word	0x40020400

080070f0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80070f0:	b580      	push	{r7, lr}
 80070f2:	b082      	sub	sp, #8
 80070f4:	af00      	add	r7, sp, #0
 80070f6:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8007104:	4619      	mov	r1, r3
 8007106:	4610      	mov	r0, r2
 8007108:	f7fe fcd6 	bl	8005ab8 <USBD_LL_SetupStage>
}
 800710c:	bf00      	nop
 800710e:	3708      	adds	r7, #8
 8007110:	46bd      	mov	sp, r7
 8007112:	bd80      	pop	{r7, pc}

08007114 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007114:	b580      	push	{r7, lr}
 8007116:	b082      	sub	sp, #8
 8007118:	af00      	add	r7, sp, #0
 800711a:	6078      	str	r0, [r7, #4]
 800711c:	460b      	mov	r3, r1
 800711e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	f8d3 0400 	ldr.w	r0, [r3, #1024]	; 0x400
 8007126:	78fa      	ldrb	r2, [r7, #3]
 8007128:	6879      	ldr	r1, [r7, #4]
 800712a:	4613      	mov	r3, r2
 800712c:	00db      	lsls	r3, r3, #3
 800712e:	1a9b      	subs	r3, r3, r2
 8007130:	009b      	lsls	r3, r3, #2
 8007132:	440b      	add	r3, r1
 8007134:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8007138:	681a      	ldr	r2, [r3, #0]
 800713a:	78fb      	ldrb	r3, [r7, #3]
 800713c:	4619      	mov	r1, r3
 800713e:	f7fe fd10 	bl	8005b62 <USBD_LL_DataOutStage>
}
 8007142:	bf00      	nop
 8007144:	3708      	adds	r7, #8
 8007146:	46bd      	mov	sp, r7
 8007148:	bd80      	pop	{r7, pc}

0800714a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800714a:	b580      	push	{r7, lr}
 800714c:	b082      	sub	sp, #8
 800714e:	af00      	add	r7, sp, #0
 8007150:	6078      	str	r0, [r7, #4]
 8007152:	460b      	mov	r3, r1
 8007154:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	f8d3 0400 	ldr.w	r0, [r3, #1024]	; 0x400
 800715c:	78fa      	ldrb	r2, [r7, #3]
 800715e:	6879      	ldr	r1, [r7, #4]
 8007160:	4613      	mov	r3, r2
 8007162:	00db      	lsls	r3, r3, #3
 8007164:	1a9b      	subs	r3, r3, r2
 8007166:	009b      	lsls	r3, r3, #2
 8007168:	440b      	add	r3, r1
 800716a:	3348      	adds	r3, #72	; 0x48
 800716c:	681a      	ldr	r2, [r3, #0]
 800716e:	78fb      	ldrb	r3, [r7, #3]
 8007170:	4619      	mov	r1, r3
 8007172:	f7fe fd59 	bl	8005c28 <USBD_LL_DataInStage>
}
 8007176:	bf00      	nop
 8007178:	3708      	adds	r7, #8
 800717a:	46bd      	mov	sp, r7
 800717c:	bd80      	pop	{r7, pc}

0800717e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800717e:	b580      	push	{r7, lr}
 8007180:	b082      	sub	sp, #8
 8007182:	af00      	add	r7, sp, #0
 8007184:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800718c:	4618      	mov	r0, r3
 800718e:	f7fe fe5d 	bl	8005e4c <USBD_LL_SOF>
}
 8007192:	bf00      	nop
 8007194:	3708      	adds	r7, #8
 8007196:	46bd      	mov	sp, r7
 8007198:	bd80      	pop	{r7, pc}

0800719a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800719a:	b580      	push	{r7, lr}
 800719c:	b084      	sub	sp, #16
 800719e:	af00      	add	r7, sp, #0
 80071a0:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80071a2:	2301      	movs	r3, #1
 80071a4:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	68db      	ldr	r3, [r3, #12]
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d102      	bne.n	80071b4 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 80071ae:	2300      	movs	r3, #0
 80071b0:	73fb      	strb	r3, [r7, #15]
 80071b2:	e008      	b.n	80071c6 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	68db      	ldr	r3, [r3, #12]
 80071b8:	2b02      	cmp	r3, #2
 80071ba:	d102      	bne.n	80071c2 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 80071bc:	2301      	movs	r3, #1
 80071be:	73fb      	strb	r3, [r7, #15]
 80071c0:	e001      	b.n	80071c6 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 80071c2:	f7f9 fed5 	bl	8000f70 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 80071cc:	7bfa      	ldrb	r2, [r7, #15]
 80071ce:	4611      	mov	r1, r2
 80071d0:	4618      	mov	r0, r3
 80071d2:	f7fe fe00 	bl	8005dd6 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 80071dc:	4618      	mov	r0, r3
 80071de:	f7fe fdb9 	bl	8005d54 <USBD_LL_Reset>
}
 80071e2:	bf00      	nop
 80071e4:	3710      	adds	r7, #16
 80071e6:	46bd      	mov	sp, r7
 80071e8:	bd80      	pop	{r7, pc}
	...

080071ec <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80071ec:	b580      	push	{r7, lr}
 80071ee:	b082      	sub	sp, #8
 80071f0:	af00      	add	r7, sp, #0
 80071f2:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 80071fa:	4618      	mov	r0, r3
 80071fc:	f7fe fdfb 	bl	8005df6 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	687a      	ldr	r2, [r7, #4]
 800720c:	6812      	ldr	r2, [r2, #0]
 800720e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007212:	f043 0301 	orr.w	r3, r3, #1
 8007216:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	6a1b      	ldr	r3, [r3, #32]
 800721c:	2b00      	cmp	r3, #0
 800721e:	d005      	beq.n	800722c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007220:	4b04      	ldr	r3, [pc, #16]	; (8007234 <HAL_PCD_SuspendCallback+0x48>)
 8007222:	691b      	ldr	r3, [r3, #16]
 8007224:	4a03      	ldr	r2, [pc, #12]	; (8007234 <HAL_PCD_SuspendCallback+0x48>)
 8007226:	f043 0306 	orr.w	r3, r3, #6
 800722a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800722c:	bf00      	nop
 800722e:	3708      	adds	r7, #8
 8007230:	46bd      	mov	sp, r7
 8007232:	bd80      	pop	{r7, pc}
 8007234:	e000ed00 	.word	0xe000ed00

08007238 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007238:	b580      	push	{r7, lr}
 800723a:	b082      	sub	sp, #8
 800723c:	af00      	add	r7, sp, #0
 800723e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8007246:	4618      	mov	r0, r3
 8007248:	f7fe fdea 	bl	8005e20 <USBD_LL_Resume>
}
 800724c:	bf00      	nop
 800724e:	3708      	adds	r7, #8
 8007250:	46bd      	mov	sp, r7
 8007252:	bd80      	pop	{r7, pc}

08007254 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007254:	b580      	push	{r7, lr}
 8007256:	b082      	sub	sp, #8
 8007258:	af00      	add	r7, sp, #0
 800725a:	6078      	str	r0, [r7, #4]
 800725c:	460b      	mov	r3, r1
 800725e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8007266:	78fa      	ldrb	r2, [r7, #3]
 8007268:	4611      	mov	r1, r2
 800726a:	4618      	mov	r0, r3
 800726c:	f7fe fe15 	bl	8005e9a <USBD_LL_IsoOUTIncomplete>
}
 8007270:	bf00      	nop
 8007272:	3708      	adds	r7, #8
 8007274:	46bd      	mov	sp, r7
 8007276:	bd80      	pop	{r7, pc}

08007278 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007278:	b580      	push	{r7, lr}
 800727a:	b082      	sub	sp, #8
 800727c:	af00      	add	r7, sp, #0
 800727e:	6078      	str	r0, [r7, #4]
 8007280:	460b      	mov	r3, r1
 8007282:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800728a:	78fa      	ldrb	r2, [r7, #3]
 800728c:	4611      	mov	r1, r2
 800728e:	4618      	mov	r0, r3
 8007290:	f7fe fdf6 	bl	8005e80 <USBD_LL_IsoINIncomplete>
}
 8007294:	bf00      	nop
 8007296:	3708      	adds	r7, #8
 8007298:	46bd      	mov	sp, r7
 800729a:	bd80      	pop	{r7, pc}

0800729c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800729c:	b580      	push	{r7, lr}
 800729e:	b082      	sub	sp, #8
 80072a0:	af00      	add	r7, sp, #0
 80072a2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 80072aa:	4618      	mov	r0, r3
 80072ac:	f7fe fe02 	bl	8005eb4 <USBD_LL_DevConnected>
}
 80072b0:	bf00      	nop
 80072b2:	3708      	adds	r7, #8
 80072b4:	46bd      	mov	sp, r7
 80072b6:	bd80      	pop	{r7, pc}

080072b8 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80072b8:	b580      	push	{r7, lr}
 80072ba:	b082      	sub	sp, #8
 80072bc:	af00      	add	r7, sp, #0
 80072be:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 80072c6:	4618      	mov	r0, r3
 80072c8:	f7fe fdff 	bl	8005eca <USBD_LL_DevDisconnected>
}
 80072cc:	bf00      	nop
 80072ce:	3708      	adds	r7, #8
 80072d0:	46bd      	mov	sp, r7
 80072d2:	bd80      	pop	{r7, pc}

080072d4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80072d4:	b580      	push	{r7, lr}
 80072d6:	b082      	sub	sp, #8
 80072d8:	af00      	add	r7, sp, #0
 80072da:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_HS) {
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	781b      	ldrb	r3, [r3, #0]
 80072e0:	2b01      	cmp	r3, #1
 80072e2:	d13c      	bne.n	800735e <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_HS.pData = pdev;
 80072e4:	4a20      	ldr	r2, [pc, #128]	; (8007368 <USBD_LL_Init+0x94>)
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	f8c2 3400 	str.w	r3, [r2, #1024]	; 0x400
  pdev->pData = &hpcd_USB_OTG_HS;
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	4a1e      	ldr	r2, [pc, #120]	; (8007368 <USBD_LL_Init+0x94>)
 80072f0:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_HS.Instance = USB_OTG_HS;
 80072f4:	4b1c      	ldr	r3, [pc, #112]	; (8007368 <USBD_LL_Init+0x94>)
 80072f6:	4a1d      	ldr	r2, [pc, #116]	; (800736c <USBD_LL_Init+0x98>)
 80072f8:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_HS.Init.dev_endpoints = 9;
 80072fa:	4b1b      	ldr	r3, [pc, #108]	; (8007368 <USBD_LL_Init+0x94>)
 80072fc:	2209      	movs	r2, #9
 80072fe:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 8007300:	4b19      	ldr	r3, [pc, #100]	; (8007368 <USBD_LL_Init+0x94>)
 8007302:	2200      	movs	r2, #0
 8007304:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_HS.Init.phy_itface = USB_OTG_HS_EMBEDDED_PHY;
 8007306:	4b18      	ldr	r3, [pc, #96]	; (8007368 <USBD_LL_Init+0x94>)
 8007308:	2203      	movs	r2, #3
 800730a:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 800730c:	4b16      	ldr	r3, [pc, #88]	; (8007368 <USBD_LL_Init+0x94>)
 800730e:	2200      	movs	r2, #0
 8007310:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 8007312:	4b15      	ldr	r3, [pc, #84]	; (8007368 <USBD_LL_Init+0x94>)
 8007314:	2200      	movs	r2, #0
 8007316:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_HS.Init.lpm_enable = DISABLE;
 8007318:	4b13      	ldr	r3, [pc, #76]	; (8007368 <USBD_LL_Init+0x94>)
 800731a:	2200      	movs	r2, #0
 800731c:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 800731e:	4b12      	ldr	r3, [pc, #72]	; (8007368 <USBD_LL_Init+0x94>)
 8007320:	2200      	movs	r2, #0
 8007322:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_HS.Init.use_dedicated_ep1 = DISABLE;
 8007324:	4b10      	ldr	r3, [pc, #64]	; (8007368 <USBD_LL_Init+0x94>)
 8007326:	2200      	movs	r2, #0
 8007328:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 800732a:	4b0f      	ldr	r3, [pc, #60]	; (8007368 <USBD_LL_Init+0x94>)
 800732c:	2200      	movs	r2, #0
 800732e:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_PCD_Init(&hpcd_USB_OTG_HS) != HAL_OK)
 8007330:	480d      	ldr	r0, [pc, #52]	; (8007368 <USBD_LL_Init+0x94>)
 8007332:	f7fa fa44 	bl	80017be <HAL_PCD_Init>
 8007336:	4603      	mov	r3, r0
 8007338:	2b00      	cmp	r3, #0
 800733a:	d001      	beq.n	8007340 <USBD_LL_Init+0x6c>
  {
    Error_Handler( );
 800733c:	f7f9 fe18 	bl	8000f70 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_HS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_HS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_HS, 0x40); // original 0x200
 8007340:	2140      	movs	r1, #64	; 0x40
 8007342:	4809      	ldr	r0, [pc, #36]	; (8007368 <USBD_LL_Init+0x94>)
 8007344:	f7fb fbb5 	bl	8002ab2 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 0, 0x40); // original 0x80
 8007348:	2240      	movs	r2, #64	; 0x40
 800734a:	2100      	movs	r1, #0
 800734c:	4806      	ldr	r0, [pc, #24]	; (8007368 <USBD_LL_Init+0x94>)
 800734e:	f7fb fb69 	bl	8002a24 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 1, 0x380); // original x174
 8007352:	f44f 7260 	mov.w	r2, #896	; 0x380
 8007356:	2101      	movs	r1, #1
 8007358:	4803      	ldr	r0, [pc, #12]	; (8007368 <USBD_LL_Init+0x94>)
 800735a:	f7fb fb63 	bl	8002a24 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800735e:	2300      	movs	r3, #0
}
 8007360:	4618      	mov	r0, r3
 8007362:	3708      	adds	r7, #8
 8007364:	46bd      	mov	sp, r7
 8007366:	bd80      	pop	{r7, pc}
 8007368:	20019674 	.word	0x20019674
 800736c:	40040000 	.word	0x40040000

08007370 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8007370:	b580      	push	{r7, lr}
 8007372:	b084      	sub	sp, #16
 8007374:	af00      	add	r7, sp, #0
 8007376:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007378:	2300      	movs	r3, #0
 800737a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800737c:	2300      	movs	r3, #0
 800737e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007386:	4618      	mov	r0, r3
 8007388:	f7fa fb3d 	bl	8001a06 <HAL_PCD_Start>
 800738c:	4603      	mov	r3, r0
 800738e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007390:	7bfb      	ldrb	r3, [r7, #15]
 8007392:	4618      	mov	r0, r3
 8007394:	f000 f97e 	bl	8007694 <USBD_Get_USB_Status>
 8007398:	4603      	mov	r3, r0
 800739a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800739c:	7bbb      	ldrb	r3, [r7, #14]
}
 800739e:	4618      	mov	r0, r3
 80073a0:	3710      	adds	r7, #16
 80073a2:	46bd      	mov	sp, r7
 80073a4:	bd80      	pop	{r7, pc}

080073a6 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80073a6:	b580      	push	{r7, lr}
 80073a8:	b084      	sub	sp, #16
 80073aa:	af00      	add	r7, sp, #0
 80073ac:	6078      	str	r0, [r7, #4]
 80073ae:	4608      	mov	r0, r1
 80073b0:	4611      	mov	r1, r2
 80073b2:	461a      	mov	r2, r3
 80073b4:	4603      	mov	r3, r0
 80073b6:	70fb      	strb	r3, [r7, #3]
 80073b8:	460b      	mov	r3, r1
 80073ba:	70bb      	strb	r3, [r7, #2]
 80073bc:	4613      	mov	r3, r2
 80073be:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80073c0:	2300      	movs	r3, #0
 80073c2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80073c4:	2300      	movs	r3, #0
 80073c6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80073ce:	78bb      	ldrb	r3, [r7, #2]
 80073d0:	883a      	ldrh	r2, [r7, #0]
 80073d2:	78f9      	ldrb	r1, [r7, #3]
 80073d4:	f7fa ff2d 	bl	8002232 <HAL_PCD_EP_Open>
 80073d8:	4603      	mov	r3, r0
 80073da:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80073dc:	7bfb      	ldrb	r3, [r7, #15]
 80073de:	4618      	mov	r0, r3
 80073e0:	f000 f958 	bl	8007694 <USBD_Get_USB_Status>
 80073e4:	4603      	mov	r3, r0
 80073e6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80073e8:	7bbb      	ldrb	r3, [r7, #14]
}
 80073ea:	4618      	mov	r0, r3
 80073ec:	3710      	adds	r7, #16
 80073ee:	46bd      	mov	sp, r7
 80073f0:	bd80      	pop	{r7, pc}

080073f2 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80073f2:	b580      	push	{r7, lr}
 80073f4:	b084      	sub	sp, #16
 80073f6:	af00      	add	r7, sp, #0
 80073f8:	6078      	str	r0, [r7, #4]
 80073fa:	460b      	mov	r3, r1
 80073fc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80073fe:	2300      	movs	r3, #0
 8007400:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007402:	2300      	movs	r3, #0
 8007404:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800740c:	78fa      	ldrb	r2, [r7, #3]
 800740e:	4611      	mov	r1, r2
 8007410:	4618      	mov	r0, r3
 8007412:	f7fa ff76 	bl	8002302 <HAL_PCD_EP_Close>
 8007416:	4603      	mov	r3, r0
 8007418:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800741a:	7bfb      	ldrb	r3, [r7, #15]
 800741c:	4618      	mov	r0, r3
 800741e:	f000 f939 	bl	8007694 <USBD_Get_USB_Status>
 8007422:	4603      	mov	r3, r0
 8007424:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007426:	7bbb      	ldrb	r3, [r7, #14]
}
 8007428:	4618      	mov	r0, r3
 800742a:	3710      	adds	r7, #16
 800742c:	46bd      	mov	sp, r7
 800742e:	bd80      	pop	{r7, pc}

08007430 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007430:	b580      	push	{r7, lr}
 8007432:	b084      	sub	sp, #16
 8007434:	af00      	add	r7, sp, #0
 8007436:	6078      	str	r0, [r7, #4]
 8007438:	460b      	mov	r3, r1
 800743a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800743c:	2300      	movs	r3, #0
 800743e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007440:	2300      	movs	r3, #0
 8007442:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800744a:	78fa      	ldrb	r2, [r7, #3]
 800744c:	4611      	mov	r1, r2
 800744e:	4618      	mov	r0, r3
 8007450:	f7fb f84e 	bl	80024f0 <HAL_PCD_EP_SetStall>
 8007454:	4603      	mov	r3, r0
 8007456:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007458:	7bfb      	ldrb	r3, [r7, #15]
 800745a:	4618      	mov	r0, r3
 800745c:	f000 f91a 	bl	8007694 <USBD_Get_USB_Status>
 8007460:	4603      	mov	r3, r0
 8007462:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007464:	7bbb      	ldrb	r3, [r7, #14]
}
 8007466:	4618      	mov	r0, r3
 8007468:	3710      	adds	r7, #16
 800746a:	46bd      	mov	sp, r7
 800746c:	bd80      	pop	{r7, pc}

0800746e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800746e:	b580      	push	{r7, lr}
 8007470:	b084      	sub	sp, #16
 8007472:	af00      	add	r7, sp, #0
 8007474:	6078      	str	r0, [r7, #4]
 8007476:	460b      	mov	r3, r1
 8007478:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800747a:	2300      	movs	r3, #0
 800747c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800747e:	2300      	movs	r3, #0
 8007480:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007488:	78fa      	ldrb	r2, [r7, #3]
 800748a:	4611      	mov	r1, r2
 800748c:	4618      	mov	r0, r3
 800748e:	f7fb f893 	bl	80025b8 <HAL_PCD_EP_ClrStall>
 8007492:	4603      	mov	r3, r0
 8007494:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007496:	7bfb      	ldrb	r3, [r7, #15]
 8007498:	4618      	mov	r0, r3
 800749a:	f000 f8fb 	bl	8007694 <USBD_Get_USB_Status>
 800749e:	4603      	mov	r3, r0
 80074a0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80074a2:	7bbb      	ldrb	r3, [r7, #14]
}
 80074a4:	4618      	mov	r0, r3
 80074a6:	3710      	adds	r7, #16
 80074a8:	46bd      	mov	sp, r7
 80074aa:	bd80      	pop	{r7, pc}

080074ac <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80074ac:	b480      	push	{r7}
 80074ae:	b085      	sub	sp, #20
 80074b0:	af00      	add	r7, sp, #0
 80074b2:	6078      	str	r0, [r7, #4]
 80074b4:	460b      	mov	r3, r1
 80074b6:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80074be:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80074c0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	da0b      	bge.n	80074e0 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80074c8:	78fb      	ldrb	r3, [r7, #3]
 80074ca:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80074ce:	68f9      	ldr	r1, [r7, #12]
 80074d0:	4613      	mov	r3, r2
 80074d2:	00db      	lsls	r3, r3, #3
 80074d4:	1a9b      	subs	r3, r3, r2
 80074d6:	009b      	lsls	r3, r3, #2
 80074d8:	440b      	add	r3, r1
 80074da:	333e      	adds	r3, #62	; 0x3e
 80074dc:	781b      	ldrb	r3, [r3, #0]
 80074de:	e00b      	b.n	80074f8 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80074e0:	78fb      	ldrb	r3, [r7, #3]
 80074e2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80074e6:	68f9      	ldr	r1, [r7, #12]
 80074e8:	4613      	mov	r3, r2
 80074ea:	00db      	lsls	r3, r3, #3
 80074ec:	1a9b      	subs	r3, r3, r2
 80074ee:	009b      	lsls	r3, r3, #2
 80074f0:	440b      	add	r3, r1
 80074f2:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80074f6:	781b      	ldrb	r3, [r3, #0]
  }
}
 80074f8:	4618      	mov	r0, r3
 80074fa:	3714      	adds	r7, #20
 80074fc:	46bd      	mov	sp, r7
 80074fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007502:	4770      	bx	lr

08007504 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8007504:	b580      	push	{r7, lr}
 8007506:	b084      	sub	sp, #16
 8007508:	af00      	add	r7, sp, #0
 800750a:	6078      	str	r0, [r7, #4]
 800750c:	460b      	mov	r3, r1
 800750e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007510:	2300      	movs	r3, #0
 8007512:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007514:	2300      	movs	r3, #0
 8007516:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800751e:	78fa      	ldrb	r2, [r7, #3]
 8007520:	4611      	mov	r1, r2
 8007522:	4618      	mov	r0, r3
 8007524:	f7fa fe60 	bl	80021e8 <HAL_PCD_SetAddress>
 8007528:	4603      	mov	r3, r0
 800752a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800752c:	7bfb      	ldrb	r3, [r7, #15]
 800752e:	4618      	mov	r0, r3
 8007530:	f000 f8b0 	bl	8007694 <USBD_Get_USB_Status>
 8007534:	4603      	mov	r3, r0
 8007536:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007538:	7bbb      	ldrb	r3, [r7, #14]
}
 800753a:	4618      	mov	r0, r3
 800753c:	3710      	adds	r7, #16
 800753e:	46bd      	mov	sp, r7
 8007540:	bd80      	pop	{r7, pc}

08007542 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007542:	b580      	push	{r7, lr}
 8007544:	b086      	sub	sp, #24
 8007546:	af00      	add	r7, sp, #0
 8007548:	60f8      	str	r0, [r7, #12]
 800754a:	607a      	str	r2, [r7, #4]
 800754c:	603b      	str	r3, [r7, #0]
 800754e:	460b      	mov	r3, r1
 8007550:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007552:	2300      	movs	r3, #0
 8007554:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007556:	2300      	movs	r3, #0
 8007558:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8007560:	7af9      	ldrb	r1, [r7, #11]
 8007562:	683b      	ldr	r3, [r7, #0]
 8007564:	687a      	ldr	r2, [r7, #4]
 8007566:	f7fa ff79 	bl	800245c <HAL_PCD_EP_Transmit>
 800756a:	4603      	mov	r3, r0
 800756c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800756e:	7dfb      	ldrb	r3, [r7, #23]
 8007570:	4618      	mov	r0, r3
 8007572:	f000 f88f 	bl	8007694 <USBD_Get_USB_Status>
 8007576:	4603      	mov	r3, r0
 8007578:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800757a:	7dbb      	ldrb	r3, [r7, #22]
}
 800757c:	4618      	mov	r0, r3
 800757e:	3718      	adds	r7, #24
 8007580:	46bd      	mov	sp, r7
 8007582:	bd80      	pop	{r7, pc}

08007584 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007584:	b580      	push	{r7, lr}
 8007586:	b086      	sub	sp, #24
 8007588:	af00      	add	r7, sp, #0
 800758a:	60f8      	str	r0, [r7, #12]
 800758c:	607a      	str	r2, [r7, #4]
 800758e:	603b      	str	r3, [r7, #0]
 8007590:	460b      	mov	r3, r1
 8007592:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007594:	2300      	movs	r3, #0
 8007596:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007598:	2300      	movs	r3, #0
 800759a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80075a2:	7af9      	ldrb	r1, [r7, #11]
 80075a4:	683b      	ldr	r3, [r7, #0]
 80075a6:	687a      	ldr	r2, [r7, #4]
 80075a8:	f7fa fef5 	bl	8002396 <HAL_PCD_EP_Receive>
 80075ac:	4603      	mov	r3, r0
 80075ae:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80075b0:	7dfb      	ldrb	r3, [r7, #23]
 80075b2:	4618      	mov	r0, r3
 80075b4:	f000 f86e 	bl	8007694 <USBD_Get_USB_Status>
 80075b8:	4603      	mov	r3, r0
 80075ba:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80075bc:	7dbb      	ldrb	r3, [r7, #22]
}
 80075be:	4618      	mov	r0, r3
 80075c0:	3718      	adds	r7, #24
 80075c2:	46bd      	mov	sp, r7
 80075c4:	bd80      	pop	{r7, pc}

080075c6 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80075c6:	b580      	push	{r7, lr}
 80075c8:	b082      	sub	sp, #8
 80075ca:	af00      	add	r7, sp, #0
 80075cc:	6078      	str	r0, [r7, #4]
 80075ce:	460b      	mov	r3, r1
 80075d0:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80075d8:	78fa      	ldrb	r2, [r7, #3]
 80075da:	4611      	mov	r1, r2
 80075dc:	4618      	mov	r0, r3
 80075de:	f7fa ff25 	bl	800242c <HAL_PCD_EP_GetRxCount>
 80075e2:	4603      	mov	r3, r0
}
 80075e4:	4618      	mov	r0, r3
 80075e6:	3708      	adds	r7, #8
 80075e8:	46bd      	mov	sp, r7
 80075ea:	bd80      	pop	{r7, pc}

080075ec <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80075ec:	b580      	push	{r7, lr}
 80075ee:	b082      	sub	sp, #8
 80075f0:	af00      	add	r7, sp, #0
 80075f2:	6078      	str	r0, [r7, #4]
 80075f4:	460b      	mov	r3, r1
 80075f6:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 80075f8:	78fb      	ldrb	r3, [r7, #3]
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	d002      	beq.n	8007604 <HAL_PCDEx_LPM_Callback+0x18>
 80075fe:	2b01      	cmp	r3, #1
 8007600:	d01f      	beq.n	8007642 <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 8007602:	e03b      	b.n	800767c <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	6a1b      	ldr	r3, [r3, #32]
 8007608:	2b00      	cmp	r3, #0
 800760a:	d007      	beq.n	800761c <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800760c:	f000 f83c 	bl	8007688 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007610:	4b1c      	ldr	r3, [pc, #112]	; (8007684 <HAL_PCDEx_LPM_Callback+0x98>)
 8007612:	691b      	ldr	r3, [r3, #16]
 8007614:	4a1b      	ldr	r2, [pc, #108]	; (8007684 <HAL_PCDEx_LPM_Callback+0x98>)
 8007616:	f023 0306 	bic.w	r3, r3, #6
 800761a:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	687a      	ldr	r2, [r7, #4]
 8007628:	6812      	ldr	r2, [r2, #0]
 800762a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800762e:	f023 0301 	bic.w	r3, r3, #1
 8007632:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800763a:	4618      	mov	r0, r3
 800763c:	f7fe fbf0 	bl	8005e20 <USBD_LL_Resume>
    break;
 8007640:	e01c      	b.n	800767c <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	687a      	ldr	r2, [r7, #4]
 800764e:	6812      	ldr	r2, [r2, #0]
 8007650:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007654:	f043 0301 	orr.w	r3, r3, #1
 8007658:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8007660:	4618      	mov	r0, r3
 8007662:	f7fe fbc8 	bl	8005df6 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	6a1b      	ldr	r3, [r3, #32]
 800766a:	2b00      	cmp	r3, #0
 800766c:	d005      	beq.n	800767a <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800766e:	4b05      	ldr	r3, [pc, #20]	; (8007684 <HAL_PCDEx_LPM_Callback+0x98>)
 8007670:	691b      	ldr	r3, [r3, #16]
 8007672:	4a04      	ldr	r2, [pc, #16]	; (8007684 <HAL_PCDEx_LPM_Callback+0x98>)
 8007674:	f043 0306 	orr.w	r3, r3, #6
 8007678:	6113      	str	r3, [r2, #16]
    break;
 800767a:	bf00      	nop
}
 800767c:	bf00      	nop
 800767e:	3708      	adds	r7, #8
 8007680:	46bd      	mov	sp, r7
 8007682:	bd80      	pop	{r7, pc}
 8007684:	e000ed00 	.word	0xe000ed00

08007688 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 8007688:	b580      	push	{r7, lr}
 800768a:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800768c:	f7f8 fff8 	bl	8000680 <SystemClock_Config>
}
 8007690:	bf00      	nop
 8007692:	bd80      	pop	{r7, pc}

08007694 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8007694:	b480      	push	{r7}
 8007696:	b085      	sub	sp, #20
 8007698:	af00      	add	r7, sp, #0
 800769a:	4603      	mov	r3, r0
 800769c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800769e:	2300      	movs	r3, #0
 80076a0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80076a2:	79fb      	ldrb	r3, [r7, #7]
 80076a4:	2b03      	cmp	r3, #3
 80076a6:	d817      	bhi.n	80076d8 <USBD_Get_USB_Status+0x44>
 80076a8:	a201      	add	r2, pc, #4	; (adr r2, 80076b0 <USBD_Get_USB_Status+0x1c>)
 80076aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076ae:	bf00      	nop
 80076b0:	080076c1 	.word	0x080076c1
 80076b4:	080076c7 	.word	0x080076c7
 80076b8:	080076cd 	.word	0x080076cd
 80076bc:	080076d3 	.word	0x080076d3
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80076c0:	2300      	movs	r3, #0
 80076c2:	73fb      	strb	r3, [r7, #15]
    break;
 80076c4:	e00b      	b.n	80076de <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80076c6:	2303      	movs	r3, #3
 80076c8:	73fb      	strb	r3, [r7, #15]
    break;
 80076ca:	e008      	b.n	80076de <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80076cc:	2301      	movs	r3, #1
 80076ce:	73fb      	strb	r3, [r7, #15]
    break;
 80076d0:	e005      	b.n	80076de <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80076d2:	2303      	movs	r3, #3
 80076d4:	73fb      	strb	r3, [r7, #15]
    break;
 80076d6:	e002      	b.n	80076de <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80076d8:	2303      	movs	r3, #3
 80076da:	73fb      	strb	r3, [r7, #15]
    break;
 80076dc:	bf00      	nop
  }
  return usb_status;
 80076de:	7bfb      	ldrb	r3, [r7, #15]
}
 80076e0:	4618      	mov	r0, r3
 80076e2:	3714      	adds	r7, #20
 80076e4:	46bd      	mov	sp, r7
 80076e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ea:	4770      	bx	lr

080076ec <__errno>:
 80076ec:	4b01      	ldr	r3, [pc, #4]	; (80076f4 <__errno+0x8>)
 80076ee:	6818      	ldr	r0, [r3, #0]
 80076f0:	4770      	bx	lr
 80076f2:	bf00      	nop
 80076f4:	20000118 	.word	0x20000118

080076f8 <__libc_init_array>:
 80076f8:	b570      	push	{r4, r5, r6, lr}
 80076fa:	4d0d      	ldr	r5, [pc, #52]	; (8007730 <__libc_init_array+0x38>)
 80076fc:	4c0d      	ldr	r4, [pc, #52]	; (8007734 <__libc_init_array+0x3c>)
 80076fe:	1b64      	subs	r4, r4, r5
 8007700:	10a4      	asrs	r4, r4, #2
 8007702:	2600      	movs	r6, #0
 8007704:	42a6      	cmp	r6, r4
 8007706:	d109      	bne.n	800771c <__libc_init_array+0x24>
 8007708:	4d0b      	ldr	r5, [pc, #44]	; (8007738 <__libc_init_array+0x40>)
 800770a:	4c0c      	ldr	r4, [pc, #48]	; (800773c <__libc_init_array+0x44>)
 800770c:	f000 f92e 	bl	800796c <_init>
 8007710:	1b64      	subs	r4, r4, r5
 8007712:	10a4      	asrs	r4, r4, #2
 8007714:	2600      	movs	r6, #0
 8007716:	42a6      	cmp	r6, r4
 8007718:	d105      	bne.n	8007726 <__libc_init_array+0x2e>
 800771a:	bd70      	pop	{r4, r5, r6, pc}
 800771c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007720:	4798      	blx	r3
 8007722:	3601      	adds	r6, #1
 8007724:	e7ee      	b.n	8007704 <__libc_init_array+0xc>
 8007726:	f855 3b04 	ldr.w	r3, [r5], #4
 800772a:	4798      	blx	r3
 800772c:	3601      	adds	r6, #1
 800772e:	e7f2      	b.n	8007716 <__libc_init_array+0x1e>
 8007730:	080079d8 	.word	0x080079d8
 8007734:	080079d8 	.word	0x080079d8
 8007738:	080079d8 	.word	0x080079d8
 800773c:	080079dc 	.word	0x080079dc

08007740 <malloc>:
 8007740:	4b02      	ldr	r3, [pc, #8]	; (800774c <malloc+0xc>)
 8007742:	4601      	mov	r1, r0
 8007744:	6818      	ldr	r0, [r3, #0]
 8007746:	f000 b87f 	b.w	8007848 <_malloc_r>
 800774a:	bf00      	nop
 800774c:	20000118 	.word	0x20000118

08007750 <free>:
 8007750:	4b02      	ldr	r3, [pc, #8]	; (800775c <free+0xc>)
 8007752:	4601      	mov	r1, r0
 8007754:	6818      	ldr	r0, [r3, #0]
 8007756:	f000 b80b 	b.w	8007770 <_free_r>
 800775a:	bf00      	nop
 800775c:	20000118 	.word	0x20000118

08007760 <memset>:
 8007760:	4402      	add	r2, r0
 8007762:	4603      	mov	r3, r0
 8007764:	4293      	cmp	r3, r2
 8007766:	d100      	bne.n	800776a <memset+0xa>
 8007768:	4770      	bx	lr
 800776a:	f803 1b01 	strb.w	r1, [r3], #1
 800776e:	e7f9      	b.n	8007764 <memset+0x4>

08007770 <_free_r>:
 8007770:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007772:	2900      	cmp	r1, #0
 8007774:	d044      	beq.n	8007800 <_free_r+0x90>
 8007776:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800777a:	9001      	str	r0, [sp, #4]
 800777c:	2b00      	cmp	r3, #0
 800777e:	f1a1 0404 	sub.w	r4, r1, #4
 8007782:	bfb8      	it	lt
 8007784:	18e4      	addlt	r4, r4, r3
 8007786:	f000 f8e3 	bl	8007950 <__malloc_lock>
 800778a:	4a1e      	ldr	r2, [pc, #120]	; (8007804 <_free_r+0x94>)
 800778c:	9801      	ldr	r0, [sp, #4]
 800778e:	6813      	ldr	r3, [r2, #0]
 8007790:	b933      	cbnz	r3, 80077a0 <_free_r+0x30>
 8007792:	6063      	str	r3, [r4, #4]
 8007794:	6014      	str	r4, [r2, #0]
 8007796:	b003      	add	sp, #12
 8007798:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800779c:	f000 b8de 	b.w	800795c <__malloc_unlock>
 80077a0:	42a3      	cmp	r3, r4
 80077a2:	d908      	bls.n	80077b6 <_free_r+0x46>
 80077a4:	6825      	ldr	r5, [r4, #0]
 80077a6:	1961      	adds	r1, r4, r5
 80077a8:	428b      	cmp	r3, r1
 80077aa:	bf01      	itttt	eq
 80077ac:	6819      	ldreq	r1, [r3, #0]
 80077ae:	685b      	ldreq	r3, [r3, #4]
 80077b0:	1949      	addeq	r1, r1, r5
 80077b2:	6021      	streq	r1, [r4, #0]
 80077b4:	e7ed      	b.n	8007792 <_free_r+0x22>
 80077b6:	461a      	mov	r2, r3
 80077b8:	685b      	ldr	r3, [r3, #4]
 80077ba:	b10b      	cbz	r3, 80077c0 <_free_r+0x50>
 80077bc:	42a3      	cmp	r3, r4
 80077be:	d9fa      	bls.n	80077b6 <_free_r+0x46>
 80077c0:	6811      	ldr	r1, [r2, #0]
 80077c2:	1855      	adds	r5, r2, r1
 80077c4:	42a5      	cmp	r5, r4
 80077c6:	d10b      	bne.n	80077e0 <_free_r+0x70>
 80077c8:	6824      	ldr	r4, [r4, #0]
 80077ca:	4421      	add	r1, r4
 80077cc:	1854      	adds	r4, r2, r1
 80077ce:	42a3      	cmp	r3, r4
 80077d0:	6011      	str	r1, [r2, #0]
 80077d2:	d1e0      	bne.n	8007796 <_free_r+0x26>
 80077d4:	681c      	ldr	r4, [r3, #0]
 80077d6:	685b      	ldr	r3, [r3, #4]
 80077d8:	6053      	str	r3, [r2, #4]
 80077da:	4421      	add	r1, r4
 80077dc:	6011      	str	r1, [r2, #0]
 80077de:	e7da      	b.n	8007796 <_free_r+0x26>
 80077e0:	d902      	bls.n	80077e8 <_free_r+0x78>
 80077e2:	230c      	movs	r3, #12
 80077e4:	6003      	str	r3, [r0, #0]
 80077e6:	e7d6      	b.n	8007796 <_free_r+0x26>
 80077e8:	6825      	ldr	r5, [r4, #0]
 80077ea:	1961      	adds	r1, r4, r5
 80077ec:	428b      	cmp	r3, r1
 80077ee:	bf04      	itt	eq
 80077f0:	6819      	ldreq	r1, [r3, #0]
 80077f2:	685b      	ldreq	r3, [r3, #4]
 80077f4:	6063      	str	r3, [r4, #4]
 80077f6:	bf04      	itt	eq
 80077f8:	1949      	addeq	r1, r1, r5
 80077fa:	6021      	streq	r1, [r4, #0]
 80077fc:	6054      	str	r4, [r2, #4]
 80077fe:	e7ca      	b.n	8007796 <_free_r+0x26>
 8007800:	b003      	add	sp, #12
 8007802:	bd30      	pop	{r4, r5, pc}
 8007804:	20019a78 	.word	0x20019a78

08007808 <sbrk_aligned>:
 8007808:	b570      	push	{r4, r5, r6, lr}
 800780a:	4e0e      	ldr	r6, [pc, #56]	; (8007844 <sbrk_aligned+0x3c>)
 800780c:	460c      	mov	r4, r1
 800780e:	6831      	ldr	r1, [r6, #0]
 8007810:	4605      	mov	r5, r0
 8007812:	b911      	cbnz	r1, 800781a <sbrk_aligned+0x12>
 8007814:	f000 f88c 	bl	8007930 <_sbrk_r>
 8007818:	6030      	str	r0, [r6, #0]
 800781a:	4621      	mov	r1, r4
 800781c:	4628      	mov	r0, r5
 800781e:	f000 f887 	bl	8007930 <_sbrk_r>
 8007822:	1c43      	adds	r3, r0, #1
 8007824:	d00a      	beq.n	800783c <sbrk_aligned+0x34>
 8007826:	1cc4      	adds	r4, r0, #3
 8007828:	f024 0403 	bic.w	r4, r4, #3
 800782c:	42a0      	cmp	r0, r4
 800782e:	d007      	beq.n	8007840 <sbrk_aligned+0x38>
 8007830:	1a21      	subs	r1, r4, r0
 8007832:	4628      	mov	r0, r5
 8007834:	f000 f87c 	bl	8007930 <_sbrk_r>
 8007838:	3001      	adds	r0, #1
 800783a:	d101      	bne.n	8007840 <sbrk_aligned+0x38>
 800783c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8007840:	4620      	mov	r0, r4
 8007842:	bd70      	pop	{r4, r5, r6, pc}
 8007844:	20019a7c 	.word	0x20019a7c

08007848 <_malloc_r>:
 8007848:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800784c:	1ccd      	adds	r5, r1, #3
 800784e:	f025 0503 	bic.w	r5, r5, #3
 8007852:	3508      	adds	r5, #8
 8007854:	2d0c      	cmp	r5, #12
 8007856:	bf38      	it	cc
 8007858:	250c      	movcc	r5, #12
 800785a:	2d00      	cmp	r5, #0
 800785c:	4607      	mov	r7, r0
 800785e:	db01      	blt.n	8007864 <_malloc_r+0x1c>
 8007860:	42a9      	cmp	r1, r5
 8007862:	d905      	bls.n	8007870 <_malloc_r+0x28>
 8007864:	230c      	movs	r3, #12
 8007866:	603b      	str	r3, [r7, #0]
 8007868:	2600      	movs	r6, #0
 800786a:	4630      	mov	r0, r6
 800786c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007870:	4e2e      	ldr	r6, [pc, #184]	; (800792c <_malloc_r+0xe4>)
 8007872:	f000 f86d 	bl	8007950 <__malloc_lock>
 8007876:	6833      	ldr	r3, [r6, #0]
 8007878:	461c      	mov	r4, r3
 800787a:	bb34      	cbnz	r4, 80078ca <_malloc_r+0x82>
 800787c:	4629      	mov	r1, r5
 800787e:	4638      	mov	r0, r7
 8007880:	f7ff ffc2 	bl	8007808 <sbrk_aligned>
 8007884:	1c43      	adds	r3, r0, #1
 8007886:	4604      	mov	r4, r0
 8007888:	d14d      	bne.n	8007926 <_malloc_r+0xde>
 800788a:	6834      	ldr	r4, [r6, #0]
 800788c:	4626      	mov	r6, r4
 800788e:	2e00      	cmp	r6, #0
 8007890:	d140      	bne.n	8007914 <_malloc_r+0xcc>
 8007892:	6823      	ldr	r3, [r4, #0]
 8007894:	4631      	mov	r1, r6
 8007896:	4638      	mov	r0, r7
 8007898:	eb04 0803 	add.w	r8, r4, r3
 800789c:	f000 f848 	bl	8007930 <_sbrk_r>
 80078a0:	4580      	cmp	r8, r0
 80078a2:	d13a      	bne.n	800791a <_malloc_r+0xd2>
 80078a4:	6821      	ldr	r1, [r4, #0]
 80078a6:	3503      	adds	r5, #3
 80078a8:	1a6d      	subs	r5, r5, r1
 80078aa:	f025 0503 	bic.w	r5, r5, #3
 80078ae:	3508      	adds	r5, #8
 80078b0:	2d0c      	cmp	r5, #12
 80078b2:	bf38      	it	cc
 80078b4:	250c      	movcc	r5, #12
 80078b6:	4629      	mov	r1, r5
 80078b8:	4638      	mov	r0, r7
 80078ba:	f7ff ffa5 	bl	8007808 <sbrk_aligned>
 80078be:	3001      	adds	r0, #1
 80078c0:	d02b      	beq.n	800791a <_malloc_r+0xd2>
 80078c2:	6823      	ldr	r3, [r4, #0]
 80078c4:	442b      	add	r3, r5
 80078c6:	6023      	str	r3, [r4, #0]
 80078c8:	e00e      	b.n	80078e8 <_malloc_r+0xa0>
 80078ca:	6822      	ldr	r2, [r4, #0]
 80078cc:	1b52      	subs	r2, r2, r5
 80078ce:	d41e      	bmi.n	800790e <_malloc_r+0xc6>
 80078d0:	2a0b      	cmp	r2, #11
 80078d2:	d916      	bls.n	8007902 <_malloc_r+0xba>
 80078d4:	1961      	adds	r1, r4, r5
 80078d6:	42a3      	cmp	r3, r4
 80078d8:	6025      	str	r5, [r4, #0]
 80078da:	bf18      	it	ne
 80078dc:	6059      	strne	r1, [r3, #4]
 80078de:	6863      	ldr	r3, [r4, #4]
 80078e0:	bf08      	it	eq
 80078e2:	6031      	streq	r1, [r6, #0]
 80078e4:	5162      	str	r2, [r4, r5]
 80078e6:	604b      	str	r3, [r1, #4]
 80078e8:	4638      	mov	r0, r7
 80078ea:	f104 060b 	add.w	r6, r4, #11
 80078ee:	f000 f835 	bl	800795c <__malloc_unlock>
 80078f2:	f026 0607 	bic.w	r6, r6, #7
 80078f6:	1d23      	adds	r3, r4, #4
 80078f8:	1af2      	subs	r2, r6, r3
 80078fa:	d0b6      	beq.n	800786a <_malloc_r+0x22>
 80078fc:	1b9b      	subs	r3, r3, r6
 80078fe:	50a3      	str	r3, [r4, r2]
 8007900:	e7b3      	b.n	800786a <_malloc_r+0x22>
 8007902:	6862      	ldr	r2, [r4, #4]
 8007904:	42a3      	cmp	r3, r4
 8007906:	bf0c      	ite	eq
 8007908:	6032      	streq	r2, [r6, #0]
 800790a:	605a      	strne	r2, [r3, #4]
 800790c:	e7ec      	b.n	80078e8 <_malloc_r+0xa0>
 800790e:	4623      	mov	r3, r4
 8007910:	6864      	ldr	r4, [r4, #4]
 8007912:	e7b2      	b.n	800787a <_malloc_r+0x32>
 8007914:	4634      	mov	r4, r6
 8007916:	6876      	ldr	r6, [r6, #4]
 8007918:	e7b9      	b.n	800788e <_malloc_r+0x46>
 800791a:	230c      	movs	r3, #12
 800791c:	603b      	str	r3, [r7, #0]
 800791e:	4638      	mov	r0, r7
 8007920:	f000 f81c 	bl	800795c <__malloc_unlock>
 8007924:	e7a1      	b.n	800786a <_malloc_r+0x22>
 8007926:	6025      	str	r5, [r4, #0]
 8007928:	e7de      	b.n	80078e8 <_malloc_r+0xa0>
 800792a:	bf00      	nop
 800792c:	20019a78 	.word	0x20019a78

08007930 <_sbrk_r>:
 8007930:	b538      	push	{r3, r4, r5, lr}
 8007932:	4d06      	ldr	r5, [pc, #24]	; (800794c <_sbrk_r+0x1c>)
 8007934:	2300      	movs	r3, #0
 8007936:	4604      	mov	r4, r0
 8007938:	4608      	mov	r0, r1
 800793a:	602b      	str	r3, [r5, #0]
 800793c:	f7f9 fb76 	bl	800102c <_sbrk>
 8007940:	1c43      	adds	r3, r0, #1
 8007942:	d102      	bne.n	800794a <_sbrk_r+0x1a>
 8007944:	682b      	ldr	r3, [r5, #0]
 8007946:	b103      	cbz	r3, 800794a <_sbrk_r+0x1a>
 8007948:	6023      	str	r3, [r4, #0]
 800794a:	bd38      	pop	{r3, r4, r5, pc}
 800794c:	20019a80 	.word	0x20019a80

08007950 <__malloc_lock>:
 8007950:	4801      	ldr	r0, [pc, #4]	; (8007958 <__malloc_lock+0x8>)
 8007952:	f000 b809 	b.w	8007968 <__retarget_lock_acquire_recursive>
 8007956:	bf00      	nop
 8007958:	20019a84 	.word	0x20019a84

0800795c <__malloc_unlock>:
 800795c:	4801      	ldr	r0, [pc, #4]	; (8007964 <__malloc_unlock+0x8>)
 800795e:	f000 b804 	b.w	800796a <__retarget_lock_release_recursive>
 8007962:	bf00      	nop
 8007964:	20019a84 	.word	0x20019a84

08007968 <__retarget_lock_acquire_recursive>:
 8007968:	4770      	bx	lr

0800796a <__retarget_lock_release_recursive>:
 800796a:	4770      	bx	lr

0800796c <_init>:
 800796c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800796e:	bf00      	nop
 8007970:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007972:	bc08      	pop	{r3}
 8007974:	469e      	mov	lr, r3
 8007976:	4770      	bx	lr

08007978 <_fini>:
 8007978:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800797a:	bf00      	nop
 800797c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800797e:	bc08      	pop	{r3}
 8007980:	469e      	mov	lr, r3
 8007982:	4770      	bx	lr
